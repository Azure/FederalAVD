{
  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.35.1.17967",
      "templateHash": "626543145269809816"
    }
  },
  "parameters": {
    "location": {
      "type": "string",
      "defaultValue": "[deployment().location]",
      "metadata": {
        "description": "The region to deploy the network resources to."
      }
    },
    "deployVnet": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Determines whether or not to deploy the virtual network."
      }
    },
    "deployVnetResourceGroup": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Determines whether or not to deploy the resource group for the virtual network."
      }
    },
    "vnetResourceGroupName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Conditional. The name of the resource group to deploy the virtual network to. Required when \"deployVnet\" is \"true\"."
      }
    },
    "vnetName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Conditional. The name of the virtual network. Required when \"deployVnet\" is \"true\"."
      }
    },
    "vnetAddressPrefixes": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Conditional. The address prefixes for the virtual network. Required when \"deployVnet\" is \"true\"."
      }
    },
    "hostsSubnet": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "Conditional. The hosts subnet to create within the virtual network. Required when \"deployVnet\" is \"true\"."
      }
    },
    "privateEndpointsSubnet": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "Optional. The private endpoint subnet to create within the virtual network."
      }
    },
    "functionAppSubnet": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "Optional. The function app subnet to create within the virtual network."
      }
    },
    "defaultRouting": {
      "type": "string",
      "defaultValue": "default",
      "allowedValues": [
        "default",
        "nva",
        "nat"
      ],
      "metadata": {
        "description": "Optional. The type of default routing used on the subnets."
      }
    },
    "nameConvResTypeAtEnd": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Determines if the resources should be named with the resource type at the end."
      }
    },
    "nvaIPAddress": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Conditional. The IP Address the network virtual appliance. Required when \"defaultRouting\" is \"nva\"."
      }
    },
    "customDNSServers": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Optional. The custom DNS servers to use for the virtual network."
      }
    },
    "deployDDoSNetworkProtection": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Determines if DDoS network protection should be deployed."
      }
    },
    "hubVnetResourceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. The resource id of the hub virtual network to which the virtual network should be peered."
      }
    },
    "virtualNetworkGatewayOnHub": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Determines if a virtual network gateway is present on the hub virtual network."
      }
    },
    "privateDNSZonesSubscriptionId": {
      "type": "string",
      "defaultValue": "[subscription().subscriptionId]",
      "metadata": {
        "description": "Optional. The subscription id of the subscription to where the private DNS zones should be deployed."
      }
    },
    "deployPrivateDNSZonesResourceGroup": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Determines if the private DNS zones resource group should be deployed."
      }
    },
    "privateDNSZonesResourceGroupName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Conditional. The name of the private DNS zones resource group. Required when any of the private DNS Zones are deployed based on the \"createZone\" parameters."
      }
    },
    "createAzureBackupZone": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Determines if the Azure Backup private DNS zone should be created."
      }
    },
    "azureBackupZoneId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. The Resource Id of the existing Azure Backup Private DNS Zone."
      }
    },
    "createAzureBlobZone": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Determines if the Azure Blob Storage private DNS zone should be created."
      }
    },
    "azureBlobZoneId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. The Resource Id of the existing Azure Blob Storage Private DNS Zone."
      }
    },
    "createAzureFilesZone": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Determines if the Azure Files Storage private DNS zone should be created."
      }
    },
    "azureFilesZoneId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. The Resource Id of the existing Azure Files Storage Private DNS Zone."
      }
    },
    "createAzureQueueZone": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Determines if the Azure Queue Storage private DNS zone should be created."
      }
    },
    "azureQueueZoneId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. The Resource Id of the existing Azure Queue Storage Private DNS Zone."
      }
    },
    "createAzureTableZone": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Determines if the Azure Table Storage private DNS zone should be created."
      }
    },
    "azureTableZoneId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. The Resource Id of the existing Azure Table Storage Private DNS Zone."
      }
    },
    "createAzureKeyVaultZone": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Determines if the Azure Key Vault private DNS zone should be created."
      }
    },
    "azureKeyVaultZoneId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. The Resource Id of the existing Azure Key Vault Private DNS Zone."
      }
    },
    "createAvdFeedZone": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Determines if the AVD feed private DNS zone should be created."
      }
    },
    "avdFeedZoneId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. The Resource Id of the existing AVD Feed Private DNS Zone."
      }
    },
    "createAvdGlobalFeedZone": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Determines if the AVD global feed private DNS zone should be created."
      }
    },
    "avdGlobalFeedZoneId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. The Resource Id of the existing AVD Global Feed Private DNS Zone."
      }
    },
    "createAzureWebAppZone": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Determines if the Azure Web App private DNS zone should be created."
      }
    },
    "azureWebAppZoneId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. The Resource Id of the existing Azure Web App Private DNS Zone."
      }
    },
    "linkPrivateDnsZonesToNewVnet": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Determines if the private DNS zones should be linked to a new virtual network."
      }
    },
    "privateDnsZonesVnetId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Conditional. The resource id of the virtual network to link the private DNS zones to. Required when \"linkPrivateDnsZonesToNewVnet\" is \"false\" and any of the private DNS Zones are deployed or resource Ids provided."
      }
    },
    "tags": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "Optional. The tags by resource type to apply to the resources."
      }
    },
    "timeStamp": {
      "type": "string",
      "defaultValue": "[utcNow('yyyyMMddhhmmss')]",
      "metadata": {
        "description": "DO NOT MODIFY THIS VALUE! The timeStamp is needed to differentiate deployments for certain Azure resources and must be set using a parameter."
      }
    }
  },
  "variables": {
    "$fxv#0": {
      "AzureCloud": {
        "australiacentral": {
          "abbreviation": "auc",
          "recoveryServicesGeo": "acl"
        },
        "australiacentral2": {
          "abbreviation": "auc2",
          "recoveryServicesGeo": "acl2"
        },
        "australiaeast": {
          "abbreviation": "aue",
          "recoveryServicesGeo": "ae"
        },
        "australiasoutheast": {
          "abbreviation": "ause",
          "recoveryServicesGeo": "ase"
        },
        "brazilsouth": {
          "abbreviation": "brs",
          "recoveryServicesGeo": "brs"
        },
        "brazilsoutheast": {
          "abbreviation": "brse",
          "recoveryServicesGeo": "bse"
        },
        "canadacentral": {
          "abbreviation": "cac",
          "recoveryServicesGeo": "cnc"
        },
        "canadaeast": {
          "abbreviation": "cae",
          "recoveryServicesGeo": "cne"
        },
        "centralindia": {
          "abbreviation": "inc",
          "recoveryServicesGeo": "inc"
        },
        "centralus": {
          "abbreviation": "usc",
          "recoveryServicesGeo": "cus"
        },
        "eastasia": {
          "abbreviation": "ase",
          "recoveryServicesGeo": "ea"
        },
        "eastus": {
          "abbreviation": "use",
          "recoveryServicesGeo": "eus"
        },
        "eastus2": {
          "abbreviation": "use2",
          "recoveryServicesGeo": "eus2"
        },
        "francecentral": {
          "abbreviation": "frc",
          "recoveryServicesGeo": "frc"
        },
        "francesouth": {
          "abbreviation": "frs",
          "recoveryServicesGeo": "frs"
        },
        "germanynorth": {
          "abbreviation": "den",
          "recoveryServicesGeo": "gn"
        },
        "germanywestcentral": {
          "abbreviation": "dewc",
          "recoveryServicesGeo": "gwc"
        },
        "israelcentral": {
          "abbreviation": "ilc",
          "recoveryServicesGeo": "ilc"
        },
        "italynorth": {
          "abbreviation": "itn",
          "recoveryServicesGeo": "itn"
        },
        "japaneast": {
          "abbreviation": "jpe",
          "recoveryServicesGeo": "jpe"
        },
        "japanwest": {
          "abbreviation": "jpw",
          "recoveryServicesGeo": "jpw"
        },
        "jioindiacentral": {
          "abbreviation": "injc",
          "recoveryServicesGeo": "jic"
        },
        "jioindiawest": {
          "abbreviation": "injw",
          "recoveryServicesGeo": "jiw"
        },
        "koreacentral": {
          "abbreviation": "krc",
          "recoveryServicesGeo": "krc"
        },
        "koreasouth": {
          "abbreviation": "krs",
          "recoveryServicesGeo": "krs"
        },
        "northcentralus": {
          "abbreviation": "usnc",
          "recoveryServicesGeo": "ncus"
        },
        "northeurope": {
          "abbreviation": "eun",
          "recoveryServicesGeo": "ne"
        },
        "norwayeast": {
          "abbreviation": "noe",
          "recoveryServicesGeo": "nwe"
        },
        "norwaywest": {
          "abbreviation": "now",
          "recoveryServicesGeo": "nww"
        },
        "polandcentral": {
          "abbreviation": "plc",
          "recoveryServicesGeo": "plc"
        },
        "qatarcentral": {
          "abbreviation": "qac",
          "recoveryServicesGeo": "qac"
        },
        "southafricanorth": {
          "abbreviation": "zan",
          "recoveryServicesGeo": "san"
        },
        "southafricawest": {
          "abbreviation": "zaw",
          "recoveryServicesGeo": "saw"
        },
        "southcentralus": {
          "abbreviation": "ussc",
          "recoveryServicesGeo": "scus"
        },
        "southeastasia": {
          "abbreviation": "asse",
          "recoveryServicesGeo": "sea"
        },
        "southindia": {
          "abbreviation": "ins",
          "recoveryServicesGeo": "ins"
        },
        "swedencentral": {
          "abbreviation": "sec",
          "recoveryServicesGeo": "sdc"
        },
        "switzerlandnorth": {
          "abbreviation": "chn",
          "recoveryServicesGeo": "szn"
        },
        "switzerlandwest": {
          "abbreviation": "chw",
          "recoveryServicesGeo": "szw"
        },
        "uaecentral": {
          "abbreviation": "aec",
          "recoveryServicesGeo": "uac"
        },
        "uaenorth": {
          "abbreviation": "aen",
          "recoveryServicesGeo": "uan"
        },
        "uksouth": {
          "abbreviation": "uks",
          "recoveryServicesGeo": "uks"
        },
        "ukwest": {
          "abbreviation": "ukw",
          "recoveryServicesGeo": "ukw"
        },
        "westcentralus": {
          "abbreviation": "uswc",
          "recoveryServicesGeo": "wcus"
        },
        "westeurope": {
          "abbreviation": "euw",
          "recoveryServicesGeo": "we"
        },
        "westindia": {
          "abbreviation": "inw",
          "recoveryServicesGeo": "inw"
        },
        "westus": {
          "abbreviation": "usw",
          "recoveryServicesGeo": "wus"
        },
        "westus2": {
          "abbreviation": "usw2",
          "recoveryServicesGeo": "wus2"
        },
        "westus3": {
          "abbreviation": "usw3",
          "recoveryServicesGeo": "wus3"
        }
      },
      "AzureUSGovernment": {
        "usdodcentral": {
          "abbreviation": "dodc",
          "recoveryServicesGeo": "udc"
        },
        "usdodeast": {
          "abbreviation": "dode",
          "recoveryServicesGeo": "ude"
        },
        "usgovarizona": {
          "abbreviation": "az",
          "recoveryServicesGeo": "uga"
        },
        "usgovtexas": {
          "abbreviation": "tx",
          "recoveryServicesGeo": "ugt"
        },
        "usgovvirginia": {
          "abbreviation": "va",
          "recoveryServicesGeo": "ugv"
        }
      }
    },
    "$fxv#1": {
      "applicationInsights": "appi",
      "appServicePlans": "asp",
      "availabilitySets": "as",
      "computeGalleries": "gal",
      "dataCollectionEndpoints": "dce",
      "dataCollectionRules": "dcr",
      "desktopApplicationGroups": "vddag",
      "diskAccesses": "da",
      "remoteApplicationGroups": "vdrag",
      "diskEncryptionSets": "des",
      "functionApps": "fa",
      "hostPools": "vdpool",
      "keyVaults": "kv",
      "logAnalyticsWorkspaces": "law",
      "natGateways": "ng",
      "netAppAccounts": "naa",
      "netAppCapacityPools": "nacp",
      "networkInterfaces": "nic",
      "osdisks": "osdisk",
      "privateEndpoints": "pe",
      "privateLinkScopes": "pls",
      "publicIPAddresses": "pip",
      "recoveryServicesVaults": "rsv",
      "resourceGroups": "rg",
      "routeTables": "rt",
      "scalingPlans": "vdscaling",
      "storageAccounts": "sa",
      "userAssignedIdentities": "uai",
      "virtualMachines": "vm",
      "workspaces": "vdws",
      "imageDefinitions": "vmid"
    },
    "createPrivateDNSZones": "[or(or(or(or(or(or(or(or(parameters('createAzureBackupZone'), parameters('createAzureBlobZone')), parameters('createAzureFilesZone')), parameters('createAzureQueueZone')), parameters('createAzureTableZone')), parameters('createAzureKeyVaultZone')), parameters('createAvdFeedZone')), parameters('createAvdGlobalFeedZone')), parameters('createAzureWebAppZone'))]",
    "cloud": "[toLower(environment().name)]",
    "cloudSuffix": "[replace(replace(replace(environment().resourceManager, 'https://management.azure.', ''), 'https://management.', ''), '/', '')]",
    "locations": "[if(startsWith(variables('cloud'), 'us'), null(), variables('$fxv#0')[environment().name])]",
    "locationAbbreviation": "[if(startsWith(variables('cloud'), 'us'), substring(parameters('location'), 5, sub(length(parameters('location')), 5)), variables('locations')[parameters('location')].abbreviation)]",
    "recoveryServicesGeo": "[if(startsWith(variables('cloud'), 'us'), if(contains(variables('cloud'), 'n'), format('ex{0}', substring(variables('locationAbbreviation'), 0, 1)), format('rx{0}', substring(variables('locationAbbreviation'), 0, 1))), variables('locations')[parameters('location')].recoveryServicesGeo)]",
    "resourceAbbreviations": "[variables('$fxv#1')]",
    "nameConvSuffix": "[if(parameters('nameConvResTypeAtEnd'), 'LOCATION-RESOURCETYPE', 'LOCATION')]",
    "nameConv_Shared_Resources": "[if(parameters('nameConvResTypeAtEnd'), format('avd-TOKEN-{0}', variables('nameConvSuffix')), format('RESOURCETYPE-avd-TOKEN-{0}', variables('nameConvSuffix')))]",
    "natGatewayName": "[replace(replace(replace(variables('nameConv_Shared_Resources'), 'RESOURCETYPE', variables('resourceAbbreviations').natGateways), 'LOCATION', variables('locationAbbreviation')), 'TOKEN-', '')]",
    "publicIPName": "[replace(replace(replace(variables('nameConv_Shared_Resources'), 'RESOURCETYPE', variables('resourceAbbreviations').publicIPAddresses), 'LOCATION', variables('locationAbbreviation')), 'TOKEN-', '')]",
    "routeTableName": "[replace(replace(replace(variables('nameConv_Shared_Resources'), 'RESOURCETYPE', variables('resourceAbbreviations').routeTables), 'LOCATION', variables('locationAbbreviation')), 'TOKEN-', '')]",
    "privateDnsZones_AzureVirtualDesktop": {
      "AzureCloud": "privatelink.wvd.microsoft.com",
      "AzureUSGovernment": "privatelink.wvd.azure.us"
    },
    "privateDnsZones_AzureVirtualDesktopGlobalFeed": {
      "AzureCloud": "privatelink-global.wvd.microsoft.com",
      "AzureUSGovernment": "privatelink-global.wvd.azure.us"
    },
    "privateDnsZoneSuffixes_AzureWebApps": {
      "AzureCloud": "net",
      "AzureUSGovernment": "us"
    },
    "privateDnsZoneSuffixes_Backup": {
      "AzureCloud": "com",
      "AzureUSGovernment": "us"
    },
    "backupPrivateDnsZone": "[if(parameters('createAzureBackupZone'), if(startsWith(variables('cloud'), 'us'), format('privatelink.{0}.backup.windowsazure.{1}', variables('recoveryServicesGeo'), variables('cloudSuffix')), format('privatelink.{0}.backup.windowsazure.{1}', variables('recoveryServicesGeo'), variables('privateDnsZoneSuffixes_Backup')[environment().name])), '')]",
    "blobPrivateDnsZone": "[if(parameters('createAzureBlobZone'), format('privatelink.blob.{0}', environment().suffixes.storage), '')]",
    "filesPrivateDnsZone": "[if(parameters('createAzureFilesZone'), format('privatelink.file.{0}', environment().suffixes.storage), '')]",
    "queuePrivateDnsZone": "[if(parameters('createAzureQueueZone'), format('privatelink.queue.{0}', environment().suffixes.storage), '')]",
    "tablePrivateDnsZone": "[if(parameters('createAzureTableZone'), format('privatelink.table.{0}', environment().suffixes.storage), '')]",
    "keyVaultPrivateDnsZone": "[if(parameters('createAzureKeyVaultZone'), format('privatelink{0}', replace(environment().suffixes.keyvaultDns, 'vault', 'vaultcore')), '')]",
    "avdFeedPrivateDnsZone": "[if(parameters('createAvdFeedZone'), if(startsWith(variables('cloud'), 'us'), format('privatelink.wvd.{0}', variables('cloudSuffix')), variables('privateDnsZones_AzureVirtualDesktop')[environment().name]), '')]",
    "avdGlobalFeedPrivateDnsZone": "[if(parameters('createAvdGlobalFeedZone'), if(startsWith(environment().name, 'US'), format('privatelink.wvd.{0}', variables('cloudSuffix')), variables('privateDnsZones_AzureVirtualDesktopGlobalFeed')[environment().name]), '')]",
    "webAppPrivateDnsZone": "[if(parameters('createAzureWebAppZone'), if(startsWith(variables('cloud'), 'us'), format('privatelink.azurewebsites.{0}', variables('cloudSuffix')), format('privatelink.azurewebsites.{0}', variables('privateDnsZoneSuffixes_AzureWebApps')[environment().name])), '')]",
    "privateDnsZones": [
      "[variables('backupPrivateDnsZone')]",
      "[variables('blobPrivateDnsZone')]",
      "[variables('filesPrivateDnsZone')]",
      "[variables('queuePrivateDnsZone')]",
      "[variables('tablePrivateDnsZone')]",
      "[variables('keyVaultPrivateDnsZone')]",
      "[variables('avdFeedPrivateDnsZone')]",
      "[variables('avdGlobalFeedPrivateDnsZone')]",
      "[variables('webAppPrivateDnsZone')]"
    ],
    "dedupedPrivateDnsZones": "[union(variables('privateDnsZones'), variables('privateDnsZones'))]",
    "existingPrivateDnsZones": [
      "[parameters('azureBackupZoneId')]",
      "[parameters('azureBlobZoneId')]",
      "[parameters('azureFilesZoneId')]",
      "[parameters('azureQueueZoneId')]",
      "[parameters('azureTableZoneId')]",
      "[parameters('azureKeyVaultZoneId')]",
      "[parameters('avdFeedZoneId')]",
      "[parameters('avdGlobalFeedZoneId')]",
      "[parameters('azureWebAppZoneId')]"
    ],
    "dedupedExistingPrivateDnsZones": "[union(variables('existingPrivateDnsZones'), variables('existingPrivateDnsZones'))]"
  },
  "resources": [
    {
      "condition": "[parameters('deployVnet')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('Network-Resources-{0}', parameters('timeStamp'))]",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "customDNSServers": {
            "value": "[parameters('customDNSServers')]"
          },
          "deployVnetResourceGroup": {
            "value": "[parameters('deployVnetResourceGroup')]"
          },
          "defaultRouting": {
            "value": "[parameters('defaultRouting')]"
          },
          "deployDDoSNetworkProtection": {
            "value": "[parameters('deployDDoSNetworkProtection')]"
          },
          "functionAppSubnet": {
            "value": "[parameters('functionAppSubnet')]"
          },
          "hostsSubnet": {
            "value": "[parameters('hostsSubnet')]"
          },
          "hubVnetName": "[if(not(empty(parameters('hubVnetResourceId'))), createObject('value', last(split(parameters('hubVnetResourceId'), '/'))), createObject('value', ''))]",
          "hubVnetResourceGroup": "[if(not(empty(parameters('hubVnetResourceId'))), createObject('value', split(parameters('hubVnetResourceId'), '/')[4]), createObject('value', ''))]",
          "hubVnetSubscriptionId": "[if(not(empty(parameters('hubVnetResourceId'))), createObject('value', split(parameters('hubVnetResourceId'), '/')[2]), createObject('value', ''))]",
          "location": {
            "value": "[parameters('location')]"
          },
          "natGatewayName": {
            "value": "[variables('natGatewayName')]"
          },
          "nvaIPAddress": "[if(not(empty(parameters('nvaIPAddress'))), createObject('value', parameters('nvaIPAddress')), createObject('value', ''))]",
          "privateEndpointsSubnet": "[if(not(empty(parameters('privateEndpointsSubnet'))), createObject('value', parameters('privateEndpointsSubnet')), createObject('value', createObject()))]",
          "publicIPName": {
            "value": "[variables('publicIPName')]"
          },
          "routeTableName": {
            "value": "[variables('routeTableName')]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "timeStamp": {
            "value": "[parameters('timeStamp')]"
          },
          "virtualNetworkGatewayOnHub": {
            "value": "[parameters('virtualNetworkGatewayOnHub')]"
          },
          "vnetAddressPrefixes": {
            "value": "[parameters('vnetAddressPrefixes')]"
          },
          "vnetName": {
            "value": "[parameters('vnetName')]"
          },
          "vnetResourceGroupName": {
            "value": "[parameters('vnetResourceGroupName')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.35.1.17967",
              "templateHash": "18062045815928776736"
            }
          },
          "parameters": {
            "deployVnetResourceGroup": {
              "type": "bool"
            },
            "vnetName": {
              "type": "string"
            },
            "vnetAddressPrefixes": {
              "type": "array"
            },
            "hostsSubnet": {
              "type": "object"
            },
            "privateEndpointsSubnet": {
              "type": "object"
            },
            "functionAppSubnet": {
              "type": "object"
            },
            "defaultRouting": {
              "type": "string"
            },
            "natGatewayName": {
              "type": "string"
            },
            "publicIPName": {
              "type": "string"
            },
            "routeTableName": {
              "type": "string"
            },
            "nvaIPAddress": {
              "type": "string"
            },
            "customDNSServers": {
              "type": "array"
            },
            "deployDDoSNetworkProtection": {
              "type": "bool"
            },
            "hubVnetName": {
              "type": "string"
            },
            "hubVnetResourceGroup": {
              "type": "string"
            },
            "hubVnetSubscriptionId": {
              "type": "string"
            },
            "virtualNetworkGatewayOnHub": {
              "type": "bool"
            },
            "vnetResourceGroupName": {
              "type": "string"
            },
            "location": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            },
            "timeStamp": {
              "type": "string"
            }
          },
          "resources": [
            {
              "condition": "[parameters('deployVnetResourceGroup')]",
              "type": "Microsoft.Resources/resourceGroups",
              "apiVersion": "2023-07-01",
              "name": "[parameters('vnetResourceGroupName')]",
              "location": "[parameters('location')]",
              "tags": "[coalesce(tryGet(parameters('tags'), 'Microsoft.Resources/resourceGroups'), createObject())]"
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('VNet-Resources-{0}', parameters('timeStamp'))]",
              "resourceGroup": "[parameters('vnetResourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "vnetName": {
                    "value": "[parameters('vnetName')]"
                  },
                  "vnetAddressPrefixes": {
                    "value": "[parameters('vnetAddressPrefixes')]"
                  },
                  "hostsSubnet": {
                    "value": "[parameters('hostsSubnet')]"
                  },
                  "privateEndpointsSubnet": {
                    "value": "[parameters('privateEndpointsSubnet')]"
                  },
                  "functionAppSubnet": {
                    "value": "[parameters('functionAppSubnet')]"
                  },
                  "defaultRouting": {
                    "value": "[parameters('defaultRouting')]"
                  },
                  "natGatewayName": {
                    "value": "[parameters('natGatewayName')]"
                  },
                  "publicIPName": {
                    "value": "[parameters('publicIPName')]"
                  },
                  "routeTableName": {
                    "value": "[parameters('routeTableName')]"
                  },
                  "nvaIPAddress": {
                    "value": "[parameters('nvaIPAddress')]"
                  },
                  "customDNSServers": {
                    "value": "[parameters('customDNSServers')]"
                  },
                  "deployDDoSNetworkProtection": {
                    "value": "[parameters('deployDDoSNetworkProtection')]"
                  },
                  "hubVnetName": {
                    "value": "[parameters('hubVnetName')]"
                  },
                  "hubVnetResourceGroup": {
                    "value": "[parameters('hubVnetResourceGroup')]"
                  },
                  "hubVnetSubscriptionId": {
                    "value": "[parameters('hubVnetSubscriptionId')]"
                  },
                  "virtualNetworkGatewayOnHub": {
                    "value": "[parameters('virtualNetworkGatewayOnHub')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "timeStamp": {
                    "value": "[parameters('timeStamp')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.35.1.17967",
                      "templateHash": "10981612069763626321"
                    }
                  },
                  "parameters": {
                    "vnetName": {
                      "type": "string"
                    },
                    "vnetAddressPrefixes": {
                      "type": "array"
                    },
                    "hostsSubnet": {
                      "type": "object"
                    },
                    "privateEndpointsSubnet": {
                      "type": "object"
                    },
                    "functionAppSubnet": {
                      "type": "object"
                    },
                    "defaultRouting": {
                      "type": "string"
                    },
                    "natGatewayName": {
                      "type": "string"
                    },
                    "publicIPName": {
                      "type": "string"
                    },
                    "routeTableName": {
                      "type": "string"
                    },
                    "nvaIPAddress": {
                      "type": "string"
                    },
                    "customDNSServers": {
                      "type": "array"
                    },
                    "deployDDoSNetworkProtection": {
                      "type": "bool"
                    },
                    "hubVnetName": {
                      "type": "string"
                    },
                    "hubVnetResourceGroup": {
                      "type": "string"
                    },
                    "hubVnetSubscriptionId": {
                      "type": "string"
                    },
                    "virtualNetworkGatewayOnHub": {
                      "type": "bool"
                    },
                    "location": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "timeStamp": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "azureCloud": "[environment().name]",
                    "defaultUDRs": "[if(equals(variables('azureCloud'), 'AzureCloud'), createArray(createObject('name', 'AVDServiceTraffic', 'properties', createObject('addressPrefix', 'WindowsVirtualDesktop', 'hasBgpOverride', true(), 'nextHopType', 'Internet')), createObject('name', 'AVDStunInfraTurnRelayTraffic', 'properties', createObject('addressPrefix', '20.202.0.0/16', 'hasBgpOverride', true(), 'nextHopType', 'Internet')), createObject('name', 'AVDTurnRelayTraffic', 'properties', createObject('addressPrefix', '51.5.0.0/16', 'hasBgpOverride', true(), 'nextHopType', 'Internet')), createObject('name', 'DirectRouteToKMS', 'properties', createObject('addressPrefix', '20.118.99.224/32', 'hasBgpOverride', true(), 'nextHopType', 'Internet')), createObject('name', 'DirectRouteToKMS01', 'properties', createObject('addressPrefix', '40.83.235.53/32', 'hasBgpOverride', true(), 'nextHopType', 'Internet')), createObject('name', 'DirectRouteToKMS02', 'properties', createObject('addressPrefix', '23.102.135.246/32', 'hasBgpOverride', true(), 'nextHopType', 'Internet'))), if(equals(variables('azureCloud'), 'AzureUSGovernment'), createArray(createObject('name', 'AVDServiceTraffic', 'properties', createObject('addressPrefix', 'WindowsVirtualDesktop', 'hasBgpOverride', true(), 'nextHopType', 'Internet')), createObject('name', 'AVDStunTurnTraffic', 'properties', createObject('addressPrefix', '20.202.0.0/16', 'hasBgpOverride', true(), 'nextHopType', 'Internet')), createObject('name', 'DirectRouteToKMS', 'properties', createObject('addressPrefix', '23.97.0.13/32', 'hasBgpOverride', true(), 'nextHopType', 'Internet')), createObject('name', 'DirectRouteToKMS01', 'properties', createObject('addressPrefix', '52.126.105.2/32', 'hasBgpOverride', true(), 'nextHopType', 'Internet'))), createArray()))]",
                    "snetHosts": [
                      {
                        "name": "[parameters('hostsSubnet').name]",
                        "properties": {
                          "addressPrefix": "[parameters('hostsSubnet').addressPrefix]",
                          "natGateway": "[if(equals(parameters('defaultRouting'), 'nat'), createObject('id', resourceId('Microsoft.Network/natGateways', parameters('natGatewayName'))), null())]",
                          "routeTable": "[if(not(equals(parameters('defaultRouting'), 'nat')), createObject('id', resourceId('Microsoft.Network/routeTables', parameters('routeTableName'))), null())]"
                        }
                      }
                    ],
                    "snetPrivateEndpoints": "[if(not(empty(parameters('privateEndpointsSubnet'))), createArray(createObject('name', parameters('privateEndpointsSubnet').name, 'properties', createObject('addressPrefix', parameters('privateEndpointsSubnet').addressPrefix))), createArray())]",
                    "snetFunctionApp": "[if(not(empty(parameters('functionAppSubnet'))), createArray(createObject('name', parameters('functionAppSubnet').name, 'properties', createObject('addressPrefix', parameters('functionAppSubnet').addressPrefix, 'delegations', createArray(createObject('name', 'Microsoft.Web/serverFarms', 'properties', createObject('ServiceName', 'Microsoft.Web/serverFarms')))))), createArray())]",
                    "subnets": "[union(variables('snetHosts'), variables('snetPrivateEndpoints'), variables('snetFunctionApp'))]"
                  },
                  "resources": [
                    {
                      "condition": "[parameters('deployDDoSNetworkProtection')]",
                      "type": "Microsoft.Network/ddosProtectionPlans",
                      "apiVersion": "2023-04-01",
                      "name": "default",
                      "location": "[parameters('location')]",
                      "tags": "[coalesce(tryGet(parameters('tags'), 'Microsoft.Network/ddosProtectionPlans'), createObject())]"
                    },
                    {
                      "condition": "[not(equals(parameters('defaultRouting'), 'nat'))]",
                      "type": "Microsoft.Network/routeTables",
                      "apiVersion": "2023-04-01",
                      "name": "[parameters('routeTableName')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "routes": "[if(equals(parameters('defaultRouting'), 'default'), variables('defaultUDRs'), if(equals(parameters('defaultRouting'), 'nva'), createArray(createObject('name', 'DefaultRoute', 'properties', createObject('addressPrefix', '0.0.0.0/0', 'nextHopType', 'VirtualAppliance', 'nextHopIpAddress', parameters('nvaIPAddress')))), createArray()))]"
                      },
                      "tags": "[coalesce(tryGet(parameters('tags'), 'Microsoft.Network/routeTables'), createObject())]"
                    },
                    {
                      "condition": "[equals(parameters('defaultRouting'), 'nat')]",
                      "type": "Microsoft.Network/publicIPAddresses",
                      "apiVersion": "2021-05-01",
                      "name": "[parameters('publicIPName')]",
                      "location": "[parameters('location')]",
                      "sku": {
                        "name": "Standard"
                      },
                      "properties": {
                        "publicIPAddressVersion": "IPv4",
                        "publicIPAllocationMethod": "Static",
                        "idleTimeoutInMinutes": 4
                      },
                      "tags": "[coalesce(tryGet(parameters('tags'), 'Microsoft.Network/publicIPAddresses'), createObject())]"
                    },
                    {
                      "condition": "[equals(parameters('defaultRouting'), 'nat')]",
                      "type": "Microsoft.Network/natGateways",
                      "apiVersion": "2024-01-01",
                      "name": "[parameters('natGatewayName')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "publicIpAddresses": [
                          {
                            "id": "[resourceId('Microsoft.Network/publicIPAddresses', parameters('publicIPName'))]"
                          }
                        ],
                        "idleTimeoutInMinutes": 4
                      },
                      "sku": {
                        "name": "Standard"
                      },
                      "tags": "[coalesce(tryGet(parameters('tags'), 'Microsoft.Network/natGateways'), createObject())]",
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/publicIPAddresses', parameters('publicIPName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Network/virtualNetworks",
                      "apiVersion": "2023-09-01",
                      "name": "[parameters('vnetName')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "addressSpace": {
                          "addressPrefixes": "[parameters('vnetAddressPrefixes')]"
                        },
                        "ddosProtectionPlan": "[if(parameters('deployDDoSNetworkProtection'), createObject('id', resourceId('Microsoft.Network/ddosProtectionPlans', 'default')), null())]",
                        "dhcpOptions": "[if(not(empty(parameters('customDNSServers'))), createObject('dnsServers', parameters('customDNSServers')), null())]",
                        "enableDdosProtection": "[parameters('deployDDoSNetworkProtection')]"
                      },
                      "tags": "[coalesce(tryGet(parameters('tags'), 'Microsoft.Network/virtualNetworks'), createObject())]",
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/ddosProtectionPlans', 'default')]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "snets",
                        "count": "[length(variables('subnets'))]",
                        "mode": "serial",
                        "batchSize": 1
                      },
                      "type": "Microsoft.Network/virtualNetworks/subnets",
                      "apiVersion": "2022-05-01",
                      "name": "[format('{0}/{1}', parameters('vnetName'), variables('subnets')[copyIndex()].name)]",
                      "properties": "[variables('subnets')[copyIndex()].properties]",
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/natGateways', parameters('natGatewayName'))]",
                        "[resourceId('Microsoft.Network/routeTables', parameters('routeTableName'))]",
                        "[resourceId('Microsoft.Network/virtualNetworks', parameters('vnetName'))]"
                      ]
                    },
                    {
                      "condition": "[not(empty(parameters('hubVnetName')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('localVnetPeering-{0}', parameters('timeStamp'))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "allowForwardedTraffic": {
                            "value": true
                          },
                          "allowVirtualNetworkAccess": {
                            "value": true
                          },
                          "localVnetName": {
                            "value": "[parameters('vnetName')]"
                          },
                          "remoteVirtualNetworkId": {
                            "value": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Network/virtualNetworks/{2}', parameters('hubVnetSubscriptionId'), parameters('hubVnetResourceGroup'), parameters('hubVnetName'))]"
                          },
                          "useRemoteGateways": {
                            "value": "[parameters('virtualNetworkGatewayOnHub')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.35.1.17967",
                              "templateHash": "3341600507433643689"
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "defaultValue": "[format('{0}-{1}', parameters('localVnetName'), last(split(parameters('remoteVirtualNetworkId'), '/')))]"
                            },
                            "localVnetName": {
                              "type": "string"
                            },
                            "remoteVirtualNetworkId": {
                              "type": "string"
                            },
                            "allowForwardedTraffic": {
                              "type": "bool",
                              "defaultValue": true
                            },
                            "allowGatewayTransit": {
                              "type": "bool",
                              "defaultValue": false
                            },
                            "allowVirtualNetworkAccess": {
                              "type": "bool",
                              "defaultValue": true
                            },
                            "doNotVerifyRemoteGateways": {
                              "type": "bool",
                              "defaultValue": true
                            },
                            "useRemoteGateways": {
                              "type": "bool",
                              "defaultValue": false
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
                              "apiVersion": "2023-04-01",
                              "name": "[format('{0}/{1}', parameters('localVnetName'), parameters('name'))]",
                              "properties": {
                                "allowForwardedTraffic": "[parameters('allowForwardedTraffic')]",
                                "allowGatewayTransit": "[parameters('allowGatewayTransit')]",
                                "allowVirtualNetworkAccess": "[parameters('allowVirtualNetworkAccess')]",
                                "doNotVerifyRemoteGateways": "[parameters('doNotVerifyRemoteGateways')]",
                                "useRemoteGateways": "[parameters('useRemoteGateways')]",
                                "remoteVirtualNetwork": {
                                  "id": "[parameters('remoteVirtualNetworkId')]"
                                }
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "snets"
                      ]
                    },
                    {
                      "condition": "[not(empty(parameters('hubVnetName')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('remoteVnetPeering-{0}', parameters('timeStamp'))]",
                      "subscriptionId": "[parameters('hubVnetSubscriptionId')]",
                      "resourceGroup": "[parameters('hubVnetResourceGroup')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "allowForwardedTraffic": {
                            "value": true
                          },
                          "allowVirtualNetworkAccess": {
                            "value": true
                          },
                          "localVnetName": {
                            "value": "[parameters('hubVnetName')]"
                          },
                          "remoteVirtualNetworkId": {
                            "value": "[resourceId('Microsoft.Network/virtualNetworks', parameters('vnetName'))]"
                          },
                          "allowGatewayTransit": {
                            "value": "[parameters('virtualNetworkGatewayOnHub')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.35.1.17967",
                              "templateHash": "3341600507433643689"
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "defaultValue": "[format('{0}-{1}', parameters('localVnetName'), last(split(parameters('remoteVirtualNetworkId'), '/')))]"
                            },
                            "localVnetName": {
                              "type": "string"
                            },
                            "remoteVirtualNetworkId": {
                              "type": "string"
                            },
                            "allowForwardedTraffic": {
                              "type": "bool",
                              "defaultValue": true
                            },
                            "allowGatewayTransit": {
                              "type": "bool",
                              "defaultValue": false
                            },
                            "allowVirtualNetworkAccess": {
                              "type": "bool",
                              "defaultValue": true
                            },
                            "doNotVerifyRemoteGateways": {
                              "type": "bool",
                              "defaultValue": true
                            },
                            "useRemoteGateways": {
                              "type": "bool",
                              "defaultValue": false
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
                              "apiVersion": "2023-04-01",
                              "name": "[format('{0}/{1}', parameters('localVnetName'), parameters('name'))]",
                              "properties": {
                                "allowForwardedTraffic": "[parameters('allowForwardedTraffic')]",
                                "allowGatewayTransit": "[parameters('allowGatewayTransit')]",
                                "allowVirtualNetworkAccess": "[parameters('allowVirtualNetworkAccess')]",
                                "doNotVerifyRemoteGateways": "[parameters('doNotVerifyRemoteGateways')]",
                                "useRemoteGateways": "[parameters('useRemoteGateways')]",
                                "remoteVirtualNetwork": {
                                  "id": "[parameters('remoteVirtualNetworkId')]"
                                }
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "snets",
                        "[resourceId('Microsoft.Network/virtualNetworks', parameters('vnetName'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "vnetResourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Network/virtualNetworks', parameters('vnetName'))]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('vnetResourceGroupName'))]"
              ]
            }
          ],
          "outputs": {
            "vNetResourceId": {
              "type": "string",
              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Resources/deployments', format('VNet-Resources-{0}', parameters('timeStamp'))), '2022-09-01').outputs.vnetResourceId.value]"
            }
          }
        }
      }
    },
    {
      "condition": "[or(or(variables('createPrivateDNSZones'), parameters('linkPrivateDnsZonesToNewVnet')), not(empty(parameters('privateDnsZonesVnetId'))))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('Private-DNS-Zones-Resources-{0}', parameters('timeStamp'))]",
      "subscriptionId": "[parameters('privateDNSZonesSubscriptionId')]",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "createPrivateDNSZones": {
            "value": "[variables('createPrivateDNSZones')]"
          },
          "deployPrivateDNSZonesResourceGroup": {
            "value": "[parameters('deployPrivateDNSZonesResourceGroup')]"
          },
          "existingPrivateDnsZoneIds": {
            "value": "[filter(variables('dedupedExistingPrivateDnsZones'), lambda('zone', not(empty(lambdaVariables('zone')))))]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "privateDNSZonesResourceGroupName": {
            "value": "[parameters('privateDNSZonesResourceGroupName')]"
          },
          "privateDnsZonesToCreate": {
            "value": "[filter(variables('dedupedPrivateDnsZones'), lambda('zone', not(empty(lambdaVariables('zone')))))]"
          },
          "privateDnsZonesVnetId": "[if(not(empty(parameters('privateDnsZonesVnetId'))), createObject('value', parameters('privateDnsZonesVnetId')), if(parameters('linkPrivateDnsZonesToNewVnet'), createObject('value', reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Network-Resources-{0}', parameters('timeStamp'))), '2022-09-01').outputs.vNetResourceId.value), createObject('value', '')))]",
          "tags": {
            "value": "[parameters('tags')]"
          },
          "timeStamp": {
            "value": "[parameters('timeStamp')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.35.1.17967",
              "templateHash": "16611689734680839495"
            }
          },
          "parameters": {
            "createPrivateDNSZones": {
              "type": "bool"
            },
            "deployPrivateDNSZonesResourceGroup": {
              "type": "bool"
            },
            "existingPrivateDnsZoneIds": {
              "type": "array"
            },
            "location": {
              "type": "string"
            },
            "privateDNSZonesResourceGroupName": {
              "type": "string"
            },
            "privateDnsZonesToCreate": {
              "type": "array"
            },
            "privateDnsZonesVnetId": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            },
            "timeStamp": {
              "type": "string"
            }
          },
          "resources": [
            {
              "condition": "[parameters('deployPrivateDNSZonesResourceGroup')]",
              "type": "Microsoft.Resources/resourceGroups",
              "apiVersion": "2024-07-01",
              "name": "[parameters('privateDNSZonesResourceGroupName')]",
              "location": "[parameters('location')]",
              "tags": "[coalesce(tryGet(parameters('tags'), 'Microsoft.Resources/resourceGroups'), createObject())]"
            },
            {
              "condition": "[parameters('createPrivateDNSZones')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('Private-DNS-Zones-{0}', parameters('timeStamp'))]",
              "resourceGroup": "[parameters('privateDNSZonesResourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "privateDnsZoneNames": {
                    "value": "[parameters('privateDnsZonesToCreate')]"
                  },
                  "tags": {
                    "value": "[coalesce(tryGet(parameters('tags'), 'Microsoft.Network/privateDnsZones'), createObject())]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.35.1.17967",
                      "templateHash": "2166502719781747423"
                    }
                  },
                  "parameters": {
                    "privateDnsZoneNames": {
                      "type": "array"
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {}
                    }
                  },
                  "resources": [
                    {
                      "copy": {
                        "name": "privateDnsZones",
                        "count": "[length(parameters('privateDnsZoneNames'))]"
                      },
                      "type": "Microsoft.Network/privateDnsZones",
                      "apiVersion": "2020-06-01",
                      "name": "[parameters('privateDnsZoneNames')[copyIndex()]]",
                      "location": "global",
                      "tags": "[parameters('tags')]"
                    }
                  ],
                  "outputs": {
                    "resourceIds": {
                      "type": "array",
                      "copy": {
                        "count": "[length(parameters('privateDnsZoneNames'))]",
                        "input": "[resourceId('Microsoft.Network/privateDnsZones', parameters('privateDnsZoneNames')[copyIndex()])]"
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('privateDNSZonesResourceGroupName'))]"
              ]
            },
            {
              "condition": "[not(empty(parameters('privateDnsZonesVnetId')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('Private-DNS-Zones-Vnet-Links-{0}', parameters('timeStamp'))]",
              "location": "[deployment().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "privateDnsZoneResourceIds": "[if(parameters('createPrivateDNSZones'), createObject('value', union(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('privateDNSZonesResourceGroupName')), 'Microsoft.Resources/deployments', format('Private-DNS-Zones-{0}', parameters('timeStamp'))), '2022-09-01').outputs.resourceIds.value, parameters('existingPrivateDnsZoneIds'))), createObject('value', parameters('existingPrivateDnsZoneIds')))]",
                  "vnetId": {
                    "value": "[parameters('privateDnsZonesVnetId')]"
                  },
                  "timeStamp": {
                    "value": "[parameters('timeStamp')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.35.1.17967",
                      "templateHash": "17097183868220650003"
                    }
                  },
                  "parameters": {
                    "privateDnsZoneResourceIds": {
                      "type": "array"
                    },
                    "vnetId": {
                      "type": "string"
                    },
                    "timeStamp": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "copy": {
                        "name": "privateDnsZoneVnetLinks",
                        "count": "[length(parameters('privateDnsZoneResourceIds'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('privateDnsZoneVnetLink-{0}-{1}', copyIndex(), parameters('timeStamp'))]",
                      "subscriptionId": "[split(parameters('privateDnsZoneResourceIds')[copyIndex()], '/')[2]]",
                      "resourceGroup": "[split(parameters('privateDnsZoneResourceIds')[copyIndex()], '/')[4]]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "privateDnsZoneName": {
                            "value": "[last(split(parameters('privateDnsZoneResourceIds')[copyIndex()], '/'))]"
                          },
                          "vnetId": {
                            "value": "[parameters('vnetId')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.35.1.17967",
                              "templateHash": "4237715251254812695"
                            }
                          },
                          "parameters": {
                            "privateDnsZoneName": {
                              "type": "string"
                            },
                            "vnetId": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
                              "apiVersion": "2018-09-01",
                              "name": "[format('{0}/{1}', parameters('privateDnsZoneName'), last(split(parameters('vnetId'), '/')))]",
                              "location": "global",
                              "properties": {
                                "registrationEnabled": false,
                                "virtualNetwork": {
                                  "id": "[parameters('vnetId')]"
                                }
                              }
                            }
                          ]
                        }
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('privateDNSZonesResourceGroupName')), 'Microsoft.Resources/deployments', format('Private-DNS-Zones-{0}', parameters('timeStamp')))]"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('Network-Resources-{0}', parameters('timeStamp')))]"
      ]
    }
  ]
}