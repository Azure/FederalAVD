{
	"$schema": "https://schema.management.azure.com/schemas/2021-09-09/uiFormDefinition.schema.json",
	"view": {
		"kind": "Form",
		"properties": {
			"title": "Azure Virtual Desktop - Network Prerequisites",
			"steps": [
				{
					"name": "basics",
					"label": "Deployment Basics",
					"elements": [
						{
							"name": "subscriptionsApi",
							"type": "Microsoft.Solutions.ArmApiControl",
							"request": {
								"method": "GET",
								"path": "subscriptions?api-version=2022-12-01"
							}
						},
						{
							"name": "introBox",
							"type": "Microsoft.Common.TextBlock",
							"visible": true,
							"options": {
								"text": "This Template Spec is designed to assist you in deploying the networking components required to support Azure Virtual Desktop along with a custom image build solution into your subscription."
							}
						},
						{
							"name": "deploymentInfo",
							"type": "Microsoft.Common.InfoBox",
							"visible": true,
							"options": {
								"style": "Info",
								"text": "<b>IMPORTANT</b>\n\nSelect your AVD workload subscription in the <b>Project details</b> section below.\n\nSelect your desired region in the <b>Instance details</b> section below.\n\nThese selections will be used to scope where the virtual network components will be deployed.\n\nYou will have the option to select a seperate subscription for your private DNS zones which are global resources."
							}
						},
						{
							"name": "scope",
							"type": "Microsoft.Common.ResourceScope",
							"location": {
								"label": "Virtual Network Region",
								"toolTip": "Select the region where you are deploying your session hosts.",
								"resourceTypes": [
									"Microsoft.Compute/virtualMachines"
								]
							}
						},
						{
							"name": "features",
							"label": "Feature Selection",
							"type": "Microsoft.Common.Section",
							"visible": true,
							"elements": [
								{
									"name": "featureIntroBox",
									"type": "Microsoft.Common.TextBlock",
									"visible": true,
									"options": {
										"text": "Select the AVD Deployment features below that your landing zone networking must support. Your choices here affect the options on later screens.",
										"link": {
											"label": "Solution Feature Descriptions",
											"uri": "https://github.com/shawntmeyer/AzureVirtualDesktop/blob/master/docs/avd.md#features"
										}
									}
								},
								{
									"name": "privateEndpoints",
									"type": "Microsoft.Common.CheckBox",
									"label": "Private Endpoints",
									"defaultValue": true,
									"toolTip": "Enables private link for all PaaS components of the solution."
								},
								{
									"name": "customImage",
									"type": "Microsoft.Common.CheckBox",
									"label": "Custom Image",
									"defaultValue": true,
									"toolTip": "Enables building custom image for AVD.",
									"visible": "[steps('basics').features.privateEndpoints]"
								},
								{
									"name": "azureFiles",
									"type": "Microsoft.Common.CheckBox",
									"label": "Azure Files for Storage",
									"defaultValue": true,
									"toolTip": "Required for FSLogix App Attach Storage (When not using Azure NetApp Files).",
									"visible": "[steps('basics').features.privateEndpoints]"
								},
								{
									"name": "avdPrivateLink",
									"type": "Microsoft.Common.CheckBox",
									"label": "AVD Private Link",
									"toolTip": "You can use Azure Private Link with Azure Virtual Desktop to privately connect to your remote resources. By creating a private endpoint, traffic between your virtual network and the service remains on the Microsoft network, so you no longer need to expose your service to the public internet.",
									"visible": "[steps('basics').features.privateEndpoints]"
								},
								{
									"name": "recoveryServices",
									"type": "Microsoft.Common.CheckBox",
									"label": "Azure Backup Service",
									"toolTip": "The Azure Backup service provides simple, secure, and cost-effective solutions to back up your data and recover it from the Microsoft Azure cloud.",
									"visible": "[steps('basics').features.privateEndpoints]"
								},
								{
									"name": "storageQuotaAutomation",
									"type": "Microsoft.Common.CheckBox",
									"label": "Azure Premium Storage Quota Automation",
									"toolTip": "Select this box to have the option for configuring the Azure Private DNS Zones for function apps.",
									"visible": "[steps('basics').features.privateEndpoints]"
								}
							]
						}
					]
				},
				{
					"name": "virtualNetwork",
					"label": "Virtual Network",
					"type": "Microsoft.Common.Section",
					"visible": true,
					"elements": [
						{
							"name": "deployVnet",
							"type": "Microsoft.Common.OptionsGroup",
							"label": "Deploy Virtual Network",
							"defaultValue": "Yes",
							"toolTip": "",
							"constraints": {
								"allowedValues": [
									{
										"label": "Yes",
										"value": true
									},
									{
										"label": "Use Existing",
										"value": false
									}
								],
								"required": true
							},
							"visible": true
						},
						{
							"name": "deploy",
							"type": "Microsoft.Common.Section",
							"label": "Deployment Details",
							"visible": "[steps('virtualNetwork').deployVnet]",
							"elements": [
								{
									"name": "vnetInfoBlock1",
									"type": "Microsoft.Common.InfoBox",
									"options": {
										"text": "<b>IMPORTANT</b>\n\nFirst, select an existing or <u>Create a new</u> resource group to contain the virtual network resources.\n\nThen, review the virtual network and subnet names and IP prefixes in each selection below before continuing. Make any changes necessary with the <u>Edit Virtual Network</u> or <u>Edit Subnet</u> links."
									}
								},
								{
									"type": "Microsoft.Common.ResourceGroupSelector",
									"name": "resourceGroup",
									"allowedMode": "Both",
									"required": false,
									"scope": {
										"subscriptionId": "[steps('basics').scope.subscription.subscriptionId]"
									}
								},
								{
									"name": "vnetMinimum",
									"type": "Microsoft.Network.VirtualNetworkCombo",
									"label": {
										"virtualNetwork": "Virtual network",
										"subnets": "Subnets"
									},
									"toolTip": {
										"virtualNetwork": "",
										"subnets": ""
									},
									"defaultValue": {
										"name": "[if(contains(steps('basics').scope.location.name, 'virginia'), 'vnet-avd-va', if(contains(steps('basics').scope.location.name, 'arizona'), 'vnet-avd-az', if(contains(steps('basics').scope.location.name, 'texas'), 'vnet-avd-tx', concat('vnet-avd-', steps('basics').scope.location.name))))]",
										"addressPrefixSize": "/24"
									},
									"constraints": {
										"minAddressPrefixSize": "/24"
									},
									"options": {
										"hideExisting": true
									},
									"scope": {
										"subscriptionId": "[steps('basics').scope.subscription.subscriptionId]",
										"resourceGroupName": "[steps('virtualNetwork').deploy.resourceGroup.value.name]",
										"location": "[steps('basics').scope.location.name]"
									},
									"subnets": {
										"subnet1": {
											"label": "Session Hosts Subnet",
											"defaultValue": {
												"name": "sn-hosts",
												"addressPrefixSize": "/24"
											},
											"constraints": {
												"minAddressPrefixSize": "/26",
												"minAddressCount": 12,
												"requireContiguousAddresses": false
											}
										}
									},
									"visible": "[equals(steps('basics').features.privateEndpoints, false)]"
								},
								{
									"name": "vnetPrivateEndpoints",
									"type": "Microsoft.Network.VirtualNetworkCombo",
									"label": {
										"virtualNetwork": "Virtual network",
										"subnets": "Subnets"
									},
									"toolTip": {
										"virtualNetwork": "",
										"subnets": ""
									},
									"defaultValue": {
										"name": "[if(contains(steps('basics').scope.location.name, 'virginia'), 'vnet-avd-va', if(contains(steps('basics').scope.location.name, 'arizona'), 'vnet-avd-az', if(contains(steps('basics').scope.location.name, 'texas'), 'vnet-avd-tx', concat('vnet-avd-', steps('basics').scope.location.name))))]",
										"addressPrefixSize": "/16"
									},
									"constraints": {
										"minAddressPrefixSize": "/24"
									},
									"options": {
										"hideExisting": true
									},
									"scope": {
										"subscriptionId": "[steps('basics').scope.subscription.subscriptionId]",
										"resourceGroupName": "[steps('virtualNetwork').deploy.resourceGroup.value.name]",
										"location": "[steps('basics').scope.location.name]"
									},
									"subnets": {
										"subnet1": {
											"label": "Session Hosts Subnet",
											"defaultValue": {
												"name": "sn-hosts",
												"addressPrefixSize": "/24"
											},
											"constraints": {
												"minAddressPrefixSize": "/26",
												"minAddressCount": 12,
												"requireContiguousAddresses": false
											}
										},
										"subnet2": {
											"label": "Private Endpoints Subnet",
											"defaultValue": {
												"name": "snet-private-endpoints",
												"addressPrefixSize": "/24"
											},
											"constraints": {
												"minAddressPrefixSize": "/26",
												"minAddressCount": 8,
												"requireContiguousAddresses": false
											}
										}
									},
									"visible": "[and(steps('basics').features.privateEndpoints, equals(steps('basics').features.storageQuotaAutomation, false))]"
								},
								{
									"name": "vnetFunctionApp",
									"type": "Microsoft.Network.VirtualNetworkCombo",
									"label": {
										"virtualNetwork": "Virtual network",
										"subnets": "Subnets"
									},
									"toolTip": {
										"virtualNetwork": "",
										"subnets": ""
									},
									"defaultValue": {
										"name": "[if(contains(steps('basics').scope.location.name, 'virginia'), 'vnet-avd-va', if(contains(steps('basics').scope.location.name, 'arizona'), 'vnet-avd-az', if(contains(steps('basics').scope.location.name, 'texas'), 'vnet-avd-tx', concat('vnet-avd-', steps('basics').scope.location.name))))]",
										"addressPrefixSize": "/16"
									},
									"constraints": {
										"minAddressPrefixSize": "/24"
									},
									"options": {
										"hideExisting": true
									},
									"scope": {
										"subscriptionId": "[steps('basics').scope.subscription.subscriptionId]",
										"resourceGroupName": "[steps('virtualNetwork').deploy.resourceGroup.value.name]",
										"location": "[steps('basics').scope.location.name]"
									},
									"subnets": {
										"subnet1": {
											"label": "Session Hosts Subnet",
											"defaultValue": {
												"name": "sn-hosts",
												"addressPrefixSize": "/24"
											},
											"constraints": {
												"minAddressPrefixSize": "/26",
												"minAddressCount": 12,
												"requireContiguousAddresses": false
											}
										},
										"subnet2": {
											"label": "Private Endpoints Subnet",
											"defaultValue": {
												"name": "snet-private-endpoints",
												"addressPrefixSize": "/24"
											},
											"constraints": {
												"minAddressPrefixSize": "/26",
												"minAddressCount": 8,
												"requireContiguousAddresses": false
											}
										},
										"subnet3": {
											"label": "Function App Subnet",
											"defaultValue": {
												"name": "snet-function-app",
												"addressPrefixSize": "/26"
											},
											"constraints": {
												"minAddressPrefixSize": "/27",
												"minAddressCount": 8,
												"requireContiguousAddresses": false
											}
										}
									},
									"visible": "[and(steps('basics').features.privateEndpoints, steps('basics').features.storageQuotaAutomation)]"
								},
								{
									"name": "defaultRouteType",
									"type": "Microsoft.Common.DropDown",
									"label": "Default Route Type",
									"defaultValue": "Network Virtual Appliance",
									"toolTip": "Select the Default Route Type to Configure.",
									"constraints": {
										"allowedValues": [
											{
												"label": "Default (Do not configure)",
												"value": "default"
											},
											{
												"label": "Network Virtual Appliance",
												"value": "nva"
											},
											{
												"label": "NAT Gateway",
												"value": "nat"
											}
										]
									}
								},
								{
									"name": "nvaIPAddress",
									"type": "Microsoft.Common.TextBox",
									"visible": "[equals(steps('virtualNetwork').deploy.defaultRouteType, 'nva')]",
									"label": "NVA IP Address",
									"toolTip": "Provide the IP Address of the NVA.",
									"placeholder": "Example: 10.0.0.4",
									"constraints": {
										"regex": "^((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])$",
										"required": true,
										"validationMessage": "The value provided is not a valid IPv4 address."
									}
								},
								{
									"name": "dnsServerTextBlock",
									"type": "Microsoft.Common.TextBlock",
									"options": {
										"text": "Optionally, add your custom DNS Server Addresses below."
									}
								},
								{
									"name": "dnsServers",
									"type": "Microsoft.Common.EditableGrid",
									"ariaLabel": "DNS Servers",
									"label": "DNS Servers",
									"constraints": {
										"width": "small",
										"rows": {
											"count": {
												"min": 0,
												"max": 6
											}
										},
										"columns": [
											{
												"id": "ipAddress",
												"header": "DNS Server IP Address",
												"width": "1fr",
												"element": {
													"type": "Microsoft.Common.TextBox",
													"placeholder": "Example: 10.1.1.4",
													"constraints": {
														"regex": "^((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])$",
														"required": true,
														"validationMessage": "The value provided is not a valid IPv4 address."
													}
												}
											}
										]
									}
								},
								{
									"name": "collectNSGDiagLogs",
									"type": "Microsoft.Common.CheckBox",
									"label": "Send NSG Diagnostic Logs to Log Analytics Workspace"
								},
								{
									"name": "logAnalyticsWorkspace",
									"type": "Microsoft.Solutions.ResourceSelector",
									"label": "Select Log Analytics Workspace",
									"resourceType": "Microsoft.OperationalInsights/workspaces",
									"toolTip": "Select an existing log analytics workspace to which to send NSG diagnostic logs.",
									"scope": {
										"location": "[steps('basics').scope.location.name]"
									},
									"constraints": {
										"required": false
									},
									"visible": "[steps('virtualNetwork').deploy.collectNSGDiagLogs]"
								},
								{
									"name": "deployDDoSNetworkProtection",
									"type": "Microsoft.Common.CheckBox",
									"label": "Enable DDoS Network Protection",
									"defaultValue": false,
									"toolTip": "Enables DDoS Network Protection for the virtual network."
								},
								{
									"name": "peerVnetToHub",
									"type": "Microsoft.Common.CheckBox",
									"label": "Peer new VNet to Hub VNet",
									"toolTip": "Select to automatically peer the new vnet to the hub vnet."
								},
								{
									"name": "hubVnet",
									"type": "Microsoft.Solutions.ResourceSelector",
									"label": "Select hub VNet",
									"resourceType": "Microsoft.Network/virtualNetworks",
									"toolTip": "Select the hub virtual network",
									"scope": {
										"location": "[steps('basics').scope.location.name]"
									},
									"constraints": {
										"required": true
									},
									"visible": "[equals(steps('virtualNetwork').deploy.peerVnetToHub, true)]"
								},
								{
									"name": "hubVirtualNetworkGateway",
									"type": "Microsoft.Common.CheckBox",
									"visible": "[equals(steps('virtualNetwork').deploy.peerVnetToHub, true)]",
									"label": "Use Gateway on hub",
									"defaultValue": false,
									"toolTip": "This information will be used to set remote gateway settings on vNet peering."
								},
								{
									"name": "cafTextBlock",
									"type": "Microsoft.Common.TextBlock",
									"visible": true,
									"options": {
										"text": "The Cloud Adoption Framework (CAF) provides a recommended resource naming convention which specifies that the abbreviation for the resource type is listed first in the name. This solution automatically names resources using the CAF naming convention and suggested resource type abbreviations. Some customers have chosen to move the resource type to the end of the resource names. Select 'Yes' below to ensure that resources are named with this reverse convention or leave it set to 'No' to follow the CAF.",
										"link": {
											"label": "Resource Naming | Microsoft Learn",
											"uri": "https://learn.microsoft.com/en-us/azure/cloud-adoption-framework/ready/azure-best-practices/resource-naming"
										}
									}
								},
								{
									"name": "nameConvResTypeAtEnd",
									"type": "Microsoft.Common.OptionsGroup",
									"label": "Move the Resource Type to the end of resource names",
									"defaultValue": "No",
									"toolTip": "",
									"constraints": {
										"allowedValues": [
											{
												"label": "Yes",
												"value": true
											},
											{
												"label": "No",
												"value": false
											}
										],
										"required": true
									},
									"visible": true
								}
							]
						}
					]
				},
				{
					"name": "privateDNSZones",
					"label": "Private DNS Zones",
					"type": "Microsoft.Common.Section",
					"elements": [
						{
							"name": "infoBox1",
							"type": "Microsoft.Common.InfoBox",
							"visible": "[equals(steps('basics').features.privateEndpoints, false)]",
							"options": {
								"icon": "Info",
								"text": "This page is intentionally blank because you chose not to enable the 'Private Endpoints' feature on the 'basics' page."
							}
						},
						{
							"name": "zones",
							"label": "",
							"type": "Microsoft.Common.Section",
							"visible": "[steps('basics').features.privateEndpoints]",
							"elements": [
								{
									"name": "privateDNSZonesIntro",
									"type": "Microsoft.Common.TextBlock",
									"visible": true,
									"options": {
										"text": "This section allows you to deploy the required private DNS zones based on your feature selections. Use the dropdowns below to select any existing zones. If any entry is left blank, you will have the option to deploy that zone.",
										"link": {
											"label": "Azure Private Endpoint private DNS zone values",
											"uri": "https://learn.microsoft.com/en-us/azure/private-link/private-endpoint-dns"
										}
									}
								},
								{
									"name": "subscription",
									"type": "Microsoft.Common.DropDown",
									"label": "Private DNS Zone Subscription",
									"placeholder": "",
									"defaultValue": "[steps('basics').scope.subscription.displayName]",
									"toolTip": "Select the subscription that contains your Private DNS Zones.",
									"constraints": {
										"allowedValues": "[map(steps('basics').subscriptionsApi.value, (sub) => parse(concat('{\"label\":\"', sub.displayName, '\",\"value\":{\"subscriptionId\":\"', sub.subscriptionId, '\",\"displayName\":\"', sub.displayName, '\"}}')))]",
										"required": true
									},
									"visible": true
								},
								{
									"name": "privateDNSZonesApi",
									"condition": "[and(steps('basics').features.privateEndpoints, not(empty(steps('privateDNSZones').zones.subscription)))]",
									"type": "Microsoft.Solutions.ArmApiControl",
									"request": {
										"method": "GET",
										"path": "[concat('/subscriptions/', steps('privateDNSZones').zones.subscription.subscriptionId, '/providers/Microsoft.Network/privateDnsZones?api-version=2018-09-01')]"
									}
								},
								{
									"name": "backupHeader",
									"type": "Microsoft.Common.TextBlock",
									"visible": "[steps('basics').features.recoveryServices]",
									"options": {
										"text": "<u>Azure Backup Services</u>"
									}
								},
								{
									"name": "azureBackup",
									"type": "Microsoft.Common.DropDown",
									"visible": "[steps('basics').features.recoveryServices]",
									"label": "Azure Backup",
									"multiLine": true,
									"toolTip": "Select the existing Geo Specific Private DNS Zone for Azure Backup Storage.",
									"constraints": {
										"allowedValues": "[map(filter(steps('privateDNSZones').zones.privateDNSZonesApi.value, (zone) => contains(zone.name, '.backup.')), (zone) => parse(concat('{\"label\":\"', zone.name, '\",\"description\":\"Resource group: ', first(skip(split(zone.id, '/'), 4)), '\",\"value\":\"', zone.id, '\"}')))]",
										"required": false
									}
								},
								{
									"name": "azureRecoveryServicesGeoCode",
									"type": "Microsoft.Common.TextBox",
									"label": "Recovery Services Geo Code (Air-Gapped Cloud Only)",
									"toolTip": "This value is a combination of the cloud program name initials plus the first character of the location.",
									"constraints": {
										"required": true,
										"regex": "^[a-z0-9A-Z]{1,6}$",
										"validationMessage": "Only alphanumeric characters are allowed, and the value must be 2-6 characters long."
									},
									"visible": "[and(startsWith(toLower(steps('basics').scope.location.name), 'us'), steps('basics').features.recoveryServices, empty(steps('privateDNSZones').zones.azureBackup), steps('privateDNSZones').zones.deployMissingZones)]"
								},
								{
									"name": "keyVaultsHeader",
									"type": "Microsoft.Common.TextBlock",
									"visible": true,
									"options": {
										"text": "<u>Azure Key Vaults</u>"
									}
								},
								{
									"name": "azureKeyVault",
									"type": "Microsoft.Common.DropDown",
									"label": "Azure Key Vault",
									"multiLine": true,
									"toolTip": "Select the existing Private DNS Zone for Azure Key Vaults.",
									"constraints": {
										"allowedValues": "[map(filter(steps('privateDNSZones').zones.privateDNSZonesApi.value, (zone) => contains(zone.name, 'privatelink.vaultcore.')), (zone) => parse(concat('{\"label\":\"', zone.name, '\",\"description\":\"Resource group: ', first(skip(split(zone.id, '/'), 4)), '\",\"value\":\"', zone.id, '\"}')))]",
										"required": false
									},
									"visible": true
								},
								{
									"name": "storageHeader",
									"type": "Microsoft.Common.TextBlock",
									"visible": "[or(steps('basics').features.recoveryServices, steps('basics').features.azureFiles, steps('basics').features.storageQuotaAutomation)]",
									"options": {
										"text": "<u>Azure Storage</u>"
									}
								},
								{
									"name": "azureBlob",
									"type": "Microsoft.Common.DropDown",
									"visible": "[or(steps('basics').features.customImage, steps('basics').features.recoveryServices, steps('basics').features.storageQuotaAutomation)]",
									"label": "Azure Blob Storage",
									"multiLine": true,
									"toolTip": "Select the existing Private DNS Zone for Azure Blob Storage.",
									"constraints": {
										"allowedValues": "[map(filter(steps('privateDNSZones').zones.privateDNSZonesApi.value, (zone) => contains(zone.name, 'privatelink.blob.')), (zone) => parse(concat('{\"label\":\"', zone.name, '\",\"description\":\"Resource group: ', first(skip(split(zone.id, '/'), 4)), '\",\"value\":\"', zone.id, '\"}')))]",
										"required": false
									}
								},
								{
									"name": "azureFiles",
									"type": "Microsoft.Common.DropDown",
									"visible": "[or(steps('basics').features.azureFiles, steps('basics').features.storageQuotaAutomation)]",
									"label": "Azure Files",
									"multiLine": true,
									"toolTip": "Select the existing Private DNS Zone for Azure Files.",
									"constraints": {
										"allowedValues": "[map(filter(steps('privateDNSZones').zones.privateDNSZonesApi.value, (zone) => contains(zone.name, 'privatelink.file.')), (zone) => parse(concat('{\"label\":\"', zone.name, '\",\"description\":\"Resource group: ', first(skip(split(zone.id, '/'), 4)), '\",\"value\":\"', zone.id, '\"}')))]",
										"required": false
									}
								},
								{
									"name": "azureQueue",
									"type": "Microsoft.Common.DropDown",
									"visible": "[or(steps('basics').features.recoveryServices, steps('basics').features.storageQuotaAutomation)]",
									"label": "Azure Queue Storage",
									"multiLine": true,
									"toolTip": "Select the existing Private DNS Zone for Azure Queue Storage.",
									"constraints": {
										"allowedValues": "[map(filter(steps('privateDNSZones').zones.privateDNSZonesApi.value, (zone) => contains(zone.name, 'privatelink.queue.')), (zone) => parse(concat('{\"label\":\"', zone.name, '\",\"description\":\"Resource group: ', first(skip(split(zone.id, '/'), 4)), '\",\"value\":\"', zone.id, '\"}')))]",
										"required": false
									}
								},
								{
									"name": "azureTable",
									"type": "Microsoft.Common.DropDown",
									"visible": "[steps('basics').features.storageQuotaAutomation]",
									"label": "Azure Table Storage",
									"multiLine": true,
									"toolTip": "Select the existing Private DNS Zone for Azure Table Storage.",
									"constraints": {
										"allowedValues": "[map(filter(steps('privateDNSZones').zones.privateDNSZonesApi.value, (zone) => contains(zone.name, 'privatelink.table.')), (zone) => parse(concat('{\"label\":\"', zone.name, '\",\"description\":\"Resource group: ', first(skip(split(zone.id, '/'), 4)), '\",\"value\":\"', zone.id, '\"}')))]",
										"required": false
									}
								},
								{
									"name": "avdPrivateLinkHeader",
									"type": "Microsoft.Common.TextBlock",
									"visible": "[steps('basics').features.avdPrivateLink]",
									"options": {
										"text": "<u>Azure Virtual Desktop Private Link</u>"
									}
								},
								{
									"name": "avdFeedAndConnections",
									"type": "Microsoft.Common.DropDown",
									"visible": "[steps('basics').features.avdPrivateLink]",
									"label": "AVD Private Link Feed and HostPool Connections",
									"multiLine": true,
									"toolTip": "Select the existing Private DNS Zone for the Remote Session connection and Workspace Feed (if applicable).",
									"constraints": {
										"allowedValues": "[map(filter(steps('privateDNSZones').zones.privateDNSZonesApi.value, (zone) => contains(zone.name, 'privatelink.wvd.')), (zone) => parse(concat('{\"label\":\"', zone.name, '\",\"description\":\"Resource group: ', first(skip(split(zone.id, '/'), 4)), '\",\"value\":\"', zone.id, '\"}')))]",
										"required": false
									}
								},
								{
									"name": "globalFeed",
									"type": "Microsoft.Common.DropDown",
									"visible": "[steps('basics').features.avdPrivateLink]",
									"label": "AVD Private Link Global Feed",
									"defaultValue": "",
									"multiLine": true,
									"toolTip": "Select the existing Private DNS Zone for the global Feed.",
									"constraints": {
										"allowedValues": "[map(filter(steps('privateDNSZones').zones.privateDNSZonesApi.value, (zone) => contains(zone.name, 'privatelink-global.wvd.')), (zone) => parse(concat('{\"label\":\"', zone.name, '\",\"description\":\"Resource group: ', first(skip(split(zone.id, '/'), 4)), '\",\"value\":\"', zone.id, '\"}')))]",
										"required": false
									}
								},
								{
									"name": "functionAppsHeader",
									"type": "Microsoft.Common.TextBlock",
									"visible": "[steps('basics').features.storageQuotaAutomation]",
									"options": {
										"text": "<u>Websites (Function Apps)</u>"
									}
								},
								{
									"name": "azureWebApp",
									"type": "Microsoft.Common.DropDown",
									"visible": "[steps('basics').features.storageQuotaAutomation]",
									"label": "Azure Web App",
									"multiLine": true,
									"toolTip": "Select the existing Private DNS Zone for Azure Function Apps",
									"constraints": {
										"allowedValues": "[map(filter(steps('privateDNSZones').zones.privateDNSZonesApi.value, (zone) => or(startsWith(zone.name, 'privatelink.azurewebsites.'), startsWith(zone.name, 'privatelink.appservice.'))), (zone) => parse(concat('{\"label\":\"', zone.name, '\",\"description\":\"Resource group: ', first(skip(split(zone.id, '/'), 4)), '\",\"value\":\"', zone.id, '\"}')))]",
										"required": false
									}
								},
								{
									"name": "deployMissingZones",
									"type": "Microsoft.Common.CheckBox",
									"defaultValue": true,
									"label": "Deploy any missing Private DNS Zones",
									"toolTip": "Select this box to automatically deploy any missing Private DNS Zones to the subscription above.",
									"visible": "[or(if(equals(steps('basics').features.recoveryServices, true), empty(steps('privateDNSZones').zones.azureBackup), false), if(or(equals(steps('basics').features.customImage, true), equals(steps('basics').features.recoveryServices, true), equals(steps('basics').features.storageQuotaAutomation, true)), empty(steps('privateDNSZones').zones.azureBlob), false), if(or(equals(steps('basics').features.azureFiles, true), equals(steps('basics').features.storageQuotaAutomation, true)), empty(steps('privateDNSZones').zones.azureFiles), false), if(or(equals(steps('basics').features.recoveryServices, true), equals(steps('basics').features.storageQuotaAutomation, true)), empty(steps('privateDNSZones').zones.azureQueue), false), if(equals(steps('basics').features.storageQuotaAutomation, true), empty(steps('privateDNSZones').zones.azureTable), false), empty(steps('privateDNSZones').zones.azureKeyVault), if(equals(steps('basics').features.avdPrivateLink, true), or(empty(steps('privateDNSZones').zones.avdFeedAndConnections), empty(steps('privateDNSZones').zones.globalFeed)), false), if(equals(steps('basics').features.storageQuotaAutomation, true), empty(steps('privateDNSZones').zones.azureWebApp), false))]"
								},
								{
									"type": "Microsoft.Common.ResourceGroupSelector",
									"name": "resourceGroup",
									"allowedMode": "Both",
									"required": false,
									"scope": {
										"subscriptionId": "[steps('privateDNSZones').zones.subscription.subscriptionId]"
									},
									"visible": "[equals(steps('privateDNSZones').zones.deployMissingZones, true)]"
								},
								{
									"name": "linkOptions",
									"type": "Microsoft.Common.OptionsGroup",
									"label": "Private DNS Zone Link Option",
									"defaultValue": "[if(steps('virtualNetwork').deployVnet, if(steps('virtualNetwork').deploy.peerVnetToHub, 'Link to Hub Vnet', 'Link to New Vnet'), if(steps('privateDNSZones').zones.deployMissingZones, 'Select existing Vnet', 'Do not update VNet Links'))]",
									"toolTip": "",
									"constraints": {
										"allowedValues": "[if(steps('virtualNetwork').deployVnet, if(steps('virtualNetwork').deploy.peerVnetToHub, parse('[{\"label\":\"Link to Hub Vnet\",\"value\":\"hub\"},{\"label\":\"Link to New Vnet\",\"value\":\"newVnet\"},{\"label\":\"Select Existing Vnet\",\"value\":\"other\"},{\"label\":\"Do not update VNet Links\",\"value\":\"NoLinks\"}]'), parse('[{\"label\":\"Link to New Vnet\",\"value\":\"newVnet\"},{\"label\":\"Select Existing Vnet\",\"value\":\"other\"},{\"label\":\"Do not update VNet Links\",\"value\":\"NoLinks\"}]')), parse('[{\"label\":\"Select Existing Vnet\",\"value\":\"other\"},{\"label\":\"Do not update VNet Links\",\"value\":\"NoLinks\"}]'))]"
									}
								},
								{
									"name": "privateDnsZoneLinkVnet",
									"type": "Microsoft.Solutions.ResourceSelector",
									"label": "Private DNS Zones Virtual Network Link",
									"resourceType": "Microsoft.Network/virtualNetworks",
									"toolTip": "Select the virtual network to which the private dns zones created above should be linked.",
									"scope": {
										"location": "[steps('basics').scope.location.name]"
									},
									"constraints": {
										"required": true
									},
									"visible": "[equals(steps('privateDNSZones').zones.linkOptions, 'other')]"
								}
							]
						}
					]
				},
				{
					"name": "tags",
					"label": "Tags",
					"elements": [
						{
							"name": "tags",
							"type": "Microsoft.Common.TagsByResource",
							"resources": [
								"Microsoft.Network/ddosProtectionPlans",
								"Microsoft.Network/natGateways",
								"Microsoft.Network/networkSecurityGroups",
								"Microsoft.Network/privateDnsZones",
								"Microsoft.Network/publicIPAddresses",
								"Microsoft.Network/routeTables",
								"Microsoft.Resources/resourceGroups",
								"Microsoft.Network/virtualNetworks"
							]
						}
					]
				}
			]
		},
		"outputs": {
			"parameters": {
				"deployVnet": "[steps('virtualNetwork').deployVnet]",
				"deployVnetResourceGroup": "[if(and(steps('virtualNetwork').deployVnet, equals(steps('virtualNetwork').deploy.resourceGroup.mode, 'New')), true, false)]",
				"vnetResourceGroupName": "[if(steps('virtualNetwork').deployVnet, steps('virtualNetwork').deploy.resourceGroup.value.name, '')]",
				"vnetName": "[if(steps('virtualNetwork').deployVnet, if(and(steps('basics').features.privateEndpoints, steps('basics').features.storageQuotaAutomation), steps('virtualNetwork').deploy.vnetFunctionApp.name, if(steps('basics').features.privateEndpoints, steps('virtualNetwork').deploy.vnetPrivateEndpoints.name, steps('virtualNetwork').deploy.vnetMinimum.name)), '')]",
				"vnetAddressPrefixes": "[if(steps('virtualNetwork').deployVnet, if(and(steps('basics').features.privateEndpoints, steps('basics').features.storageQuotaAutomation), steps('virtualNetwork').deploy.vnetFunctionApp.addressPrefixes, if(steps('basics').features.privateEndpoints, steps('virtualNetwork').deploy.vnetPrivateEndpoints.addressPrefixes, steps('virtualNetwork').deploy.vnetMinimum.addressPrefixes)), '')]",
				"hostsSubnet": "[if(steps('virtualNetwork').deployVnet, if(and(steps('basics').features.privateEndpoints, steps('basics').features.storageQuotaAutomation), steps('virtualNetwork').deploy.vnetFunctionApp.subnets.subnet1, if(steps('basics').features.privateEndpoints, steps('virtualNetwork').deploy.vnetPrivateEndpoints.subnets.subnet1, steps('virtualNetwork').deploy.vnetMinimum.subnets.subnet1)), parse('{}'))]",
				"privateEndpointsSubnet": "[if(and(steps('basics').features.privateEndpoints, steps('basics').features.storageQuotaAutomation), steps('virtualNetwork').deploy.vnetFunctionApp.subnets.subnet2, if(steps('basics').features.privateEndpoints, steps('virtualNetwork').deploy.vnetPrivateEndpoints.subnets.subnet2, parse('{}')))]",
				"functionAppSubnet": "[if(steps('virtualNetwork').deployVnet, if(steps('basics').features.storageQuotaAutomation, steps('virtualNetwork').deploy.vnetFunctionApp.subnets.subnet3, parse('{}')), parse('{}'))]",
				"defaultRouting": "[if(steps('virtualNetwork').deployVnet, steps('virtualNetwork').deploy.defaultRouteType, 'default')]",
				"nvaIPAddress": "[if(steps('virtualNetwork').deployVnet, if(equals(steps('virtualNetwork').deploy.defaultRouteType, 'nva'), steps('virtualNetwork').deploy.nvaIPAddress, ''), '')]",
				"customDNSServers": "[if(steps('virtualNetwork').deployVnet, map(filter(steps('virtualNetwork').deploy.dnsServers, (item) => not(empty(item.ipAddress))), (item) => item.ipAddress), parse('[]'))]",
				"deployDDoSNetworkProtection": "[if(steps('virtualNetwork').deployVnet, steps('virtualNetwork').deploy.deployDDoSNetworkProtection, false)]",
				"hubVnetResourceId": "[if(steps('virtualNetwork').deployVnet, if(steps('virtualNetwork').deploy.peerVnetToHub, steps('virtualNetwork').deploy.hubVnet.id, ''), '')]",
				"virtualNetworkGatewayOnHub": "[if(steps('virtualNetwork').deployVnet, if(steps('virtualNetwork').deploy.peerVnetToHub, steps('virtualNetwork').deploy.hubVirtualNetworkGateway, ''), '')]",
				"logAnalyticsWorkspaceId": "[if(and(steps('virtualNetwork').deployVnet, steps('virtualNetwork').deploy.collectNSGDiagLogs), steps('virtualNetwork').deploy.logAnalyticsWorkspace.id, '')]",
				"nameConvResTypeAtEnd": "[if(steps('virtualNetwork').deployVnet, steps('virtualNetwork').deploy.nameConvResTypeAtEnd, false)]",
				"privateDNSZonesSubscriptionId": "[if(and(steps('basics').features.privateEndpoints, steps('privateDNSZones').zones.deployMissingZones), steps('privateDNSZones').zones.subscription.subscriptionId, '')]",
				"deployPrivateDNSZonesResourceGroup": "[if(and(steps('basics').features.privateEndpoints, steps('privateDNSZones').zones.deployMissingZones, equals(steps('privateDNSZones').zones.resourceGroup.mode, 'New')), true, false)]",
				"privateDNSZonesResourceGroupName": "[if(and(steps('basics').features.privateEndpoints, steps('privateDNSZones').zones.deployMissingZones), steps('privateDNSZones').zones.resourceGroup.value.name, '')]",
				"createAzureBackupZone": "[if(and(steps('basics').features.recoveryServices, steps('privateDNSZones').zones.deployMissingZones), empty(steps('privateDNSZones').zones.azureBackup), false)]",
				"azureRecoveryServicesGeoCode": "[if(and(startsWith(toLower(steps('basics').scope.location.name), 'us'), steps('basics').features.recoveryServices, empty(steps('privateDNSZones').zones.azureBackup), steps('privateDNSZones').zones.deployMissingZones), steps('privateDNSZones').zones.azureRecoveryServicesGeoCode, '')]",
				"azureBackupZoneId": "[if(steps('basics').features.recoveryServices, steps('privateDNSZones').zones.azureBackup, '')]",
				"createAzureBlobZone": "[if(and(or(steps('basics').features.customImage, steps('basics').features.recoveryServices, steps('basics').features.storageQuotaAutomation), steps('privateDNSZones').zones.deployMissingZones), empty(steps('privateDNSZones').zones.azureBlob), false)]",
				"azureBlobZoneId": "[if(or(steps('basics').features.customImage, steps('basics').features.recoveryServices, steps('basics').features.storageQuotaAutomation), steps('privateDNSZones').zones.azureBlob, '')]",
				"createAzureFilesZone": "[if(and(or(steps('basics').features.azureFiles, steps('basics').features.storageQuotaAutomation), steps('privateDNSZones').zones.deployMissingZones), empty(steps('privateDNSZones').zones.azureFiles), false)]",
				"azureFilesZoneId": "[if(or(steps('basics').features.azureFiles, steps('basics').features.storageQuotaAutomation), steps('privateDNSZones').zones.azureFiles, '')]",
				"createAzureQueueZone": "[if(and(or(steps('basics').features.recoveryServices, steps('basics').features.storageQuotaAutomation), steps('privateDNSZones').zones.deployMissingZones), empty(steps('privateDNSZones').zones.azureQueue), false)]",
				"azureQueueZoneId": "[if(or(steps('basics').features.recoveryServices, steps('basics').features.storageQuotaAutomation), steps('privateDNSZones').zones.azureQueue, '')]",
				"createAzureTableZone": "[if(and(steps('basics').features.storageQuotaAutomation, steps('privateDNSZones').zones.deployMissingZones), empty(steps('privateDNSZones').zones.azureTable), false)]",
				"azureTableZoneId": "[if(steps('basics').features.storageQuotaAutomation, steps('privateDNSZones').zones.azureTable, '')]",
				"createAzureKeyVaultZone": "[if(steps('privateDNSZones').zones.deployMissingZones, empty(steps('privateDNSZones').zones.azureKeyVault), false)]",
				"azureKeyVaultZoneId": "[steps('privateDNSZones').zones.azureKeyVault]",
				"createAvdFeedZone": "[if(and(steps('basics').features.avdPrivateLink, steps('privateDNSZones').zones.deployMissingZones), empty(steps('privateDNSZones').zones.avdFeedAndConnections), false)]",
				"avdFeedZoneId": "[if(steps('basics').features.avdPrivateLink, steps('privateDNSZones').zones.avdFeedAndConnections, '')]",
				"createAvdGlobalFeedZone": "[if(and(steps('basics').features.avdPrivateLink, steps('privateDNSZones').zones.deployMissingZones), empty(steps('privateDNSZones').zones.globalFeed), false)]",
				"avdGlobalFeedZoneId": "[if(steps('basics').features.avdPrivateLink, steps('privateDNSZones').zones.globalFeed, '')]",
				"createAzureWebAppZone": "[if(and(steps('basics').features.storageQuotaAutomation, steps('privateDNSZones').zones.deployMissingZones), empty(steps('privateDNSZones').zones.azureWebApp), false)]",
				"azureWebAppZoneId": "[if(steps('basics').features.storageQuotaAutomation, steps('privateDNSZones').zones.azureWebApp, '')]",
				"linkPrivateDnsZonesToNewVnet": "[if(steps('virtualNetwork').deployVnet, equals(steps('privateDNSZones').zones.linkOptions, 'newVnet'), false)]",
				"privateDnsZonesVnetId": "[if(equals(steps('privateDNSZones').zones.linkOptions, 'other'), steps('privateDNSZones').zones.privateDnsZoneLinkVnet.id, if(equals(steps('privateDNSZones').zones.linkOptions, 'hub'), steps('virtualNetwork').deploy.hubVnet.id, ''))]",
				"tags": "[steps('tags').tags]"
			},
			"kind": "Subscription",
			"location": "[steps('basics').scope.location.name]",
			"subscriptionId": "[steps('basics').scope.subscription.id]"
		}
	}
}