{
	"$schema": "https://schema.management.azure.com/schemas/2021-09-09/uiFormDefinition.schema.json",
	"view": {
		"kind": "Form",
		"properties": {
			"title": "Azure Virtual Desktop Host Pool",
			"steps": [
				{
					"name": "basics",
					"label": "Deployment Basics",
					"elements": [
						{
							"name": "infoBox1",
							"type": "Microsoft.Common.TextBlock",
							"visible": true,
							"options": {
								"text": "Please select your deployment type below.<ul><li><b>Complete</b>: This solution will deploy a fully functioning Azure Virtual Desktop hostpool along with associated resources depending on the options chosen. All resources and resource groups are named in accordance with Cloud Adoption Framework (CAF) naming standards.</li><li><b>Add session hosts to an existing hostpool</b>: The solution will only add session hosts to an existing hostpool allowing you to select existing resources when required to customize your session hosts.</li></ul>"
							}
						},
						{
							"name": "deploymentType",
							"type": "Microsoft.Common.OptionsGroup",
							"label": "Deployment Mode",
							"defaultValue": "Complete",
							"toolTip": "Select the Deployment Type",
							"constraints": {
								"allowedValues": [
									{
										"label": "Complete",
										"value": "Complete"
									},
									{
										"label": "Add session hosts to an existing hostpool",
										"value": "SessionHostsOnly"
									}
								]
							},
							"visible": true
						},
						{
							"name": "scope",
							"type": "Microsoft.Common.ResourceScope",
							"instanceDetailsLabel": "Deployment Details",
							"location": {
								"label": "[if(equals(steps('basics').deploymentType, 'Complete'), 'Region (Session Hosts, Storage, and Management Resources)', 'Virtual Machines Region')]",
								"resourceTypes": [
									"Microsoft.resources/resourceGroups"
								]
							}
						},
						{
							"name": "subscriptionsApi",
							"type": "Microsoft.Solutions.ArmApiControl",
							"request": {
								"method": "GET",
								"path": "/subscriptions?api-version=2022-12-01"
							}
						},
						{
							"name": "encryptionAtHostFeatureApi",
							"type": "Microsoft.Solutions.ArmApiControl",
							"condition": "[not(empty(steps('basics').scope.subscription))]",
							"request": {
								"method": "GET",
								"path": "[concat(steps('basics').scope.subscription.id, '/providers/Microsoft.Features/providers/Microsoft.Compute/features/encryptionAtHost?api-version=2021-07-01')]"
							}
						},
						{
							"name": "resourceGroupsApi",
							"type": "Microsoft.Solutions.ArmApiControl",
							"condition": "[equals(steps('basics').deploymentType, 'SessionHostsOnly')]",
							"request": {
								"method": "GET",
								"path": "[concat(steps('basics').scope.subscription.id, '/resourcegroups?api-version=2021-04-01')]",
								"transforms": {
									"list": "value|[*].{label:name, value:id}"
								}
							}
						},
						{
							"name": "resourceGroup",
							"type": "Microsoft.Common.DropDown",
							"label": "Virtual Machine Resource Group",
							"constraints": {
								"allowedValues": "[steps('basics').resourceGroupsApi.transformed.list]",
								"required": true
							},
							"visible": "[equals(steps('basics').deploymentType, 'SessionHostsOnly')]"
						},
						{
							"name": "prereqs",
							"type": "Microsoft.Common.Section",
							"label": "Solution Prerequisites",
							"visible": "[equals(steps('basics').deploymentType, 'Complete')]",
							"elements": [
								{
									"name": "textBlock1",
									"type": "Microsoft.Common.TextBlock",
									"visible": true,
									"options": {
										"text": "This solution has several prerequisites documented at the link below.",
										"link": {
											"label": "Prerequisites for Azure Virtual Desktop",
											"uri": "https://learn.microsoft.com/en-us/azure/virtual-desktop/prerequisites"
										}
									}
								},
								{
									"name": "desktopVirtualizationProviderApi",
									"type": "Microsoft.Solutions.ArmApiControl",
									"condition": "[not(empty(steps('basics').scope.subscription))]",
									"request": {
										"method": "GET",
										"path": "[concat(steps('basics').scope.subscription.id, '/providers/Microsoft.DesktopVirtualization?api-version=2021-04-01')]"
									}
								},
								{
									"name": "desktopVirtualizationResourceProviderNotRegisteredErrorBox",
									"type": "Microsoft.Common.InfoBox",
									"visible": "[not(equals(steps('basics').prereqs.desktopVirtualizationProviderApi.registrationState, 'Registered'))]",
									"options": {
										"style": "Error",
										"text": "The Desktop Virtualization Resource Provider is not registered. Follow the instructions in the link to register the resource provider",
										"uri": "https://learn.microsoft.com/en-us/azure/virtual-desktop/prerequisites?tabs=portal"
									}
								},
								{
									"name": "avdServicePrincipalsApi",
									"type": "Microsoft.Solutions.GraphApiControl",
									"request": {
										"method": "GET",
										"path": "/v1.0/servicePrincipals?$filter=startsWith(displayName, 'Azure Virtual Desktop')&$select=displayName,id",
										"transforms": {
											"avd": "[value[?displayName=='Azure Virtual Desktop'] | [0].id]",
											"avdARMProvider": "[value[?displayName=='Azure Virtual Desktop ARM Provider'] | [0].id]"
										}
									}
								},
								{
									"name": "servicePrincipalPickerBlade",
									"type": "Microsoft.Solutions.BladeInvokeControl",
									"openBladeStatus": "[steps('basics').prereqs.servicePrincipalSelector.changing]",
									"bladeReference": {
										"name": "ObjectPickerBlade",
										"extension": "Microsoft_AAD_IAM",
										"parameters": {
											"queries": 4,
											"bladeSubtitle": "Pick the Service Principal",
											"additionalQueriesOnSearch": 0,
											"advancedQueryOptions": {},
											"selectionMaximum": 1,
											"selectionMinimum": 1,
											"bladeTitle": "Select the Service Principal",
											"informationHeader": {
												"informationText": "Select the 'Azure Virtual Desktop' service principal."
											},
											"searchBoxLabel": "Search for the 'Azure Virtual Desktop' service principal",
											"searchBoxPlaceHolderText": "Enter 'Azure Virtual Desktop'",
											"searchGridNoRowsMessage": "No Service Principals found",
											"selectButtonText": "Select Service Principal",
											"selectedGridLabel": "Selected Service Principal",
											"selectedGridNoRowsMessage": "You must select the 'Azure Virtual Desktop' service principal"
										}
									},
									"transforms": {
										"selection": "selectedObjects|[*].{displayName:displayName,id:id}"
									}
								},
								{
									"name": "servicePrincipalSelector",
									"type": "Microsoft.Common.Selector",
									"label": "Select the <b>Azure Virtual Desktop</b> Service Principal",
									"keyPath": "displayName",
									"value": "[steps('basics').prereqs.servicePrincipalPickerBlade.transformed.selection]",
									"barColor": "[if(empty(steps('basics').prereqs.servicePrincipalPickerBlade), '#FF0000', '#7fba00')]",
									"constraints": {
										"required": true
									},
									"link": "[if(empty(steps('basics').prereqs.servicePrincipalPickerBlade), 'Select Service Principal', first(map(steps('basics').prereqs.servicePrincipalPickerBlade.transformed.selection, (sp) => sp.displayName)))]",
									"visible": "[empty(first(steps('basics').prereqs.avdServicePrincipalsApi.value))]"
								}
							]
						},
						{
							"name": "naming",
							"type": "Microsoft.Common.Section",
							"label": "Naming Components",
							"visible": "[equals(steps('basics').deploymentType, 'Complete')]",
							"elements": [
								{
									"name": "namingIntroTextBlock",
									"type": "Microsoft.Common.TextBlock",
									"visible": true,
									"options": {
										"link": {
											"label": "User Personas | Microsoft Learn",
											"uri": "https://learn.microsoft.com/en-us/azure/cloud-adoption-framework/scenarios/azure-virtual-desktop/migrate-assess#user-personas"
										},
										"text": "Please provide the naming components below.<br><br>The Persona Identifier is required and is designed to represent the persona being provided resources by the host pool. Each persona requires a specific host-pool configuration. Defining personas (and thus host pools) will come as a result of bucketing users based on the following criteria:<ul><li><b>Personal Pools:</b> Do specific groups of users require dedicated desktops, instead of pools?</li><li><b>Density:</b> Do specific groups of users require a lower-density desktop experience?</li><li><b>Performance:</b> Do specific groups of users require a higher-performance desktop experience?</li><li><b>Graphical processing (GPU):</b> Do specific groups of users have greater graphical requirements?</li><li><b>Business functions:</b> Can the specific groupings of users be bucketed by business unit, charge code, or their business function?</li><li><b>User count:</b> How many users will be in each distinct persona?</li><li><b>Max session counts:</b> Based on geography and hours of operation, how many concurrent users are expected for each persona during maximum load?</li></ul>"
									}
								},
								{
									"name": "identifier",
									"type": "Microsoft.Common.TextBox",
									"label": "Persona Identifier",
									"toolTip": "Input an alphanumeric identifier for the business unit or the persona for which the hostpool will be deployed.",
									"constraints": {
										"required": true,
										"validations": [
											{
												"regex": "^[a-zA-Z0-9]+(-[a-zA-Z0-9]+)*$",
												"message": "Only alphanumeric characters and dashes '-' are allowed. Dashes must only be specified between alphanumeric characters."
											},
											{
												"isValid": "[not(greater(add(length(steps('basics').naming.identifier), length(steps('basics').naming.index)), 9))]",
												"message": "The total length of the identifier and index cannot exceed 9 characters."
											}
										]
									}
								},
								{
									"name": "indexTextBlock",
									"type": "Microsoft.Common.TextBlock",
									"visible": true,
									"options": {
										"link": {
											"label": "Sharding pattern - Azure Architecture Center | Microsoft Learn",
											"uri": "https://learn.microsoft.com/en-us/azure/architecture/patterns/sharding"
										},
										"text": "Optionally, if you need to provide more than one host pool for the same persona, you should use the HostPool Index value below."
									}
								},
								{
									"name": "index",
									"type": "Microsoft.Common.TextBox",
									"label": "HostPool Index",
									"toolTip": "Input a numeric index value for the hostpool created by this solution.",
									"constraints": {
										"required": false,
										"validations": [
											{
												"regex": "^\\d{0,2}$",
												"message": "Only a blank value or an integer value from 0 to 99 are allowed."
											}
										]
									}
								},
								{
									"name": "cafTextBlock",
									"type": "Microsoft.Common.TextBlock",
									"visible": true,
									"options": {
										"text": "The Cloud Adoption Framework (CAF) provides a recommended resource naming convention which specifies that the abbreviation for the resource type is listed first in the name. This solution automatically names resources using the CAF naming convention and suggested resource type abbreviations. Some customers have chosen to move the resource type to the end of the resource names. Select 'Yes' below to ensure that resources are named with this reverse convention or leave it set to 'No' to follow the CAF.",
										"link": {
											"label": "Resource Naming | Microsoft Learn",
											"uri": "https://learn.microsoft.com/en-us/azure/cloud-adoption-framework/ready/azure-best-practices/resource-naming"
										}
									}
								},
								{
									"name": "nameConvResTypeAtEnd",
									"type": "Microsoft.Common.OptionsGroup",
									"label": "Move the Resource Type to the end of resource names",
									"defaultValue": "No",
									"toolTip": "",
									"constraints": {
										"allowedValues": [
											{
												"label": "Yes",
												"value": true
											},
											{
												"label": "No",
												"value": false
											}
										],
										"required": true
									},
									"visible": true
								}
							]
						}
					]
				},
				{
					"name": "controlPlane",
					"label": "Control Plane",
					"elements": [
						{
							"name": "existingHostPool",
							"type": "Microsoft.Solutions.ResourceSelector",
							"visible": "[equals(steps('basics').deploymentType, 'SessionHostsOnly')]",
							"label": "Hostpool to update",
							"resourceType": "Microsoft.DesktopVirtualization/hostPools",
							"constraints": {
								"required": true
							}
						},
						{
							"name": "hostPoolApi",
							"type": "Microsoft.Solutions.ArmApiControl",
							"condition": "[not(empty(steps('controlPlane').existingHostPool))]",
							"request": {
								"method": "GET",
								"path": "[concat(steps('controlPlane').existingHostPool.id, '?api-version=2024-04-03')]"
							}
						},
						{
							"name": "workspacesApi",
							"type": "Microsoft.Solutions.ArmApiControl",
							"condition": "[not(empty(steps('basics').scope.subscription))]",
							"request": {
								"method": "GET",
								"path": "[concat(steps('basics').scope.subscription.id, '/providers/Microsoft.DesktopVirtualization/workspaces?api-version=2022-02-10-preview')]"
							}
						},
						{
							"type": "Microsoft.Common.LocationSelector",
							"name": "location",
							"label": "Region (Control Plane)",
							"resourceTypes": [
								"Microsoft.DesktopVirtualization/Workspaces",
								"Microsoft.DesktopVirtualization/Hostpools"
							],
							"scope": {
								"subscriptionId": "[steps('basics').scope.subscription.subscriptionId]"
							},
							"visible": "[equals(steps('basics').deploymentType, 'Complete')]"
						},
						{
							"name": "workspace",
							"type": "Microsoft.Common.Section",
							"label": "Workspace",
							"visible": "[and(equals(steps('basics').deploymentType, 'Complete'), not(empty(filter(steps('controlPlane').workspacesApi.value, (ws) => equals(ws.location, steps('controlPlane').location.name)))))]",
							"elements": [
								{
									"name": "textBlock1",
									"type": "Microsoft.Common.TextBlock",
									"options": {
										"text": "There is an existing AVD workspace that matches the naming convention and is in the control plane region you selected. This solution allows you to update the application group references of an existing AVD Workspace or create a new Workspace. Select the appropriate option below."
									}
								},
								{
									"name": "createOption",
									"type": "Microsoft.Common.OptionsGroup",
									"label": "Workspace Creation Option",
									"defaultValue": "Update an existing Workspace",
									"toolTip": "",
									"constraints": {
										"allowedValues": [
											{
												"label": "Create a new Workspace",
												"value": "new"
											},
											{
												"label": "Update an existing Workspace",
												"value": "update"
											}
										],
										"required": true
									}
								},
								{
									"name": "warningBox1",
									"type": "Microsoft.Common.InfoBox",
									"visible": "[equals(steps('controlPlane').workspace.createOption, 'new')]",
									"options": {
										"style": "Warning",
										"text": "When you choose create to create a new workspace this solution will overwrite any existing application group references <u>if the workspace already exists</u>. This could cause an outage if existing hostpools and application groups are already registered with this workspace."
									}
								},
								{
									"name": "textBlock2",
									"type": "Microsoft.Common.TextBlock",
									"visible": "[equals(steps('controlPlane').workspace.createOption, 'update')]",
									"options": {
										"text": "Select an existing AVD Workspace below to which the Desktop Application Group will be registered."
									}
								},
								{
									"name": "existingWorkspace",
									"type": "Microsoft.Common.DropDown",
									"label": "Existing AVD Workspace",
									"multiLine": true,
									"toolTip": "Select the existing AVD Workspace to update with the Desktop Application Group deployed via this solution.",
									"constraints": {
										"required": true,
										"allowedValues": "[map(filter(steps('controlPlane').workspacesApi.value, (ws) => equals(ws.location, steps('controlPlane').location.name)), (vdws) => parse(concat('{\"label\":\"', vdws.name, '\",\"description\":\"Friendly Name: ', vdws.properties.friendlyName, ', Resource Group: ', first(skip(split(vdws.id, '/'), 4)), '\",\"value\":\"', vdws.id, '\"}')))]"
									},
									"visible": "[equals(steps('controlPlane').workspace.createOption, 'update')]"
								}
							]
						},
						{
							"name": "naming",
							"type": "Microsoft.Common.Section",
							"visible": "[equals(steps('basics').deploymentType, 'Complete')]",
							"label": "Naming",
							"elements": [
								{
									"name": "workspaceFriendlyName",
									"type": "Microsoft.Common.TextBox",
									"label": "Workspace Friendly Name",
									"toolTip": "Input the friendly name for the AVD workspace that will be displayed in the end user's client.",
									"constraints": {
										"required": false,
										"regex": "^.{1,64}$",
										"validationMessage": "The value must be between 1 and 64 characters in length."
									},
									"visible": "[not(equals(steps('controlPlane').workspace.createOption, 'update'))]"
								},
								{
									"name": "desktopFriendlyName",
									"type": "Microsoft.Common.TextBox",
									"label": "Session Desktop Friendly Name",
									"defaultValue": "",
									"toolTip": "Input the friendly name for the default SessionDesktop that will be displayed in the end user's client.",
									"constraints": {
										"required": false,
										"regex": "^.{1,20}$",
										"validationMessage": "The value must be between 1 and 20 characters in length."
									}
								}
							]
						},
						{
							"name": "hostPool",
							"type": "Microsoft.Common.Section",
							"visible": "[equals(steps('basics').deploymentType, 'Complete')]",
							"label": "Host Pool",
							"elements": [
								{
									"name": "validation",
									"type": "Microsoft.Common.CheckBox",
									"label": "Validation Environment",
									"toolTip": "Choose whether to deploy the host pool as a validation environment. This allows you test preview features for AVD before they are released to production.",
									"constraints": {
										"required": false
									}
								},
								{
									"name": "type",
									"type": "Microsoft.Common.DropDown",
									"label": "Type",
									"defaultValue": "Pooled",
									"multiLine": true,
									"toolTip": "",
									"constraints": {
										"required": true,
										"allowedValues": [
											{
												"label": "Pooled",
												"value": "Pooled"
											},
											{
												"label": "Personal",
												"value": "Personal"
											}
										]
									}
								},
								{
									"name": "loadBalancerAlgorithm",
									"type": "Microsoft.Common.DropDown",
									"visible": "[equals(steps('controlPlane').hostPool.type, 'Pooled')]",
									"label": "Load Balancing Algorithm",
									"defaultValue": "Breadth-First",
									"multiLine": true,
									"toolTip": "Breadth-first load balancing distributes new user sessions across all available session hosts in the host pool. Depth-first load balancing distributes new user sessions to an available session host with the highest number of connections but has not reached its maximum session limit threshold.",
									"constraints": {
										"required": true,
										"allowedValues": [
											{
												"label": "Breadth-First",
												"description": "Each new session is placed on the next VM. (Performance Optimized)",
												"value": "BreadthFirst"
											},
											{
												"label": "Depth-First",
												"description": "Each new session is placed on the same VM until max sessions limit. (Cost Optimized)",
												"value": "DepthFirst"
											}
										]
									}
								},
								{
									"name": "rdpProperties",
									"type": "Microsoft.Common.TextBox",
									"visible": true,
									"label": "Custom RDP properties",
									"toolTip": "Specify the configuration for the RDP properties on the AVD host pool.",
									"constraints": {
										"required": false
									}
								},
								{
									"name": "maxSessions",
									"type": "Microsoft.Common.TextBox",
									"visible": "[equals(steps('controlPlane').hostPool.type, 'Pooled')]",
									"label": "Max Session Limit",
									"defaultValue": "8",
									"toolTip": "The maximum number of users that have concurrent sessions on a session host. When setting a host pool to have depth first load balancing or planning to use Autoscaling, you must set an appropriate max session limit according to the configuration of your deployment and capacity of your VMs.",
									"constraints": {
										"required": true,
										"regex": "\\d+",
										"validationMessage": "The value must be one or more digits."
									}
								},
								{
									"name": "assignmentType",
									"type": "Microsoft.Common.DropDown",
									"visible": "[equals(steps('controlPlane').hostPool.type, 'Personal')]",
									"label": "Assignment Type",
									"defaultValue": "Automatic (Recommended)",
									"multiLine": true,
									"toolTip": "Automatic assignment - The service will select an available host and assign it to an user./nDirect assignment - Admin selects a specific host to assign to an user.",
									"constraints": {
										"required": true,
										"allowedValues": [
											{
												"label": "Automatic (Recommended)",
												"description": "Users are assigned an available VM the first time they connect.",
												"value": "Automatic"
											},
											{
												"label": "Direct",
												"description": "An administrator assigns a VM for each individual user.",
												"value": "Direct"
											}
										]
									}
								}
							]
						},
						{
							"name": "assignments",
							"type": "Microsoft.Common.Section",
							"label": "Assignments",
							"visible": "[equals(steps('basics').deploymentType, 'Complete')]",
							"elements": [
								{
									"name": "groupPickerBlade",
									"type": "Microsoft.Solutions.BladeInvokeControl",
									"openBladeStatus": "[steps('controlPlane').assignments.groupSelector.changing]",
									"bladeReference": {
										"name": "ObjectPickerBlade",
										"extension": "Microsoft_AAD_IAM",
										"parameters": {
											"queries": 32,
											"disablers": 4,
											"bladeSubtitle": "Pick the groups to assign",
											"additionalQueriesOnSearch": 0,
											"advancedQueryOptions": {
												"suggestedObjectsOptions": {}
											},
											"selectionMaximum": 3,
											"selectionMinimum": 1,
											"bladeTitle": "Select Groups",
											"informationHeader": {
												"informationText": "Select the groups to assign to the desktop application group",
												"informationLink": ""
											},
											"inviteEnabled": true,
											"searchBoxLabel": "Search for a group",
											"searchBoxPlaceHolderText": "Enter a string in the group name",
											"searchBoxTooltip": "This is the tooltip",
											"searchGridNoRowsMessage": "No groups found",
											"selectButtonText": "Select Groups",
											"selectedGridLabel": "Selected Groups",
											"selectedGridNoRowsMessage": "You must select at least one group"
										},
										"inFullScreen": false
									},
									"transforms": {
										"selection": "selectedObjects|[*].{displayName:displayName, objectId:id}"
									}
								},
								{
									"name": "groupSelector",
									"type": "Microsoft.Common.Selector",
									"label": "Select Groups",
									"keyPath": "displayName",
									"descriptionKeyPath": "id",
									"value": "[steps('controlPlane').assignments.groupPickerBlade.transformed.selection]",
									"visible": true,
									"barColor": "[if(empty(steps('controlPlane').assignments.groupPickerBlade), '#FF0000', '#7fba00')]",
									"constraints": {
										"required": true
									},
									"link": "[if(empty(steps('controlPlane').assignments.groupPickerBlade), 'Select groups', 'Re-select groups')]"
								}
							]
						},
						{
							"name": "scalingPlan",
							"type": "Microsoft.Common.Section",
							"label": "Scaling Plan",
							"elements": [
								{
									"name": "deployScalingPlan",
									"type": "Microsoft.Common.OptionsGroup",
									"label": "Deploy Scaling Plan",
									"defaultValue": "No",
									"toolTip": "Select Yes to configure and deploy a scaling plan specific to the host pool.",
									"constraints": {
										"allowedValues": [
											{
												"label": "Yes",
												"value": true
											},
											{
												"label": "No",
												"value": false
											}
										],
										"required": true
									},
									"visible": true
								},
								{
									"name": "exclusionTag",
									"type": "Microsoft.Common.TextBox",
									"label": "Tag to exclude hosts from Scaling",
									"placeholder": "",
									"defaultValue": "DoNotScale",
									"toolTip": "Use only allowed characters",
									"constraints": {
										"required": true,
										"regex": "^[a-z0-9A-Z]{1,30}$",
										"validationMessage": "Only alphanumeric characters are allowed, and the value must be 1-30 characters long."
									},
									"visible": "[steps('controlPlane').scalingPlan.deployScalingPlan]"
								},
								{
									"name": "textBlock",
									"type": "Microsoft.Common.TextBlock",
									"visible": "[steps('controlPlane').scalingPlan.deployScalingPlan]",
									"options": {
										"text": "Use the grids and selectors below to configure the Weekday Scaling Plan schedule."
									}
								},
								{
									"name": "weekdayRampUpSchedule",
									"type": "Microsoft.Common.EditableGrid",
									"ariaLabel": "Enter Weekday Schedule Information",
									"label": "Weekday Ramp Up Schedule",
									"constraints": {
										"width": "Full",
										"rows": {
											"count": {
												"min": 1,
												"max": 1
											}
										},
										"columns": [
											{
												"id": "startTime",
												"header": "Ramp Up Time",
												"width": "2fr",
												"element": {
													"type": "Microsoft.Common.TextBox",
													"placeholder": "8:00",
													"constraints": {
														"required": true,
														"validations": [
															{
																"regex": "^(0?[1-9]|1[0-9]|2[0-3]):[0-5][0-9]$",
																"message": "Must be a valid 24-hour time format without leading zeros."
															}
														]
													}
												}
											},
											{
												"id": "minimumHostsPct",
												"header": "Min % of Hosts",
												"width": "1fr",
												"element": {
													"type": "Microsoft.Common.TextBox",
													"placeholder": "20",
													"constraints": {
														"required": true,
														"validations": [
															{
																"regex": "^([1-9][0-9]?|100)$",
																"message": "Must be an integer from 1 - 100."
															}
														]
													}
												}
											},
											{
												"id": "capacityThresholdPct",
												"header": "Capacity threshold (%)",
												"width": "2fr",
												"element": {
													"type": "Microsoft.Common.TextBox",
													"placeholder": "60",
													"constraints": {
														"required": true,
														"validations": [
															{
																"regex": "^([1-9][0-9]?|100)$",
																"message": "Must be an integer from 1 - 100."
															}
														]
													}
												}
											},
											{
												"id": "loadBalancingAlgorithm",
												"header": "Load Balancing Algorithm",
												"width": "1fr",
												"element": {
													"type": "Microsoft.Common.DropDown",
													"constraints": {
														"allowedValues": [
															{
																"label": "Breadth-First",
																"value": "BreadthFirst"
															},
															{
																"label": "Depth-First",
																"value": "DepthFirst"
															}
														],
														"defaultValue": "Breadth-First",
														"required": true
													}
												}
											}
										]
									},
									"visible": "[steps('controlPlane').scalingPlan.deployScalingPlan]"
								},
								{
									"name": "weekdayPeakSchedule",
									"type": "Microsoft.Common.EditableGrid",
									"ariaLabel": "Enter Weekday Schedule Information",
									"label": "Weekday Peak Schedule",
									"constraints": {
										"width": "Full",
										"rows": {
											"count": {
												"min": 1,
												"max": 1
											}
										},
										"columns": [
											{
												"id": "startTime",
												"header": "Peak Start Time",
												"width": "5fr",
												"element": {
													"type": "Microsoft.Common.TextBox",
													"placeholder": "9:00",
													"constraints": {
														"required": true,
														"validations": [
															{
																"regex": "^(0?[1-9]|1[0-9]|2[0-3]):[0-5][0-9]$",
																"message": "Must be a valid 24-hour time format without leading zeros."
															}
														]
													}
												}
											},
											{
												"id": "loadBalancingAlgorithm",
												"header": "Load Balancing Algorithm",
												"width": "1fr",
												"element": {
													"type": "Microsoft.Common.DropDown",
													"constraints": {
														"allowedValues": [
															{
																"label": "Breadth-First",
																"value": "BreadthFirst"
															},
															{
																"label": "Depth-First",
																"value": "DepthFirst"
															}
														],
														"defaultValue": "Depth-First",
														"required": true
													}
												}
											}
										]
									},
									"visible": "[steps('controlPlane').scalingPlan.deployScalingPlan]"
								},
								{
									"name": "weekdayRampDownSchedule",
									"type": "Microsoft.Common.EditableGrid",
									"ariaLabel": "Enter Weekday Schedule Information",
									"label": "Weekday Ramp Down Schedule",
									"constraints": {
										"width": "Full",
										"rows": {
											"count": {
												"min": 1,
												"max": 1
											}
										},
										"columns": [
											{
												"id": "startTime",
												"header": "Ramp Down Start Time",
												"width": "2fr",
												"element": {
													"type": "Microsoft.Common.TextBox",
													"placeholder": "18:00",
													"constraints": {
														"required": true,
														"validations": [
															{
																"regex": "^(0?[1-9]|1[0-9]|2[0-3]):[0-5][0-9]$",
																"message": "Must be a valid 24-hour time format without leading zeros."
															}
														]
													}
												}
											},
											{
												"id": "minimumHostsPct",
												"header": "Min % of Hosts",
												"width": "1fr",
												"element": {
													"type": "Microsoft.Common.TextBox",
													"placeholder": "10",
													"constraints": {
														"required": true,
														"validations": [
															{
																"regex": "^([1-9][0-9]?|100)$",
																"message": "Must be an integer from 1 - 100."
															}
														]
													}
												}
											},
											{
												"id": "capacityThresholdPct",
												"header": "Capacity threshold (%)",
												"width": "2fr",
												"element": {
													"type": "Microsoft.Common.TextBox",
													"placeholder": "90",
													"constraints": {
														"required": true,
														"validations": [
															{
																"regex": "^([1-9][0-9]?|100)$",
																"message": "Must be an integer from 1 - 100."
															}
														]
													}
												}
											},
											{
												"id": "loadBalancingAlgorithm",
												"header": "Load Balancing Algorithm",
												"width": "1fr",
												"element": {
													"type": "Microsoft.Common.DropDown",
													"constraints": {
														"allowedValues": [
															{
																"label": "Breadth-First",
																"value": "BreadthFirst"
															},
															{
																"label": "Depth-First",
																"value": "DepthFirst"
															}
														],
														"defaultValue": "Depth-First",
														"required": true
													}
												}
											}
										]
									},
									"visible": "[steps('controlPlane').scalingPlan.deployScalingPlan]"
								},
								{
									"name": "forceLogoff",
									"type": "Microsoft.Common.OptionsGroup",
									"label": "Force Logoff during Ramp Down",
									"defaultValue": "No",
									"toolTip": "",
									"constraints": {
										"allowedValues": [
											{
												"label": "Yes",
												"value": true
											},
											{
												"label": "No",
												"value": false
											}
										],
										"required": true
									},
									"visible": "[steps('controlPlane').scalingPlan.deployScalingPlan]"
								},
								{
									"name": "minsToLogoff",
									"type": "Microsoft.Common.TextBox",
									"label": "Number of minutes before users are forcefully logged off",
									"placeholder": "30",
									"toolTip": "Use only integers",
									"constraints": {
										"required": true,
										"regex": "^(?:[1-9]|[1-9][0-9]|1[01][0-9]|120)$",
										"validationMessage": "Must be an integer from 1 - 120."
									},
									"visible": "[and(steps('controlPlane').scalingPlan.deployScalingPlan, steps('controlPlane').scalingPlan.forceLogoff)]"
								},
								{
									"name": "weekdayOffPeakSchedule",
									"type": "Microsoft.Common.EditableGrid",
									"ariaLabel": "Enter Weekday Off Peak Schedule Information",
									"label": "Weekday Off Peak Schedule",
									"constraints": {
										"width": "Full",
										"rows": {
											"count": {
												"min": 1,
												"max": 1
											}
										},
										"columns": [
											{
												"id": "startTime",
												"header": "Off Peak Start Time",
												"width": "5fr",
												"element": {
													"type": "Microsoft.Common.TextBox",
													"placeholder": "22:00",
													"constraints": {
														"required": true,
														"validations": [
															{
																"regex": "^(0?[1-9]|1[0-9]|2[0-3]):[0-5][0-9]$",
																"message": "Must be a valid 24-hour time format without leading zeros."
															}
														]
													}
												}
											},
											{
												"id": "loadBalancingAlgorithm",
												"header": "Load Balancing Algorithm",
												"width": "1fr",
												"element": {
													"type": "Microsoft.Common.DropDown",
													"constraints": {
														"allowedValues": [
															{
																"label": "Breadth-First",
																"value": "BreadthFirst"
															},
															{
																"label": "Depth-First",
																"value": "DepthFirst"
															}
														],
														"defaultValue": "Depth-First",
														"required": true
													}
												}
											}
										]
									},
									"visible": "[steps('controlPlane').scalingPlan.deployScalingPlan]"
								}
							],
							"visible": "[and(equals(steps('basics').deploymentType, 'Complete'), equals(steps('controlPlane').hostPool.type, 'Pooled'))]"
						}
					]
				},
				{
					"name": "hosts",
					"label": "Session Hosts",
					"elements": [
						{
							"name": "resourceSkusApi",
							"type": "Microsoft.Solutions.ArmApiControl",
							"condition": "[and(not(empty(steps('basics').scope.subscription)), not(empty(steps('basics').scope.location)))]",
							"request": {
								"method": "GET",
								"path": "[concat(steps('basics').scope.subscription.id, '/providers/Microsoft.Compute/skus?api-version=2021-07-01&$filter=location eq ', decodeUriComponent('%27'), steps('basics').scope.location.name, decodeUriComponent('%27'))]",
								"transforms": {
									"confidentialVMSizes": "value[?resourceType=='virtualMachines'&&ends_with(name, `v5`)&&(starts_with(name, `Standard_DC`)||starts_with(name, `Standard_EC`)||starts_with(name, `Standard_NCC`))]|[*].{label:name, value:name}"
								}
							}
						},
						{
							"name": "naming",
							"type": "Microsoft.Common.Section",
							"label": "Naming",
							"elements": [
								{
									"name": "virtualMachineNamePrefix",
									"type": "Microsoft.Common.TextBox",
									"label": "Virtual Machine Name Prefix",
									"defaultValue": "[if(or(equals(steps('basics').deploymentType, 'Complete'), empty(steps('controlPlane').hostPoolApi.tags.vmNamePrefix)), concat('avd', steps('basics').naming.identifier), steps('controlPlane').hostPoolApi.tags.vmNamePrefix)]",
									"toolTip": "Provide a Virtual Machine name prefix consisting of alphanumeric and dashes up to 12 characters long. A three character numeric suffix will be appended to the name padded with zeros (0).",
									"constraints": {
										"required": true,
										"regex": "^(?:[a-zA-Z0-9][a-zA-Z0-9-]{0,11})?$",
										"validationMessage": "The prefix must begin with an alphanumeric character and then contain only alphanumeric characters and dashes. The value must also be less than 12 characters long."
									},
									"visible": true
								},
								{
									"name": "index",
									"type": "Microsoft.Common.Slider",
									"label": "Starting number (index)",
									"defaultValue": 1,
									"toolTip": "Select the start number of the virtual machine suffix.",
									"min": 1,
									"max": 4998,
									"showStepMarkers": true,
									"constraints": {
										"required": true
									},
									"visible": true
								}
							],
							"visible": true
						},
						{
							"name": "network",
							"type": "Microsoft.Common.Section",
							"label": "Network",
							"visible": true,
							"elements": [
								{
									"name": "hostsVirtualNetworksApi",
									"type": "Microsoft.Solutions.ArmApiControl",
									"condition": "[not(empty(steps('basics').scope.subscription))]",
									"request": {
										"method": "GET",
										"path": "[concat(steps('basics').scope.subscription.id, '/providers/Microsoft.Network/virtualNetworks?api-version=2022-11-01')]"
									}
								},
								{
									"name": "hostsVirtualNetwork",
									"type": "Microsoft.Common.DropDown",
									"label": "Virtual Network",
									"defaultValue": "[last(split(steps('hosts').network.virtualNetwork, '/'))]",
									"multiLine": true,
									"toolTip": "Select the virtual network to which the session hosts will be attached.",
									"constraints": {
										"allowedValues": "[map(filter(steps('hosts').network.hostsVirtualNetworksApi.value, (vnet) => equals(vnet.location, steps('basics').scope.location.name)), (vnet) => parse(concat('{\"label\":\"', vnet.name, '\",\"description\":\"Location: ', vnet.location, ' Resource Group: ', first(skip(split(vnet.id, '/'), 4)), '\",\"value\":\"', vnet.id, '\"}')))]",
										"required": true
									}
								},
								{
									"name": "hostsSubnetsApi",
									"condition": "[not(empty(steps('hosts').network.hostsVirtualNetwork))]",
									"type": "Microsoft.Solutions.ArmApiControl",
									"request": {
										"method": "GET",
										"path": "[concat(steps('hosts').network.hostsVirtualNetwork, '/subnets?api-version=2022-05-01')]"
									}
								},
								{
									"name": "hostsSubnet",
									"type": "Microsoft.Common.DropDown",
									"visible": true,
									"label": "Subnet",
									"defaultValue": "",
									"toolTip": "Select an existing subnet for the AVD session hosts.",
									"constraints": {
										"required": true,
										"allowedValues": "[map(steps('hosts').network.hostsSubnetsApi.value, (snet) => parse(concat('{\"label\":\"', snet.name, '\",\"value\":\"', snet.id, '\"}')))]"
									}
								}
							]
						},
						{
							"name": "image",
							"type": "Microsoft.Common.Section",
							"visible": true,
							"label": "Image",
							"elements": [
								{
									"name": "source",
									"type": "Microsoft.Common.DropDown",
									"label": "Image Source",
									"filter": true,
									"defaultValue": "[if(or(equals(steps('basics').deploymentType, 'Complete'), empty(steps('controlPlane').hostPoolApi.tags.vmImageType)), 'Marketplace', if(equals(steps('controlPlane').hostPoolApi.tags.vmImageType, 'CustomImage'), 'Compute Gallery', 'Marketplace'))]",
									"toolTip": "Select the type of image to deploy on the session hosts.",
									"constraints": {
										"required": true,
										"allowedValues": [
											{
												"label": "Marketplace",
												"value": "marketplace"
											},
											{
												"label": "Compute Gallery",
												"value": "gallery"
											}
										]
									}
								},
								{
									"name": "offer",
									"type": "Microsoft.Common.DropDown",
									"label": "Offer",
									"defaultValue": "[if(or(equals(steps('basics').deploymentType, 'Complete'), empty(steps('controlPlane').hostPoolApi.tags.vmImageOffer)), 'Office-365', steps('controlPlane').hostPoolApi.tags.vmImageOffer)]",
									"toolTip": "Select the desired marketplace image offer.",
									"constraints": {
										"allowedValues": [
											{
												"label": "Office-365",
												"value": "Office-365"
											},
											{
												"label": "Windows-10",
												"value": "Windows-10"
											},
											{
												"label": "Windows-11",
												"value": "Windows-11"
											}
										],
										"required": true
									},
									"visible": "[equals(steps('hosts').image.source, 'marketplace')]"
								},
								{
									"name": "skuApi",
									"type": "Microsoft.Solutions.ArmApiControl",
									"condition": "[and(not(empty(steps('basics').scope.subscription)), not(empty(steps('basics').scope.location)), not(empty(steps('hosts').image.offer)), equals(steps('hosts').image.source, 'marketplace'))]",
									"request": {
										"method": "GET",
										"path": "[concat(steps('basics').scope.subscription.id, '/providers/Microsoft.Compute/locations/', steps('basics').scope.location.name, '/publishers/MicrosoftWindowsDesktop/artifacttypes/vmimage/offers/', steps('hosts').image.offer, '/skus?api-version=2022-08-01')]"
									}
								},
								{
									"name": "sku",
									"type": "Microsoft.Common.DropDown",
									"label": "SKU",
									"defaultValue": "[if(or(equals(steps('basics').deploymentType, 'Complete'), empty(steps('controlPlane').hostPoolApi.tags.vmImageSKU)), 'win11-24h2-avd-m365', steps('controlPlane').hostPoolApi.tags.vmImageSKU)]",
									"toolTip": "Select the desired marketplace image SKU.",
									"constraints": {
										"allowedValues": "[map(filter(steps('hosts').image.skuApi, (sku) => and(startsWith(sku.name, 'win'), or(contains(sku.name, 'ent'), contains(sku.name, 'avd')))), (sku) => parse(concat('{\"label\":\"', sku.name, '\",\"value\":\"', sku.name, '\"}')))]",
										"required": true
									},
									"visible": "[equals(steps('hosts').image.source, 'marketplace')]"
								},
								{
									"name": "computeGallery",
									"type": "Microsoft.Solutions.ResourceSelector",
									"visible": "[equals(steps('hosts').image.source, 'gallery')]",
									"label": "Compute Gallery",
									"resourceType": "Microsoft.Compute/galleries",
									"constraints": {
										"required": true
									}
								},
								{
									"name": "imageDefinitionsApi",
									"type": "Microsoft.Solutions.ArmApiControl",
									"condition": "[and(equals(steps('hosts').image.source, 'gallery'), not(empty(steps('hosts').image.computeGallery)))]",
									"request": {
										"method": "GET",
										"path": "[concat(steps('hosts').image.computeGallery.id, '/images?api-version=2024-03-03')]",
										"transforms": {
											"list": "value|[*].{label:name, value:id}"
										}
									}
								},
								{
									"name": "imageDefinition",
									"type": "Microsoft.Common.DropDown",
									"defaultValue": "[if(or(equals(steps('basics').deploymentType, 'Complete'), empty(steps('controlPlane').hostPoolApi.tags.vmCustomImageId)), '', last(split(steps('controlPlane').hostPoolApi.tags.vmCustomImageId, '/')))]",
									"label": "Image Definition",
									"constraints": {
										"allowedValues": "[steps('hosts').image.imageDefinitionsApi.transformed.list]",
										"required": true
									},
									"visible": "[and(equals(steps('hosts').image.source, 'gallery'), not(empty(steps('hosts').image.computeGallery)))]"
								},
								{
									"name": "imageDefinitionApi",
									"type": "Microsoft.Solutions.ArmApiControl",
									"condition": "[not(empty(steps('hosts').image.imageDefinition))]",
									"request": {
										"method": "GET",
										"path": "[concat(steps('hosts').image.imageDefinition, '?api-version=2024-03-03')]",
										"transforms": {
											"IsHibernateSupported": "properties.features[?name=='IsHibernateSupported'].value | [0]",
											"IsAcceleratedNetworkSupported": "properties.features[?name=='IsAcceleratedNetworkSupported'].value | [0]",
											"SecurityType": "properties.features[?name=='SecurityType'].value | [0]"
										}
									}
								}
							]
						},
						{
							"name": "security",
							"type": "Microsoft.Common.Section",
							"label": "Security",
							"elements": [
								{
									"name": "securityType",
									"type": "Microsoft.Common.DropDown",
									"label": "Security Type",
									"placeholder": "",
									"defaultValue": "[if(equals(steps('basics').deploymentType, 'Complete'), 'TrustedLaunch', coalesce(steps('controlPlane').hostPoolApi.tags.vmSecurityType, 'TrustedLaunch'))]",
									"toolTip": "Select the appropriate Security Type configuration for the Virtual Machine. Note that 'ConfidentialVMs' are not available in all regions and the option may not appear.",
									"constraints": {
										"allowedValues": "[if(and(not(empty(steps('hosts').resourceSkusApi.transformed.confidentialVMSizes)), or(equals(steps('hosts').image.source, 'marketplace'), equals(steps('hosts').image.imageDefinitionApi.transformed.SecurityType, 'TrustedLaunchAndConfidentialVmSupported'))), parse('[{\"label\":\"ConfidentialVM\",\"value\":\"ConfidentialVM\"},{\"label\":\"Standard\",\"value\":\"Standard\"},{\"label\":\"TrustedLaunch\",\"value\":\"TrustedLaunch\"}]'), if(and(not(empty(steps('hosts').resourceSkusApi.transformed.confidentialVMSizes)), equals(steps('hosts').image.source, 'gallery'), equals(steps('hosts').image.imageDefinitionApi.transformed.SecurityType, 'ConfidentialVM')), parse('[{\"label\":\"ConfidentialVM\",\"value\":\"ConfidentialVM\"}]'), if(and(not(empty(steps('hosts').resourceSkusApi.transformed.confidentialVMSizes)), equals(steps('hosts').image.source, 'gallery'), equals(steps('hosts').image.imageDefinitionApi.transformed.SecurityType, 'ConfidentialVmSupported')), parse('[{\"label\":\"ConfidentialVM\",\"value\":\"ConfidentialVM\"},{\"label\":\"Standard\",\"value\":\"Standard\"}]'), if(and(equals(steps('hosts').image.source, 'gallery'), equals(steps('hosts').image.imageDefinitionApi.transformed.SecurityType, 'TrustedLaunch')), parse('[{\"label\":\"TrustedLaunch\",\"value\":\"TrustedLaunch\"}]'), if(or(equals(steps('hosts').image.source, 'marketplace'), and(equals(steps('hosts').image.source, 'gallery'), contains(steps('hosts').image.imageDefinitionApi.transformed.SecurityType, 'TrustedLaunch'), contains(steps('hosts').image.imageDefinitionApi.transformed.SecurityType, 'Supported'))), parse('[{\"label\":\"Standard\",\"value\":\"Standard\"},{\"label\":\"TrustedLaunch\",\"value\":\"TrustedLaunch\"}]'), if(and(equals(steps('hosts').image.source, 'gallery'), or(equals(steps('hosts').image.imageDefinitionApi.transformed.SecurityType, 'ConfidentialVmSupported'), empty(steps('hosts').image.imageDefinitionApi.transformed.SecurityType))), parse('[{\"label\":\"Standard\",\"value\":\"Standard\"}]'), parse('[]')))))))]",
										"required": true
									},
									"visible": true
								},
								{
									"name": "secureBootEnabled",
									"type": "Microsoft.Common.CheckBox",
									"label": "Enable Secure Boot",
									"toolTip": "Secure boot helps protect your VMs against boot kits, rootkits, and kernel-level malware.",
									"defaultValue": "[if(or(equals(steps('basics').deploymentType, 'Complete'), empty(steps('controlPlane').hostPoolApi.tags.vmSecureBoot)), true, bool(steps('controlPlane').hostPoolApi.tags.vmSecureBoot))]",
									"visible": "[not(equals(steps('hosts').security.securityType, 'Standard'))]"
								},
								{
									"name": "vTpmEnabled",
									"type": "Microsoft.Common.CheckBox",
									"label": "Enable vTPM",
									"toolTip": "Virtual Trusted Platform Module (vTPM) is TPM2.0 compliant and validates your VM boot integrity apart from securely storing keys and secrets.",
									"defaultValue": "[if(or(equals(steps('basics').deploymentType, 'Complete'), empty(steps('controlPlane').hostPoolApi.tags.vmVirtualTPM)), true, bool(steps('controlPlane').hostPoolApi.tags.vmVirtualTPM))]",
									"visible": "[not(equals(steps('hosts').security.securityType, 'Standard'))]"
								},
								{
									"name": "integrityMonitoring",
									"type": "Microsoft.Common.CheckBox",
									"label": "Integrity Monitoring",
									"toolTip": "Integrity monitoring enables cryptographic attestation and verification of VM boot integrity along with monitoring alerts if the VM didn't boot because attestation failed with the defined baseline.",
									"defaultValue": true,
									"visible": "[not(equals(steps('hosts').security.securityType, 'Standard'))]"
								}
							]
						},
						{
							"name": "diskEncryption",
							"type": "Microsoft.Common.Section",
							"label": "Disk Encryption Options",
							"elements": [
								{
									"name": "diskEncryptionTextBlock",
									"type": "Microsoft.Common.TextBlock",
									"visible": true,
									"options": {
										"text": "There are several types of encryption available for your managed disks including Azure Disk Storage Server-Side Encryption (SSE), Encryption at Host (EAH), and Confidential disk encryption (when the Confidential VM security type is selected)."
									}
								},
								{
									"name": "sseTextBlock",
									"type": "Microsoft.Common.TextBlock",
									"visible": true,
									"options": {
										"text": "<ul><li><b>Azure Disk Storage Server-Side Encryption</b> is always enabled and automatically encrypts your data stored on Azure managed disks (OS and data disks) when persisting on the storage clusters.</li></ul>"
									}
								},
								{
									"name": "encryptionAtHostTextBlock",
									"type": "Microsoft.Common.TextBlock",
									"visible": true,
									"options": {
										"text": "<ul><li><b>Encryption at host</b> enhances Azure Disk Storage Server-Side Encryption to ensure that all temp disks and disk caches are encrypted at rest and flow encrypted to the Storage clusters.</li></ul>",
										"link": {
											"label": "Learn more",
											"uri": "http://go.microsoft.com/fwlink/?LinkId=2133517"
										}
									}
								},
								{
									"name": "confidentialVMEncryptionTextBlock",
									"type": "Microsoft.Common.TextBlock",
									"visible": "[equals(steps('hosts').security.securityType, 'ConfidentialVM')]",
									"options": {
										"text": "<ul><li><b>Confidential disk encryption</b> binds disk encryption keys to the virtual machine's TPM and makes the protected disk content accessible only to the VM. The TPM and VM guest state is always encrypted in attested code using keys released by a secure protocol that bypasses the hypervisor and host operating system. Currently only available for the OS disk. Encryption at host may be used for other disks on a Confidential VM in addition to Confidential Disk Encryption.</li></ul>",
										"link": {
											"label": "Learn more",
											"uri": "http://go.microsoft.com/fwlink/?LinkId=2133517"
										}
									}
								},
								{
									"name": "encryptionAtHost",
									"type": "Microsoft.Common.CheckBox",
									"label": "Encryption At Host",
									"toolTip": "Check to enable Encryption At Host",
									"defaultValue": "[if(equals(steps('basics').encryptionAtHostFeatureApi.properties.state, 'Registered'), if(equals(steps('basics').deploymentType, 'Complete'), true, bool(steps('controlPlane').hostPoolApi.tags.vmEncryptionAtHost)), false)]",
									"visible": "[not(equals(steps('hosts').security.securityType, 'ConfidentialVM'))]"
								},
								{
									"name": "encryptionAtHostNotRegisteredErrorBox",
									"type": "Microsoft.Common.InfoBox",
									"visible": "[and(not(equals(steps('basics').encryptionAtHostFeatureApi.properties.state, 'Registered')), steps('hosts').diskEncryption.encryptionAtHost)]",
									"options": {
										"style": "Error",
										"text": "The 'Encryption At Host' feature is not registered in your subscription. Follow the guidance at this link to enable the feature and restart the deployment.",
										"uri": "https://learn.microsoft.com/en-us/azure/virtual-machines/disks-enable-host-based-encryption-portal?tabs=azure-powershell"
									}
								},
								{
									"name": "confidentialVMOSDiskEncryption",
									"type": "Microsoft.Common.CheckBox",
									"label": "Confidential OS Disk Encryption",
									"toolTip": "Check to enable Confidential VM disk encryption",
									"defaultValue": true,
									"visible": "[and(equals(steps('basics').deploymentType, 'Complete'), equals(steps('hosts').security.securityType, 'ConfidentialVM'))]"
								},
								{
									"name": "keyManagementTextBlock1",
									"type": "Microsoft.Common.TextBlock",
									"visible": "[equals(steps('basics').deploymentType, 'Complete')]",
									"options": {
										"text": "You can rely on platform-managed keys for the encryption of your managed disk, or you can manage encryption using your own keys. If you choose to manage encryption with your own keys, you can specify a customer-managed key to use for encrypting and decrypting all data in managed disks.",
										"link": {
											"label": "Learn more",
											"uri": "https://learn.microsoft.com/en-us/azure/virtual-machines/disk-encryption#about-encryption-key-management"
										}
									}
								},
								{
									"name": "keyManagementTextBlock2",
									"type": "Microsoft.Common.TextBlock",
									"visible": "[equals(steps('basics').deploymentType, 'SessionHostsOnly')]",
									"options": {
										"text": "You can rely on platform-managed keys for the encryption of your managed disk, or you can manage encryption using your own keys. If you choose to manage encryption with your own keys, you must select the existing disk encryption set."
									}
								},
								{
									"name": "selectDiskEncryptionSet",
									"type": "Microsoft.Common.CheckBox",
									"label": "Enable Customer-Managed Keys on OS Disk",
									"defaultValue": "[not(empty(steps('controlPlane').hostPoolApi.tags.vmDiskEncryptionSetName))]",
									"toolTip": "Enables a zero trust configuration on the session host disks.",
									"visible": "[equals(steps('basics').deploymentType, 'SessionHostsOnly')]"
								},
								{
									"name": "diskEncryptionSetApi",
									"type": "Microsoft.Solutions.ArmApiControl",
									"condition": "[steps('hosts').diskEncryption.selectDiskEncryptionSet]",
									"request": {
										"method": "GET",
										"path": "[concat(steps('basics').resourceGroup, '/providers/Microsoft.Compute/diskEncryptionSets?api-version=2024-03-02')]",
										"transforms": {
											"list": "value|[*].{label:name, value:id}"
										}
									}
								},
								{
									"name": "existingDiskEncryptionSet",
									"type": "Microsoft.Common.DropDown",
									"label": "Disk Encryption Set",
									"constraints": {
										"allowedValues": "[steps('hosts').diskEncryption.diskEncryptionSetApi.transformed.list]",
										"required": true
									},
									"visible": "[and(equals(steps('basics').deploymentType, 'SessionHostsOnly'), steps('hosts').diskEncryption.selectDiskEncryptionSet)]"
								},
								{
									"name": "keyManagementInfobox1",
									"type": "Microsoft.Common.InfoBox",
									"visible": "[equals(steps('basics').deploymentType, 'Complete')]",
									"options": {
										"text": "In some environments it is required to utilize Customer Managed Keys and protect those keys in a premium key vault with the keys stored in a FIPS 140 validated Hardware Security Module. This is most common in IL5 type environments. Selecting a Customer Managed Key Hardware Security Module (HSM) option will ensure that all VM disks are protected with this configuration. Click this box for more information.",
										"uri": "https://learn.microsoft.com/en-us/azure/azure-government/documentation-government-impact-level-5#storage-isolation",
										"style": "Info"
									}
								},
								{
									"name": "keyManagement",
									"type": "Microsoft.Common.DropDown",
									"label": "Key Management",
									"defaultValue": "Platform-Managed Keys",
									"toolTip": "Platform-managed keys are key encryption keys that are generated, stored, and managed entirely by Azure. Choose Platform Managed for the best balance of security and ease of use. Customer-managed keys are key encryption keys that are generated, stored, and managed by you, the customer, in your Azure Key Vault. Choose Customer Managed if you need to meet specific compliance requirements. Platform-Managed and Customer-Managed Keys provide double encryption with an infrastructure encryption layer using platform-managed keys and a disk encryption layer using customer-managed keys.",
									"constraints": {
										"allowedValues": "[if(equals(steps('hosts').security.securityType, 'ConfidentialVM'), parse('[{\"label\":\"Platform-Managed Keys\",\"value\":\"PlatformManaged\"},{\"label\":\"Customer-Managed Keys protected by HSM\",\"value\":\"CustomerManaged\"}]'), parse('[{\"label\":\"Platform-Managed Keys\",\"value\":\"PlatformManaged\"},{\"label\":\"Customer-Managed Keys\",\"value\":\"CustomerManaged\"},{\"label\":\"Customer-Managed Keys protected by HSM\",\"value\":\"CustomerManagedHSM\"},{\"label\":\"Platform-Managed and Customer-Managed Keys\",\"value\":\"PlatformManagedAndCustomerManaged\"},{\"label\":\"Platform-Managed and Customer-Managed Keys protected by HSM\",\"value\":\"PlatformManagedAndCustomerManagedHSM\"}]'))]"
									},
									"visible": "[equals(steps('basics').deploymentType, 'Complete')]"
								},
								{
									"name": "confOSDiskEncryptionWarning",
									"type": "Microsoft.Common.InfoBox",
									"visible": "[and(equals(steps('basics').deploymentType, 'Complete'), steps('hosts').diskEncryption.confidentialVMOSDiskEncryption, equals(steps('hosts').diskEncryption.keyManagement, 'CustomerManaged') )]",
									"options": {
										"style": "Warning",
										"text": "You must have completed the prerequistes to support Confidential VM Disk Encryption.",
										"uri": "https://learn.microsoft.com/en-us/azure/confidential-computing/quick-create-confidential-vm-portal#prerequisites"
									}
								},
								{
									"name": "confDiskEncryptionPrincipalApi",
									"type": "Microsoft.Solutions.GraphApiControl",
									"request": {
										"method": "GET",
										"path": "/v1.0/servicePrincipals?$filter=startsWith(displayName, 'Confidential VM Orchestrator')&$select=displayName,id",
										"transforms": {
											"objectId": "[value[?displayName=='Confidential VM Orchestrator'] | [0].id]"
										}
									}
								},
								{
									"name": "confDiskEncryptionPrincipal",
									"type": "Microsoft.Common.TextBox",
									"label": "Confidential VM Orchestrator (Object Id)",
									"toolTip": "Enter the Object Id of the 'Confidential VM Orchestrator' Service Principal",
									"constraints": {
										"required": true,
										"regex": "^(?!\\d+$)\\w{8}-\\w{4}-\\w{4}-\\w{4}-\\w{12}$",
										"validationMessage": "A proper GUID must be provided."
									},
									"visible": "[and(equals(steps('basics').deploymentType, 'Complete'), steps('hosts').diskEncryption.confidentialVMOSDiskEncryption, equals(steps('hosts').diskEncryption.keyManagement, 'CustomerManaged'), empty(first(steps('hosts').diskEncryption.confDiskEncryptionPrincipalApi.value)))]"
								}
							]
						},
						{
							"name": "dedicatedHosts",
							"type": "Microsoft.Common.Section",
							"label": "Dedicated Hosts",
							"elements": [
								{
									"name": "dedicatedHostsTextBlock1",
									"type": "Microsoft.Common.TextBlock",
									"visible": true,
									"options": {
										"text": "Azure Dedicated Host is a service that provides physical servers able to host one or more virtual machines assigned to one Azure subscription. Dedicated hosts are the same physical servers used in our data centers, provided instead as a directly accessible hardware resource.",
										"link": {
											"label": "Learn more",
											"uri": "https://learn.microsoft.com/en-us/azure/virtual-machines/dedicated-hosts"
										}
									}
								},
								{
									"name": "dedicatedHostsInfobox1",
									"type": "Microsoft.Common.InfoBox",
									"visible": true,
									"options": {
										"text": "In some environments it is required to have a dedicated Azure Host to isolate Compute. This is most common in IL5 type environments. Selecting this option will ensure the VMs are deployed to pre-existing Dedicated Host(s). Click this box for more information.",
										"uri": "https://learn.microsoft.com/en-us/azure/azure-government/documentation-government-impact-level-5#compute-isolation",
										"style": "Info"
									}
								},
								{
									"name": "deployToDedicatedHosts",
									"type": "Microsoft.Common.CheckBox",
									"label": "Deploy to Dedicated Hosts",
									"toolTip": "Select this check box to deploy the Virtual Machines to existing dedicated host(s)."
								},
								{
									"name": "dedicatedHostsTextBlock2",
									"type": "Microsoft.Common.TextBlock",
									"visible": "[steps('hosts').dedicatedHosts.deployToDedicatedHosts]",
									"options": {
										"text": "Select the dedicated host group and optionally the specific dedicated host below. Leave the dedicated host blank if you want to use automatic host selection.",
										"link": {
											"label": "Learn more",
											"uri": "https://learn.microsoft.com/en-us/azure/virtual-machines/dedicated-hosts#manual-vs-automatic-placement"
										}
									}
								},
								{
									"name": "hostGroupsApi",
									"type": "Microsoft.Solutions.ArmApiControl",
									"condition": "[and(not(empty(steps('basics').scope.subscription)), steps('hosts').dedicatedHosts.deployToDedicatedHosts)]",
									"request": {
										"method": "GET",
										"path": "[concat(steps('basics').scope.subscription.id, '/providers/Microsoft.Compute/hostGroups?api-version=2023-09-01')]"
									}
								},
								{
									"name": "dedicatedHostGroup",
									"type": "Microsoft.Common.DropDown",
									"label": "Dedicated Host Group",
									"multiLine": true,
									"toolTip": "Select the dedicated host group to which the Virtual Machines will be deployed using automatic host selection.",
									"constraints": {
										"required": true,
										"allowedValues": "[map(filter(steps('hosts').dedicatedHosts.hostGroupsApi.value, (hg) => equals(hg.location, steps('basics').scope.location.name)), (hg) => parse(concat('{\"label\":\"', hg.name, '\",\"description\":\"Resource Group: ', first(skip(split(hg.id, '/'), 4)), ', Availability Zone: ', hg.zones, '\",\"value\":\"', hg.id, '\"}')))]"
									},
									"visible": "[steps('hosts').dedicatedHosts.deployToDedicatedHosts]"
								},
								{
									"name": "dedicatedHostsApi",
									"condition": "[not(empty(steps('hosts').dedicatedHosts.dedicatedHostGroup))]",
									"type": "Microsoft.Solutions.ArmApiControl",
									"request": {
										"method": "GET",
										"path": "[concat(steps('hosts').dedicatedHosts.dedicatedHostGroup, '/hosts?api-version=2023-09-01')]"
									}
								},
								{
									"name": "dedicatedHost",
									"type": "Microsoft.Common.DropDown",
									"visible": "[steps('hosts').dedicatedHosts.deployToDedicatedHosts]",
									"filter": true,
									"label": "Dedicated Host (Manual placement only)",
									"multiLine": true,
									"defaultValue": "",
									"toolTip": "This selection is optional. Do not select a host if you wish to use automatic selection.",
									"constraints": {
										"allowedValues": "[map(steps('hosts').dedicatedHosts.dedicatedHostsApi.value, (dh) => parse(concat('{\"label\":\"', dh.name, '\",\"description\":\"Sku: ', dh.sku.name, '\",\"value\":\"', dh.id, '\"}')))]",
										"required": false
									}
								}
							],
							"visible": true
						},
						{
							"name": "specs",
							"type": "Microsoft.Common.Section",
							"label": "Capacity and Performance",
							"elements": [
								{
									"name": "count",
									"type": "Microsoft.Common.Slider",
									"label": "Number of Virtual Machines",
									"defaultValue": 1,
									"toolTip": "Select the number of virtual machines to deploy in your AVD host pool.",
									"min": 1,
									"max": 4999,
									"showStepMarkers": true,
									"constraints": {
										"required": true
									},
									"visible": true
								},
								{
									"name": "diskSku",
									"type": "Microsoft.Common.DropDown",
									"label": "OS Disk SKU",
									"filter": true,
									"defaultValue": "[if(equals(steps('basics').deploymentType, 'Complete'), 'Premium_LRS', coalesce(steps('controlPlane').hostPoolApi.tags.vmOSDiskType, 'Premium_LRS'))]",
									"toolTip": "Select the disk SKU for the operating system disk.",
									"constraints": {
										"required": true,
										"allowedValues": [
											{
												"label": "Premium_LRS",
												"value": "Premium_LRS"
											},
											{
												"label": "Standard_LRS",
												"value": "Standard_LRS"
											},
											{
												"label": "StandardSSD_LRS",
												"value": "StandardSSD_LRS"
											}
										]
									}
								},
								{
									"name": "diskSizeGB",
									"type": "Microsoft.Common.DropDown",
									"label": "OS Disk Size (GB)",
									"placeholder": "",
									"defaultValue": "[if(equals(steps('basics').deploymentType, 'Complete'), '128', coalesce(steps('controlPlane').hostPoolApi.tags.vmDiskSizeGB, '128'))]",
									"toolTip": "",
									"constraints": {
										"allowedValues": [
											{
												"label": "128",
												"value": 128
											},
											{
												"label": "256",
												"value": 256
											},
											{
												"label": "512",
												"value": 512
											},
											{
												"label": "1024",
												"value": 1024
											},
											{
												"label": "2048",
												"value": 2048
											}
										],
										"required": true
									},
									"visible": true
								},
								{
									"name": "sizeGeneric",
									"type": "Microsoft.Compute.SizeSelector",
									"label": "Size",
									"toolTip": "Select the size of the virtual machines. Multi-session hosts should have 4 - 24 vCPUs. Single session host should have 2 or more vCPUs.",
									"recommendedSizes": [
										"[if(equals(steps('basics').deploymentType, 'Complete'), 'Standard_D4ads_v5', coalesce(steps('controlPlane').hostPoolApi.tags.vmSize, 'Standard_D4ads_v5'))]",
										"Standard_D8ads_v5",
										"Standard_D16ads_v5",
										"Standard_D32ads_v5",
										"Standard_D4ds_v4",
										"Standard_D8ds_v4",
										"Standard_D16ds_v4",
										"Standard_D32ds_v4",
										"Standard_D4s_v3",
										"Standard_D8s_v3",
										"Standard_D16s_v3",
										"Standard_D32s_v3"
									],
									"options": {
										"hideDiskTypeFilter": "[if(equals(steps('hosts').specs.diskSku, 'Premium_LRS'), true, false)]"
									},
									"osPlatform": "Windows",
									"count": "[steps('hosts').specs.count]",
									"scope": {
										"location": "[steps('basics').scope.location.name]",
										"subscriptionId": "[steps('basics').scope.subscription.subscriptionId]"
									},
									"visible": "[not(equals(steps('hosts').security.securityType, 'ConfidentialVM'))]"
								},
								{
									"name": "sizeConfidentialVM",
									"type": "Microsoft.Common.DropDown",
									"label": "Virtual Machine Size",
									"defaultValue": "[if(equals(steps('hosts').security.securityType, 'ConfidentialVM'), 'Standard_DC4ads_v5' ,'Standard_D4ads_v5')]",
									"toolTip": "Select the size of the virtual machines. Multi-session hosts should have 4 - 24 vCPUs. Single session host should have 2 or more vCPUs.",
									"defaultDescription": "",
									"constraints": {
										"allowedValues": "[steps('hosts').resourceSkusApi.transformed.confidentialVMSizes]",
										"required": true
									},
									"visible": "[equals(steps('hosts').security.securityType, 'ConfidentialVM')]"
								},
								{
									"name": "enableAcceleratedNetworking",
									"type": "Microsoft.Common.CheckBox",
									"label": "Enable accelerated networking",
									"defaultValue": "[if(or(equals(steps('basics').deploymentType, 'Complete'), empty(steps('controlPlane').hostPoolApi.tags.vmAcceleratedNetworking)), true, bool(steps('controlPlane').hostPoolApi.tags.vmAcceleratedNetworking))]",
									"toolTip": "Enables low latency and high throughput on the network interface.",
									"visible": "[and(bool(first(map(filter(first(map(filter(steps('hosts').resourceSkusApi.value, (sku) => contains(sku.name, if(equals(steps('hosts').security.securityType, 'ConfidentialVM'), steps('hosts').specs.sizeConfidentialVM, steps('hosts').specs.sizeGeneric))), (sku) => sku.capabilities)), (sku) => equals(sku.name, 'AcceleratedNetworkingEnabled')), (sku) => sku.value))), or(equals(steps('hosts').image.source, 'marketplace'), bool(steps('hosts').image.imageDefinitionApi.transformed.IsAcceleratedNetworkSupported)))]"
								},
								{
									"name": "hibernationEnabled",
									"type": "Microsoft.Common.CheckBox",
									"label": "Enable Hibernation",
									"defaultValue": "[if(equals(steps('basics').deploymentType, 'Complete'), false, empty(steps('controlPlane').hostPoolApi.tags.vmHibernate)), false, bool(steps('controlPlane').hostPoolApi.tags.vmHibernate))]",
									"toolTip": "Hibernation allows you to pause VMs that aren't being used and save on compute costs where the VMs don't need to run 24/7.",
									"visible": "[and(equals(steps('controlPlane').hostPool.type, 'Personal'), bool(first(map(filter(first(map(filter(steps('hosts').resourceSkusApi.value, (sku) => contains(sku.name, if(equals(steps('hosts').security.securityType, 'ConfidentialVM'), steps('hosts').specs.sizeConfidentialVM, steps('hosts').specs.sizeGeneric))), (sku) => sku.capabilities)), (sku) => equals(sku.name, 'HibernationSupported')), (sku) => sku.value))), or(equals(steps('hosts').image.source, 'marketplace'), bool(steps('hosts').image.imageDefinitionApi.transformed.IsHibernateSupported)))]"
								}
							]
						},
						{
							"name": "availability",
							"type": "Microsoft.Common.Section",
							"label": "Availability",
							"elements": [
								{
									"name": "availability",
									"type": "Microsoft.Common.DropDown",
									"defaultValue": "[if(empty(first(map(first(map(filter(steps('hosts').resourceSkusApi.value, (sku) => contains(sku.name, if(equals(steps('hosts').security.securityType, 'ConfidentialVM'), steps('hosts').specs.sizeConfidentialVM, steps('hosts').specs.sizeGeneric))), (sku) => sku.locationInfo)), (sku) => sku.zones))), 'No infrastructure redundancy required', 'Availability Zones')]",
									"label": "Availability Options",
									"toolTip": "Select the redundancy / resiliency for the virtual machines.",
									"constraints": {
										"required": true,
										"allowedValues": "[if(empty(first(map(first(map(filter(steps('hosts').resourceSkusApi.value, (sku) => contains(sku.name, if(equals(steps('hosts').security.securityType, 'ConfidentialVM'), steps('hosts').specs.sizeConfidentialVM, steps('hosts').specs.sizeGeneric))), (sku) => sku.locationInfo)), (sku) => sku.zones))), parse('[{\"label\":\"No infrastructure redundancy required\",\"value\":\"None\"},{\"label\":\"Availability Sets\",\"value\":\"AvailabilitySets\"}]'), parse('[{\"label\":\"Availability Zones\",\"value\":\"AvailabilityZones\"},{\"label\":\"Availability Sets\",\"value\":\"AvailabilitySets\"},{\"label\":\"No infrastructure redundancy required\",\"value\":\"None\"}]'))]"
									}
								},
								{
									"name": "availabilityZones",
									"type": "Microsoft.Common.DropDown",
									"label": "Select Availability Zones",
									"defaultValue": [
										"Zone 1",
										"Zone 2",
										"Zone 3"
									],
									"multiselect": true,
									"selectAll": true,
									"toolTip": "Select the desired Availability Zones",
									"constraints": {
										"allowedValues": "[map(first(map(first(map(filter(steps('hosts').resourceSkusApi.value, (sku) => contains(sku.name, if(equals(steps('hosts').security.securityType, 'ConfidentialVM'), steps('hosts').specs.sizeConfidentialVM, steps('hosts').specs.sizeGeneric))), (sku) => sku.locationInfo)), (sku) => sku.zones)), (zone) => parse(concat('{\"label\":\"Zone ', zone, '\",\"value\":\"', zone, '\"}')))]",
										"required": true
									},
									"visible": "[equals(steps('hosts').availability.availability, 'AvailabilityZones')]"
								}
							],
							"visible": "[equals(steps('hosts').dedicatedHosts.deployToDedicatedHosts, false)]"
						},
						{
							"name": "identity",
							"type": "Microsoft.Common.Section",
							"label": "Identity",
							"visible": true,
							"elements": [
								{
									"name": "solution",
									"type": "Microsoft.Common.OptionsGroup",
									"visible": true,
									"label": "Identity Provider",
									"defaultValue": "[if(equals(steps('basics').deploymentType, 'Complete'), 'Active Directory Domain Services (AD DS)', if(empty{steps('controlPlane').hostPoolApi.tags.vmDomain), 'Entra Id', 'Active Directory Domain Services (AD DS)'))]",
									"toolTip": "Choose the Identity Solution for the Virtual Machines.",
									"constraints": {
										"required": true,
										"allowedValues": [
											{
												"label": "Active Directory Domain Services (AD DS)",
												"value": "ActiveDirectoryDomainServices"
											},
											{
												"label": "Entra Id",
												"value": "EntraId"
											},
											{
												"label": "Entra Domain Services",
												"value": "EntraDomainServices"
											}
										]
									}
								},
								{
									"name": "intune",
									"type": "Microsoft.Common.OptionsGroup",
									"visible": "[equals(steps('hosts').identity.solution, 'EntraId')]",
									"label": "Intune Enrollment",
									"defaultValue": "No",
									"toolTip": "If Intune is configured in your Azure AD tenant, you can choose to have the VM automatically enrolled during the deployment by selecting Yes.",
									"constraints": {
										"required": false,
										"allowedValues": [
											{
												"label": "Yes",
												"value": true
											},
											{
												"label": "No",
												"value": false
											}
										]
									}
								},
								{
									"name": "domainName",
									"type": "Microsoft.Common.TextBox",
									"visible": "[not(equals(steps('hosts').identity.solution, 'EntraId'))]",
									"defaultValue": "[if(equals(steps('basics').deploymentType, 'Complete'), '', coalesce(steps('controlPlane').hostPoolApi.tags.vmDomain, ''))]",
									"label": "Domain Name",
									"toolTip": "Provide domain name for the selected Active Directory solution.",
									"placeholder": "Example: contoso.com",
									"constraints": {
										"required": true
									}
								},
								{
									"name": "ouPath",
									"type": "Microsoft.Common.TextBox",
									"defaultValue": "[if(equals(steps('basics').deploymentType, 'Complete'), '', coalesce(steps('controlPlane').hostPoolApi.tags.vmOUPath , ''))]",
									"visible": "[not(equals(steps('hosts').identity.solution, 'EntraId'))]",
									"label": "OU Path",
									"toolTip": "Input the distinguished name of the desired organization unit for the AVD session hosts.",
									"placeholder": "Example: OU=pooled,OU=avd,DC=contoso,DC=com",
									"constraints": {
										"required": true
									}
								}
							]
						},
						{
							"name": "credentials",
							"type": "Microsoft.Common.Section",
							"visible": true,
							"label": "Credentials",
							"elements": [
								{
									"name": "source",
									"type": "Microsoft.Common.OptionsGroup",
									"label": "[if(equals(steps('hosts').identity.solution, 'EntraId'), 'VM Admin Credentials source', 'Domain Join and VM Admin Credentials source')]",
									"defaultValue": "Manual Entry",
									"toolTip": "Select 'Manual Entry' to specify the secrets manually or 'Key Vault' to reference secrets from a Key Vault.",
									"constraints": {
										"allowedValues": [
											{
												"label": "Key Vault",
												"value": "keyVault"
											},
											{
												"label": "Manual Entry",
												"value": "manual"
											}
										],
										"required": true
									},
									"visible": true
								},
								{
									"name": "domainJoinUserPrincipalName",
									"type": "Microsoft.Common.TextBox",
									"label": "Domain Join Account UserPrincipalName",
									"toolTip": "Enter the user principal name with domain join privileges.",
									"placeholder": "domainjoin@contoso.com",
									"constraints": {
										"required": true,
										"regex": "^[a-z0-9A-Z_.-]+@(?:[a-z0-9]+\\.)+[a-z]+$",
										"validationMessage": "The value must be a valid user principal name."
									},
									"visible": "[and(not(equals(steps('hosts').identity.solution, 'EntraId')), equals(steps('hosts').credentials.source, 'manual'))]"
								},
								{
									"name": "domainJoinUserPassword",
									"type": "Microsoft.Common.PasswordBox",
									"label": {
										"password": "Domain Join Account Password",
										"confirmPassword": "Confirm Password"
									},
									"toolTip": "Enter a password that is alphanumeric, contains at least 12 characters, 1 letter, 1 number and 1 special character.",
									"constraints": {
										"required": true
									},
									"options": {
										"hideConfirmation": false
									},
									"visible": "[and(not(equals(steps('hosts').identity.solution, 'EntraId')), equals(steps('hosts').credentials.source, 'manual'))]"
								},
								{
									"name": "localAdminUsername",
									"type": "Microsoft.Common.TextBox",
									"label": "Local Admin Username",
									"defaultValue": "",
									"toolTip": "Input the username for the local administrator account.",
									"constraints": {
										"required": true,
										"regex": "",
										"validationMessage": ""
									},
									"visible": "[equals(steps('hosts').credentials.source, 'manual')]"
								},
								{
									"name": "localAdminPassword",
									"type": "Microsoft.Common.PasswordBox",
									"label": {
										"password": "Local Admin Password",
										"confirmPassword": "Confirm Password"
									},
									"toolTip": "Input the password for the local administrator account.",
									"constraints": {
										"required": true,
										"regex": "^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$%^&+=_!*<>()])(?=\\S+$).{12,123}$",
										"validationMessage": "The value must be within 12 to 123 characters, be alphanumeric, and include 1 lower case character, 1 upper case character, 1 number, and 1 special character that is not '//' or '-'."
									},
									"options": {
										"hideConfirmation": false
									},
									"visible": "[equals(steps('hosts').credentials.source, 'manual')]"
								},
								{
									"name": "secretsInfoBox1",
									"type": "Microsoft.Common.InfoBox",
									"visible": "[and(equals(steps('hosts').identity.solution, 'EntraId'), equals(steps('hosts').credentials.source, 'keyVault'))]",
									"options": {
										"text": "This add-on requires that the following secret names and values are stored in a key vault that you will select below:</br><ul><li><b>VirtualMachineAdminUserName</b>: The virtual machine administrator username.</li><li><b>VirtualMachineAdminPassword</b>: The virtual machine administrator password.",
										"style": "Info"
									}
								},
								{
									"name": "secretsInfoBox2",
									"type": "Microsoft.Common.InfoBox",
									"visible": "[and(not(equals(steps('hosts').identity.solution, 'EntraId')), equals(steps('hosts').credentials.source, 'keyVault'))]",
									"options": {
										"text": "This add-on requires that the following secret names and values are stored in a key vault that you will select below:</br><ul><li><b>DomainJoinUserPrincipalName</b>: The domain join account UserPrincipalName (i.e., domjoin@contoso.local).</li><li><b>DomainJoinUserPassword</b>: The password associated with the domain join user account.</li><li><b>VirtualMachineAdminUserName</b>: The virtual machine administrator username.</li><li><b>VirtualMachineAdminPassword</b>: The virtual machine administrator password.",
										"style": "Info"
									}
								},
								{
									"name": "keyVault",
									"type": "Microsoft.Solutions.ResourceSelector",
									"label": "Select Keyvault containing workload secrets",
									"resourceType": "Microsoft.KeyVault/vaults",
									"toolTip": "Select Keyvault which contains the domain join secrets",
									"constraints": {
										"required": true
									},
									"visible": "[equals(steps('hosts').credentials.source, 'keyVault')]"
								}
							]
						},
						{
							"name": "registration",
							"type": "Microsoft.Common.Section",
							"label": "Session Host Registration",
							"elements": [
								{
									"name": "avdAgentsDSCPackage",
									"type": "Microsoft.Common.TextBox",
									"label": "AVD Agent DSC Package",
									"placeholder": "",
									"defaultValue": "Configuration_1.0.02790.438.zip",
									"toolTip": "Provide the full URL (or just the file name to use the default storage account for the environment) to the DSC Configuration Package containing the AVD Agents and code to register the virtual machines as session hosts in the environment.",
									"constraints": {
										"required": true,
										"validationMessage": "The package name must start with 'Configuration', optionally be followed by an underscore and a version number, and end with '.zip'."
									},
									"visible": true
								},
								{
									"name": "useAgentDownloadEndpoint",
									"type": "Microsoft.Common.CheckBox",
									"label": "Download latest Agent",
									"toolTip": "Automatically downloads the latest agent software during installation rather than waiting for an upgrade."
								}
							],
							"visible": true
						},
						{
							"name": "customScripts",
							"type": "Microsoft.Common.Section",
							"label": "Custom Scripts",
							"elements": [
								{
									"name": "addCustomScripts",
									"type": "Microsoft.Common.DropDown",
									"label": "Add Custom Scripts",
									"placeholder": "",
									"defaultValue": "No",
									"toolTip": "",
									"constraints": {
										"allowedValues": [
											{
												"label": "Yes",
												"value": true
											},
											{
												"label": "No",
												"value": false
											}
										],
										"required": false
									},
									"visible": true
								},
								{
									"name": "storageHeader",
									"type": "Microsoft.Common.TextBlock",
									"visible": "[steps('hosts').customScripts.addCustomScripts]",
									"options": {
										"text": "<u>Artifacts Storage</u>"
									}
								},
								{
									"name": "textBlockStorageAndManagedIdentity",
									"type": "Microsoft.Common.TextBlock",
									"visible": "[steps('hosts').customScripts.addCustomScripts]",
									"options": {
										"text": "Use the drop downs below to optionally select the storage account and blob container with the build artifacts (scripts and installers) and the User Assigned Managed Identity that has been assigned the 'Storage Blob Data Reader' role the storage account. If you do not host your scripts internally then these items are not required, but you must provide full URIs in the customizations Blob or URI name field."
									}
								},
								{
									"name": "storageAccountSubscription",
									"type": "Microsoft.Common.DropDown",
									"label": "Storage Account Subscription",
									"placeholder": "",
									"defaultValue": "[steps('basics').scope.subscription.displayName]",
									"toolTip": "",
									"constraints": {
										"allowedValues": "[map(steps('basics').subscriptionsApi.value, (sub) => parse(concat('{\"label\":\"', sub.displayName, '\",\"value\":{\"id\":\"', sub.id, '\",\"displayName\":\"', sub.displayName, '\"}}')))]",
										"required": false
									},
									"visible": "[steps('hosts').customScripts.addCustomScripts]"
								},
								{
									"name": "storageAccountsApi",
									"type": "Microsoft.Solutions.ArmApiControl",
									"condition": "[not(empty(steps('hosts').customScripts.storageAccountSubscription))]",
									"request": {
										"method": "GET",
										"path": "[concat(steps('hosts').customScripts.storageAccountSubscription.id, '/providers/Microsoft.Storage/storageAccounts?api-version=2023-01-01')]"
									}
								},
								{
									"name": "storageAccount",
									"type": "Microsoft.Common.DropDown",
									"label": "Image Artifacts Storage Account",
									"multiLine": true,
									"toolTip": "Select the storage account containing the image customization artifacts (i.e., installers, scripts).",
									"constraints": {
										"allowedValues": "[map(steps('hosts').customScripts.storageAccountsApi.value, (sa) => parse(concat('{\"label\":\"', sa.name, '\",\"description\":\"Location: ', sa.location, ' Resource Group: ', first(skip(split(sa.id, '/'), 4)), '\",\"value\":{\"id\":\"', sa.id, '\",\"blobEndpoint\":\"', sa.properties.primaryEndpoints.blob, '\"}}')))]",
										"required": false
									},
									"visible": "[steps('hosts').customScripts.addCustomScripts]"
								},
								{
									"name": "containerApi",
									"type": "Microsoft.Solutions.ArmApiControl",
									"condition": "[not(empty(steps('hosts').customScripts.storageAccount))]",
									"request": {
										"method": "GET",
										"path": "[concat(steps('hosts').customScripts.storageAccount.id, '/blobServices/default/containers?api-version=2023-01-01')]"
									}
								},
								{
									"name": "container",
									"type": "Microsoft.Common.DropDown",
									"visible": "[steps('hosts').customScripts.addCustomScripts]",
									"label": "Image Artifacts Container",
									"defaultValue": "",
									"toolTip": "Select the container which contains the software and script blobs.",
									"constraints": {
										"required": false,
										"allowedValues": "[map(steps('hosts').customScripts.containerApi.value, (con) => parse(concat('{\"label\":\"', con.name, '\",\"value\":\"', con.name, '\"}')))]"
									}
								},
								{
									"name": "managedIdentity",
									"type": "Microsoft.Solutions.ResourceSelector",
									"label": "Storage Account access User Assigned Identity",
									"toolTip": "Select an existing User Assigned Identity which has been assigned data plane rights of at least 'Storage Blob Data Reader' to the storage account and container selected above.",
									"resourceType": "Microsoft.ManagedIdentity/userAssignedIdentities",
									"constraints": {
										"required": false
									},
									"visible": "[steps('hosts').customScripts.addCustomScripts]"
								},
								{
									"name": "customizationText",
									"type": "Microsoft.Common.TextBlock",
									"visible": "[steps('hosts').customScripts.addCustomScripts]",
									"options": {
										"text": "Enter the name of the customizer and either the full URI or the blob name (if using the storage account and container above). If you are not using the storage account above, then the URI must be accessible from the session hosts VMs. <i>Optionally</i>, enter the any arguments that should be passed to the customization script or installer."
									}
								},
								{
									"name": "customizations",
									"type": "Microsoft.Common.EditableGrid",
									"ariaLabel": "Customizations",
									"label": "Custom Scripts and Software",
									"visible": "[steps('hosts').customScripts.addCustomScripts]",
									"constraints": {
										"width": "Full",
										"rows": {
											"count": {
												"min": 0,
												"max": 10
											}
										},
										"columns": [
											{
												"id": "name",
												"header": "Customization Name",
												"width": "1fr",
												"element": {
													"type": "Microsoft.Common.TextBox",
													"placeholder": "Example: VSCode",
													"constraints": {
														"required": true
													}
												}
											},
											{
												"id": "blobNameOrUri",
												"header": "Blob Name or URI",
												"width": "2fr",
												"element": {
													"type": "Microsoft.Common.TextBox",
													"placeholder": "Example: VSCode.zip",
													"constraints": {
														"required": true
													}
												}
											},
											{
												"id": "arguments",
												"header": "Arguments",
												"width": "1fr",
												"element": {
													"type": "Microsoft.Common.TextBox",
													"placeholder": "Example: /install /silent",
													"constraints": {
														"required": false
													}
												}
											}
										]
									}
								}
							],
							"visible": true
						}
					]
				},
				{
					"name": "userProfiles",
					"label": "User Profiles",
					"elements": [
						{
							"name": "profileSolution",
							"type": "Microsoft.Common.DropDown",
							"defaultValue": "FSLogix",
							"visible": true,
							"label": "Profile Solution",
							"toolTip": "Select the user profile solution for your end users.",
							"constraints": {
								"allowedValues": [
									{
										"label": "FSLogix",
										"value": "FSLogix"
									},
									{
										"label": "Other",
										"value": "Other"
									}
								]
							}
						},
						{
							"name": "configureSessionHosts",
							"type": "Microsoft.Common.CheckBox",
							"label": "Configure FSLogix registry settings on session hosts",
							"defaultValue": true,
							"visible": "[equals(steps('userProfiles').profileSolution, 'FSLogix')]"
						},
						{
							"name": "deployStorage",
							"type": "Microsoft.Common.CheckBox",
							"label": "Deploy FSLogix Storage Resources",
							"defaultValue": true,
							"visible": "[and(equals(steps('basics').deploymentType, 'Complete'), equals(steps('userProfiles').profileSolution, 'FSLogix'))]"
						},
						{
							"name": "fslogixContainerType",
							"type": "Microsoft.Common.DropDown",
							"visible": "[or(steps('userProfiles').configureSessionHosts, equals(steps('userProfiles').deployStorage, true))]",
							"label": "FSLogix Container Type(s)",
							"defaultValue": "Profile Container",
							"toolTip": "Select the container type(s) for the FSLogix profiles.",
							"constraints": {
								"required": true,
								"allowedValues": [
									{
										"label": "Cloud Cache, Profile Container",
										"value": "CloudCacheProfileContainer"
									},
									{
										"label": "Cloud Cache, Profile & Office Container",
										"value": "CloudCacheProfileOfficeContainer"
									},
									{
										"label": "Profile Container",
										"value": "ProfileContainer"
									},
									{
										"label": "Profile & Office Container",
										"value": "ProfileOfficeContainer"
									}
								]
							}
						},
						{
							"name": "ouPath",
							"type": "Microsoft.Common.TextBox",
							"defaultValue": "[steps('hosts').identity.ouPath]",
							"visible": "[and(not(equals(steps('hosts').identity.solution, 'EntraId')), equals(steps('userProfiles').deployStorage, true))]",
							"label": "Storage OU Path",
							"toolTip": "Input the distinguished name of the desired organization unit for storage computer objects.",
							"placeholder": "Example: OU=pooled,OU=avd,DC=contoso,DC=com",
							"constraints": {
								"required": true
							}
						},
						{
							"name": "storageService",
							"type": "Microsoft.Common.DropDown",
							"visible": "[or(steps('userProfiles').configureSessionHosts, equals(steps('userProfiles').deployStorage, true))]",
							"label": "Storage Service",
							"defaultValue": "Azure Files",
							"toolTip": "Select the storage service that provides the SMB file share to support the use of FSLogix.",
							"constraints": {
								"allowedValues": "[if(equals(steps('hosts').identity.solution, 'EntraId'), parse('[{\"label\":\"Azure Files\",\"value\":\"AzureFiles\"}]'), parse('[{\"label\":\"Azure Files\",\"value\":\"AzureFiles\"},{\"label\":\"Azure NetApp Files\",\"value\":\"AzureNetAppFiles\"}]'))]"
							}
						},
						{
							"name": "azureNetAppFiles",
							"type": "Microsoft.Common.Section",
							"label": "Azure NetApp Files",
							"visible": "[equals(steps('userProfiles').storageService, 'AzureNetAppFiles')]",
							"elements": [
								{
									"name": "storageSku",
									"type": "Microsoft.Common.DropDown",
									"visible": "[equals(steps('userProfiles').deployStorage, true)]",
									"label": "NetApp Files SKU",
									"toolTip": "Select the Azure NetApp Sku.",
									"constraints": {
										"allowedValues": [
											{
												"label": "Premium",
												"value": "Premium"
											},
											{
												"label": "Standard",
												"value": "Standard"
											}
										]
									}
								},
								{
									"name": "storageVirtualNetworksApi",
									"type": "Microsoft.Solutions.ArmApiControl",
									"condition": "[and(equals(steps('userProfiles').storageService, 'AzureNetAppFiles'), equals(steps('userProfiles').deployStorage, true))]",
									"request": {
										"method": "GET",
										"path": "[concat(steps('basics').scope.subscription.id, '/providers/Microsoft.Network/virtualNetworks?api-version=2022-11-01')]"
									}
								},
								{
									"name": "virtualNetwork",
									"type": "Microsoft.Common.DropDown",
									"label": "NetApp Virtual Network",
									"defaultValue": "[last(split(steps('hosts').network.virtualNetwork, '/'))]",
									"multiLine": true,
									"toolTip": "Select the virtual network containing the subnets to which the Azure NetApp Files instance will be attached.",
									"constraints": {
										"allowedValues": "[map(filter(steps('userProfiles').azureNetAppFiles.storageVirtualNetworksApi.value, (vnet) => equals(vnet.location, steps('basics').scope.location.name)), (vnet) => parse(concat('{\"label\":\"', vnet.name, '\",\"description\":\"Location: ', vnet.location, ' Resource Group: ', first(skip(split(vnet.id, '/'), 4)), '\",\"value\":\"', vnet.id, '\"}')))]",
										"required": true
									},
									"visible": "[equals(steps('userProfiles').deployStorage, true)]"
								},
								{
									"name": "subnetsApi",
									"condition": "[not(empty(steps('userProfiles').azureNetAppFiles.virtualNetwork))]",
									"type": "Microsoft.Solutions.ArmApiControl",
									"request": {
										"method": "GET",
										"path": "[concat(steps('userProfiles').azureNetAppFiles.virtualNetwork, '/subnets?api-version=2022-05-01')]"
									}
								},
								{
									"name": "noSnetsWithDelegationErrorBox",
									"type": "Microsoft.Common.InfoBox",
									"visible": "[and(not(empty(steps('userProfiles').azureNetAppFiles.virtualNetwork)), empty(map(filter(steps('userProfiles').azureNetAppFiles.subnetsApi.value, (snet) => equals(first(map(snet.properties.delegations, (del) => del.properties.serviceName)), 'Microsoft.NetApp/volumes')), (snet) => snet.name)))]",
									"options": {
										"style": "Error",
										"text": "There are no subnets in the virtual network chosen above that are delegated to the 'Microsoft.Netapp/volumes' service. You must either select another network (or region on the basics page) or create a subnet in the chosen virtual network and delegate it to 'Microsoft.Netapp/volumes', and then restart this deployment."
									}
								},
								{
									"name": "subnet",
									"type": "Microsoft.Common.DropDown",
									"label": "NetApp Subnet",
									"toolTip": "Select the subnet within the Virtual Network that is delegated to 'Microsoft.NetApp/volumes'.",
									"constraints": {
										"allowedValues": "[map(filter(steps('userProfiles').azureNetAppFiles.subnetsApi.value, (snet) => equals(first(map(snet.properties.delegations, (del) => del.properties.serviceName)), 'Microsoft.NetApp/volumes')), (snet) => parse(concat('{\"label\":\"', snet.name, '\",\"value\":\"', snet.id, '\"}')))]",
										"required": true
									},
									"visible": "[equals(steps('userProfiles').deployStorage, true)]"
								},
								{
									"name": "existingSharedActiveDirectoryConnection",
									"type": "Microsoft.Common.CheckBox",
									"label": "Existing shared Active Directory connection",
									"visible": "[equals(steps('userProfiles').deployStorage, true)]",
									"toolTip": "Choose whether a Shared AD Connection for Azure NetApp File exists.",
									"constraints": {
										"required": false
									}
								},
								{
									"name": "groupsHeader",
									"type": "Microsoft.Common.TextBlock",
									"visible": "[steps('hosts').configureSessionHosts]",
									"options": {
										"text": "<u>Share Access Assignments</u>"
									}
								},
								{
									"name": "groupsTextBlock",
									"type": "Microsoft.Common.TextBlock",
									"visible": "[equals(steps('userProfiles').deployStorage, true)]",
									"options": {
										"text": "Use the group picker blade to select the hybrid security groups that you want to grant access to the NetApp File Share for FSLogix profile management."
									}
								},
								{
									"name": "groupPickerBlade",
									"type": "Microsoft.Solutions.BladeInvokeControl",
									"openBladeStatus": "[steps('userProfiles').azureNetAppFiles.groupSelector.changing]",
									"bladeReference": {
										"name": "ObjectPickerBlade",
										"extension": "Microsoft_AAD_IAM",
										"parameters": {
											"queries": 4194304,
											"disablers": 4,
											"bladeSubtitle": "Pick the user groups",
											"additionalQueriesOnSearch": 0,
											"advancedQueryOptions": {
												"suggestedObjectsOptions": {}
											},
											"selectionMaximum": 20,
											"selectionMinimum": 1,
											"bladeTitle": "Select Groups",
											"informationHeader": {
												"informationText": "Select the user groups to assign to the FSLogix NetApp File Share(s)",
												"informationLink": ""
											},
											"inviteEnabled": true,
											"searchBoxLabel": "Search for a group",
											"searchBoxPlaceHolderText": "Enter a string in the group name",
											"searchBoxTooltip": "This is the tooltip",
											"searchGridNoRowsMessage": "No groups found",
											"selectButtonText": "Select Groups",
											"selectedGridLabel": "Selected Groups",
											"selectedGridNoRowsMessage": "You must select at least one group"
										},
										"inFullScreen": false
									},
									"transforms": {
										"selection": "selectedObjects|[*].{displayName:displayName, objectId:id}"
									}
								},
								{
									"name": "groupSelector",
									"type": "Microsoft.Common.Selector",
									"label": "Select User Groups",
									"keyPath": "displayName",
									"descriptionKeyPath": "id",
									"value": "[steps('userProfiles').aureNetAppFiles.groupPickerBlade.transformed.selection]",
									"visible": "[equals(steps('userProfiles').deployStorage, true)]",
									"barColor": "[if(empty(steps('userProfiles').azureNetAppFiles.groupPickerBlade), '#FF0000', '#7fba00')]",
									"constraints": {
										"required": true
									},
									"link": "[if(empty(steps('userProfiles').azureNetAppFiles.groupPickerBlade), 'Select groups', 'Edit selected groups')]"
								},
								{
									"name": "storageShareSize",
									"type": "Microsoft.Common.Slider",
									"label": "Storage Share Size (GB)",
									"defaultValue": 100,
									"toolTip": "Input the quota size for the SMB file share to support the use of FSLogix.",
									"min": 100,
									"max": 100000,
									"showStepMarkers": false,
									"constraints": {
										"required": true
									},
									"visible": "[equals(steps('userProfiles').deployStorage, true)]"
								},
								{
									"name": "configureSessionHostsHeader",
									"type": "Microsoft.Common.TextBlock",
									"visible": "[steps('hosts').configureSessionHosts]",
									"options": {
										"text": "<b>Session Host Configuration</b>"
									}
								},
								{
									"name": "localVolumesHeader",
									"type": "Microsoft.Common.TextBlock",
									"visible": "[and(steps('userProfiles').configureSessionHosts, not(equals(steps('userProfiles').deployStorage, true)))]",
									"options": {
										"text": "<u>Local NetApp Volume</u>"
									}
								},
								{
									"name": "localNetAppVolumesTextBlock",
									"type": "Microsoft.Common.TextBlock",
									"visible": "[and(steps('userProfiles').configureSessionHosts, not(equals(steps('userProfiles').deployStorage, true)))]",
									"options": {
										"text": "Use the drop down boxes below to select the local NetApp account, capacity pool, and volume that is used for the fslogix profile (and office) containers."
									}
								},
								{
									"name": "netAppAccountsApi",
									"type": "Microsoft.Solutions.ArmApiControl",
									"condition": "[and(not(empty(steps('basics').scope.subscription)), equals(steps('userProfiles').storageService, 'AzureNetAppFiles'), steps('userProfiles').configureSessionHosts)]",
									"request": {
										"method": "GET",
										"path": "[concat(steps('basics').scope.subscription.id, '/providers/Microsoft.NetApp/netAppAccounts?api-version=2023-11-01')]"
									}
								},
								{
									"name": "existingLocalNetAppAccount",
									"type": "Microsoft.Common.DropDown",
									"label": "Existing Local NetApp Account",
									"toolTip": "Select the existing local NetApp account to use for the FSLogix profile storage.",
									"constraints": {
										"allowedValues": "[map(filter(steps('userProfiles').azureNetAppFiles.netAppAccountsApi.value, (account) => equals(account.location, steps('basics').scope.location.name)), (account) => parse(concat('{\"label\":\"', account.name, '\",\"description\":\"ResourceGroup: ', first(skip(split(account.id, '/'), 4)), '\", \"value\":\"', account.id, '\"}')))]",
										"required": true
									},
									"visible": "[and(steps('userProfiles').configureSessionHosts, not(equals(steps('userProfiles').deployStorage, true)))]"
								},
								{
									"name": "localCapacityPoolsApi",
									"condition": "[not(empty(steps('userProfiles').azureNetAppFiles.existingLocalNetAppAccount))]",
									"type": "Microsoft.Solutions.ArmApiControl",
									"request": {
										"method": "GET",
										"path": "[concat(steps('userProfiles').azureNetAppFiles.existingLocalNetAppAccount, '/capacityPools?api-version=2023-11-01')]"
									}
								},
								{
									"name": "localCapacityPool",
									"type": "Microsoft.Common.DropDown",
									"label": "Local Capacity Pool",
									"multiLine": false,
									"toolTip": "Select an existing capacity pool from the selected NetApp Account.",
									"constraints": {
										"allowedValues": "[map(steps('userProfiles').azureNetAppFiles.localCapacityPoolsApi.value, (pool) => parse(concat('{\"label\":\"', last(split(pool.name, '/')), '\",\"value\":\"', pool.id, '\"}')))]",
										"required": true
									},
									"visible": "[and(steps('userProfiles').configureSessionHosts, not(equals(steps('userProfiles').deployStorage, true)))]"
								},
								{
									"name": "localVolumesApi",
									"condition": "[not(empty(steps('userProfiles').azureNetAppFiles.localCapacityPool))]",
									"type": "Microsoft.Solutions.ArmApiControl",
									"request": {
										"method": "GET",
										"path": "[concat(steps('userProfiles').azureNetAppFiles.localCapacityPool, '/volumes?api-version=2023-11-01')]"
									}
								},
								{
									"name": "localVolumes",
									"type": "Microsoft.Common.DropDown",
									"label": "Local Volume(s)",
									"multiselect": "[contains(steps('userProfiles').fslogixContainerType, 'OfficeContainer')]",
									"toolTip": "Select the existing volume from the selected NetApp capacity pool.",
									"constraints": {
										"allowedValues": "[map(steps('userProfiles').azureNetAppFiles.localVolumesApi.value, (vol) => parse(concat('{\"label\":\"', last(split(vol.name, '/')), '\",\"value\":\"', vol.id, '\"}')))]",
										"required": true
									},
									"visible": "[and(steps('userProfiles').configureSessionHosts, not(equals(steps('userProfiles').deployStorage, true)))]"
								},
								{
									"name": "remoteVolumeHeader",
									"type": "Microsoft.Common.TextBlock",
									"visible": "[and(steps('userProfiles').configureSessionHosts, contains(steps('userProfiles').fslogixContainerType, 'CloudCache'))]",
									"options": {
										"text": "<u>Remote Volume</u>"
									}
								},
								{
									"name": "remoteVolumesTextBlock",
									"type": "Microsoft.Common.TextBlock",
									"visible": "[and(steps('userProfiles').configureSessionHosts, contains(steps('userProfiles').fslogixContainerType, 'CloudCache'))]",
									"options": {
										"text": "<u>Optionally</u>, use the drop down boxes below to select a remote NetApp account, capacity pool, and volume(s) to use with Cloud Cache profile containers and office containers."
									}
								},
								{
									"name": "remoteNetAppAccount",
									"type": "Microsoft.Common.DropDown",
									"label": "Remote NetApp Account",
									"toolTip": "Select the existing local NetApp account to use for the FSLogix profile storage.",
									"multiLine": true,
									"constraints": {
										"allowedValues": "[map(filter(steps('userProfiles').azureNetAppFiles.netAppAccountsApi.value, (account) => not(equals(account.location, steps('basics').scope.location.name))), (account) => parse(concat('{\"label\":\"', account.name, '\",\"description\":\"Location: ', account.location, ', ResourceGroup: ', first(skip(split(account.id, '/'), 4)), '\", \"value\":\"', account.id, '\"}')))]",
										"required": false
									},
									"visible": "[and(steps('userProfiles').configureSessionHosts, contains(steps('userProfiles').fslogixContainerType, 'CloudCache'))]"
								},
								{
									"name": "remoteCapacityPoolsApi",
									"condition": "[not(empty(steps('userProfiles').azureNetAppFiles.remoteNetAppAccount))]",
									"type": "Microsoft.Solutions.ArmApiControl",
									"request": {
										"method": "GET",
										"path": "[concat(steps('userProfiles').azureNetAppFiles.remoteNetAppAccount, '/capacityPools?api-version=2023-11-01')]"
									}
								},
								{
									"name": "remoteCapacityPool",
									"type": "Microsoft.Common.DropDown",
									"label": "Remote Capacity Pool",
									"toolTip": "Select an existing capacity pool from the selected NetApp Account.",
									"constraints": {
										"allowedValues": "[map(steps('userProfiles').azureNetAppFiles.remoteCapacityPoolsApi.value, (pool) => parse(concat('{\"label\":\"', last(split(pool.name, '/')), '\",\"value\":\"', pool.id, '\"}')))]",
										"required": false
									},
									"visible": "[and(steps('userProfiles').configureSessionHosts, contains(steps('userProfiles').fslogixContainerType, 'CloudCache'))]"
								},
								{
									"name": "remoteVolumesApi",
									"condition": "[not(empty(steps('userProfiles').azureNetAppFiles.remoteCapacityPool))]",
									"type": "Microsoft.Solutions.ArmApiControl",
									"request": {
										"method": "GET",
										"path": "[concat(steps('userProfiles').azureNetAppFiles.remoteCapacityPool, '/volumes?api-version=2023-11-01')]"
									}
								},
								{
									"name": "remoteVolumes",
									"type": "Microsoft.Common.DropDown",
									"label": "Remote Volume(s)",
									"multiselect": "[contains(steps('userProfiles').fslogixContainerType, 'OfficeContainer')]",
									"toolTip": "Select the office-containers and profile-containers volumes from the selected NetApp capacity pool.",
									"constraints": {
										"allowedValues": "[map(steps('userProfiles').azureNetAppFiles.remoteVolumesApi.value, (vol) => parse(concat('{\"label\":\"', last(split(vol.name, '/')), '\",\"value\":\"', vol.id, '\"}')))]",
										"required": false
									},
									"visible": "[and(steps('userProfiles').configureSessionHosts, contains(steps('userProfiles').fslogixContainerType, 'CloudCache'))]"
								}
							]
						},
						{
							"name": "azureFiles",
							"type": "Microsoft.Common.Section",
							"label": "Azure Files",
							"visible": "[equals(steps('userProfiles').storageService, 'AzureFiles')]",
							"elements": [
								{
									"name": "storageSku",
									"type": "Microsoft.Common.DropDown",
									"visible": "[equals(steps('userProfiles').deployStorage, true)]",
									"label": "Azure Files SKU",
									"toolTip": "Select the Azure Files Sku.",
									"constraints": {
										"allowedValues": [
											{
												"label": "Premium",
												"value": "Premium"
											},
											{
												"label": "Standard",
												"value": "Standard"
											}
										]
									}
								},
								{
									"name": "shardingHeader",
									"type": "Microsoft.Common.TextBlock",
									"visible": "[and(or(steps('userProfiles').configureSessionHosts, equals(steps('userProfiles').deployStorage, true)), not(equals(steps('hosts').identity.solution, 'EntraId')))]",
									"options": {
										"text": "<u>Sharding and User Group(s) to Share Assignment(s)</u>"
									}
								},
								{
									"name": "shardingTextBlock1",
									"type": "Microsoft.Common.TextBlock",
									"visible": "[and(or(steps('userProfiles').configureSessionHosts, equals(steps('userProfiles').deployStorage, true)), not(equals(steps('hosts').identity.solution, 'EntraId')))]",
									"options": {
										"text": "In order to improve scalability of user profile data, you have the option to deploy more than one storage account per host pool. This architectural pattern is called 'Sharding'.",
										"link": {
											"label": "Sharding pattern - Azure Architecture Center | Microsoft Learn",
											"uri": "https://learn.microsoft.com/en-us/azure/architecture/patterns/sharding"
										}
									}
								},
								{
									"name": "shardingInfoBox1",
									"type": "Microsoft.Common.InfoBox",
									"visible": "[and(or(steps('userProfiles').configureSessionHosts, equals(steps('userProfiles').deployStorage, true)), not(equals(steps('hosts').identity.solution, 'EntraId')))]",
									"options": {
										"style": "Info",
										"text": "If you choose to Shard the user profile storage, you must provide a group to assign to each storage account. In order to minimize login times, to provide create more than four (4) storage accounts, you must select the 'Sharding via Object Specific Settings' option below and use the instructions found in the link here to configure object specific settings for the VHDLocations or CCDLocations paths.",
										"uri": "https://learn.microsoft.com/en-us/fslogix/how-to-configure-object-specific-settings"
									}
								},
								{
									"name": "shardingOption",
									"type": "Microsoft.Common.OptionsGroup",
									"label": "Sharding Options",
									"defaultValue": "No Sharding",
									"constraints": {
										"allowedValues": [
											{
												"label": "No Sharding",
												"value": "None"
											},
											{
												"label": "Sharding via Permissions (Max 4 Storage Accounts)",
												"value": "ShardPerms"
											},
											{
												"label": "Sharding via Object Specific Settings",
												"value": "ShardOSS"
											}
										]
									},
									"visible": "[and(or(steps('userProfiles').configureSessionHosts, equals(steps('userProfiles').deployStorage, true)), not(equals(steps('hosts').identity.solution, 'EntraId')))]"
								},
								{
									"name": "groupPickerBlade",
									"type": "Microsoft.Solutions.BladeInvokeControl",
									"openBladeStatus": "[steps('userProfiles').azureFiles.groupSelector.changing]",
									"bladeReference": {
										"name": "ObjectPickerBlade",
										"extension": "Microsoft_AAD_IAM",
										"parameters": {
											"queries": "[if(equals(steps('userProfiles').azureFiles.shardingOption, 'ShardPerms'), 32, 4194304)]",
											"disablers": 4,
											"bladeSubtitle": "Pick the groups to assign",
											"additionalQueriesOnSearch": 0,
											"advancedQueryOptions": {
												"suggestedObjectsOptions": {}
											},
											"selectionMaximum": 20,
											"selectionMinimum": 1,
											"bladeTitle": "Select Groups",
											"informationHeader": {
												"informationText": "Select the groups to assign to the desktop application group",
												"informationLink": ""
											},
											"inviteEnabled": true,
											"searchBoxLabel": "Search for a group",
											"searchBoxPlaceHolderText": "Enter a string in the group name",
											"searchBoxTooltip": "This is the tooltip",
											"searchGridNoRowsMessage": "No groups found",
											"selectButtonText": "Select Groups",
											"selectedGridLabel": "Selected User Groups",
											"selectedGridNoRowsMessage": "You must select at least one group"
										},
										"inFullScreen": false
									},
									"transforms": {
										"selection": "selectedObjects|[*].{displayName:displayName, objectId:id}"
									}
								},
								{
									"name": "groupSelector",
									"type": "Microsoft.Common.Selector",
									"label": "Select User Groups",
									"keyPath": "displayName",
									"descriptionKeyPath": "id",
									"value": "[steps('userProfiles').azureFiles.groupPickerBlade.transformed.selection]",
									"visible": "[and(or(steps('userProfiles').configureSessionHosts, equals(steps('userProfiles').deployStorage, true)), not(equals(steps('hosts').identity.solution, 'EntraId')), not(equals(steps('userProfiles').azureFiles.shardingOption, 'None')))]",
									"barColor": "[if(empty(steps('userProfiles').azureFiles.groupPickerBlade), '#FF0000', '#7fba00')]",
									"constraints": {
										"required": true
									},
									"link": "[if(empty(steps('userProfiles').azureFiles.groupPickerBlade), 'Select groups', 'Re-select groups')]"
								},
								{
									"name": "shardingTooManyGroupsErrorBox",
									"type": "Microsoft.Common.InfoBox",
									"visible": "[and(equals(steps('userProfiles').azureFiles.shardingOption, 'ShardPerms'), greater(length(steps('userProfiles').azureFiles.groupPickerBlade.transformed.selection), 4))]",
									"options": {
										"style": "Error",
										"text": "You selected (or provided) over 4 groups. You can select/provide a maximum of 4 groups when choosing 'Sharding with Permissions' in order to minimize login time and maintain compatibility with Cloud Cache (if used). Either reduce the number of groups, or select 'Sharding with Object Specific Settings' and follow the instructions provided in the link to configure the registry on the session hosts.",
										"uri": "https://learn.microsoft.com/en-us/fslogix/how-to-configure-object-specific-settings"
									}
								},
								{
									"name": "storageAccountDeployedNumberTextBlock",
									"type": "Microsoft.Common.TextBlock",
									"visible": "[and(equals(steps('userProfiles').deployStorage, true), and(not(equals(steps('hosts').identity.solution, 'EntraId')), not(equals(steps('userProfiles').azureFiles.shardingOption, 'None'))))]",
									"options": {
										"text": "The number of groups selected or provided above determines the number of storage accounts deployed by this solution. The storage account names are automatically determined by combining a suffix with a 0-padded two digit suffix starting at the 'Storage Index' value."
									}
								},
								{
									"name": "storageAccountsRequiredTextBlock",
									"type": "Microsoft.Common.TextBlock",
									"visible": "[and(not(equals(steps('userProfiles').deployStorage, true)), steps('userProfiles').configureSessionHosts, and(not(equals(steps('hosts').identity.solution, 'EntraId')), not(equals(steps('userProfiles').azureFiles.shardingOption, 'None'))))]",
									"options": {
										"text": "The number of groups selected or provided above determines the number of storage accounts that are required when selecting existing accounts."
									}
								},
								{
									"name": "entraIdTexBlock",
									"type": "Microsoft.Common.TextBlock",
									"visible": "[and(or(steps('userProfiles').configureSessionHosts, equals(steps('userProfiles').deployStorage, true)), equals(steps('hosts').identity.solution, 'EntraId'))]",
									"options": {
										"text": "A total of 1 storage account will be deployed/required because you chose the 'Entra Id' identity provider on the 'Session Host' screen. Currently, Entra Id does not support sharding storage with multiple storage accounts."
									}
								},
								{
									"name": "noShardingTexBlock",
									"type": "Microsoft.Common.TextBlock",
									"visible": "[and(or(steps('userProfiles').configureSessionHosts, equals(steps('userProfiles').deployStorage, true)), equals(steps('userProfiles').azureFiles.shardingOption, 'None'))]",
									"options": {
										"text": "A total of 1 storage account will be deployed/required because you have chosen not to Shard your storage."
									}
								},
								{
									"name": "storageCount",
									"type": "Microsoft.Common.Slider",
									"label": "Storage Accounts Required (Read Only)",
									"defaultValue": 1,
									"min": "[if(or(equals(steps('hosts').identity.solution, 'EntraId'), equals(steps('userProfiles').azureFiles.shardingOption, 'None')), 1, length(steps('userProfiles').azureFiles.groupPickerBlade.transformed.selection))]",
									"max": "[if(or(equals(steps('hosts').identity.solution, 'EntraId'), equals(steps('userProfiles').azureFiles.shardingOption, 'None')), 1, length(steps('userProfiles').azureFiles.groupPickerBlade.transformed.selection))]",
									"showStepMarkers": false,
									"visible": "[or(steps('userProfiles').configureSessionHosts, equals(steps('userProfiles').deployStorage, true))]"
								},
								{
									"name": "storageIndex",
									"type": "Microsoft.Common.Slider",
									"label": "Storage Index",
									"defaultValue": 1,
									"toolTip": "Input the starting number of the storage accounts to deploy with SMB file shares to support the use of FSLogix.",
									"min": 1,
									"max": "[sub(99, steps('userProfiles').azureFiles.storageCount)]",
									"showStepMarkers": false,
									"constraints": {
										"required": true
									},
									"visible": "[equals(steps('userProfiles').deployStorage, true)]"
								},
								{
									"name": "storageShareSize",
									"type": "Microsoft.Common.Slider",
									"label": "Storage Share Size (GB)",
									"defaultValue": 100,
									"toolTip": "Input the quota size for the SMB file share to support the use of FSLogix.",
									"min": 100,
									"max": 100000,
									"showStepMarkers": false,
									"constraints": {
										"required": true
									},
									"visible": "[equals(steps('userProfiles').deployStorage, true)]"
								},
								{
									"name": "storageKerberosEncryption",
									"type": "Microsoft.Common.DropDown",
									"visible": "[and(equals(steps('userProfiles').deployStorage, true), not(equals(steps('hosts').identity.solution, 'EntraId')))]",
									"label": "Storage Kerberos Encryption",
									"defaultValue": "AES256",
									"toolTip": "Select the Kerberos encryption for the SMB file shares to support the use of FSLogix.",
									"constraints": {
										"required": true,
										"allowedValues": [
											{
												"label": "AES256",
												"value": "AES256"
											},
											{
												"label": "RC4",
												"value": "RC4"
											}
										]
									}
								},
								{
									"name": "keyManagementHeader",
									"type": "Microsoft.Common.TextBlock",
									"visible": "[equals(steps('userProfiles').deployStorage, true)]",
									"options": {
										"text": "<u>Encryption Key Management</u>"
									}
								},
								{
									"name": "keyManagementTextBox1",
									"type": "Microsoft.Common.TextBlock",
									"visible": "[equals(steps('userProfiles').deployStorage, true)]",
									"options": {
										"link": {
											"label": "Microsoft Learn | Azure Storage - Customer Managed Keys",
											"uri": "https://learn.microsoft.com/en-us/azure/storage/common/customer-managed-keys-overview"
										},
										"text": "Azure Storage uses service-side encryption (SSE) to automatically encrypt your data when it is persisted to the cloud. Data in storage accounts is encrypted with Microsoft-managed keys by default. You can continue to rely on Microsoft-managed keys for the encryption of your data, or you can manage encryption with your own keys. You can specify a customer-managed key to use for encrypting and decrypting data in Blob Storage and in Azure Files. Customer-managed keys must be stored in Azure Key Vault or Azure Key Vault Managed Hardware Security Model (HSM)."
									}
								},
								{
									"name": "keyManagementInfobox1",
									"type": "Microsoft.Common.InfoBox",
									"visible": "[equals(steps('userProfiles').deployStorage, true)]",
									"options": {
										"text": "In some environments it is required to utilize Customer Managed Keys and protect those keys in a premium key vault with the keys stored in a FIPS 140 validated Hardware Security Module. This is most common in IL5 type environments. Selecting a Customer Managed Key Hardware Security Module (HSM) option will ensure that all storage accounts protected with this configuration. Click this box for more information.",
										"uri": "https://learn.microsoft.com/en-us/azure/azure-government/documentation-government-impact-level-5#storage-isolation",
										"style": "Info"
									}
								},
								{
									"name": "keyManagement",
									"type": "Microsoft.Common.DropDown",
									"visible": "[equals(steps('userProfiles').deployStorage, true)]",
									"label": "Storage Encryption Key Management",
									"defaultValue": "[if(contains(steps('hosts').diskEncryption.keyManagement, 'Customer'), if(contains(steps('hosts').diskEncryption.keyManagement, 'HSM'), 'Customer-Managed Keys protected by HSM', 'Customer-Managed Keys'), 'Microsoft-Managed Keys')]",
									"toolTip": "Select the type of Key Management to use for the FSLogix storage account(s) encryption keys.",
									"constraints": {
										"required": true,
										"allowedValues": [
											{
												"label": "Microsoft-Managed Keys",
												"value": "MicrosoftManaged"
											},
											{
												"label": "Customer-Managed Keys",
												"value": "CustomerManaged"
											},
											{
												"label": "Customer-Managed Keys protected by HSM",
												"value": "CustomerManagedHSM"
											}
										]
									}
								},
								{
									"name": "configureSessionHostsHeader",
									"type": "Microsoft.Common.TextBlock",
									"visible": "[and(steps('userProfiles').configureSessionHosts, or(not(equals(steps('userProfiles').deployStorage, true)), contains(steps('userProfiles').fslogixContainerType, 'CloudCache')))]",
									"options": {
										"text": "<b>Session Host Configuration</b>"
									}
								},
								{
									"name": "storageAccountsApi",
									"type": "Microsoft.Solutions.ArmApiControl",
									"condition": "[and(not(empty(steps('basics').scope.subscription)), steps('userProfiles').configureSessionHosts)]",
									"request": {
										"method": "GET",
										"path": "[concat(steps('basics').scope.subscription.id, '/providers/Microsoft.Storage/storageAccounts?api-version=2023-01-01')]",
										"transforms": {
											"list": "sort_by(value, &name)|[*].{saName:name, resourceId:id, region:location, skuName:sku.name}"
										}
									}
								},
								{
									"name": "localAccountsHeader",
									"type": "Microsoft.Common.TextBlock",
									"visible": "[and(steps('userProfiles').configureSessionHosts, not(equals(steps('userProfiles').deployStorage, true)))]",
									"options": {
										"text": "<u>Local Storage Accounts</u>"
									}
								},
								{
									"name": "notDeployedOnlyOneSATextBox",
									"type": "Microsoft.Common.TextBlock",
									"visible": "[and(steps('userProfiles').configureSessionHosts, not(equals(steps('userProfiles').deployStorage, true)), or(equals(steps('userProfiles').azureFiles.shardingOption, 'None'), equals(steps('hosts').identity.solution, 'EntraId')))]",
									"options": {
										"text": "Select a single storage account from the same region as the session hosts. The session hosts will be configured to store user profiles on this storage account."
									}
								},
								{
									"name": "notDeployedMorethanOneSATextBox",
									"type": "Microsoft.Common.TextBlock",
									"visible": "[and(steps('userProfiles').configureSessionHosts, not(equals(steps('userProfiles').deployStorage, true)), not(equals(steps('hosts').identity.solution, 'EntraId')), not(equals(steps('userProfiles').azureFiles.shardingOption, 'None')))]",
									"options": {
										"text": "Select the same number of storage accounts as the groups selected/provided above from the same region as the session hosts. The session hosts will be configured to store user profiles on these storage accounts."
									}
								},
								{
									"name": "existingLocalStorageAccounts",
									"type": "Microsoft.Common.DropDown",
									"label": "Existing Local Storage Accounts",
									"multiLine": true,
									"multiselect": true,
									"toolTip": "",
									"constraints": {
										"allowedValues": "[map(filter(steps('userProfiles').azureFiles.storageAccountsApi.transformed.list, (sa) => equals(sa.region, steps('basics').scope.location.name)), (sa) => parse(concat('{\"label\":\"', sa.saName, '\",\"description\":\"ResourceGroup: ', first(skip(split(sa.resourceId, '/'), 4)),  ', Location: ', sa.region, '\", \"value\":\"', sa.resourceId, '\"}')))]",
										"required": true
									},
									"visible": "[and(steps('userProfiles').configureSessionHosts, not(equals(steps('userProfiles').deployStorage, true)))]"
								},
								{
									"name": "wrongNumberOfLocalStorageAccounts",
									"type": "Microsoft.Common.InfoBox",
									"visible": "[and(steps('userProfiles').configureSessionHosts, not(equals(steps('userProfiles').deployStorage, true)), not(equals(steps('userProfiles').azureFiles.storageCount, length(steps('userProfiles').azureFiles.existingLocalStorageAccounts))))]",
									"options": {
										"style": "Error",
										"text": "You have not selected the correct number of storage accounts. You must select the correct number before continuing or the session hosts will not be configured properly."
									}
								},
								{
									"name": "remoteAccountsHeader",
									"type": "Microsoft.Common.TextBlock",
									"visible": "[and(steps('userProfiles').configureSessionHosts, contains(steps('userProfiles').fslogixContainerType, 'CloudCache'))]",
									"options": {
										"text": "<u>Remote Storage Accounts</u>"
									}
								},
								{
									"name": "singleSACCTextBox",
									"type": "Microsoft.Common.TextBlock",
									"visible": "[and(steps('userProfiles').configureSessionHosts, or(equals(steps('userProfiles').azureFiles.shardingOption, 'None'), equals(steps('hosts').identity.solution, 'EntraId')), contains(steps('userProfiles').fslogixContainerType, 'CloudCache'))]",
									"options": {
										"text": "<u>Optionally</u>, select a remote region (not in the same region as your session hosts) and then a single storage account from the selected region for active/active disaster recovery or high availability of user profiles using FSLogix Cloud Cache."
									}
								},
								{
									"name": "morethanOneSACCTextBox",
									"type": "Microsoft.Common.TextBlock",
									"visible": "[and(steps('userProfiles').configureSessionHosts, contains(steps('userProfiles').fslogixContainerType, 'CloudCache'), not(equals(steps('hosts').identity.solution, 'EntraId')), not(equals(steps('userProfiles').azureFiles.shardingOption, 'None')))]",
									"options": {
										"text": "<u>Optionally</u>, select a remote region (not in the same region as your session hosts) and then the same number of storage accounts as the groups selected/provided above in the selected remote region. The session hosts will be configured to also store user profiles on these remote storage accounts using FSLogix Cloud Cache."
									}
								},
								{
									"name": "locationsApi",
									"type": "Microsoft.Solutions.ArmApiControl",
									"condition": "[and(steps('userProfiles').configureSessionHosts, contains(steps('userProfiles').fslogixContainerType, 'CloudCache'))]",
									"request": {
										"method": "GET",
										"path": "[concat(steps('basics').scope.subscription.id, '/locations?api-version=2022-12-01')]",
										"transforms": {
											"list": "value[?name!='global']|[*].{displayName:displayName, name:name}"
										}
									}
								},
								{
									"name": "remoteLocation",
									"type": "Microsoft.Common.DropDown",
									"label": "Remote Location of Storage Account(s)",
									"toolTip": "Select the Remote Location.",
									"defaultDescription": "",
									"constraints": {
										"allowedValues": "[map(filter(steps('userProfiles').azureFiles.locationsApi.transformed.list, (loc) => not(equals(loc.name, steps('basics').scope.location.name))), (loc) => parse(concat('{\"label\":\"', loc.displayName, '\",\"value\":\"', loc.name, '\"}')))]",
										"required": false
									},
									"visible": "[and(steps('userProfiles').configureSessionHosts, contains(steps('userProfiles').fslogixContainerType, 'CloudCache'))]"
								},
								{
									"name": "existingRemoteStorageAccounts",
									"type": "Microsoft.Common.DropDown",
									"label": "Existing Remote Storage Accounts",
									"multiLine": true,
									"multiselect": true,
									"toolTip": "",
									"constraints": {
										"allowedValues": "[map(filter(steps('userProfiles').azureFiles.storageAccountsApi.transformed.list, (sa) => equals(sa.region, steps('userProfiles').azureFiles.remoteLocation)), (sa) => parse(concat('{\"label\":\"', sa.saName, '\",\"description\":\"ResourceGroup: ', first(skip(split(sa.resourceId, '/'), 4)), '\", \"value\":\"', sa.resourceId, '\"}')))]",
										"required": false
									},
									"visible": "[and(steps('userProfiles').configureSessionHosts, contains(steps('userProfiles').fslogixContainerType, 'CloudCache'))]"
								},
								{
									"name": "wrongNumberOfRemoteStorageAccounts",
									"type": "Microsoft.Common.InfoBox",
									"visible": "[and(steps('userProfiles').configureSessionHosts, contains(steps('userProfiles').fslogixContainerType, 'CloudCache'), not(equals(length(steps('userProfiles').azureFiles.existingRemoteStorageAccounts), 0)) , not(equals(steps('userProfiles').azureFiles.storageCount, length(steps('userProfiles').azureFiles.existingRemoteStorageAccounts))))]",
									"options": {
										"style": "Error",
										"text": "You have not selected the correct number of storage accounts. You must select the correct number before continuing or the session hosts will not be configured properly."
									}
								}
							]
						},
						{
							"name": "shareManagement",
							"type": "Microsoft.Common.Section",
							"label": "Share Management",
							"visible": "[and(not(equals(steps('hosts').identity.solution, 'EntraId')), equals(steps('userProfiles').deployStorage, true))]",
							"elements": [
								{
									"name": "shareManagementTextBox1",
									"type": "Microsoft.Common.TextBlock",
									"options": {
										"text": "You can optionally enter cloud synced Active Directory sourced groups that will be assigned admin permissions to the file share to facilitate user profile management troubleshooting."
									}
								},
								{
									"name": "configureAdminAccess",
									"type": "Microsoft.Common.CheckBox",
									"label": "Add Admin Access to File Share",
									"defaultValue": false,
									"visible": true
								},
								{
									"name": "groupPickerBlade",
									"type": "Microsoft.Solutions.BladeInvokeControl",
									"openBladeStatus": "[steps('userProfiles').shareManagement.groupSelector.changing]",
									"bladeReference": {
										"name": "ObjectPickerBlade",
										"extension": "Microsoft_AAD_IAM",
										"parameters": {
											"queries": 4194304,
											"disablers": 4,
											"bladeSubtitle": "Pick the groups to assign",
											"additionalQueriesOnSearch": 0,
											"advancedQueryOptions": {
												"suggestedObjectsOptions": {}
											},
											"selectionMaximum": 20,
											"selectionMinimum": 1,
											"bladeTitle": "Select Groups",
											"informationHeader": {
												"informationText": "Select the groups to assign to the desktop application group",
												"informationLink": ""
											},
											"inviteEnabled": true,
											"searchBoxLabel": "Search for a group",
											"searchBoxPlaceHolderText": "Enter a string in the group name",
											"searchBoxTooltip": "This is the tooltip",
											"searchGridNoRowsMessage": "No groups found",
											"selectButtonText": "Select Groups",
											"selectedGridLabel": "Selected Admin Groups",
											"selectedGridNoRowsMessage": "You must select at least one group"
										},
										"inFullScreen": false
									},
									"transforms": {
										"selection": "selectedObjects|[*].{displayName:displayName, objectId:id}"
									}
								},
								{
									"name": "groupSelector",
									"type": "Microsoft.Common.Selector",
									"label": "Select Admin Groups",
									"keyPath": "displayName",
									"descriptionKeyPath": "id",
									"value": "[steps('userProfiles').shareManagement.groupPickerBlade.transformed.selection]",
									"visible": "[steps('userProfiles').shareManagement.configureAdminAccess]",
									"barColor": "[if(empty(steps('userProfiles').shareManagement.groupPickerBlade), '#FF0000', '#7fba00')]",
									"constraints": {
										"required": true
									},
									"link": "[if(empty(steps('userProfiles').shareManagement.groupPickerBlade), 'Select groups', 'Re-select groups')]"
								}
							]
						}
					]
				},
				{
					"name": "management",
					"label": "Management",
					"elements": [
						{
							"name": "automation",
							"type": "Microsoft.Common.Section",
							"label": "Automation",
							"elements": [
								{
									"name": "drainMode",
									"type": "Microsoft.Common.CheckBox",
									"label": "Drain Mode",
									"toolTip": "Enables drain mode on the AVD session hosts so the virtual machines cannot be accessed until they have been validated."
								},
								{
									"name": "deployIncreaseQuota",
									"type": "Microsoft.Common.CheckBox",
									"visible": "[and(equals(steps('basics').deploymentType, 'Complete'), equals(steps('userProfiles').azureFiles.storageSku, 'Premium'))]",
									"label": "Enable File Share Automatic Quota Increase",
									"toolTip": "Choose to deploy a function app that will automatically increase your Azure Premium File Share quota when the remaining space is at a critical level."
								}
							]
						},
						{
							"name": "backup",
							"type": "Microsoft.Common.Section",
							"label": "Backup and Recovery",
							"visible": "[or(equals(steps('basics').deploymentType, 'Complete'), equals(steps('controlPlane').hostPoolApi.properties.hostPoolType, 'Personal'))]",
							"elements": [
								{
									"name": "recoveryServices",
									"type": "Microsoft.Common.CheckBox",
									"label": "Enable Recovery Services",
									"toolTip": "Choose to deploy backups for your solution. For a personal host pool, this will enable backups on the virtual machines. For a pooled host pool, this will enable backups on the FSLogix file share when using Azure Files."
								},
								{
									"name": "recoveryServicesVaultApi",
									"type": "Microsoft.Solutions.ArmApiControl",
									"condition": "[and(equals(steps('basics').deploymentType, 'SessionHostsOnly'), steps('management').backup.recoveryServices)]",
									"request": {
										"method": "GET",
										"path": "[concat(steps('basics').resourceGroup, '/providers/Microsoft.RecoveryServices/vaults?api-version=2024-10-01')]",
										"transforms": {
											"list": "value|[*].{label:name, value:id}"
										}
									}
								},
								{
									"name": "recoveryServicesVault",
									"type": "Microsoft.Common.DropDown",
									"label": "Recovery Services Vault",
									"constraints": {
										"allowedValues": "[steps('management').backup.recoveryServicesVaultApi.transformed.list]",
										"required": true
									},
									"visible": "[and(equals(steps('basics').deploymentType, 'SessionHostsOnly'), steps('management').backup.recoveryServices)]"
								},
								{
									"name": "associateDiskAccessResource",
									"type": "Microsoft.Common.CheckBox",
									"label": "Associate VM(s) with Disk Access Resource",
									"toolTip": "Disk Access Resources are used to allow Azure Backup to access the managed disk over the private network in order to perform the backup.",
									"visible": "[and(equals(steps('basics').deploymentType, 'SessionHostsOnly'), steps('management').backup.recoveryServices)]"
								},
								{
									"name": "diskAccessesApi",
									"type": "Microsoft.Solutions.ArmApiControl",
									"condition": "[and(equals(steps('basics').deploymentType, 'SessionHostsOnly'), steps('management').backup.associateDiskAccessResource)]",
									"request": {
										"method": "GET",
										"path": "[concat(steps('basics').resourceGroup, '/providers/Microsoft.Compute/diskAccesses?api-version=2024-03-02')]",
										"transforms": {
											"list": "value|[*].{label:name, value:id}"
										}
									}
								},
								{
									"name": "diskAccess",
									"type": "Microsoft.Common.DropDown",
									"label": "Disk Access",
									"toolTip": "Select the existing Disk Access Resource",
									"constraints": {
										"allowedValues": "[steps('management').backup.diskAccessesApi.transformed.list]",
										"required": true
									},
									"visible": "[and(equals(steps('basics').deploymentType, 'SessionHostsOnly'), steps('management').backup.associateDiskAccessResource)]"
								}
							]
						},
						{
							"name": "keyVaults",
							"type": "Microsoft.Common.Section",
							"label": "Key Vaults",
							"visible": "[equals(steps('basics').deploymentType, 'Complete')]",
							"elements": [
								{
									"name": "deploySecretsKeyVault",
									"type": "Microsoft.Common.CheckBox",
									"label": "Deploy VM Secrets Key Vault",
									"toolTip": "Select to deploy a key vault and create secrets for VM Admin user and password and if applicable, the domain join username and password."
								},
								{
									"name": "keyVaultRetentionInDays",
									"type": "Microsoft.Common.Slider",
									"label": "Key Vault Retention (in Days)",
									"defaultValue": 90,
									"showStepMarkers": false,
									"toolTip": "The number of days Key Vaults are kept in the recycle bin. Soft delete is designed to prevent accidental deletion of your key vault and keys, secrets, and certificates stored inside key vault. When you delete a key vault or a key vault object, it remains recoverable for a user configurable retention period or a default of 90 days.",
									"min": 7,
									"max": 90,
									"visible": "[or(steps('management').automation.deploySecretsKeyVault, contains(steps('hosts').diskEncryption.keyManagement, 'CustomerManaged'), contains(steps('userProfiles').azureFiles.keyManagement, 'CustomerManaged'))]"
								},
								{
									"name": "keyExpirationInDays",
									"type": "Microsoft.Common.Slider",
									"label": "Encryption Key Rotation (in Days)",
									"defaultValue": 180,
									"showStepMarkers": false,
									"toolTip": "The number of days before a new key version is automatically generated in the Azure Key Vault.",
									"min": 30,
									"max": 180,
									"visible": "[or(contains(steps('hosts').diskEncryption.keyManagement, 'CustomerManaged'), contains(steps('userProfiles').azureFiles.keyManagement, 'CustomerManaged'))]"
								}
							]
						},
						{
							"name": "monitoring",
							"type": "Microsoft.Common.Section",
							"label": "Monitoring",
							"visible": true,
							"elements": [
								{
									"name": "enableMonitoring",
									"type": "Microsoft.Common.CheckBox",
									"visible": true,
									"label": "Enable Monitoring for AVD and VM Insights",
									"defaultValue": true,
									"toolTip": "Deploy the required resources to enable AVD and VM Insights."
								},
								{
									"name": "dataCollectionRulesApi",
									"condition": "[and(equals(steps('basics').deploymentType, 'SessionHostsOnly'), steps('management').monitoring.enableMonitoring)]",
									"type": "Microsoft.Solutions.ArmApiControl",
									"request": {
										"method": "GET",
										"path": "[concat(steps('basics').scope.subscription.id, '/providers/Microsoft.Insights/dataCollectionRules?api-version=2023-03-11')]"
									}
								},
								{
									"name": "avdInsightsDataCollectionRule",
									"type": "Microsoft.Common.DropDown",
									"visible": "[and(equals(steps('basics').deploymentType, 'SessionHostsOnly'), steps('management').monitoring.enableMonitoring)]",
									"label": "AVD Insights Data Collection Rule",
									"multiLine": true,
									"toolTip": "Select the existing AVD Insights Data Collection Rule.",
									"constraints": {
										"allowedValues": "[map(filter(steps('management').monitoring.dataCollectionRulesApi.value, (dcr) => contains(dcr.name, 'avdi')), (dcr) => parse(concat('{\"label\":\"', dcr.name, '\",\"description\":\"Resource Group: ', first(skip(split(dcr.id, '/'), 4)), ', Location: ', dcr.location, '\",\"value\":\"', dcr.id, '\"}')))]",
										"required": false
									}
								},
								{
									"name": "vmInsightsDataCollectionRule",
									"type": "Microsoft.Common.DropDown",
									"visible": "[and(equals(steps('basics').deploymentType, 'SessionHostsOnly'), steps('management').monitoring.enableMonitoring)]",
									"label": "VM Insights Data Collection Rule",
									"multiLine": true,
									"toolTip": "Select the existing Virtual Machines Insights Data Collection Rule.",
									"constraints": {
										"allowedValues": "[map(filter(steps('management').monitoring.dataCollectionRulesApi.value, (dcr) => contains(dcr.name, 'MSVMI')), (dcr) => parse(concat('{\"label\":\"', dcr.name, '\",\"description\":\"Resource Group: ', first(skip(split(dcr.id, '/'), 4)), ', Location: ', dcr.location, '\",\"value\":\"', dcr.id, '\"}')))]",
										"required": false
									}
								},
								{
									"name": "enableCentralMonitoring",
									"type": "Microsoft.Common.CheckBox",
									"visible": true,
									"label": "Configure Centralized Security Monitoring for Session Hosts",
									"toolTip": "Creates a Data Collection Rule Association to use the Azure Monitoring Agent for collecting data in a centralized workspace."
								},
								{
									"name": "securityDataCollectionRule",
									"type": "Microsoft.Solutions.ResourceSelector",
									"label": "Security Monitoring Data Collection Rule",
									"visible": "[steps('management').monitoring.enableCentralMonitoring]",
									"resourceType": "Microsoft.Insights/dataCollectionRules",
									"toolTip": "Select the Data Collection Rule used for collecting security data for Sentinel or Defender for Cloud. This is required to create the Data Collection Rule Association",
									"constraints": {
										"required": true
									}
								},
								{
									"name": "dataCollectionEndpointsApi",
									"condition": "[and(equals(steps('basics').deploymentType, 'SessionHostsOnly'), steps('management').monitoring.enableMonitoring)]",
									"type": "Microsoft.Solutions.ArmApiControl",
									"request": {
										"method": "GET",
										"path": "[concat(steps('basics').scope.subscription.id, '/providers/Microsoft.Insights/dataCollectionEndpoints?api-version=2023-03-11')]"
									}
								},
								{
									"name": "dataCollectionEndpoint",
									"type": "Microsoft.Common.DropDown",
									"visible": "[and(equals(steps('basics').deploymentType, 'SessionHostsOnly'), steps('management').monitoring.enableMonitoring)]",
									"label": "Data Collection Endpoint",
									"multiLine": true,
									"toolTip": "Select the existing Data Collection Endpoint.",
									"constraints": {
										"allowedValues": "[map(filter(steps('management').monitoring.dataCollectionEndpointsApi.value, (dce) => equals(dce.location, steps('basics').scope.location.name)), (dce) => parse(concat('{\"label\":\"', dce.name, '\",\"description\":\"Resource Group: ', first(skip(split(dce.id, '/'), 4)), ', Location: ', dce.location, '\",\"value\":\"', dce.id, '\"}')))]",
										"required": false
									}
								}
							]
						}
					]
				},
				{
					"name": "zeroTrust",
					"label": "Zero Trust Configuration",
					"elements": [
						{
							"name": "zeroTrusttextBlock0",
							"type": "Microsoft.Common.TextBlock",
							"visible": "[equals(steps('basics').deploymentType, 'SessionHostsOnly')]",
							"options": {
								"text": "This page is intentionally blank when only completing a Session Host Deployment."
							}
						},
						{
							"name": "zeroTrusttextBlock1",
							"type": "Microsoft.Common.TextBlock",
							"options": {
								"text": "Zero Trust is a new security model that assumes breach and verifies each request as though it originated from an uncontrolled network.",
								"link": {
									"label": "Microsoft Learn | Zero Trust Security",
									"uri": "https://learn.microsoft.com/en-us/azure/security/fundamentals/zero-trust"
								}
							},
							"visible": "[equals(steps('basics').deploymentType, 'Complete')]"
						},
						{
							"name": "privateEndpoints",
							"type": "Microsoft.Common.Section",
							"label": "Private Endpoints",
							"visible": "[and(equals(steps('basics').deploymentType, 'Complete'), or(and(equals(steps('controlPlane').hostPool.type, 'Personal'), steps('management').backup.recoveryServices), and(equals(steps('userProfiles').deployStorage, true), equals(steps('userProfiles').storageService, 'AzureFiles')), or(steps('hosts').diskEncryption.confidentialVMOSDiskEncryption, contains(steps('hosts').diskEncryption.keyManagement, 'CustomerManaged'), contains(steps('userProfiles').azureFiles.keyManagement, 'CustomerManaged'))))]",
							"elements": [
								{
									"name": "privateEndpointTextBlock1",
									"type": "Microsoft.Common.TextBlock",
									"options": {
										"text": "Private Endpoints are one key technology we can use to implement Zero Trust Architecture Guidance. Private endpoints should be utilized for all Platform as a Service (PaaS) resources (i.e., Blob Storage, File Storage, and Key Vaults utilized by this solution. Private Endpoints have their own set of prereqs including Private DNS Zones.",
										"link": {
											"label": "Microsoft Learn | Private Endpoint Overview",
											"uri": "https://learn.microsoft.com/en-us/azure/private-link/private-endpoint-overview"
										}
									}
								},
								{
									"name": "deployPrivateEndpoints",
									"type": "Microsoft.Common.CheckBox",
									"label": "Deploy Private Endpoints",
									"defaultValue": true
								},
								{
									"name": "privateEndpointTextBlock2",
									"type": "Microsoft.Common.TextBlock",
									"visible": "[steps('zeroTrust').privateEndpoints.deployPrivateEndpoints]",
									"options": {
										"link": {
											"label": "Microsoft Learn | Private Link Deployment in a Hub and Spoke Network",
											"uri": "https://learn.microsoft.com/en-us/azure/architecture/networking/guide/private-link-hub-spoke-network"
										},
										"text": "When deploying private endpoints, you must select the subnet to which they will be attached and the Private DNS Zones to enable DNS resolution. Since this deployment expects that an Azure Landing Zone has already been deployed, you may be utilizing multiple subscriptions for different components of your architecture. To support this, the following drop downs allow you to select the subscription(s) containing the subnets and the Private DNS zones required to support Zero Trust. Once you select the subscription(s), you'll be able to select the virtual network, subnet, and appropropriate Private DNS Zones from these subscriptions. The following Private DNS Zones may be required:<br/><ul><li>Azure Files for FSLogix profile storage (privatelink.file.<i>suffix</i>)</li><li>Azure Key Vault (privatelink.vaultcore.<i>suffix</i>)</li><li>Azure Blob Storage for Disk Access and artifacts storage (privatelink.blob.<i>suffix</i>)</li></ul>See the documentation in the source repo to determine the correct fully-qualified domain name for each zone based on the cloud."
									}
								},
								{
									"name": "subnetsHeader",
									"type": "Microsoft.Common.TextBlock",
									"visible": "[steps('zeroTrust').privateEndpoints.deployPrivateEndpoints]",
									"options": {
										"text": "<u>Subnets</u>"
									}
								},
								{
									"name": "privateEndpointVnetsSubscription",
									"type": "Microsoft.Common.DropDown",
									"label": "Private Endpoint Subnets Subscription",
									"placeholder": "",
									"defaultValue": "[steps('basics').scope.subscription.displayName]",
									"toolTip": "",
									"constraints": {
										"allowedValues": "[map(steps('basics').subscriptionsApi.value, (sub) => parse(concat('{\"label\":\"', sub.displayName, '\",\"value\":{\"id\":\"', sub.id, '\",\"displayName\":\"', sub.displayName, '\"}}')))]",
										"required": true
									},
									"visible": "[steps('zeroTrust').privateEndpoints.deployPrivateEndpoints]"
								},
								{
									"name": "privateEndpointVirtualNetworksApi",
									"type": "Microsoft.Solutions.ArmApiControl",
									"condition": "[and(steps('zeroTrust').privateEndpoints.deployPrivateEndpoints, not(empty(steps('zeroTrust').privateEndpoints.privateEndpointVnetsSubscription)))]",
									"request": {
										"method": "GET",
										"path": "[concat(steps('zeroTrust').privateEndpoints.privateEndpointVnetsSubscription.id, '/providers/Microsoft.Network/virtualNetworks?api-version=2022-11-01')]"
									}
								},
								{
									"name": "managementHeader",
									"type": "Microsoft.Common.TextBlock",
									"visible": "[steps('zeroTrust').privateEndpoints.deployPrivateEndpoints]",
									"options": {
										"text": "<i>Management and Monitoring Resources</i>"
									}
								},
								{
									"name": "managementVirtualNetwork",
									"type": "Microsoft.Common.DropDown",
									"label": "Virtual Network",
									"multiLine": true,
									"toolTip": "Select the virtual network containing the subnets to which the shared management resources private endpoints will be attached.",
									"constraints": {
										"allowedValues": "[map(filter(steps('zeroTrust').privateEndpoints.privateEndpointVirtualNetworksApi.value, (vnet) => equals(vnet.location, steps('basics').scope.location.name)), (vnet) => parse(concat('{\"label\":\"', vnet.name, '\",\"description\":\"Location: ', vnet.location, ' Resource Group: ', first(skip(split(vnet.id, '/'), 4)), '\",\"value\":\"', vnet.id, '\"}')))]",
										"required": true
									},
									"visible": "[steps('zeroTrust').privateEndpoints.deployPrivateEndpoints]"
								},
								{
									"name": "managementSubnetsApi",
									"condition": "[not(empty(steps('zeroTrust').privateEndpoints.managementVirtualNetwork))]",
									"type": "Microsoft.Solutions.ArmApiControl",
									"request": {
										"method": "GET",
										"path": "[concat(steps('zeroTrust').privateEndpoints.managementVirtualNetwork, '/subnets?api-version=2022-05-01')]"
									}
								},
								{
									"name": "managementSubnet",
									"type": "Microsoft.Common.DropDown",
									"label": "Subnet",
									"toolTip": "Select an existing subnet for the private Endpoints.",
									"constraints": {
										"allowedValues": "[map(filter(steps('zeroTrust').privateEndpoints.managementSubnetsApi.value, (snet) => empty(snet.properties.delegations)), (snet) => parse(concat('{\"label\":\"', snet.name, '\",\"value\":\"', snet.id, '\"}')))]",
										"required": true
									},
									"visible": "[steps('zeroTrust').privateEndpoints.deployPrivateEndpoints]"
								},
								{
									"name": "functionAppOutboundSubnet",
									"type": "Microsoft.Common.DropDown",
									"label": "Function App Outbound subnet",
									"toolTip": "Select an existing subnet for function App Outbound access.",
									"constraints": {
										"required": true,
										"allowedValues": "[map(filter(steps('zeroTrust').privateEndpoints.managementSubnetsApi.value, (snet) => equals(first(map(snet.properties.delegations, (del) => del.properties.serviceName)), 'Microsoft.Web/serverFarms')), (snet) => parse(concat('{\"label\":\"', snet.name, '\",\"value\":\"', snet.id, '\"}')))]"
									},
									"visible": "[and(steps('management').automation.deployIncreaseQuota, steps('zeroTrust').privateEndpoints.deployPrivateEndpoints)]"
								},
								{
									"name": "hostpoolHeader",
									"type": "Microsoft.Common.TextBlock",
									"visible": "[steps('zeroTrust').privateEndpoints.deployPrivateEndpoints]",
									"options": {
										"text": "<i>Hostpool Resources</i>"
									}
								},
								{
									"name": "hostpoolVirtualNetwork",
									"type": "Microsoft.Common.DropDown",
									"label": "Virtual Network",
									"multiLine": true,
									"toolTip": "Select the virtual network containing the subnets to which the host pool resources private endpoints will be attached.",
									"constraints": {
										"allowedValues": "[map(filter(steps('zeroTrust').privateEndpoints.privateEndpointVirtualNetworksApi.value, (vnet) => equals(vnet.location, steps('basics').scope.location.name)), (vnet) => parse(concat('{\"label\":\"', vnet.name, '\",\"description\":\"Location: ', vnet.location, ' Resource Group: ', first(skip(split(vnet.id, '/'), 4)), '\",\"value\":\"', vnet.id, '\"}')))]",
										"required": true
									},
									"visible": "[steps('zeroTrust').privateEndpoints.deployPrivateEndpoints]"
								},
								{
									"name": "hostpoolSubnetsApi",
									"condition": "[not(empty(steps('zeroTrust').privateEndpoints.hostpoolVirtualNetwork))]",
									"type": "Microsoft.Solutions.ArmApiControl",
									"request": {
										"method": "GET",
										"path": "[concat(steps('zeroTrust').privateEndpoints.hostpoolVirtualNetwork, '/subnets?api-version=2022-05-01')]"
									}
								},
								{
									"name": "hostpoolSubnet",
									"type": "Microsoft.Common.DropDown",
									"label": "Subnet",
									"toolTip": "Select an existing subnet for the private Endpoints.",
									"constraints": {
										"allowedValues": "[map(filter(steps('zeroTrust').privateEndpoints.hostpoolSubnetsApi.value, (snet) => empty(snet.properties.delegations)), (snet) => parse(concat('{\"label\":\"', snet.name, '\",\"value\":\"', snet.id, '\"}')))]",
										"required": true
									},
									"visible": "[steps('zeroTrust').privateEndpoints.deployPrivateEndpoints]"
								},
								{
									"name": "privateDNSZonesHeader",
									"type": "Microsoft.Common.TextBlock",
									"visible": "[steps('zeroTrust').privateEndpoints.deployPrivateEndpoints]",
									"options": {
										"text": "<u>Private DNS Zones</u>"
									}
								},
								{
									"name": "privateDNSZoneIntegrationTextBlock",
									"type": "Microsoft.Common.TextBlock",
									"visible": "[steps('zeroTrust').privateEndpoints.deployPrivateEndpoints]",
									"options": {
										"text": "To connect privately with your private endpoint, you need a DNS record. We recommend that you integrate your private endpoint with a private DNS zone. If you select the checkbox below, you'll be asked to select the appropriate Private DNS Zone for each resource type deployed by this solution and the deployment will automatically create the Private DNS integration when creating the private endpoints. Alternatively, you can assign policies to private endpoints to automatically register the endpoints with the appropriate private DNS zones. Uncheck the box below if that is the method you are using.",
										"link": {
											"label": "Learn more",
											"uri": "https://learn.microsoft.com/en-us/azure/private-link/private-endpoint-overview#dns-configuration"
										}
									}
								},
								{
									"name": "enablePrivateDNSIntegration",
									"type": "Microsoft.Common.CheckBox",
									"label": "Enable Private DNS Zone Integration",
									"toolTip": "To connect privately with your private endpoint, you need a DNS record. Check this box to select the appropriate private DNS zones so that the deployment automatically integrates each private endpoint with Azure private DNS.",
									"defaultValue": true,
									"visible": "[steps('zeroTrust').privateEndpoints.deployPrivateEndpoints]"
								},
								{
									"name": "privateDNSZonesSubscription",
									"type": "Microsoft.Common.DropDown",
									"label": "Private DNS Zone Subscription",
									"placeholder": "",
									"defaultValue": "[steps('basics').scope.subscription.displayName]",
									"toolTip": "Select the subscription that contains your Private DNS Zones.",
									"constraints": {
										"allowedValues": "[map(steps('basics').subscriptionsApi.value, (sub) => parse(concat('{\"label\":\"', sub.displayName, '\",\"value\":{\"id\":\"', sub.id, '\",\"displayName\":\"', sub.displayName, '\"}}')))]",
										"required": true
									},
									"visible": "[and(steps('zeroTrust').privateEndpoints.deployPrivateEndpoints, steps('zeroTrust').privateEndpoints.enablePrivateDNSIntegration)]"
								},
								{
									"name": "privateDNSZonesApi",
									"condition": "[and(steps('zeroTrust').privateEndpoints.deployPrivateEndpoints, not(empty(steps('zeroTrust').privateEndpoints.privateDNSZonesSubscription)))]",
									"type": "Microsoft.Solutions.ArmApiControl",
									"request": {
										"method": "GET",
										"path": "[concat(steps('zeroTrust').privateEndpoints.privateDNSZonesSubscription.id, '/providers/Microsoft.Network/privateDnsZones?api-version=2018-09-01')]"
									}
								},
								{
									"name": "azureBackupPrivateDnsZone",
									"type": "Microsoft.Common.DropDown",
									"visible": "[and(steps('management').backup.recoveryServices, steps('zeroTrust').privateEndpoints.deployPrivateEndpoints, steps('zeroTrust').privateEndpoints.enablePrivateDNSIntegration)]",
									"label": "Azure Backup",
									"multiLine": true,
									"toolTip": "Select the existing Geo Specific Private DNS Zone for Azure Backup Storage.",
									"constraints": {
										"allowedValues": "[map(filter(steps('zeroTrust').privateEndpoints.privateDNSZonesApi.value, (zone) => contains(zone.name, '.backup.')), (zone) => parse(concat('{\"label\":\"', zone.name, '\",\"description\":\"Resource Group: ', first(skip(split(zone.id, '/'), 4)), '\",\"value\":\"', zone.id, '\"}')))]",
										"required": false
									}
								},
								{
									"name": "azureBlobPrivateDnsZone",
									"type": "Microsoft.Common.DropDown",
									"visible": "[and(or(steps('management').backup.recoveryServices, steps('management').automation.deployIncreaseQuota), steps('zeroTrust').privateEndpoints.deployPrivateEndpoints, steps('zeroTrust').privateEndpoints.enablePrivateDNSIntegration)]",
									"label": "Azure Blob Storage",
									"multiLine": true,
									"toolTip": "Select the existing Private DNS Zone for Azure Blob Storage.",
									"constraints": {
										"allowedValues": "[map(filter(steps('zeroTrust').privateEndpoints.privateDNSZonesApi.value, (zone) => contains(zone.name, 'privatelink.blob.')), (zone) => parse(concat('{\"label\":\"', zone.name, '\",\"description\":\"Resource Group: ', first(skip(split(zone.id, '/'), 4)), '\",\"value\":\"', zone.id, '\"}')))]",
										"required": true
									}
								},
								{
									"name": "azureFilesPrivateDnsZone",
									"type": "Microsoft.Common.DropDown",
									"visible": "[and(or(and(equals(steps('userProfiles').deployStorage, true), equals(steps('userProfiles').storageService, 'AzureFiles')), steps('management').automation.deployIncreaseQuota), steps('zeroTrust').privateEndpoints.deployPrivateEndpoints, steps('zeroTrust').privateEndpoints.enablePrivateDNSIntegration)]",
									"label": "Azure Files",
									"multiLine": true,
									"toolTip": "Select the existing Private DNS Zone for Azure Files.",
									"constraints": {
										"allowedValues": "[map(filter(steps('zeroTrust').privateEndpoints.privateDNSZonesApi.value, (zone) => contains(zone.name, 'privatelink.file.')), (zone) => parse(concat('{\"label\":\"', zone.name, '\",\"description\":\"Resource Group: ', first(skip(split(zone.id, '/'), 4)), '\",\"value\":\"', zone.id, '\"}')))]",
										"required": true
									}
								},
								{
									"name": "azureKeyVaultPrivateDnsZone",
									"type": "Microsoft.Common.DropDown",
									"label": "Azure Key Vault",
									"multiLine": true,
									"toolTip": "Select the existing Private DNS Zone for Azure Key Vaults.",
									"constraints": {
										"allowedValues": "[map(filter(steps('zeroTrust').privateEndpoints.privateDNSZonesApi.value, (zone) => contains(zone.name, 'privatelink.vaultcore.')), (zone) => parse(concat('{\"label\":\"', zone.name, '\",\"description\":\"Resource group: ', first(skip(split(zone.id, '/'), 4)), '\",\"value\":\"', zone.id, '\"}')))]",
										"required": true
									},
									"visible": "[and(steps('zeroTrust').privateEndpoints.deployPrivateEndpoints, steps('zeroTrust').privateEndpoints.enablePrivateDNSIntegration, or(equals(steps('hosts').credentials.source, 'manual'), steps('hosts').diskEncryption.confidentialVMOSDiskEncryption, contains(steps('hosts').diskEncryption.keyManagement, 'CustomerManaged'), contains(steps('userProfiles').azureFiles.keyManagement, 'CustomerManaged')))]"
								},
								{
									"name": "azureQueuePrivateDnsZone",
									"type": "Microsoft.Common.DropDown",
									"visible": "[and(or(steps('management').backup.recoveryServices, steps('management').automation.deployIncreaseQuota), steps('zeroTrust').privateEndpoints.deployPrivateEndpoints, steps('zeroTrust').privateEndpoints.enablePrivateDNSIntegration)]",
									"label": "Azure Queue Storage",
									"multiLine": true,
									"toolTip": "Select the existing Private DNS Zone for Azure Queue Storage.",
									"constraints": {
										"allowedValues": "[map(filter(steps('zeroTrust').privateEndpoints.privateDNSZonesApi.value, (zone) => contains(zone.name, 'privatelink.queue.')), (zone) => parse(concat('{\"label\":\"', zone.name, '\",\"description\":\"Resource Group: ', first(skip(split(zone.id, '/'), 4)), '\",\"value\":\"', zone.id, '\"}')))]",
										"required": false
									}
								},
								{
									"name": "azureTablePrivateDnsZone",
									"type": "Microsoft.Common.DropDown",
									"visible": "[and(steps('management').automation.deployIncreaseQuota, steps('zeroTrust').privateEndpoints.deployPrivateEndpoints, steps('zeroTrust').privateEndpoints.enablePrivateDNSIntegration)]",
									"label": "Azure Table Storage",
									"multiLine": true,
									"toolTip": "Select the existing Private DNS Zone for Azure Table Storage.",
									"constraints": {
										"allowedValues": "[map(filter(steps('zeroTrust').privateEndpoints.privateDNSZonesApi.value, (zone) => contains(zone.name, 'privatelink.table.')), (zone) => parse(concat('{\"label\":\"', zone.name, '\",\"description\":\"Resource Group: ', first(skip(split(zone.id, '/'), 4)), '\",\"value\":\"', zone.id, '\"}')))]",
										"required": false
									}
								},
								{
									"name": "azureFunctionAppPrivateDnsZone",
									"type": "Microsoft.Common.DropDown",
									"visible": "[and(steps('management').automation.deployIncreaseQuota, steps('zeroTrust').privateEndpoints.deployPrivateEndpoints, steps('zeroTrust').privateEndpoints.enablePrivateDNSIntegration)]",
									"label": "Azure Web App",
									"multiLine": true,
									"toolTip": "Select the existing Private DNS Zone for Azure Function Apps",
									"constraints": {
										"allowedValues": "[map(filter(steps('zeroTrust').privateEndpoints.privateDNSZonesApi.value, (zone) => or(startsWith(zone.name, 'privatelink.azurewebsites.'), startsWith(zone.name, 'privatelink.appservice.'))), (zone) => parse(concat('{\"label\":\"', zone.name, '\",\"description\":\"Resource Group: ', first(skip(split(zone.id, '/'), 4)), '\",\"value\":\"', zone.id, '\"}')))]",
										"required": false
									}
								},
								{
									"name": "azureFunctionAppScmPrivateDnsZone",
									"type": "Microsoft.Common.DropDown",
									"visible": "[and(steps('management').automation.deployIncreaseQuota, steps('zeroTrust').privateEndpoints.deployPrivateEndpoints, steps('zeroTrust').privateEndpoints.enablePrivateDNSIntegration)]",
									"label": "Azure Web App SCM",
									"multiLine": true,
									"toolTip": "Select the existing Private DNS Zone for Azure Function Apps",
									"constraints": {
										"allowedValues": "[map(filter(steps('zeroTrust').privateEndpoints.privateDNSZonesApi.value, (zone) => contains(zone.name, 'scm.privatelink.')), (zone) => parse(concat('{\"label\":\"', zone.name, '\",\"description\":\"Resource Group: ', first(skip(split(zone.id, '/'), 4)), '\",\"value\":\"', zone.id, '\"}')))]",
										"required": false
									}
								}
							]
						},
						{
							"name": "azureMonitor",
							"type": "Microsoft.Common.Section",
							"label": "Azure Monitor",
							"visible": "[equals(steps('basics').deploymentType, 'Complete')]",
							"elements": [
								{
									"name": "privateLinkTextBlock1",
									"type": "Microsoft.Common.TextBlock",
									"visible": true,
									"options": {
										"text": "Azure Monitor is a constellation of different interconnected services that work together to monitor your workloads. An Azure Monitor private link connects a private endpoint to a set of Azure Monitor resources to define the boundaries of your monitoring network. That set is called an Azure Monitor Private Link Scope (AMPLS).",
										"link": {
											"label": "Use Azure Private Link to connect networks to Azure Monitor - Azure Monitor | Microsoft Learn",
											"uri": "https://learn.microsoft.com/en-us/azure/azure-monitor/logs/private-link-security"
										}
									}
								},
								{
									"name": "privateLink",
									"type": "Microsoft.Common.CheckBox",
									"label": "Attach AVD monitoring resources to an existing Azure Monitor Private Link Scope"
								},
								{
									"name": "azureMonitorPrivateLinkScope",
									"type": "Microsoft.Solutions.ResourceSelector",
									"label": "Azure Monitor Private Link Scope",
									"resourceType": "Microsoft.Insights/privateLinkScopes",
									"constraints": {
										"required": true
									},
									"visible": "[steps('zeroTrust').azureMonitor.privateLink]"
								}
							]
						},
						{
							"name": "policy",
							"type": "Microsoft.Common.Section",
							"label": "Policies",
							"visible": "[equals(steps('basics').deploymentType, 'Complete')]",
							"elements": [
								{
									"name": "diskAccessTextBlock1",
									"type": "Microsoft.Common.TextBlock",
									"visible": true,
									"options": {
										"text": "[if(and(equals(steps('controlPlane').hostPool.type, 'Personal'), steps('management').backup.recoveryServices, steps('zeroTrust').privateEndpoints.deployPrivateEndpoints), 'Check the following box to define and and assign a policy that disables public network access and automatically assigns a disk access resource to the virtual machine OS disks for private access.', 'Select the following check box to define and assign a policy that disables all network access to your managed disks.')]",
										"link": {
											"label": "Microsoft Learn | Restrict Managed Disks from Being Imported or Exported",
											"uri": "https://learn.microsoft.com/en-us/azure/virtual-machines/disks-restrict-import-export-overview"
										}
									}
								},
								{
									"name": "deployDiskAccessPolicy",
									"type": "Microsoft.Common.CheckBox",
									"label": "Deploy Disk Access Policy"
								}
							]
						},
						{
							"name": "avdPrivateLink",
							"type": "Microsoft.Common.Section",
							"label": "AVD Private Link",
							"visible": "[equals(steps('basics').deploymentType, 'Complete')]",
							"elements": [
								{
									"name": "textBlock1",
									"type": "Microsoft.Common.TextBlock",
									"options": {
										"link": {
											"label": "Microsoft Learn | AVD Private Link Overview",
											"uri": "https://learn.microsoft.com/en-us/azure/virtual-desktop/private-link-overview"
										},
										"text": "You can use Azure Private Link with Azure Virtual Desktop to privately connect to your remote resources. By creating a private endpoint, traffic between your virtual network and the service remains on the Microsoft network, so you no longer need to expose your service to the public internet. You also use a VPN or ExpressRoute for your users with the Remote Desktop client to connect to the virtual network. Keeping traffic within the Microsoft network improves security and keeps your data safe."
									}
								},
								{
									"name": "enablePrivateLink",
									"type": "Microsoft.Common.CheckBox",
									"label": "Enable AVD Private Link"
								},
								{
									"name": "textBlock2",
									"type": "Microsoft.Common.TextBlock",
									"visible": "[steps('zeroTrust').avdPrivateLink.enablePrivateLink]",
									"options": {
										"link": {
											"label": "Microsoft Learn | AVD Private Link Overview",
											"uri": "https://learn.microsoft.com/en-us/azure/virtual-desktop/private-link-overview"
										},
										"text": "When enabling Private Link with Azure Virtual Desktop, you have the following supported scenarios to connect to Azure Virtual Desktop. Choose the configuration below to meet your requirements. <ol><li>All parts of the connection - initial feed discovery, feed download, and remote session connections - use private routes.</li><br/><li>Feed download and remote session connections use private routes, but initial feed discovery uses public routes.</li><br/><li>Only remote session connections use private routes, but initial feed discovery and feed download use public routes.</li></ol>"
									}
								},
								{
									"name": "infoBox1",
									"type": "Microsoft.Common.InfoBox",
									"visible": "[and(steps('zeroTrust').avdPrivateLink.enablePrivateLink, not(empty(filter(steps('controlPlane').workspacesApi.value, (ws) => contains(ws.name, 'global-feed')))))]",
									"options": {
										"style": "Info",
										"text": "[concat('An existing global feed workspace has been detected: ', first(map(filter(steps('controlPlane').workspacesApi.value, (ws) => contains(ws.name, 'global-feed')), (ws) => ws.name)), '. Therefore, you can only choose either option 2 or 3, because you can only have one global-feed workspace with one private endpoint.')]"
									}
								},
								{
									"name": "avdPrivateLinkConfig",
									"type": "Microsoft.Common.DropDown",
									"label": "AVD Private Link Configuration",
									"multiLine": true,
									"defaultValue": "[if(empty(filter(steps('controlPlane').workspacesApi.value, (ws) => contains(ws.name, 'global-feed'))), 'All parts of the connection use private routes', if(equals(steps('controlPlane').workspace.createOption, 'update'), 'Only remote session connections use private routes', 'Feed download and remote session connections use private routes'))]",
									"toolTip": "Chooose the AVD Private Link Configuration.",
									"constraints": {
										"allowedValues": "[if(empty(filter(steps('controlPlane').workspacesApi.value, (ws) => contains(ws.name, 'global-feed'))), parse('[{\"label\":\"All parts of the connection use private routes\",\"description\":\"Global feed, Workspace feed, and hostpool private endpoints are required\",\"value\":\"All\"},{\"label\":\"Feed download and remote session connections use private routes\",\"description\":\"Workspace feed and Hostpool private endpoints are required\",\"value\":\"FeedAndHostpool\"},{\"label\":\"Only remote session connections use private routes\",\"description\":\"Hostpool private endpoints are required\",\"value\":\"Hostpool\"}]'), parse('[{\"label\":\"Feed download and remote session connections use private routes\",\"description\":\"Workspace feed and Hostpool private endpoints are required\",\"value\":\"FeedAndHostpool\"},{\"label\":\"Only remote session connections use private routes\",\"description\":\"Hostpool private endpoints are required\",\"value\":\"Hostpool\"}]'))]",
										"required": true
									},
									"visible": "[steps('zeroTrust').avdPrivateLink.enablePrivateLink]"
								},
								{
									"name": "WarningBox1",
									"type": "Microsoft.Common.InfoBox",
									"visible": "[and(steps('zeroTrust').avdPrivateLink.enablePrivateLink, equals(steps('controlPlane').workspace.createOption, 'update'), not(equals(steps('zeroTrust').avdPrivateLink.avdPrivateLinkConfig, 'Hostpool')))]",
									"options": {
										"style": "Warning",
										"text": "Because you have chosen to update an existing AVD workspace on the <b>Control Plane</b> blade, use caution when updating the AVD Private Link configuration for the <u>Workspace Feed</u>.\n\nYou can only have one private endpoint per workspace; therefore, if your workspace is already configured with a private endpoint to support private routes for the workspace feed, it is best to select \"Only remote session connections use private routes\" as the <b><i>AVD Private Link Configuration</i></b>. The \"Feed download and remote session connections use private routes\" option is primarily provided to allow an existing workspace to be updated with this option."
									}
								},
								{
									"name": "hostpoolHeader",
									"type": "Microsoft.Common.TextBlock",
									"visible": "[steps('zeroTrust').avdPrivateLink.enablePrivateLink]",
									"options": {
										"text": "<u>Remote Session Connections</u>"
									}
								},
								{
									"name": "hostpoolTextBlock2",
									"type": "Microsoft.Common.TextBlock",
									"visible": "[steps('zeroTrust').avdPrivateLink.enablePrivateLink]",
									"options": {
										"text": "Select the subscription, virtual network, and subnet for the remote session connection private endpoint. The virtual network is limited to the location of the virtual machines selected on the 'Basics' screen."
									}
								},
								{
									"name": "hostpoolVnetsSubscription",
									"type": "Microsoft.Common.DropDown",
									"label": "Private Endpoint Subnets Subscription",
									"placeholder": "",
									"defaultValue": "[if(steps('zeroTrust').privateEndpoints.deployPrivateEndpoints, steps('zeroTrust').privateEndpoints.privateEndpointVnetsSubscription.displayName, steps('basics').scope.subscription.displayName)]",
									"toolTip": "",
									"constraints": {
										"allowedValues": "[map(steps('basics').subscriptionsApi.value, (sub) => parse(concat('{\"label\":\"', sub.displayName, '\",\"value\":{\"id\":\"', sub.id, '\",\"displayName\":\"', sub.displayName, '\"}}')))]",
										"required": true
									},
									"visible": "[steps('zeroTrust').avdPrivateLink.enablePrivateLink]"
								},
								{
									"name": "hostpoolVirtualNetworksApi",
									"condition": "[and(steps('zeroTrust').avdPrivateLink.enablePrivateLink, not(empty(steps('zeroTrust').avdPrivateLink.hostpoolVnetsSubscription)))]",
									"type": "Microsoft.Solutions.ArmApiControl",
									"request": {
										"method": "GET",
										"path": "[concat(steps('zeroTrust').avdPrivateLink.hostpoolVnetsSubscription.id, '/providers/Microsoft.Network/virtualNetworks?api-version=2022-11-01')]"
									}
								},
								{
									"name": "hostpoolVirtualNetwork",
									"type": "Microsoft.Common.DropDown",
									"label": "Virtual Network",
									"multiLine": true,
									"toolTip": "Select the virtual network where the AVD Private Link Hostpool Connection private endpoints will be created. Note that only virtual networks located in the same region as the virtual machines are shown.",
									"defaultValue": "[last(split(steps('zeroTrust').privateEndpoints.hostpoolVirtualNetwork, '/'))]",
									"constraints": {
										"allowedValues": "[map(filter(steps('zeroTrust').avdPrivateLink.hostpoolVirtualNetworksApi.value, (vnet) => equals(vnet.location, steps('basics').scope.location.name)), (vnet) => parse(concat('{\"label\":\"', vnet.name, '\",\"description\":\"Location: ', vnet.location, ' Resource Group: ', first(skip(split(vnet.id, '/'), 4)), '\",\"value\":\"', vnet.id, '\"}')))]",
										"required": true
									},
									"visible": "[steps('zeroTrust').avdPrivateLink.enablePrivateLink]"
								},
								{
									"name": "hostpoolSubnetsApi",
									"condition": "[not(empty(steps('zeroTrust').avdPrivateLink.hostpoolVirtualNetwork))]",
									"type": "Microsoft.Solutions.ArmApiControl",
									"request": {
										"method": "GET",
										"path": "[concat(steps('zeroTrust').avdPrivateLink.hostpoolVirtualNetwork, '/subnets?api-version=2022-05-01')]"
									}
								},
								{
									"name": "hostpoolSubnet",
									"type": "Microsoft.Common.DropDown",
									"label": "Subnet",
									"toolTip": "Select an existing subnet for the private Endpoints.",
									"defaultValue": "[last(split(steps('zeroTrust').privateEndpoints.hostpoolSubnet, '/'))]",
									"constraints": {
										"allowedValues": "[map(steps('zeroTrust').avdPrivateLink.hostpoolSubnetsApi.value, (snet) => parse(concat('{\"label\":\"', snet.name, '\",\"value\":\"', snet.id, '\"}')))]",
										"required": true
									},
									"visible": "[steps('zeroTrust').avdPrivateLink.enablePrivateLink]"
								},
								{
									"name": "hostpoolPublicNetworkAccess",
									"type": "Microsoft.Common.DropDown",
									"label": "Remote Session Connection public access",
									"placeholder": "",
									"defaultValue": "Enabled",
									"multiLine": true,
									"toolTip": "Select the appropriate option for configuring public network access to the remote session.",
									"constraints": {
										"allowedValues": [
											{
												"label": "Disabled",
												"description": "Remote sessions are denied when either the client or session host is using a public route.",
												"value": "Disabled"
											},
											{
												"label": "Enabled",
												"description": "Remote sessions are allowed when either the client or session host are using a private or public route.",
												"value": "Enabled"
											},
											{
												"label": "Enabled For Clients Only",
												"description": "Remote sessions are allowed as long as the session host is using a private route, regardless of the route the client is using.",
												"value": "EnabledForClientsOnly"
											}
										],
										"required": false
									},
									"visible": "[steps('zeroTrust').avdPrivateLink.enablePrivateLink]"
								},
								{
									"name": "feedWorkspaceHeader",
									"type": "Microsoft.Common.TextBlock",
									"visible": "[and(steps('zeroTrust').avdPrivateLink.enablePrivateLink, not(equals(steps('zeroTrust').avdPrivateLink.avdPrivateLinkConfig, 'Hostpool')))]",
									"options": {
										"text": "<u>Workspace Feed</u>"
									}
								},
								{
									"name": "feedWorkspaceTextBlock1",
									"type": "Microsoft.Common.TextBlock",
									"visible": "[and(steps('zeroTrust').avdPrivateLink.enablePrivateLink, not(equals(steps('zeroTrust').avdPrivateLink.avdPrivateLinkConfig, 'Hostpool')))]",
									"options": {
										"text": "Select the subscription, virtual network, and subnet for the workspace feed private endpoint. The virtual network is limited to the control plane location as specified on the 'Control Plane' pane. The same private dns zone as the remote session connection is used."
									}
								},
								{
									"name": "feedWorkspaceVnetsSubscription",
									"type": "Microsoft.Common.DropDown",
									"label": "Private Endpoint Subnets Subscription",
									"placeholder": "",
									"defaultValue": "[if(steps('zeroTrust').privateEndpoints.deployPrivateEndpoints, steps('zeroTrust').privateEndpoints.privateEndpointVnetsSubscription.displayName, steps('basics').scope.subscription.displayName)]",
									"toolTip": "",
									"constraints": {
										"allowedValues": "[map(steps('basics').subscriptionsApi.value, (sub) => parse(concat('{\"label\":\"', sub.displayName, '\",\"value\":{\"id\":\"', sub.id, '\",\"displayName\":\"', sub.displayName, '\"}}')))]",
										"required": true
									},
									"visible": "[and(steps('zeroTrust').avdPrivateLink.enablePrivateLink, not(equals(steps('zeroTrust').avdPrivateLink.avdPrivateLinkConfig, 'Hostpool')))]"
								},
								{
									"name": "feedWorkspaceVirtualNetworksApi",
									"condition": "[and(steps('zeroTrust').avdPrivateLink.enablePrivateLink, not(empty(steps('zeroTrust').avdPrivateLink.feedWorkspaceVnetsSubscription)))]",
									"type": "Microsoft.Solutions.ArmApiControl",
									"request": {
										"method": "GET",
										"path": "[concat(steps('zeroTrust').avdPrivateLink.feedWorkspaceVnetsSubscription.id, '/providers/Microsoft.Network/virtualNetworks?api-version=2022-11-01')]"
									}
								},
								{
									"name": "feedWorkspaceVirtualNetwork",
									"type": "Microsoft.Common.DropDown",
									"label": "Virtual Network",
									"multiLine": true,
									"toolTip": "Select the virtual network where the AVD Private Link Workspace feed download private endpoints will be created. Note that only virtual networks located in the same region as the control plane are shown.",
									"defaultValue": "[last(split(steps('zeroTrust').privateEndpoints.managementVirtualNetwork, '/'))]",
									"constraints": {
										"allowedValues": "[map(filter(steps('zeroTrust').avdPrivateLink.feedWorkspaceVirtualNetworksApi.value, (vnet) => equals(vnet.location, steps('controlPlane').location.name)), (vnet) => parse(concat('{\"label\":\"', vnet.name, '\",\"description\":\"Location: ', vnet.location, ' Resource Group: ', first(skip(split(vnet.id, '/'), 4)), '\",\"value\":\"', vnet.id, '\"}')))]",
										"required": true
									},
									"visible": "[and(steps('zeroTrust').avdPrivateLink.enablePrivateLink, not(equals(steps('zeroTrust').avdPrivateLink.avdPrivateLinkConfig, 'Hostpool')))]"
								},
								{
									"name": "feedWorkspaceSubnetsApi",
									"condition": "[not(empty(steps('zeroTrust').avdPrivateLink.feedWorkspaceVirtualNetwork))]",
									"type": "Microsoft.Solutions.ArmApiControl",
									"request": {
										"method": "GET",
										"path": "[concat(steps('zeroTrust').avdPrivateLink.feedWorkspaceVirtualNetwork, '/subnets?api-version=2022-05-01')]"
									}
								},
								{
									"name": "feedWorkspaceSubnet",
									"type": "Microsoft.Common.DropDown",
									"label": "Subnet",
									"toolTip": "Select an existing subnet for the private Endpoints.",
									"defaultValue": "[last(split(steps('zeroTrust').privateEndpoints.managementSubnet, '/'))]",
									"constraints": {
										"allowedValues": "[map(steps('zeroTrust').avdPrivateLink.feedWorkspaceSubnetsApi.value, (snet) => parse(concat('{\"label\":\"', snet.name, '\",\"value\":\"', snet.id, '\"}')))]",
										"required": true
									},
									"visible": "[and(steps('zeroTrust').avdPrivateLink.enablePrivateLink, not(equals(steps('zeroTrust').avdPrivateLink.avdPrivateLinkConfig, 'Hostpool')))]"
								},
								{
									"name": "feedWorkspacePublicNetworkAccess",
									"type": "Microsoft.Common.DropDown",
									"label": "Workspace feed public access",
									"placeholder": "",
									"defaultValue": "Public access enabled from all networks",
									"multiLine": true,
									"toolTip": "",
									"constraints": {
										"allowedValues": [
											{
												"label": "Public access enabled from all networks",
												"description": "Workspace feed requests are allowed from private and public routes.",
												"value": "Enabled"
											},
											{
												"label": "Public access disabled from all networks",
												"description": "Workspace feed requests are allowed only from private routes.",
												"value": "Disabled"
											}
										],
										"required": false
									},
									"visible": "[and(steps('zeroTrust').avdPrivateLink.enablePrivateLink, not(equals(steps('zeroTrust').avdPrivateLink.avdPrivateLinkConfig, 'Hostpool')))]"
								},
								{
									"name": "globalFeedTextBlock0",
									"type": "Microsoft.Common.TextBlock",
									"visible": "[and(steps('zeroTrust').avdPrivateLink.enablePrivateLink, equals(steps('zeroTrust').avdPrivateLink.avdPrivateLinkConfig, 'All'))]",
									"options": {
										"text": "<u>Global Feed</u>"
									}
								},
								{
									"name": "globalFeedTextBlock1",
									"type": "Microsoft.Common.TextBlock",
									"visible": "[and(steps('zeroTrust').avdPrivateLink.enablePrivateLink, equals(steps('zeroTrust').avdPrivateLink.avdPrivateLinkConfig, 'All'))]",
									"options": {
										"text": "Select the subscription, virtual network, and subnet where you wish to create the global feed private endpoint."
									}
								},
								{
									"name": "globalFeedVnetSubscription",
									"type": "Microsoft.Common.DropDown",
									"label": "Global Feed Virtual Network Subscription",
									"defaultValue": "[steps('zeroTrust').avdPrivateLink.feedWorkspaceVnetsSubscription.displayName]",
									"toolTip": "Select the subscription that contains the virtual network to which the global feed private endpoint will be connected.",
									"constraints": {
										"allowedValues": "[map(steps('basics').subscriptionsApi.value, (sub) => parse(concat('{\"label\":\"', sub.displayName, '\",\"value\":{\"id\":\"', sub.id, '\",\"displayName\":\"', sub.displayName, '\"}}')))]",
										"required": true
									},
									"visible": "[and(steps('zeroTrust').avdPrivateLink.enablePrivateLink, equals(steps('zeroTrust').avdPrivateLink.avdPrivateLinkConfig, 'All'))]"
								},
								{
									"name": "globalFeedVirtualNetworksApi",
									"condition": "[and(steps('zeroTrust').avdPrivateLink.enablePrivateLink, not(empty(steps('zeroTrust').avdPrivateLink.globalFeedVnetSubscription)))]",
									"type": "Microsoft.Solutions.ArmApiControl",
									"request": {
										"method": "GET",
										"path": "[concat(steps('zeroTrust').avdPrivateLink.globalFeedVnetSubscription.id, '/providers/Microsoft.Network/virtualNetworks?api-version=2022-11-01')]"
									}
								},
								{
									"name": "globalFeedVirtualNetwork",
									"type": "Microsoft.Common.DropDown",
									"label": "Virtual Network",
									"multiLine": true,
									"toolTip": "Select the virtual network where the AVD Private Link Global Workspace Private Endpoint will be created.",
									"defaultValue": "[last(split(steps('zeroTrust').avdPrivateLink.feedWorkspaceVirtualNetwork, '/'))]",
									"constraints": {
										"allowedValues": "[map(steps('zeroTrust').avdPrivateLink.globalFeedVirtualNetworksApi.value, (vnet) => parse(concat('{\"label\":\"', vnet.name, '\",\"description\":\"Location: ', vnet.location, ' Resource Group: ', first(skip(split(vnet.id, '/'), 4)), '\",\"value\":\"', vnet.id, '\"}')))]",
										"required": true
									},
									"visible": "[and(steps('zeroTrust').avdPrivateLink.enablePrivateLink, equals(steps('zeroTrust').avdPrivateLink.avdPrivateLinkConfig, 'All'))]"
								},
								{
									"name": "globalFeedSubnetsApi",
									"condition": "[not(empty(steps('zeroTrust').avdPrivateLink.globalFeedVirtualNetwork))]",
									"type": "Microsoft.Solutions.ArmApiControl",
									"request": {
										"method": "GET",
										"path": "[concat(steps('zeroTrust').avdPrivateLink.globalFeedVirtualNetwork, '/subnets?api-version=2022-05-01')]"
									}
								},
								{
									"name": "globalFeedSubnet",
									"type": "Microsoft.Common.DropDown",
									"label": "Subnet",
									"toolTip": "Select an existing subnet for the global Feed Private Endpoint.",
									"defaultValue": "[last(split(steps('zeroTrust').avdPrivateLink.hostpoolSubnet, '/'))]",
									"constraints": {
										"allowedValues": "[map(steps('zeroTrust').avdPrivateLink.globalFeedSubnetsApi.value, (snet) => parse(concat('{\"label\":\"', snet.name, '\",\"value\":\"', snet.id, '\"}')))]",
										"required": true
									},
									"visible": "[and(steps('zeroTrust').avdPrivateLink.enablePrivateLink, equals(steps('zeroTrust').avdPrivateLink.avdPrivateLinkConfig, 'All'))]"
								},
								{
									"name": "privateDNSZonesHeader",
									"type": "Microsoft.Common.TextBlock",
									"visible": "[steps('zeroTrust').avdPrivateLink.enablePrivateLink]",
									"options": {
										"text": "<u>Private DNS Zones</u>"
									}
								},
								{
									"name": "privateDNSZoneIntegrationTextBlock",
									"type": "Microsoft.Common.TextBlock",
									"visible": "[steps('zeroTrust').avdPrivateLink.enablePrivateLink]",
									"options": {
										"text": "To connect privately with your private endpoint, you need a DNS record. We recommend that you integrate your private endpoint with a private DNS zone. If you select the checkbox below, you'll be asked to select the appropriate Private DNS Zone for each resource type deployed by this solution and the deployment will automatically create the Private DNS integration when creating the private endpoints. Alternatively, you can assign policies to private endpoints to automatically register the endpoints with the appropriate private DNS zones. Uncheck the box below if that is the method you are using.",
										"link": {
											"label": "Learn more",
											"uri": "https://learn.microsoft.com/en-us/azure/private-link/private-endpoint-overview#dns-configuration"
										}
									}
								},
								{
									"name": "enablePrivateDNSIntegration",
									"type": "Microsoft.Common.CheckBox",
									"label": "Enable Private DNS Zone Integration",
									"toolTip": "To connect privately with your private endpoint, you need a DNS record. Check this box to select the appropriate private DNS zones so that the deployment automatically integrates each private endpoint with Azure private DNS.",
									"defaultValue": true,
									"visible": "[steps('zeroTrust').avdPrivateLink.enablePrivateLink]"
								},
								{
									"name": "privateDNSZonesSubscription",
									"type": "Microsoft.Common.DropDown",
									"label": "Private DNS Zone Subscription",
									"placeholder": "",
									"defaultValue": "[if(steps('zeroTrust').privateEndpoints.deployPrivateEndpoints, steps('zeroTrust').privateEndpoints.privateDNSZonesSubscription.displayName, steps('basics').scope.subscription.displayName)]",
									"toolTip": "Select the subscription containing your AVD Private Link Private DNS zones.",
									"constraints": {
										"allowedValues": "[map(steps('basics').subscriptionsApi.value, (sub) => parse(concat('{\"label\":\"', sub.displayName, '\",\"value\":{\"id\":\"', sub.id, '\",\"displayName\":\"', sub.displayName, '\"}}')))]",
										"required": true
									},
									"visible": "[and(steps('zeroTrust').avdPrivateLink.enablePrivateLink, steps('zeroTrust').avdPrivateLink.enablePrivateDNSIntegration)]"
								},
								{
									"name": "privateDNSZonesApi",
									"condition": "[and(steps('zeroTrust').avdPrivateLink.enablePrivateLink, not(empty(steps('zeroTrust').avdPrivateLink.privateDNSZonesSubscription)))]",
									"type": "Microsoft.Solutions.ArmApiControl",
									"request": {
										"method": "GET",
										"path": "[concat(steps('zeroTrust').avdPrivateLink.privateDNSZonesSubscription.id, '/providers/Microsoft.Network/privateDnsZones?api-version=2018-09-01')]"
									}
								},
								{
									"name": "wvdPrivateLinkDnsZone",
									"type": "Microsoft.Common.DropDown",
									"visible": "[and(steps('zeroTrust').avdPrivateLink.enablePrivateLink, steps('zeroTrust').avdPrivateLink.enablePrivateDNSIntegration)]",
									"label": "AVD Private DNS Zone",
									"multiLine": true,
									"toolTip": "Select the existing Private DNS Zone for the Remote Session connection and Workspace Feed (if applicable).",
									"constraints": {
										"allowedValues": "[map(filter(steps('zeroTrust').avdPrivateLink.privateDNSZonesApi.value, (zone) => contains(zone.name, 'privatelink.wvd.')), (zone) => parse(concat('{\"label\":\"', zone.name, '\",\"description\":\"Resource Group: ', first(skip(split(zone.id, '/'), 4)), '\",\"value\":\"', zone.id, '\"}')))]",
										"required": true
									}
								},
								{
									"name": "globalFeedPrivateDnsZone",
									"type": "Microsoft.Common.DropDown",
									"visible": "[and(steps('zeroTrust').avdPrivateLink.enablePrivateLink, steps('zeroTrust').avdPrivateLink.enablePrivateDNSIntegration, equals(steps('zeroTrust').avdPrivateLink.avdPrivateLinkConfig, 'All'))]",
									"label": "Global Feed Private DNS Zone",
									"defaultValue": "",
									"multiLine": true,
									"toolTip": "Select the existing Private DNS Zone for the global Feed.",
									"constraints": {
										"allowedValues": "[map(filter(steps('zeroTrust').avdPrivateLink.privateDNSZonesApi.value, (zone) => contains(zone.name, 'privatelink-global.wvd.')), (zone) => parse(concat('{\"label\":\"', zone.name, '\",\"description\":\"Resource group: ', first(skip(split(zone.id, '/'), 4)), '\",\"value\":\"', zone.id, '\"}')))]",
										"required": true
									}
								}
							]
						}
					]
				},
				{
					"name": "tags",
					"label": "Tags",
					"elements": [
						{
							"name": "tags",
							"type": "Microsoft.Common.TagsByResource",
							"resources": [
								"Microsoft.Compute/availabilitySets",
								"Microsoft.Compute/diskAccesses",
								"Microsoft.Compute/diskEncryptionSets",
								"Microsoft.Compute/hostGroups",
								"Microsoft.Compute/hostGroups/hosts",
								"Microsoft.Compute/virtualMachines",
								"Microsoft.DesktopVirtualization/applicationGroups",
								"Microsoft.DesktopVirtualization/hostPools",
								"Microsoft.DesktopVirtualization/scalingPlans",
								"Microsoft.DesktopVirtualization/workspaces",
								"Microsoft.Insights/dataCollectionEndpoints",
								"Microsoft.Insights/dataCollectionRules",
								"Microsoft.KeyVault/vaults",
								"Microsoft.ManagedIdentity/userAssignedIdentities",
								"Microsoft.NetApp/netAppAccounts",
								"Microsoft.Network/networkInterfaces",
								"Microsoft.Network/privateEndpoints",
								"Microsoft.OperationalInsights/workspaces",
								"Microsoft.RecoveryServices/vaults",
								"Microsoft.Resources/resourceGroups",
								"Microsoft.Storage/storageAccounts"
							]
						}
					]
				}
			]
		},
		"outputs": {
			"parameters": {
				"deploymentType": "[steps('basics').deploymentType]",
				"avdObjectId": "[if(empty(steps('basics').prereqs.avdServicePrincipalsApi), if(equals(steps('basics').deploymentType, 'Complete'), first(map(steps('basics').prereqs.servicePrincipalPickerBlade.transformed.selection, (sp) => sp.id)), ''), first(steps('basics').prereqs.avdServicePrincipalsApi.transformed.avd))]",
				"identifier": "[if(equals(steps('basics').deploymentType, 'Complete'), steps('basics').naming.identifier, '')]",
				"index": "[if(equals(steps('basics').deploymentType, 'Complete'), steps('basics').naming.index, '')]",
				"nameConvResTypeAtEnd": "[if(equals(steps('basics').deploymentType, 'Complete'), steps('basics').naming.nameConvResTypeAtEnd, false)]",
				"existingHostPoolResourceId": "[if(equals(steps('basics').deploymentType, 'SessionHostsOnly'), steps('controlPlane').existingHostPool.id, '')]",
				"locationControlPlane": "[if(equals(steps('basics').deploymentType, 'Complete'), steps('controlPlane').location.name, steps('controlPlane').hostPoolApi.location)]",
				"existingFeedWorkspaceResourceId": "[if(and(equals(steps('basics').deploymentType, 'Complete'), equals(steps('controlPlane').workspace.createOption, 'update')), steps('controlPlane').workspace.existingWorkspace, '')]",
				"workspaceFriendlyName": "[if(and(equals(steps('basics').deploymentType, 'Complete'), not(equals(steps('controlPlane').workspace.createOption, 'update'))), steps('controlPlane').naming.workspaceFriendlyName, '')]",
				"desktopFriendlyName": "[if(equals(steps('basics').deploymentType, 'Complete'), steps('controlPlane').naming.desktopFriendlyName, '')]",
				"hostPoolType": "[if(equals(steps('basics').deploymentType, 'Complete'), if(equals(steps('controlPlane').hostPool.type, 'Pooled'), concat(steps('controlPlane').hostPool.type, ' ', steps('controlPlane').hostPool.loadBalancerAlgorithm), concat(steps('controlPlane').hostPool.type, ' ', steps('controlPlane').hostPool.assignmentType)), 'Pooled BreadthFirst')]",
				"hostPoolMaxSessionLimit": "[if(and(equals(steps('basics').deploymentType, 'Complete'), equals(steps('controlPlane').hostPool.type, 'Pooled')), steps('controlPlane').hostPool.maxSessions, 1)]",
				"hostPoolValidationEnvironment": "[if(equals(steps('basics').deploymentType, 'Complete'), steps('controlPlane').hostPool.validation, false)]",
				"hostPoolRDPProperties": "[if(equals(steps('basics').deploymentType, 'Complete'), steps('controlPlane').hostPool.rdpProperties, '')]",
				"appGroupSecurityGroups": "[if(equals(steps('basics').deploymentType, 'Complete'), steps('controlPlane').assignments.groupPickerBlade.transformed.selection, parse('[]'))]",
				"deployScalingPlan": "[if(equals(steps('basics').deploymentType, 'Complete'), steps('controlPlane').scalingPlan.deployScalingPlan, false)]",
				"scalingPlanExclusionTag": "[if(steps('controlPlane').scalingPlan.deployScalingPlan, steps('controlPlane').scalingPlan.exclusionTag, '')]",
				"scalingPlanRampUpSchedule": "[if(steps('controlPlane').scalingPlan.deployScalingPlan, first(steps('controlPlane').scalingPlan.weekdayRampUpSchedule), parse('{}'))]",
				"scalingPlanPeakSchedule": "[if(steps('controlPlane').scalingPlan.deployScalingPlan, first(steps('controlPlane').scalingPlan.weekdayPeakSchedule), parse('{}'))]",
				"scalingPlanRampDownSchedule": "[if(steps('controlPlane').scalingPlan.deployScalingPlan, first(steps('controlPlane').scalingPlan.weekdayRampDownSchedule), parse('{}'))]",
				"scalingPlanOffPeakSchedule": "[if(steps('controlPlane').scalingPlan.deployScalingPlan, first(steps('controlPlane').scalingPlan.weekdayOffPeakSchedule), parse('{}'))]",
				"scalingPlanForceLogoff": "[if(steps('controlPlane').scalingPlan.deployScalingPlan, steps('controlPlane').scalingPlan.forceLogoff, false)]",
				"scalingPlanMinsBeforeLogoff": "[if(and(steps('controlPlane').scalingPlan.deployScalingPlan, steps('controlPlane').scalingPlan.forceLogoff), steps('controlPlane').scalingPlan.minsToLogoff, 0)]",
				"existingHostsResourceGroupName": "[if(equals(steps('basics').deploymentType, 'SessionHostsOnly'), last(split(steps('basics').resourceGroup, '/')), '')]",
				"virtualMachineNamePrefix": "[steps('hosts').naming.virtualMachineNamePrefix]",
				"sessionHostIndex": "[steps('hosts').naming.index]",
				"sessionHostCount": "[steps('hosts').specs.count]",
				"virtualMachineSubnetResourceId": "[steps('hosts').network.hostsSubnet]",
				"imageOffer": "[if(equals(steps('hosts').image.source, 'marketplace'), steps('hosts').image.offer, '')]",
				"imagePublisher": "[if(equals(steps('hosts').image.source, 'marketplace'), 'MicrosoftWindowsDesktop', '')]",
				"imageSku": "[if(equals(steps('hosts').image.source, 'marketplace'), steps('hosts').image.sku, '')]",
				"customImageResourceId": "[if(equals(steps('hosts').image.source, 'gallery'), steps('hosts').image.imageDefinition, '')]",
				"securityType": "[steps('hosts').security.securityType]",
				"secureBootEnabled": "[if(equals(steps('hosts').security.securityType, 'Standard'), false, steps('hosts').security.secureBootEnabled)]",
				"vTpmEnabled": "[if(equals(steps('hosts').security.securityType, 'Standard'), false, steps('hosts').security.vTpmEnabled)]",
				"encryptionAtHost": "[steps('hosts').diskEncryption.encryptionAtHost]",
				"existingDiskEncryptionSetResourceId": "[if(and(equals(steps('basics').deploymentType, 'SessionHostsOnly'), steps('hosts').diskEncryption.selectDiskEncryptionSet), steps('hosts').diskEncryption.existingDiskEncryptionSet.id, '')]",
				"keyManagementDisks": "[if(equals(steps('basics').deploymentType, 'Complete'), steps('hosts').diskEncryption.keyManagement, 'PlatformManaged')]",
				"confidentialVMOSDiskEncryption": "[if(equals(steps('basics').deploymentType, 'Complete'), steps('hosts').diskEncryption.confidentialVMOSDiskEncryption, false)]",
				"confidentialVMOrchestratorObjectId": "[if(and(equals(steps('basics').deploymentType, 'Complete'), steps('hosts').diskEncryption.confidentialVMOSDiskEncryption, equals(steps('hosts').diskEncryption.keyManagement, 'CustomerManaged')), if(empty(first(steps('hosts').diskEncryption.confDiskEncryptionPrincipalApi.value)), steps('hosts').diskEncryption.confDiskEncryptionPrincipal, first(steps('hosts').diskEncryption.confDiskEncryptionPrincipalApi.transformed.objectId)), '')]",
				"dedicatedHostGroupResourceId": "[if(steps('hosts').dedicatedHosts.deployToDedicatedHosts, steps('hosts').dedicatedHosts.dedicatedHostGroup, '')]",
				"dedicatedHostResourceId": "[if(steps('hosts').dedicatedHosts.deployToDedicatedHosts, steps('hosts').dedicatedHosts.dedicatedHost, '')]",
				"availability": "[if(equals(steps('hosts').dedicatedHosts.deployToDedicatedHosts, false), steps('hosts').availability.availability, 'none')]",
				"diskSku": "[steps('hosts').specs.diskSku]",
				"diskSizeGB": "[steps('hosts').specs.diskSizeGB]",
				"virtualMachineSize": "[if(equals(steps('hosts').security.securityType, 'ConfidentialVM'), steps('hosts').specs.sizeConfidentialVM, steps('hosts').specs.sizeGeneric)]",
				"vCPUs": "[first(map(filter(first(map(filter(steps('hosts').resourceSkusApi.value, (sku) => contains(sku.name, if(equals(steps('hosts').security.securityType, 'ConfidentialVM'), steps('hosts').specs.sizeConfidentialVM, steps('hosts').specs.sizeGeneric))), (sku) => sku.capabilities)), (cap) => equals(cap.name, 'vCPUs')), (cap) => cap.value))]",
				"memoryGB": "[first(map(filter(first(map(filter(steps('hosts').resourceSkusApi.value, (sku) => contains(sku.name, if(equals(steps('hosts').security.securityType, 'ConfidentialVM'), steps('hosts').specs.sizeConfidentialVM, steps('hosts').specs.sizeGeneric))), (sku) => sku.capabilities)), (cap) => equals(cap.name, 'MemoryGB')), (cap) => cap.value))]",
				"availabilityZones": "[if(and(equals(steps('hosts').dedicatedHosts.deployToDedicatedHosts, false), equals(steps('hosts').availability.availability, 'AvailabilityZones')), steps('hosts').availability.availabilityZones, parse('[]'))]",
				"enableAcceleratedNetworking": "[if(and(bool(first(map(filter(first(map(filter(steps('hosts').resourceSkusApi.value, (sku) => contains(sku.name, if(equals(steps('hosts').security.securityType, 'ConfidentialVM'), steps('hosts').specs.sizeConfidentialVM, steps('hosts').specs.sizeGeneric))), (sku) => sku.capabilities)), (sku) => equals(sku.name, 'AcceleratedNetworkingEnabled')), (sku) => sku.value))), or(equals(steps('hosts').image.source, 'marketplace'), bool(steps('hosts').image.imageDefinitionApi.transformed.IsAcceleratedNetworkSupported))), steps('hosts').specs.enableAcceleratedNetworking, false)]",
				"hibernationEnabled": "[if(and(equals(steps('controlPlane').hostPool.type, 'Personal'), bool(first(map(filter(first(map(filter(steps('hosts').resourceSkusApi.value, (sku) => contains(sku.name, if(equals(steps('hosts').security.securityType, 'ConfidentialVM'), steps('hosts').specs.sizeConfidentialVM, steps('hosts').specs.sizeGeneric))), (sku) => sku.capabilities)), (sku) => equals(sku.name, 'HibernationSupported')), (sku) => sku.value))), or(equals(steps('hosts').image.source, 'marketplace'), bool(steps('hosts').image.imageDefinitionApi.transformed.IsHibernateSupported))), steps('hosts').specs.hibernationEnabled, false)]",
				"identitySolution": "[if(and(equals(steps('hosts').identity.solution, 'EntraId'), steps('hosts').identity.intune), 'EntraIdIntuneEnrollment', steps('hosts').identity.solution)]",
				"domainName": "[steps('hosts').identity.domainName]",
				"vmOUPath": "[if(equals(steps('hosts').identity.solution, 'EntraId'), '', steps('hosts').identity.ouPath)]",
				"domainJoinUserPassword": "[if(and(not(equals(steps('hosts').identity.solution, 'EntraId')), equals(steps('hosts').credentials.source, 'manual')), steps('hosts').credentials.domainJoinUserPassword, '')]",
				"domainJoinUserPrincipalName": "[if(and(not(equals(steps('hosts').identity.solution, 'EntraId')), equals(steps('hosts').credentials.source, 'manual')), steps('hosts').credentials.domainJoinUserPrincipalName, '')]",
				"virtualMachineAdminPassword": "[if(equals(steps('hosts').credentials.source, 'manual'), steps('hosts').credentials.localAdminPassword, '')]",
				"virtualMachineAdminUserName": "[if(equals(steps('hosts').credentials.source, 'manual'), steps('hosts').credentials.localAdminUsername, '')]",
				"credentialsKeyVaultResourceId": "[if(equals(steps('hosts').credentials.source, 'keyVault'), steps('hosts').credentials.keyVault.id, '')]",
				"avdAgentsDSCPackage": "[steps('hosts').registration.avdAgentsDSCPackage]",
				"useAgentDownloadEndpoint": "[steps('hosts').registration.useAgentDownloadEndpoint]",
				"artifactsContainerUri": "[if(steps('hosts').customScripts.addCustomScripts, if(and(not(empty(steps('hosts').customScripts.storageAccount)), not(empty(steps('hosts').customScripts.container))), concat(steps('hosts').customScripts.storageAccount.blobEndpoint, steps('hosts').customScripts.container), ''), '')]",
				"artifactsUserAssignedIdentityResourceId": "[if(steps('hosts').customScripts.addCustomScripts, if(not(empty(steps('hosts').customScripts.managedIdentity)), steps('hosts').customScripts.managedIdentity.id, ''), '')]",
				"sessionHostCustomizations": "[if(steps('hosts').customScripts.addCustomScripts, steps('hosts').customScripts.customizations, parse('[]'))]",
				"fslogixContainerType": "[if(equals(steps('userProfiles').profileSolution, 'FSLogix'), steps('userProfiles').fslogixContainerType, 'ProfileContainer')]",
				"deployFSLogixStorage": "[if(equals(steps('userProfiles').profileSolution, 'FSLogix'), steps('userProfiles').deployStorage, false)]",
				"fslogixConfigureSessionHosts": "[if(equals(steps('userProfiles').profileSolution, 'FSLogix'), steps('userProfiles').configureSessionHosts, false)]",
				"fslogixOUPath": "[if(and(not(equals(steps('hosts').identity.solution, 'EntraId')), equals(steps('userProfiles').deployStorage, true)), steps('userProfiles').ouPath, '')]",
				"fslogixStorageService": "[if(equals(steps('userProfiles').deployStorage, true), if(equals(steps('userProfiles').storageService, 'AzureFiles'), concat('AzureFiles ', steps('userProfiles').azureFiles.storageSku), concat('AzureNetAppFiles ', steps('userProfiles').azureNetAppFiles.storageSku)), if(steps('userProfiles').configureSessionHosts, if(equals(steps('userProfiles').storageService, 'AzureFiles'), 'AzureFiles Standard', 'AzureNetAppFiles Standard'), 'AzureFiles Standard'))]",
				"netAppVolumesSubnetResourceId": "[if(and(equals(steps('userProfiles').deployStorage, true), equals(steps('userProfiles').storageService, 'AzureNetAppFiles')), steps('userProfiles').azureNetAppFiles.subnet, '')]",
				"existingSharedActiveDirectoryConnection": "[if(and(equals(steps('userProfiles').deployStorage, true), equals(steps('userProfiles').storageService, 'AzureNetAppFiles')), steps('userProfiles').azureNetAppFiles.existingSharedActiveDirectoryConnection, false)]",
				"fslogixExistingLocalNetAppVolumeResourceIds": "[if(and(steps('userProfiles').configureSessionHosts, not(equals(steps('userProfiles').deployStorage, true)), equals(steps('userProfiles').storageService, 'AzureNetAppFiles')), steps('userProfiles').azureNetAppFiles.localVolumes, parse('[]'))]",
				"fslogixExistingRemoteNetAppVolumeResourceIds": "[if(and(steps('userProfiles').configureSessionHosts, contains(steps('userProfiles').fslogixContainerType, 'CloudCache'), equals(steps('userProfiles').storageService, 'AzureNetAppFiles')), steps('userProfiles').azureNetAppFiles.remoteVolumes, parse('[]'))]",
				"fslogixShardOptions": "[if(and(equals(steps('userProfiles').storageService, 'AzureFiles'), or(steps('userProfiles').configureSessionHosts, equals(steps('userProfiles').deployStorage, true))), steps('userProfiles').azureFiles.shardingOption, 'None')]",
				"fslogixUserGroups": "[if(equals(steps('userProfiles').storageService, 'AzureNetAppFiles'), if(equals(steps('userProfiles').deployStorage, true), steps('userProfiles').azureNetAppFiles.groupPickerBlade.transformed.selection, parse('[]')), if(and(equals(steps('userProfiles').storageService, 'AzureFiles'), or(steps('userProfiles').configureSessionHosts, equals(steps('userProfiles').deployStorage, true)), not(equals(steps('userProfiles').azureFiles.shardingOption, 'None')), not(equals(steps('hosts').identity.solution, 'EntraId'))), steps('userProfiles').azureFiles.groupPickerBlade.transformed.selection, parse('[]')))]",
				"fslogixShareSizeInGB": "[if(equals(steps('userProfiles').deployStorage, true), if(equals(steps('userProfiles').storageService, 'AzureFiles'), steps('userProfiles').azureFiles.storageShareSize, steps('userProfiles').azureNetAppFiles.storageShareSize), 100)]",
				"fslogixStorageIndex": "[if(and(equals(steps('userProfiles').deployStorage, true), equals(steps('userProfiles').storageService, 'AzureFiles')), steps('userProfiles').azureFiles.storageIndex, 0)]",
				"fslogixStorageAccountADKerberosEncryption": "[if(and(equals(steps('userProfiles').deployStorage, true), equals(steps('userProfiles').storageService, 'AzureFiles')), steps('userProfiles').azureFiles.storageKerberosEncryption, 'RC4')]",
				"keyManagementStorageAccounts": "[if(and(equals(steps('userProfiles').deployStorage, true), equals(steps('userProfiles').storageService, 'AzureFiles')), steps('userProfiles').azureFiles.keyManagement, 'MicrosoftManaged')]",
				"fslogixExistingLocalStorageAccountResourceIds": "[if(and(steps('userProfiles').configureSessionHosts, not(equals(steps('userProfiles').deployStorage, true)), equals(steps('userProfiles').storageService, 'AzureFiles')), steps('userProfiles').azureFiles.existingLocalStorageAccounts, parse('[]'))]",
				"fslogixExistingRemoteStorageAccountResourceIds": "[if(and(steps('userProfiles').configureSessionHosts, contains(steps('userProfiles').fslogixContainerType, 'CloudCache'), equals(steps('userProfiles').storageService, 'AzureFiles')), steps('userProfiles').azureFiles.existingRemoteStorageAccounts, parse('[]'))]",
				"fslogixAdminGroups": "[if(steps('userProfiles').shareManagement.configureAdminAccess, steps('userProfiles').shareManagement.groupPickerBlade.transformed.selection, parse('[]'))]",
				"drainMode": "[steps('management').automation.drainMode]",
				"deployIncreaseQuota": "[if(and(equals(steps('basics').deploymentType, 'Complete'), equals(steps('userProfiles').azureFiles.storageSku, 'Premium')), steps('management').automation.deployIncreaseQuota, false)]",
				"recoveryServices": "[steps('management').backup.recoveryServices]",
				"existingRecoveryServicesVaultResourceId": "[if(and(equals(steps('basics').deploymentType, 'SessionHostsOnly'), equals(steps('controlPlane').hostPoolApi.properties.hostPoolType, 'Personal'), steps('management').backup.recoveryServices), steps('management').backup.recoveryServicesVault, '')]",
				"existingDiskAccessResourceId": "[if(and(equals(steps('basics').deploymentType, 'SessionHostsOnly'), equals(steps('controlPlane').hostPoolApi.properties.hostPoolType, 'Personal'), steps('management').backup.recoveryServices, steps('management').backup.associateDiskAccessResource), steps('management').backup.diskAccess, '')]",
				"deploySecretsKeyVault": "[if(equals(steps('basics').deploymentType, 'Complete'), steps('management').keyVaults.deploySecretsKeyVault, false)]",
				"keyVaultRetentionInDays": "[if(and(equals(steps('basics').deploymentType, 'Complete'), or(steps('management').keyVaults.deploySecretsKeyVault, contains(steps('hosts').diskEncryption.keyManagement, 'CustomerManaged'), contains(steps('userProfiles').azureFiles.keyManagement, 'CustomerManaged'))), steps('management').keyVaults.keyVaultRetentionInDays, 7)]",
				"keyExpirationInDays": "[if(and(equals(steps('basics').deploymentType, 'Complete'), or(contains(steps('hosts').diskEncryption.keyManagement, 'CustomerManaged'), contains(steps('userProfiles').azureFiles.keyManagement, 'CustomerManaged'))), steps('management').keyVaults.keyExpirationInDays, 180)]",
				"enableMonitoring": "[steps('management').monitoring.enableMonitoring]",
				"logAnalyticsWorkspaceRetention": 30,
				"logAnalyticsWorkspaceSku": "PerGB2018",
				"existingAVDInsightsDataCollectionRuleResourceId": "[if(and(equals(steps('basics').deploymentType, 'SessionHostsOnly'), steps('management').monitoring.enableMonitoring), steps('management').monitoring.avdInsightsDataCollectionRule, '')]",
				"existingVMInsightsDataCollectionRuleResourceId": "[if(and(equals(steps('basics').deploymentType, 'SessionHostsOnly'), steps('management').monitoring.enableMonitoring), steps('management').monitoring.vmInsightsDataCollectionRule, '')]",
				"existingDataCollectionEndpointResourceId": "[if(and(equals(steps('basics').deploymentType, 'SessionHostsOnly'), steps('management').monitoring.enableMonitoring), steps('management').monitoring.dataCollectionEndpoint, '')]",
				"securityDataCollectionRulesResourceId": "[if(steps('management').monitoring.enableCentralMonitoring, steps('management').monitoring.securityDataCollectionRule.id, '')]",
				"deployPrivateEndpoints": "[steps('zeroTrust').privateEndpoints.deployPrivateEndpoints]",
				"managementResourcesPrivateEndpointSubnetResourceId": "[if(steps('zeroTrust').privateEndpoints.deployPrivateEndpoints, steps('zeroTrust').privateEndpoints.managementSubnet, '')]",
				"functionAppSubnetResourceId": "[if(and(steps('management').automation.deployIncreaseQuota, steps('zeroTrust').privateEndpoints.deployPrivateEndpoints), steps('zeroTrust').privateEndpoints.functionAppOutboundSubnet, '')]",
				"hostPoolResourcesPrivateEndpointSubnetResourceId": "[if(steps('zeroTrust').privateEndpoints.deployPrivateEndpoints, steps('zeroTrust').privateEndpoints.hostpoolSubnet, '')]",
				"azureBackupPrivateDnsZoneResourceId": "[if(and(steps('management').backup.recoveryServices, steps('zeroTrust').privateEndpoints.deployPrivateEndpoints, steps('zeroTrust').privateEndpoints.enablePrivateDNSIntegration), steps('zeroTrust').privateEndpoints.azureBackupPrivateDnsZone, '')]",
				"azureBlobPrivateDnsZoneResourceId": "[if(and(or(steps('management').backup.recoveryServices, steps('management').monitoring.enableMonitoring), steps('zeroTrust').privateEndpoints.deployPrivateEndpoints, steps('zeroTrust').privateEndpoints.enablePrivateDNSIntegration), steps('zeroTrust').privateEndpoints.azureBlobPrivateDnsZone, '')]",
				"azureFunctionAppPrivateDnsZoneResourceId": "[if(and(steps('management').automation.deployIncreaseQuota, steps('zeroTrust').privateEndpoints.deployPrivateEndpoints, steps('zeroTrust').privateEndpoints.enablePrivateDNSIntegration), steps('zeroTrust').privateEndpoints.azureFunctionAppPrivateDnsZone, '')]",
				"azureFunctionAppScmPrivateDnsZoneResourceId": "[if(and(steps('management').automation.deployIncreaseQuota, steps('zeroTrust').privateEndpoints.deployPrivateEndpoints, steps('zeroTrust').privateEndpoints.enablePrivateDNSIntegration), steps('zeroTrust').privateEndpoints.azureFunctionAppScmPrivateDnsZone, '')]",
				"azureFilesPrivateDnsZoneResourceId": "[if(and(equals(steps('userProfiles').storageService, 'AzureFiles'), steps('zeroTrust').privateEndpoints.deployPrivateEndpoints, steps('zeroTrust').privateEndpoints.enablePrivateDNSIntegration), steps('zeroTrust').privateEndpoints.azureFilesPrivateDnsZone, '')]",
				"azureKeyVaultPrivateDnsZoneResourceId": "[if(and(steps('zeroTrust').privateEndpoints.deployPrivateEndpoints, steps('zeroTrust').privateEndpoints.enablePrivateDNSIntegration, or(equals(steps('hosts').credentials.source, 'manual'), steps('hosts').diskEncryption.confidentialVMOSDiskEncryption, contains(steps('hosts').diskEncryption.keyManagement, 'CustomerManaged'), contains(steps('userProfiles').azureFiles.keyManagement, 'CustomerManaged'))), steps('zeroTrust').privateEndpoints.azureKeyVaultPrivateDnsZone, '')]",
				"azureQueuePrivateDnsZoneResourceId": "[if(and(or(steps('management').backup.recoveryServices, steps('management').automation.deployIncreaseQuota), steps('zeroTrust').privateEndpoints.deployPrivateEndpoints, steps('zeroTrust').privateEndpoints.enablePrivateDNSIntegration), steps('zeroTrust').privateEndpoints.azureQueuePrivateDnsZone, '')]",
				"azureTablePrivateDnsZoneResourceId": "[if(and(steps('management').automation.deployIncreaseQuota, steps('zeroTrust').privateEndpoints.deployPrivateEndpoints, steps('zeroTrust').privateEndpoints.enablePrivateDNSIntegration), steps('zeroTrust').privateEndpoints.azureTablePrivateDnsZone, '')]",
				"azureMonitorPrivateLinkScopeResourceId": "[if(steps('zeroTrust').azureMonitor.privateLink, steps('zeroTrust').azureMonitor.azureMonitorPrivateLinkScope.id, '')]",
				"deployDiskAccessPolicy": "[steps('zeroTrust').policy.deployDiskAccessPolicy]",
				"avdPrivateLinkPrivateRoutes": "[if(steps('zeroTrust').avdPrivateLink.enablePrivateLink, steps('zeroTrust').avdPrivateLink.avdPrivateLinkConfig, 'None')]",
				"hostpoolPrivateEndpointSubnetResourceId": "[if(steps('zeroTrust').avdPrivateLink.enablePrivateLink, steps('zeroTrust').avdPrivateLink.hostpoolSubnet, '')]",
				"workspaceFeedPrivateEndpointSubnetResourceId": "[if(and(steps('zeroTrust').avdPrivateLink.enablePrivateLink, not(equals(steps('zeroTrust').avdPrivateLink.avdPrivateLinkConfig, 'Hostpool'))), steps('zeroTrust').avdPrivateLink.feedWorkspaceSubnet, '')]",
				"avdPrivateDnsZoneResourceId": "[if(steps('zeroTrust').avdPrivateLink.enablePrivateLink, steps('zeroTrust').avdPrivateLink.wvdPrivateLinkDnsZone, '')]",
				"hostPoolPublicNetworkAccess": "[if(steps('zeroTrust').avdPrivateLink.enablePrivateLink, steps('zeroTrust').avdPrivateLink.hostpoolPublicNetworkAccess, 'Enabled')]",
				"workspacePublicNetworkAccess": "[if(and(steps('zeroTrust').avdPrivateLink.enablePrivateLink, not(equals(steps('zeroTrust').avdPrivateLink.avdPrivateLinkConfig, 'Hostpool'))), steps('zeroTrust').avdPrivateLink.feedWorkspacePublicNetworkAccess, 'Enabled')]",
				"existingGlobalFeedResourceId": "[first(map(filter(steps('controlPlane').workspacesApi.value, (ws) => contains(ws.name, 'global-feed')), (ws) => ws.id))]",
				"globalFeedPrivateEndpointSubnetResourceId": "[if(and(steps('zeroTrust').avdPrivateLink.enablePrivateLink, steps('zeroTrust').avdPrivateLink.enablePrivateDNSIntegration, equals(steps('zeroTrust').avdPrivateLink.avdPrivateLinkConfig, 'All')), steps('zeroTrust').avdPrivateLink.globalFeedSubnet, '')]",
				"globalFeedPrivateDnsZoneResourceId": "[if(and(steps('zeroTrust').avdPrivateLink.enablePrivateLink, steps('zeroTrust').avdPrivateLink.enablePrivateDNSIntegration, equals(steps('zeroTrust').avdPrivateLink.avdPrivateLinkConfig, 'All')), steps('zeroTrust').avdPrivateLink.globalFeedPrivateDnsZone, '')]",
				"tags": "[steps('tags').tags]"
			},
			"kind": "Subscription",
			"location": "[steps('basics').scope.location.name]",
			"subscriptionId": "[steps('basics').scope.subscription.id]"
		}
	}
}