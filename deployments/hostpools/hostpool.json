{
  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.36.1.42791",
      "templateHash": "10637807317346082531"
    }
  },
  "parameters": {
    "avdObjectId": {
      "type": "string",
      "metadata": {
        "description": "The Object ID for the Windows Virtual Desktop Enterprise Application in Azure AD.  The Object ID can found by selecting Microsoft Applications using the Application type filter in the Enterprise Applications blade of Azure AD."
      }
    },
    "avdAgentsDSCPackage": {
      "type": "string",
      "defaultValue": "Configuration_1.0.02790.438.zip",
      "metadata": {
        "description": "Optional. The DSC package name or full Url used by the PowerShell DSC extension to install the AVD Agent and register the virtual machine as a Session Host."
      }
    },
    "useAgentDownloadEndpoint": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Instruct the AVD Agent Installation script to automatically download the latest agent version during installation.zip."
      }
    },
    "deploymentType": {
      "type": "string",
      "defaultValue": "Complete",
      "allowedValues": [
        "Complete",
        "SessionHostsOnly"
      ],
      "metadata": {
        "description": "Optional. The type of deployment to perform.  A \"Complete\" deployment will deploy the host pool, selected other resources, and session hosts.  A \"SessionHostsOnly\" deployment will only deploy the session hosts."
      }
    },
    "virtualMachinesTimeZone": {
      "type": "string",
      "defaultValue": "Eastern Standard Time",
      "metadata": {
        "description": "Optional. The TimeZone of the AVD session hosts."
      }
    },
    "existingHostPoolResourceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. The resource Id of an existing AVD host pool to which the session hosts will be registered. Only used when \"DeploymentType\" is \"SessionHostOnly\"."
      }
    },
    "existingHostsResourceGroupName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. The name of the existing hosts resource group. Only used used when \"DeploymentType\" is \"SessionHostOnly\"."
      }
    },
    "existingDiskEncryptionSetResourceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. The resource Id of an existing Disk Encryption Set that session hosts will utilize for customer managed keys. Only used when \"DeploymentType\" is \"SessionHostOnly\"."
      }
    },
    "existingRecoveryServicesVaultResourceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. The resource Id of an existing Recovery Services Vault that will be used to store Virtual Machine Backups. Only used when \"DeploymentType\" is \"SessionHostOnly\"."
      }
    },
    "existingDiskAccessResourceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. The resource id of the existing disk access resource for private link access to the managed disks. Only used when \"DeploymentType\" is \"SessionHostOnly\"."
      }
    },
    "existingAVDInsightsDataCollectionRuleResourceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. The resource Id of the existing AVD Insights Data Collection Rule. Only used when \"DeploymentType\" is \"SessionHostOnly\"."
      }
    },
    "existingVMInsightsDataCollectionRuleResourceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. The resource Id of the existing VM Insights Data Collection Rule. Only used when \"DeploymentType\" is \"SessionHostOnly\"."
      }
    },
    "existingDataCollectionEndpointResourceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. The resource Id of the existing Data Collection Endpoint. Only used when \"DeploymentType\" is \"SessionHostOnly\"."
      }
    },
    "identifier": {
      "type": "string",
      "defaultValue": "",
      "maxLength": 9,
      "metadata": {
        "description": "Required. Identifier used to describe the persona of the hostpool(s).\nA persona refers to a detailed profile that represents a specific user type, considering their unique needs,\nusage patterns, and requirements. Essentially, it's a fictional character that helps IT professionals\nunderstand and address the varying demands of different users within an organization.\nEach persona might include details like:\n  Role: What job they perform within the organization.  \n  Applications: What applications they use regularly.\n  Workload: The intensity of resource usage, such as compute, storage, and network.\n  Access Needs: How they access the virtual desktopâ€”remotely or on-premises.\n  Security Requirements: Specific security measures necessary for their role.\nThis identifier combined with the index parameter (when provided) is used to create the host pool, desktop application group,\nand other host pool specific resource names.\n"
      }
    },
    "index": {
      "type": "string",
      "defaultValue": "",
      "maxLength": 2,
      "metadata": {
        "description": "Optional. An index value used to distinquish each host pool with the same persona identifier. This can be provided to shard\nthe host pool across multiple groups for performance reasons or to uniquely define host pools under the same identifier.\n"
      }
    },
    "nameConvResTypeAtEnd": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Reverse the normal Cloud Adoption Framework naming convention by putting the resource type abbreviation at the end of the resource name."
      }
    },
    "locationControlPlane": {
      "type": "string",
      "defaultValue": "[deployment().location]",
      "metadata": {
        "description": "Optional. The deployment location for the AVD Control Plane resources."
      }
    },
    "existingFeedWorkspaceResourceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. The resource Id of an existing AVD workspace to which the desktop application group will be registered."
      }
    },
    "workspaceFriendlyName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. The friendly name for the AVD workspace that is displayed in the client."
      }
    },
    "desktopFriendlyName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. The friendly name for the Desktop in the AVD workspace."
      }
    },
    "hostPoolType": {
      "type": "string",
      "defaultValue": "Pooled DepthFirst",
      "allowedValues": [
        "Pooled DepthFirst",
        "Pooled BreadthFirst",
        "Personal Automatic",
        "Personal Direct"
      ],
      "metadata": {
        "description": "Optional. These options specify the host pool type and depending on the type provides the load balancing options and assignment types."
      }
    },
    "hostPoolMaxSessionLimit": {
      "type": "int",
      "defaultValue": 4,
      "metadata": {
        "description": "Optional. The maximum number of sessions per AVD session host."
      }
    },
    "hostPoolRDPProperties": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Input RDP properties to add or remove RDP functionality on the AVD host pool.\nSettings reference: https://learn.microsoft.com/windows-server/remote/remote-desktop-services/clients/rdp-files\n"
      }
    },
    "hostPoolValidationEnvironment": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. The value determines whether the hostPool should receive early AVD updates for testing."
      }
    },
    "startVmOnConnect": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional. Determines if the Start VM on Connect Feature is enabled for the Host Pool."
      }
    },
    "appGroupSecurityGroups": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Optional.\nAn array of objects, defining the security groups that are assigned permissions to the desktop application group created by this solution.\nEach object contains a displayName and objectId key value pair.\nIf the 'fslogixShardGroups' is not defined, the value of this parameter is used to determine the number of storage accounts and permissions for each.\n"
      }
    },
    "deployScalingPlan": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Determines if the scaling plan is deployed to the host pool."
      }
    },
    "scalingPlanExclusionTag": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. The tag used to exclude virtual machines from the scaling plan."
      }
    },
    "scalingPlanRampUpSchedule": {
      "type": "object",
      "defaultValue": {
        "startTime": "8:00",
        "minimumHostsPct": 20,
        "capacityThresholdPct": 60,
        "loadBalancingAlgorithm": "DepthFirst"
      },
      "metadata": {
        "description": "Optional. The scaling plan weekday ramp up schedule"
      }
    },
    "scalingPlanPeakSchedule": {
      "type": "object",
      "defaultValue": {
        "startTime": "9:00",
        "loadBalancingAlgorithm": "DepthFirst"
      },
      "metadata": {
        "description": "Optional. The scaling plan weekday peak schedule."
      }
    },
    "scalingPlanRampDownSchedule": {
      "type": "object",
      "defaultValue": {
        "startTime": "17:00",
        "minimumHostsPct": 10,
        "capacityThresholdPct": 90,
        "loadBalancingAlgorithm": "DepthFirst"
      },
      "metadata": {
        "description": "Optional. The scaling plan weekday rampdown schedule."
      }
    },
    "scalingPlanOffPeakSchedule": {
      "type": "object",
      "defaultValue": {
        "startTime": "20:00",
        "loadBalancingAlgorithm": "DepthFirst"
      },
      "metadata": {
        "description": "Optional. The scaling plan weakday off peak schedule."
      }
    },
    "scalingPlanForceLogoff": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Determines if the scaling plan will forcefully log off users when scaling down."
      }
    },
    "scalingPlanMinsBeforeLogoff": {
      "type": "int",
      "defaultValue": 0,
      "metadata": {
        "description": "Optional. The number of minutes to wait before forcefully logging off users when scaling down."
      }
    },
    "virtualMachineNamePrefix": {
      "type": "string",
      "minLength": 2,
      "maxLength": 12,
      "metadata": {
        "description": "Required. The Virtual Machine Name prefix."
      }
    },
    "sessionHostCount": {
      "type": "int",
      "defaultValue": 1,
      "minValue": 0,
      "maxValue": 5000,
      "metadata": {
        "description": "Optional. The number of session hosts to deploy in the host pool. Ensure you have the approved quota to deploy the desired count."
      }
    },
    "sessionHostIndex": {
      "type": "int",
      "defaultValue": 1,
      "minValue": 0,
      "maxValue": 4999,
      "metadata": {
        "description": "Optional. The starting number for the session hosts. This is important when adding virtual machines to ensure an update deployment is not performed on an exiting, active session host."
      }
    },
    "virtualMachineSubnetResourceId": {
      "type": "string",
      "metadata": {
        "description": "Required. The resource ID of the subnet to place the network interfaces for the AVD session hosts."
      }
    },
    "securityType": {
      "type": "string",
      "defaultValue": "TrustedLaunch",
      "allowedValues": [
        "Standard",
        "ConfidentialVM",
        "TrustedLaunch"
      ],
      "metadata": {
        "description": "Optional. The Security Type of the AVD Session Hosts.  ConfidentialVM and TrustedLaunch are only available in certain regions."
      }
    },
    "secureBootEnabled": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional. Enable Secure Boot on the Trusted Luanch or Confidential VMs."
      }
    },
    "vTpmEnabled": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional. Enable the Virtual TPM on Trusted Launch or Confidential VMs."
      }
    },
    "integrityMonitoring": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional. Integrity monitoring enables cryptographic attestation and verification of VM boot integrity along with monitoring alerts if the VM did not boot because attestation failed with the defined baseline."
      }
    },
    "encryptionAtHost": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional. Encryption at host encrypts temporary disks and ephemeral OS disks with platform-managed keys,\nOS and data disk caches with the key specified in the \"keyManagementDisks\" parameter, and flows encrypted to the Storage service.\n"
      }
    },
    "keyManagementDisks": {
      "type": "string",
      "defaultValue": "PlatformManaged",
      "allowedValues": [
        "PlatformManaged",
        "CustomerManaged",
        "CustomerManagedHSM",
        "PlatformManagedAndCustomerManaged",
        "PlatformManagedAndCustomerManagedHSM"
      ],
      "metadata": {
        "description": "Optional. The type of encryption key management used for the storage. (Default: \"PlatformManaged\")\n- Platform-managed keys (PMKs) are key encryption keys that are generated, stored, and managed entirely by Azure. Choose Platform Managed for the best balance of security and ease of use.\n- Customer-managed keys (CMKs) are key encryption keys that are generated, stored, and managed by you, the customer, in your Azure Key Vault. Choose Customer Managed if you need to meet specific compliance requirements.\n- Customer-managed keys (CMKs) storage in a premium KeyVault backed by a Hardware Security Module (HSM). The Hardware Security Module is FIPS 140 Level 3 validated.\n- Double encryption is 2 layers of encryption: an infrastructure encryption layer with platform managed keys and a disk encryption layer with customer managed keys defined by disk encryption sets.\nChoose Platform Managed and Customer Managed if you need double encryption. This option does not apply to confidential VMs.\n- Choose Platform Managed and Customer Managed with HSM if you must incorporate double encryption and protect the customer managed key with the Hardware Security Module. This option does not apply to confidential VMs.\n"
      }
    },
    "keyExpirationInDays": {
      "type": "int",
      "defaultValue": 180,
      "metadata": {
        "description": "Optional. The rotation period for the customer-managed keys in the Azure Key Vault."
      }
    },
    "confidentialVMOSDiskEncryption": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Confidential disk encryption is an additional layer of encryption which binds the disk encryption keys to the virtual machine TPM and makes the disk content accessible only to the VM."
      }
    },
    "confidentialVMOrchestratorObjectId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. The object ID of the Confidential VM Orchestrator enterprise application with application ID \"bf7b6499-ff71-4aa2-97a4-f372087be7f0\".\nThis is required when \"confidentialVMOSDiskEncryption\" is set to \"true\". You must create this application in your tenant before deploying this solution using the following PowerShell script:\n  Connect-AzureAD -Tenant \"your tenant ID\"\n  New-AzureADServicePrincipal -AppId bf7b6499-ff71-4aa2-97a4-f372087be7f0 -DisplayName \"Confidential VM Orchestrator\"\n"
      }
    },
    "dedicatedHostResourceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. The resource Id of the Dedicated Host on which to deploy the Virtual Machines."
      }
    },
    "dedicatedHostGroupResourceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. The resource Id of the Dedicated Host Group on to which the Virtual Machines are to be deployed. The Dedicated Host Group must support Automatic Host Assignment for this value to be used."
      }
    },
    "diskSizeGB": {
      "type": "int",
      "defaultValue": 0,
      "allowedValues": [
        0,
        32,
        64,
        128,
        256,
        512,
        1024,
        2048
      ],
      "metadata": {
        "description": "Optional. The size of the OS disk in GB for the AVD session hosts. When set to 0 it defaults to the image size - typically 128 GB."
      }
    },
    "diskSku": {
      "type": "string",
      "defaultValue": "Premium_LRS",
      "allowedValues": [
        "Standard_LRS",
        "StandardSSD_LRS",
        "Premium_LRS"
      ],
      "metadata": {
        "description": "Optional. The storage SKU for the AVD session host disks.  Production deployments should use Premium_LRS."
      }
    },
    "virtualMachineSize": {
      "type": "string",
      "defaultValue": "Standard_D4ads_v5",
      "metadata": {
        "description": "Optional. The VM SKU for the AVD session hosts."
      }
    },
    "vCPUs": {
      "type": "int",
      "defaultValue": 0,
      "metadata": {
        "description": "Optional. The Number of cores for the AVD session hosts."
      }
    },
    "memoryGB": {
      "type": "int",
      "defaultValue": 0,
      "metadata": {
        "description": "Optional. The amount of memory in GB for the AVD session hosts."
      }
    },
    "enableAcceleratedNetworking": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional. Determines whether or not to enable accelerated networking for the session host VMs."
      }
    },
    "hibernationEnabled": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Determines whether or not to enable hibernation for the session host VMs."
      }
    },
    "availability": {
      "type": "string",
      "defaultValue": "availabilityZones",
      "allowedValues": [
        "availabilitySets",
        "availabilityZones",
        "None"
      ],
      "metadata": {
        "description": "Optional. Set the desired availability / SLA with a pooled host pool.  The best practice is to deploy to availability Zones for resilency. Not used when either \"dedicatedHostResourceId\" or \"dedicatedHostGroupResourceId\" is specified."
      }
    },
    "availabilityZones": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Conditional. The availability zones allowed for the AVD session hosts deployment location. Used when \"availability\" is set to \"availabilityZones\"."
      }
    },
    "imageOffer": {
      "type": "string",
      "defaultValue": "office-365",
      "metadata": {
        "description": "Optional. Offer for the virtual machine image"
      }
    },
    "imagePublisher": {
      "type": "string",
      "defaultValue": "MicrosoftWindowsDesktop",
      "metadata": {
        "description": "Optional. Publisher for the virtual machine image"
      }
    },
    "imageSku": {
      "type": "string",
      "defaultValue": "win11-24h2-avd-m365",
      "metadata": {
        "description": "Optional. SKU for the virtual machine image"
      }
    },
    "customImageResourceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Required. The resource ID for the Compute Gallery Image Version. Do not set this value if using a marketplace image."
      }
    },
    "identitySolution": {
      "type": "string",
      "allowedValues": [
        "ActiveDirectoryDomainServices",
        "EntraDomainServices",
        "EntraId",
        "EntraIdIntuneEnrollment"
      ],
      "metadata": {
        "description": "Required. The service providing domain services for Azure Virtual Desktop.  This is needed to properly configure the session hosts and if applicable, the Azure Storage Account."
      }
    },
    "virtualMachineAdminPassword": {
      "type": "securestring",
      "defaultValue": "",
      "metadata": {
        "description": "Conditional. Local administrator password for the AVD session hosts"
      }
    },
    "virtualMachineAdminUserName": {
      "type": "securestring",
      "defaultValue": "",
      "metadata": {
        "description": "Conditional. The Local Administrator Username for the Session Hosts"
      }
    },
    "domainJoinUserPassword": {
      "type": "securestring",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. The password of the privileged account to domain join the AVD session hosts to your domain. Required when \"identitySolution\" contains \"DomainServices\"."
      }
    },
    "domainJoinUserPrincipalName": {
      "type": "securestring",
      "defaultValue": "",
      "metadata": {
        "description": "Conditional. The UPN of the privileged account to domain join the AVD session hosts to your domain. This should be an account the resides within the domain you are joining. Required when \"identitySolution\" contains \"DomainServices\"."
      }
    },
    "credentialsKeyVaultResourceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. The Resource Id of the Key Vault containing the credential secrets."
      }
    },
    "domainName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. The name of the domain that provides ADDS to the AVD session hosts and is synchronized with Azure AD"
      }
    },
    "vmOUPath": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. The distinguished name for the target Organization Unit in Active Directory Domain Services."
      }
    },
    "artifactsContainerUri": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional.\nThe Uri of the container hosting the scripts or installers that are used to customize the session host Virtual Machines.\nDo not include the trailing slash.\n"
      }
    },
    "artifactsUserAssignedIdentityResourceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional.\nThe Resource Id of the managed identity with Storage Blob Data Reader Access to the artifacts container if using Azure Blob Storage.\nRequired when accessing artifacts from the storage account when they do not enable anonymous access. \n"
      }
    },
    "sessionHostCustomizations": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Optional.\nArray of objects containing the following properties\n-name: The name of the script or application that is running minus extension\n-blobNameOrUri: The blob name when used with the artifactsContainerUri or the full URI of the file to download.\n-arguments: Arguments required by the installer or script being ran.\n\nJSON example:\n[\n  {\n    \"name\": \"FSLogix\",\n    \"blobNameOrUri\": \"https://aka.ms/fslogix_download\"\n  },\n  {\n    \"name\": \"VSCode\",\n    \"blobNameOrUri\": \"VSCode.zip\",\n    \"arguments\": \"/verysilent /mergetasks=!runcode\"\n  }\n]\n"
      }
    },
    "deployFSLogixStorage": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Determines whether resources to support FSLogix profile storage are deployed."
      }
    },
    "fslogixStorageCustomPrefix": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. The custom prefix to use for the name of the Azure files storage accounts to use for FSLogix. If not specified, the name is generated automatically."
      }
    },
    "fslogixShareSizeInGB": {
      "type": "int",
      "defaultValue": 100,
      "metadata": {
        "description": "Optional. The file share size(s) in GB for the fslogix storage solution."
      }
    },
    "fslogixContainerType": {
      "type": "string",
      "defaultValue": "ProfileContainer",
      "allowedValues": [
        "CloudCacheProfileContainer",
        "CloudCacheProfileOfficeContainer",
        "ProfileContainer",
        "ProfileOfficeContainer"
      ],
      "metadata": {
        "description": "Optional. The type of FSLogix containers to use for FSLogix."
      }
    },
    "fslogixShardOptions": {
      "type": "string",
      "defaultValue": "None",
      "allowedValues": [
        "None",
        "ShardOSS",
        "ShardPerms"
      ],
      "metadata": {
        "description": "Optional.\nDetermines whether or not to Shard Azure Files Storage by deploying more than one storage account, and if so how the Session Hosts are Configured.\nIf 'None' is selected, then no sharding is performed and only 1 storage account is deployed when deploying storage accounts.\nIf 'ShardOSS' is selected, then the fslogixShardGroups are used to assign share permissions and configure the session hosts with Object Specific Settings.\nIf 'ShardPerms' is selected, then storage account permissions are assigned based on the groups defined in \"appGroupSecurityGroups\" or \"fslogixShardPrincpals\".\n"
      }
    },
    "fslogixAdminGroups": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Optional.\nAn array of objects, defining the administrator groups who will be granted full control access to the FSLogix share. The groups must exist in AD and Entra.\nEach object must include the following key value pairs:\n- 'displayName': The display name of the security group.\n- 'objectId': The Object ID of the security group.\n"
      }
    },
    "fslogixUserGroups": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Optional.\nAn array of objects, defining the user groups that are assigned permissions to each share. The groups must exist in AD and Entra.\nEach object contains the following key value pairs:\n- 'displayName': The display name of the security group.\n- 'objectId': The Object ID of the security group.\n"
      }
    },
    "fslogixStorageService": {
      "type": "string",
      "defaultValue": "AzureFiles Standard",
      "allowedValues": [
        "AzureNetAppFiles Premium",
        "AzureNetAppFiles Standard",
        "AzureFiles Premium",
        "AzureFiles Standard"
      ],
      "metadata": {
        "description": "Optional. The storage service to use for storing FSLogix containers. The service & SKU should provide sufficient IOPS for all of your users. https://docs.microsoft.com/en-us/azure/architecture/example-scenario/wvd/windows-virtual-desktop-fslogix#performance-requirements"
      }
    },
    "netAppVolumesSubnetResourceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. The resource Id of the subnet delegated to Microsoft.Netapp/volumes to which the NetApp volume will be attached when the \"fslogixStorageService\" is \"AzureNetAppFiles Premium\" or \"AzureNetAppFiles Standard\"."
      }
    },
    "existingSharedActiveDirectoryConnection": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Indicates whether or not there is an existing Active Directory Connection with Azure NetApp Volume."
      }
    },
    "fslogixConfigureSessionHosts": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Configure FSLogix agent on the session hosts via local registry keys."
      }
    },
    "fslogixExistingLocalNetAppVolumeResourceIds": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Optional. Existing local (in the same region as the session host VMs) NetApp Files Volume Resource Ids.\nIf Office Containers are used, then list the FSLogix Profile Container Volume first and the Office Container Volume second.\n"
      }
    },
    "fslogixExistingLocalStorageAccountResourceIds": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Optional. Existing local (in the same region as the session host VMs) FSLogix Storage Account Resource Ids.\nOnly used when fslogixConfigureSessionHosts = true and deployFSLogixStorage = false.\nIf \"identitySolution\" is set to \"EntraId\" or \"EntraIdIntuneEnrollment\" then only the first storage account listed will be used.\n"
      }
    },
    "fslogixExistingRemoteNetAppVolumeResourceIds": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Optional. Existing remote (not in the same region as the session host VMs) NetApp Files Volume Resource Ids.\nIf Office Containers are used, then list the FSLogix Profile Container Volume first and the Office Container Volume second.\n"
      }
    },
    "fslogixExistingRemoteStorageAccountResourceIds": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Optional. Existing remote (not in the same region as the session host VMs) FSLogix Storage Account Resource Ids.\nOnly used when fslogixConfigureSessionHosts = true.\nThis list will be added to any storage accounts created when setting \"fslogixStorageService\" to any of the AzureFiles options. \nIf \"identitySolution\" is set to \"EntraId\" or \"EntraIdIntuneEnrollment\" then only the first storage account listed will be used.\n"
      }
    },
    "fslogixStorageAccountADKerberosEncryption": {
      "type": "string",
      "defaultValue": "AES256",
      "allowedValues": [
        "AES256",
        "RC4"
      ],
      "metadata": {
        "description": "Optional. The Active Directory computer object Kerberos encryption type for the Azure Storage Account or Azure NetApp files Account."
      }
    },
    "fslogixStorageIndex": {
      "type": "int",
      "defaultValue": 1,
      "minValue": 0,
      "maxValue": 99,
      "metadata": {
        "description": "Optional. The starting number for the storage accounts to support the required use case for the AVD stamp. https://docs.microsoft.com/en-us/azure/architecture/patterns/sharding"
      }
    },
    "keyManagementStorageAccounts": {
      "type": "string",
      "defaultValue": "MicrosoftManaged",
      "allowedValues": [
        "MicrosoftManaged",
        "CustomerManaged",
        "CustomerManagedHSM"
      ],
      "metadata": {
        "description": "Optional. The type of key management used for the Azure Files storage account encryption."
      }
    },
    "keyVaultRetentionInDays": {
      "type": "int",
      "defaultValue": 90,
      "minValue": 7,
      "maxValue": 90,
      "metadata": {
        "description": "Optional. The retention period for the Azure Key Vault."
      }
    },
    "fslogixOUPath": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. The OU Path where the FSLogix Storage Accounts or NetApp Accounts will be joined in the ADDS."
      }
    },
    "deployIncreaseQuota": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Determines whether or not to deploy a function app to automatically increase the quota on Azure Files Premium."
      }
    },
    "recoveryServices": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Enable backups to an Azure Recovery Services vault.  For a pooled host pool this will enable backups on the Azure file share.  For a personal host pool this will enable backups on the AVD sessions hosts."
      }
    },
    "deploySecretsKeyVault": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Deploys the secrets Key Vault."
      }
    },
    "secretsKeyVaultEnableSoftDelete": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional. Enables soft delete on the secrets key vault."
      }
    },
    "secretsKeyVaultEnablePurgeProtection": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional. Enables soft delete on the secrets key vault."
      }
    },
    "enableMonitoring": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional. Deploys the required monitoring resources to enable AVD and VM Insights and monitor features in the automation account."
      }
    },
    "logAnalyticsWorkspaceRetention": {
      "type": "int",
      "defaultValue": 30,
      "minValue": 30,
      "maxValue": 730,
      "metadata": {
        "description": "Optional. The retention for the Log Analytics Workspace to setup the AVD monitoring solution"
      }
    },
    "logAnalyticsWorkspaceSku": {
      "type": "string",
      "defaultValue": "PerGB2018",
      "allowedValues": [
        "Free",
        "Standard",
        "Premium",
        "PerNode",
        "PerGB2018",
        "Standalone",
        "CapacityReservation"
      ],
      "metadata": {
        "description": "Optional. The SKU for the Log Analytics Workspace to setup the AVD monitoring solution"
      }
    },
    "securityDataCollectionRulesResourceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. The resource ID of the data collection rule used for Azure Sentinel and / or Defender for Cloud when using the Azure Monitor Agent."
      }
    },
    "deploymentVmSize": {
      "type": "string",
      "defaultValue": "Standard_B2s",
      "metadata": {
        "description": "Optional. The vm size of the management VM."
      }
    },
    "deployPrivateEndpoints": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Create private endpoints for all deployed management and storage resources where applicable."
      }
    },
    "keyVaultPrivateEndpointSubnetResourceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Conditional. The Resource Id of the subnet on which to create the secrets Key Vault private endpoint. Required when \"deployPrivateEndpoints\" = true and \"deploySecretsKeyVault\" = true."
      }
    },
    "hostPoolResourcesPrivateEndpointSubnetResourceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Conditional. The Resource Id of the subnet on which to create the storage account and other resources private link. Required when \"deployPrivateEndpoints\" = true."
      }
    },
    "functionAppSubnetResourceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. The resource id of the subnet delegated to \"Microsoft.Web/serverFarms\" to which the function app will be linked."
      }
    },
    "azureBackupPrivateDnsZoneResourceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Conditional. If using private endpoints with Azure files, input the Resource ID for the Private DNS Zone linked to your hub virtual network. Required when \"deployPrivateEndpoints\" is true."
      }
    },
    "azureBlobPrivateDnsZoneResourceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Conditional. If using private endpoints with Azure files, input the Resource ID for the Private DNS Zone linked to your hub virtual network. Required when \"deployPrivateEndpoints\" is true."
      }
    },
    "azureFilesPrivateDnsZoneResourceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Conditional. If using private endpoints with Azure files, input the Resource ID for the Private DNS Zone linked to your hub virtual network. Required when \"deployPrivateEndpoints\" is true."
      }
    },
    "azureFunctionAppPrivateDnsZoneResourceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Conditional. If using private endpoints with Azure function apps, input the Resource ID for the Private DNS Zone linked to your hub virtual network. Required when \"deployPrivateEndpoints\" is true."
      }
    },
    "azureKeyVaultPrivateDnsZoneResourceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Conditional. If using private endpoints with Key Vaults, input the Resource ID for the Private DNS Zone linked to your hub virtual network. Required when \"deployPrivateEndpoints\" is true."
      }
    },
    "azureQueuePrivateDnsZoneResourceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Conditional. If using private endpoints with Azure files, input the Resource ID for the Private DNS Zone linked to your hub virtual network. Required when \"deployPrivateEndpoints\" is true."
      }
    },
    "azureTablePrivateDnsZoneResourceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Conditional. If using private endpoints with Azure function Apps, input the Resource ID for the Private DNS Zone linked to your hub virtual network. Required when \"deployPrivateEndpoints\" is true."
      }
    },
    "deployDiskAccessPolicy": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Deploy the Zero Trust Compliant Disk Access Policy to deny Public Access to the Virtual Machine Managed Disks."
      }
    },
    "azureMonitorPrivateLinkScopeResourceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. The resource Id of the Azure Monitor Private Link Scope to which monitoring resources should be linked. There should only be one Azure Monitor Private Link Scope per network that shares the same DNS."
      }
    },
    "avdPrivateLinkPrivateRoutes": {
      "type": "string",
      "defaultValue": "None",
      "allowedValues": [
        "None",
        "HostPool",
        "FeedAndHostPool",
        "All"
      ],
      "metadata": {
        "description": "Optional. Determines if Azure Private Link with Azure Virtual Desktop is enabled. Selecting \"None\" disables AVD Private Link deployment. Selecting one of the other options enables deployment of the required endpoints."
      }
    },
    "hostpoolPrivateEndpointSubnetResourceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Conditional. The resource ID of the subnet where the hostpool private endpoint will be attached. Required when \"avdPrivateLinkPrivateRoutes\" is not equal to \"None\"."
      }
    },
    "avdPrivateDnsZoneResourceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Conditional. The resource Id of the AVD Private Link Private DNS Zone used for feed download and connections to host pools. Required when \"avdPrivateLinkPrivateRoutes\" is not equal to \"None\"."
      }
    },
    "hostPoolPublicNetworkAccess": {
      "type": "string",
      "defaultValue": "Enabled",
      "allowedValues": [
        "Disabled",
        "Enabled",
        "EnabledForClientsOnly"
      ],
      "metadata": {
        "description": "Optional. Allow public access to the hostpool through the control plane. Applicable only when \"avdPrivateLinkPrivateRoutes\" is not equal to \"None\". \n\"Enabled\" allows this resource to be accessed from both public and private networks.\n\"Disabled\" allows this resource to only be accessed via private endpoints.\n\"EnabledForClientsOnly\" allows this resource to be accessed only when the session hosts are configured to use private routes.\n"
      }
    },
    "workspaceFeedPrivateEndpointSubnetResourceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Conditional. The resource Id of the subnet where the workspace feed private endpoint will be attached. Required when \"avdPrivateLinkPrivateRoutes\" is set to \"FeedAndHostPool\" or \"All\"."
      }
    },
    "workspaceFeedPublicNetworkAccess": {
      "type": "string",
      "defaultValue": "Enabled",
      "allowedValues": [
        "Disabled",
        "Enabled"
      ],
      "metadata": {
        "description": "Optional. Defines the public access configuration for the workspace feed. Applicable when \"avdPrivateLinkPrivateRoutes\" is \"FeedAndHostPool\" or \"All\".\n\"Enabled\" allows the AVD workspace to be accessed from both public and private networks.\n\"Disabled\" allows this resource to only be accessed via private endpoints.\n"
      }
    },
    "existingGlobalFeedResourceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. The resource Id of the existing global feed workspace. If provided, then the global feed will not be deployed regardless of other AVD Private Link settings."
      }
    },
    "globalFeedPrivateDnsZoneResourceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Conditional. The resource Id of the AVD Private Link global feed Private DNS Zone. Required when the \"avdPrivateLinkPrivateRoutes\" is set to \"All\" and the \"existingGlobalFeedResourceId\" is not provided."
      }
    },
    "globalFeedPrivateEndpointSubnetResourceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Conditional. The resource Id of the subnet to which the global feed workspace private endpoint will be attached. Required when the \"avdPrivateLinkPrivateRoutes\" is set to \"All\" and the \"existingGlobalFeedResourceId\" is not provided."
      }
    },
    "tags": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "Optional. Key / value pairs of metadata for the Azure resource groups and resources."
      }
    },
    "timeStamp": {
      "type": "string",
      "defaultValue": "[utcNow('yyyyMMddhhmmss')]",
      "metadata": {
        "description": "DO NOT MODIFY THIS VALUE! The timeStamp is needed to differentiate deployments for certain Azure resources and must be set using a parameter."
      }
    }
  },
  "variables": {
    "maxResourcesPerTemplateDeployment": 40,
    "divisionValue": "[div(parameters('sessionHostCount'), variables('maxResourcesPerTemplateDeployment'))]",
    "divisionRemainderValue": "[mod(parameters('sessionHostCount'), variables('maxResourcesPerTemplateDeployment'))]",
    "sessionHostBatchCount": "[if(greater(variables('divisionRemainderValue'), 0), add(variables('divisionValue'), 1), variables('divisionValue'))]",
    "maxAvSetMembers": 200,
    "beginAvSetRange": "[div(parameters('sessionHostIndex'), variables('maxAvSetMembers'))]",
    "endAvSetRange": "[div(add(parameters('sessionHostCount'), parameters('sessionHostIndex')), variables('maxAvSetMembers'))]",
    "availabilitySetsCount": "[length(range(variables('beginAvSetRange'), add(sub(variables('endAvSetRange'), variables('beginAvSetRange')), 1)))]",
    "createDeploymentVm": "[or(or(and(equals(parameters('deploymentType'), 'Complete'), or(parameters('confidentialVMOSDiskEncryption'), not(empty(parameters('desktopFriendlyName'))))), contains(parameters('identitySolution'), 'DomainServices')), contains(parameters('fslogixStorageService'), 'AzureNetApp'))]",
    "deployControlPlaneRG": "[and(equals(parameters('deploymentType'), 'Complete'), empty(parameters('existingFeedWorkspaceResourceId')))]",
    "resourceGroupsCount": "[add(add(add(add(if(variables('createDeploymentVm'), 1, 0), if(equals(parameters('deploymentType'), 'Complete'), 2, 0)), if(variables('deployControlPlaneRG'), 1, 0)), if(and(equals(parameters('avdPrivateLinkPrivateRoutes'), 'All'), not(empty(parameters('globalFeedPrivateEndpointSubnetResourceId')))), 1, 0)), if(parameters('deployFSLogixStorage'), 1, 0))]",
    "fslogixNTFSGroups": "[if(empty(parameters('fslogixUserGroups')), parameters('appGroupSecurityGroups'), parameters('fslogixUserGroups'))]",
    "fslogixStorageCount": "[if(or(or(equals(parameters('identitySolution'), 'EntraId'), equals(parameters('identitySolution'), 'EntraIdIntuneEnrollment')), equals(parameters('fslogixShardOptions'), 'None')), 1, length(variables('fslogixNTFSGroups')))]",
    "scalingPlanSchedules": "[if(parameters('deployScalingPlan'), createArray(createObject('rampUpStartTime', createObject('hour', if(equals(first(split(parameters('scalingPlanRampUpSchedule').startTime, ':')[0]), '0'), int(last(split(parameters('scalingPlanRampUpSchedule').startTime, ':')[0])), int(split(parameters('scalingPlanRampUpSchedule').startTime, ':')[0])), 'minute', if(equals(first(split(parameters('scalingPlanRampUpSchedule').startTime, ':')[1]), '0'), int(last(split(parameters('scalingPlanRampUpSchedule').startTime, ':')[1])), int(split(parameters('scalingPlanRampUpSchedule').startTime, ':')[1]))), 'peakStartTime', createObject('hour', if(equals(first(split(parameters('scalingPlanPeakSchedule').startTime, ':')[0]), '0'), int(last(split(parameters('scalingPlanPeakSchedule').startTime, ':')[0])), int(split(parameters('scalingPlanPeakSchedule').startTime, ':')[0])), 'minute', if(equals(first(split(parameters('scalingPlanPeakSchedule').startTime, ':')[1]), '0'), int(last(split(parameters('scalingPlanPeakSchedule').startTime, ':')[1])), int(split(parameters('scalingPlanPeakSchedule').startTime, ':')[1]))), 'rampDownStartTime', createObject('hour', if(equals(first(split(parameters('scalingPlanRampDownSchedule').startTime, ':')[0]), '0'), int(last(split(parameters('scalingPlanRampDownSchedule').startTime, ':')[0])), int(split(parameters('scalingPlanRampDownSchedule').startTime, ':')[0])), 'minute', if(equals(first(split(parameters('scalingPlanRampDownSchedule').startTime, ':')[1]), '0'), int(last(split(parameters('scalingPlanRampDownSchedule').startTime, ':')[1])), int(split(parameters('scalingPlanRampDownSchedule').startTime, ':')[1]))), 'offPeakStartTime', createObject('hour', if(equals(first(split(parameters('scalingPlanOffPeakSchedule').startTime, ':')[0]), '0'), int(last(split(parameters('scalingPlanOffPeakSchedule').startTime, ':')[0])), int(split(parameters('scalingPlanOffPeakSchedule').startTime, ':')[0])), 'minute', if(equals(first(split(parameters('scalingPlanOffPeakSchedule').startTime, ':')[1]), '0'), int(last(split(parameters('scalingPlanOffPeakSchedule').startTime, ':')[1])), int(split(parameters('scalingPlanOffPeakSchedule').startTime, ':')[1]))), 'name', 'weekdays_schedule', 'daysOfWeek', createArray('Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'), 'rampUpLoadBalancingAlgorithm', parameters('scalingPlanRampUpSchedule').loadBalancingAlgorithm, 'rampUpMinimumHostsPct', parameters('scalingPlanRampUpSchedule').minimumHostsPct, 'rampUpCapacityThresholdPct', parameters('scalingPlanRampUpSchedule').capacityThresholdPct, 'peakLoadBalancingAlgorithm', parameters('scalingPlanPeakSchedule').loadBalancingAlgorithm, 'rampDownLoadBalancingAlgorithm', parameters('scalingPlanRampDownSchedule').loadBalancingAlgorithm, 'rampDownMinimumHostsPct', parameters('scalingPlanRampDownSchedule').minimumHostsPct, 'rampDownCapacityThresholdPct', parameters('scalingPlanRampDownSchedule').capacityThresholdPct, 'rampDownForceLogoffUsers', parameters('scalingPlanForceLogoff'), 'rampDownWaitTimeMinutes', parameters('scalingPlanMinsBeforeLogoff'), 'rampDownNotificationMessage', if(parameters('scalingPlanForceLogoff'), format('You will be logged off in {0} minutes. Make sure to save your work.', parameters('scalingPlanMinsBeforeLogoff')), null()), 'rampDownStopHostsWhen', 'ZeroSessions', 'offPeakLoadBalancingAlgorithm', parameters('scalingPlanOffPeakSchedule').loadBalancingAlgorithm)), createArray())]",
    "sessionHostRegistrationDSCStorageAccount": "[if(startsWith(environment().name, 'USN'), 'wvdexportalcontainer', 'wvdportalstorageblob')]",
    "sessionHostRegistrationDSCUrl": "[if(startsWith(parameters('avdAgentsDSCPackage'), 'https://'), parameters('avdAgentsDSCPackage'), format('https://{0}.blob.{1}/galleryartifacts/{2}', variables('sessionHostRegistrationDSCStorageAccount'), environment().suffixes.storage, parameters('avdAgentsDSCPackage')))]",
    "deployDiskAccessResource": "[if(and(and(contains(parameters('hostPoolType'), 'Personal'), parameters('recoveryServices')), parameters('deployPrivateEndpoints')), true(), false())]",
    "exclusionTag": "[if(and(not(empty(parameters('scalingPlanExclusionTag'))), parameters('deployScalingPlan')), createObject('Microsoft.Compute/virtualMachines', createObject(format('{0}', parameters('scalingPlanExclusionTag')), '')), createObject())]",
    "hostTags": "[if(not(empty(variables('exclusionTag'))), union(parameters('tags'), variables('exclusionTag')), parameters('tags'))]",
    "dedicatedHostGroupName": "[if(not(empty(parameters('dedicatedHostResourceId'))), split(parameters('dedicatedHostResourceId'), '/')[8], if(not(empty(parameters('dedicatedHostGroupResourceId'))), last(split(parameters('dedicatedHostGroupResourceId'), '/')), ''))]",
    "dedicatedHostRG": "[if(not(empty(parameters('dedicatedHostResourceId'))), split(parameters('dedicatedHostResourceId'), '/')[4], if(not(empty(parameters('dedicatedHostGroupResourceId'))), split(parameters('dedicatedHostGroupResourceId'), '/')[4], ''))]"
  },
  "resources": [
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('ResourceNames_{0}', parameters('timeStamp'))]",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "existingFeedWorkspaceResourceId": {
            "value": "[parameters('existingFeedWorkspaceResourceId')]"
          },
          "existingHostPoolResourceId": {
            "value": "[parameters('existingHostPoolResourceId')]"
          },
          "fslogixStorageCustomPrefix": {
            "value": "[parameters('fslogixStorageCustomPrefix')]"
          },
          "identifier": {
            "value": "[parameters('identifier')]"
          },
          "index": {
            "value": "[parameters('index')]"
          },
          "locationControlPlane": {
            "value": "[parameters('locationControlPlane')]"
          },
          "locationGlobalFeed": "[if(not(empty(parameters('globalFeedPrivateEndpointSubnetResourceId'))), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('globalFeedPrivateEndpointSubnetResourceId'), '/')[2], split(parameters('globalFeedPrivateEndpointSubnetResourceId'), '/')[4]), 'Microsoft.Network/virtualNetworks', split(parameters('globalFeedPrivateEndpointSubnetResourceId'), '/')[8]), '2023-04-01', 'full').location), createObject('value', ''))]",
          "locationVirtualMachines": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('virtualMachineSubnetResourceId'), '/')[2], split(parameters('virtualMachineSubnetResourceId'), '/')[4]), 'Microsoft.Network/virtualNetworks', split(parameters('virtualMachineSubnetResourceId'), '/')[8]), '2023-04-01', 'full').location]"
          },
          "nameConvResTypeAtEnd": "[if(equals(parameters('deploymentType'), 'Complete'), createObject('value', parameters('nameConvResTypeAtEnd')), createObject('value', coalesce(bool(tryGet(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('existingHostPoolResourceId'), '/')[2], split(parameters('existingHostPoolResourceId'), '/')[4]), 'Microsoft.DesktopVirtualization/hostPools', last(split(parameters('existingHostPoolResourceId'), '/'))), '2024-04-03', 'full').tags, 'nameConvResTypeAtEnd')), false())))]",
          "virtualMachineNamePrefix": {
            "value": "[parameters('virtualMachineNamePrefix')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.1.42791",
              "templateHash": "8555433272929561916"
            }
          },
          "parameters": {
            "existingHostPoolResourceId": {
              "type": "string"
            },
            "existingFeedWorkspaceResourceId": {
              "type": "string"
            },
            "fslogixStorageCustomPrefix": {
              "type": "string"
            },
            "identifier": {
              "type": "string"
            },
            "index": {
              "type": "string"
            },
            "locationControlPlane": {
              "type": "string"
            },
            "locationGlobalFeed": {
              "type": "string"
            },
            "locationVirtualMachines": {
              "type": "string"
            },
            "nameConvResTypeAtEnd": {
              "type": "bool"
            },
            "virtualMachineNamePrefix": {
              "type": "string"
            }
          },
          "variables": {
            "$fxv#0": {
              "AzureCloud": {
                "australiacentral": {
                  "abbreviation": "auc",
                  "recoveryServicesGeo": "acl"
                },
                "australiacentral2": {
                  "abbreviation": "auc2",
                  "recoveryServicesGeo": "acl2"
                },
                "australiaeast": {
                  "abbreviation": "aue",
                  "recoveryServicesGeo": "ae"
                },
                "australiasoutheast": {
                  "abbreviation": "ause",
                  "recoveryServicesGeo": "ase"
                },
                "brazilsouth": {
                  "abbreviation": "brs",
                  "recoveryServicesGeo": "brs"
                },
                "brazilsoutheast": {
                  "abbreviation": "brse",
                  "recoveryServicesGeo": "bse"
                },
                "canadacentral": {
                  "abbreviation": "cac",
                  "recoveryServicesGeo": "cnc"
                },
                "canadaeast": {
                  "abbreviation": "cae",
                  "recoveryServicesGeo": "cne"
                },
                "centralindia": {
                  "abbreviation": "inc",
                  "recoveryServicesGeo": "inc"
                },
                "centralus": {
                  "abbreviation": "usc",
                  "recoveryServicesGeo": "cus"
                },
                "eastasia": {
                  "abbreviation": "ase",
                  "recoveryServicesGeo": "ea"
                },
                "eastus": {
                  "abbreviation": "use",
                  "recoveryServicesGeo": "eus"
                },
                "eastus2": {
                  "abbreviation": "use2",
                  "recoveryServicesGeo": "eus2"
                },
                "francecentral": {
                  "abbreviation": "frc",
                  "recoveryServicesGeo": "frc"
                },
                "francesouth": {
                  "abbreviation": "frs",
                  "recoveryServicesGeo": "frs"
                },
                "germanynorth": {
                  "abbreviation": "den",
                  "recoveryServicesGeo": "gn"
                },
                "germanywestcentral": {
                  "abbreviation": "dewc",
                  "recoveryServicesGeo": "gwc"
                },
                "israelcentral": {
                  "abbreviation": "ilc",
                  "recoveryServicesGeo": "ilc"
                },
                "italynorth": {
                  "abbreviation": "itn",
                  "recoveryServicesGeo": "itn"
                },
                "japaneast": {
                  "abbreviation": "jpe",
                  "recoveryServicesGeo": "jpe"
                },
                "japanwest": {
                  "abbreviation": "jpw",
                  "recoveryServicesGeo": "jpw"
                },
                "jioindiacentral": {
                  "abbreviation": "injc",
                  "recoveryServicesGeo": "jic"
                },
                "jioindiawest": {
                  "abbreviation": "injw",
                  "recoveryServicesGeo": "jiw"
                },
                "koreacentral": {
                  "abbreviation": "krc",
                  "recoveryServicesGeo": "krc"
                },
                "koreasouth": {
                  "abbreviation": "krs",
                  "recoveryServicesGeo": "krs"
                },
                "northcentralus": {
                  "abbreviation": "usnc",
                  "recoveryServicesGeo": "ncus"
                },
                "northeurope": {
                  "abbreviation": "eun",
                  "recoveryServicesGeo": "ne"
                },
                "norwayeast": {
                  "abbreviation": "noe",
                  "recoveryServicesGeo": "nwe"
                },
                "norwaywest": {
                  "abbreviation": "now",
                  "recoveryServicesGeo": "nww"
                },
                "polandcentral": {
                  "abbreviation": "plc",
                  "recoveryServicesGeo": "plc"
                },
                "qatarcentral": {
                  "abbreviation": "qac",
                  "recoveryServicesGeo": "qac"
                },
                "southafricanorth": {
                  "abbreviation": "zan",
                  "recoveryServicesGeo": "san"
                },
                "southafricawest": {
                  "abbreviation": "zaw",
                  "recoveryServicesGeo": "saw"
                },
                "southcentralus": {
                  "abbreviation": "ussc",
                  "recoveryServicesGeo": "scus"
                },
                "southeastasia": {
                  "abbreviation": "asse",
                  "recoveryServicesGeo": "sea"
                },
                "southindia": {
                  "abbreviation": "ins",
                  "recoveryServicesGeo": "ins"
                },
                "swedencentral": {
                  "abbreviation": "sec",
                  "recoveryServicesGeo": "sdc"
                },
                "switzerlandnorth": {
                  "abbreviation": "chn",
                  "recoveryServicesGeo": "szn"
                },
                "switzerlandwest": {
                  "abbreviation": "chw",
                  "recoveryServicesGeo": "szw"
                },
                "uaecentral": {
                  "abbreviation": "aec",
                  "recoveryServicesGeo": "uac"
                },
                "uaenorth": {
                  "abbreviation": "aen",
                  "recoveryServicesGeo": "uan"
                },
                "uksouth": {
                  "abbreviation": "uks",
                  "recoveryServicesGeo": "uks"
                },
                "ukwest": {
                  "abbreviation": "ukw",
                  "recoveryServicesGeo": "ukw"
                },
                "westcentralus": {
                  "abbreviation": "uswc",
                  "recoveryServicesGeo": "wcus"
                },
                "westeurope": {
                  "abbreviation": "euw",
                  "recoveryServicesGeo": "we"
                },
                "westindia": {
                  "abbreviation": "inw",
                  "recoveryServicesGeo": "inw"
                },
                "westus": {
                  "abbreviation": "usw",
                  "recoveryServicesGeo": "wus"
                },
                "westus2": {
                  "abbreviation": "usw2",
                  "recoveryServicesGeo": "wus2"
                },
                "westus3": {
                  "abbreviation": "usw3",
                  "recoveryServicesGeo": "wus3"
                }
              },
              "AzureUSGovernment": {
                "usdodcentral": {
                  "abbreviation": "dodc",
                  "recoveryServicesGeo": "udc"
                },
                "usdodeast": {
                  "abbreviation": "dode",
                  "recoveryServicesGeo": "ude"
                },
                "usgovarizona": {
                  "abbreviation": "az",
                  "recoveryServicesGeo": "uga"
                },
                "usgovtexas": {
                  "abbreviation": "tx",
                  "recoveryServicesGeo": "ugt"
                },
                "usgovvirginia": {
                  "abbreviation": "va",
                  "recoveryServicesGeo": "ugv"
                }
              }
            },
            "$fxv#1": {
              "applicationInsights": "appi",
              "appServicePlans": "asp",
              "availabilitySets": "as",
              "computeGalleries": "gal",
              "dataCollectionEndpoints": "dce",
              "dataCollectionRules": "dcr",
              "desktopApplicationGroups": "vddag",
              "diskAccesses": "da",
              "remoteApplicationGroups": "vdrag",
              "diskEncryptionSets": "des",
              "functionApps": "fa",
              "hostPools": "vdpool",
              "keyVaults": "kv",
              "logAnalyticsWorkspaces": "law",
              "natGateways": "ng",
              "netAppAccounts": "naa",
              "netAppCapacityPools": "nacp",
              "networkInterfaces": "nic",
              "osdisks": "osdisk",
              "privateEndpoints": "pe",
              "privateLinkScopes": "pls",
              "publicIPAddresses": "pip",
              "recoveryServicesVaults": "rsv",
              "resourceGroups": "rg",
              "routeTables": "rt",
              "scalingPlans": "vdscaling",
              "storageAccounts": "sa",
              "userAssignedIdentities": "uai",
              "virtualMachines": "vm",
              "workspaces": "vdws",
              "imageDefinitions": "vmid"
            },
            "locations": "[if(startsWith(environment().name, 'US'), null(), variables('$fxv#0')[environment().name])]",
            "locationVirtualMachinesAbbreviation": "[if(startsWith(environment().name, 'US'), substring(parameters('locationVirtualMachines'), 5, sub(length(parameters('locationVirtualMachines')), 5)), variables('locations')[parameters('locationVirtualMachines')].abbreviation)]",
            "locationControlPlaneAbbreviation": "[if(startsWith(environment().name, 'US'), substring(parameters('locationControlPlane'), 5, sub(length(parameters('locationVirtualMachines')), 5)), variables('locations')[parameters('locationControlPlane')].abbreviation)]",
            "resourceAbbreviations": "[variables('$fxv#1')]",
            "existingHostPoolName": "[if(empty(parameters('existingHostPoolResourceId')), '', split(parameters('existingHostPoolResourceId'), '/')[8])]",
            "nameConvReversed": "[if(not(empty(variables('existingHostPoolName'))), not(startsWith(variables('existingHostPoolName'), variables('resourceAbbreviations').hostPools)), parameters('nameConvResTypeAtEnd'))]",
            "arrHostPoolName": "[split(variables('existingHostPoolName'), '-')]",
            "lengthArrHostPoolName": "[length(variables('arrHostPoolName'))]",
            "hpIdentifier": "[if(not(empty(variables('existingHostPoolName'))), if(variables('nameConvReversed'), if(less(variables('lengthArrHostPoolName'), 5), variables('arrHostPoolName')[0], format('{0}-{1}', variables('arrHostPoolName')[0], variables('arrHostPoolName')[1])), if(less(variables('lengthArrHostPoolName'), 5), variables('arrHostPoolName')[1], format('{0}-{1}', variables('arrHostPoolName')[1], variables('arrHostPoolName')[2]))), parameters('identifier'))]",
            "hpIndex": "[if(not(empty(variables('existingHostPoolName'))), if(equals(variables('lengthArrHostPoolName'), 3), '', if(variables('nameConvReversed'), if(less(variables('lengthArrHostPoolName'), 5), variables('arrHostPoolName')[1], variables('arrHostPoolName')[2]), if(less(variables('lengthArrHostPoolName'), 5), variables('arrHostPoolName')[2], variables('arrHostPoolName')[3]))), parameters('index'))]",
            "hpBaseName": "[if(empty(variables('hpIndex')), variables('hpIdentifier'), format('{0}-{1}', variables('hpIdentifier'), variables('hpIndex')))]",
            "hpResPrfx": "[if(variables('nameConvReversed'), variables('hpBaseName'), format('RESOURCETYPE-{0}', variables('hpBaseName')))]",
            "nameConvSuffix": "[if(variables('nameConvReversed'), 'LOCATION-RESOURCETYPE', 'LOCATION')]",
            "nameConv_Shared_ResGroup": "[if(variables('nameConvReversed'), format('avd-TOKEN-{0}', variables('nameConvSuffix')), format('RESOURCETYPE-avd-TOKEN-{0}', variables('nameConvSuffix')))]",
            "nameConv_Shared_Resources": "[if(variables('nameConvReversed'), format('avd-TOKEN-{0}', variables('nameConvSuffix')), format('RESOURCETYPE-avd-TOKEN-{0}', variables('nameConvSuffix')))]",
            "nameConv_HP_ResGroups": "[if(variables('nameConvReversed'), format('avd-{0}-TOKEN-{1}', variables('hpBaseName'), variables('nameConvSuffix')), format('RESOURCETYPE-avd-{0}-TOKEN-{1}', variables('hpBaseName'), variables('nameConvSuffix')))]",
            "nameConv_HP_Resources": "[format('{0}-TOKEN-{1}', variables('hpResPrfx'), variables('nameConvSuffix'))]",
            "resourceGroupDeployment": "[replace(replace(replace(variables('nameConv_HP_ResGroups'), 'TOKEN', 'deployment'), 'LOCATION', format('{0}', variables('locationVirtualMachinesAbbreviation'))), 'RESOURCETYPE', format('{0}', variables('resourceAbbreviations').resourceGroups))]",
            "depVirtualMachineNameTemp": "[replace(replace(replace(replace(variables('nameConv_HP_Resources'), 'RESOURCETYPE', ''), 'LOCATION', variables('locationVirtualMachinesAbbreviation')), 'TOKEN-', ''), '-', '')]",
            "depVirtualMachineName": "[take(format('{0}{1}', variables('depVirtualMachineNameTemp'), uniqueString(variables('depVirtualMachineNameTemp'))), 15)]",
            "depVirtualMachineDiskName": "[format('{0}-{1}', variables('depVirtualMachineName'), variables('resourceAbbreviations').osdisks)]",
            "depVirtualMachineNicName": "[format('{0}-{1}', variables('depVirtualMachineName'), variables('resourceAbbreviations').networkInterfaces)]",
            "resourceGroupManagement": "[replace(replace(replace(variables('nameConv_Shared_ResGroup'), 'TOKEN', 'management'), 'LOCATION', variables('locationVirtualMachinesAbbreviation')), 'RESOURCETYPE', variables('resourceAbbreviations').resourceGroups)]",
            "uniqueStringManagement": "[uniqueString(subscription().subscriptionId, variables('resourceGroupManagement'))]",
            "appServicePlanName": "[replace(replace(replace(variables('nameConv_Shared_Resources'), 'RESOURCETYPE', variables('resourceAbbreviations').appServicePlans), 'LOCATION', variables('locationVirtualMachinesAbbreviation')), 'TOKEN-', '')]",
            "keyVaultNameSecrets": "[replace(replace(replace(variables('nameConv_Shared_Resources'), 'TOKEN', format('sec-{0}', take(variables('uniqueStringManagement'), 8))), 'LOCATION', variables('locationVirtualMachinesAbbreviation')), 'RESOURCETYPE', variables('resourceAbbreviations').keyVaults)]",
            "keyVaultNameEncryption": "[replace(replace(replace(variables('nameConv_Shared_Resources'), 'TOKEN', format('enc-{0}', take(variables('uniqueStringManagement'), 8))), 'LOCATION', variables('locationVirtualMachinesAbbreviation')), 'RESOURCETYPE', variables('resourceAbbreviations').keyVaults)]",
            "dataCollectionEndpointName": "[replace(replace(replace(variables('nameConv_Shared_Resources'), 'RESOURCETYPE', variables('resourceAbbreviations').dataCollectionEndpoints), 'LOCATION', variables('locationVirtualMachinesAbbreviation')), 'TOKEN-', '')]",
            "logAnalyticsWorkspaceName": "[replace(replace(replace(variables('nameConv_Shared_Resources'), 'RESOURCETYPE', variables('resourceAbbreviations').logAnalyticsWorkspaces), 'LOCATION', variables('locationVirtualMachinesAbbreviation')), 'TOKEN-', '')]",
            "globalFeedResourceGroupName": "[if(not(empty(parameters('locationGlobalFeed'))), replace(replace(if(variables('nameConvReversed'), format('avd-global-feed-{0}', variables('nameConvSuffix')), format('RESOURCETYPE-avd-global-feed-{0}', variables('nameConvSuffix'))), 'LOCATION', variables('locationControlPlaneAbbreviation')), 'RESOURCETYPE', format('{0}', variables('resourceAbbreviations').resourceGroups)), '')]",
            "globalFeedWorkspaceName": "[replace(if(variables('nameConvReversed'), 'avd-global-feed-RESOURCETYPE', 'RESOURCETYPE-avd-global-feed'), 'RESOURCETYPE', variables('resourceAbbreviations').workspaces)]",
            "resourceGroupControlPlane": "[if(empty(parameters('existingHostPoolResourceId')), if(empty(parameters('existingFeedWorkspaceResourceId')), replace(replace(replace(variables('nameConv_Shared_ResGroup'), 'TOKEN', 'control-plane'), 'LOCATION', format('{0}', variables('locationControlPlaneAbbreviation'))), 'RESOURCETYPE', format('{0}', variables('resourceAbbreviations').resourceGroups)), split(parameters('existingFeedWorkspaceResourceId'), '/')[4]), split(parameters('existingHostPoolResourceId'), '/')[4])]",
            "workspaceName": "[if(empty(parameters('existingFeedWorkspaceResourceId')), replace(replace(replace(variables('nameConv_Shared_Resources'), 'RESOURCETYPE', variables('resourceAbbreviations').workspaces), 'LOCATION', variables('locationControlPlaneAbbreviation')), 'TOKEN-', ''), last(split(parameters('existingFeedWorkspaceResourceId'), '/')))]",
            "desktopApplicationGroupName": "[replace(replace(replace(variables('nameConv_HP_Resources'), 'TOKEN-', ''), 'RESOURCETYPE', variables('resourceAbbreviations').desktopApplicationGroups), 'LOCATION', variables('locationControlPlaneAbbreviation'))]",
            "hostPoolName": "[replace(replace(replace(variables('nameConv_HP_Resources'), 'TOKEN-', ''), 'RESOURCETYPE', variables('resourceAbbreviations').hostPools), 'LOCATION', variables('locationControlPlaneAbbreviation'))]",
            "scalingPlanName": "[replace(replace(replace(variables('nameConv_HP_Resources'), 'TOKEN-', ''), 'RESOURCETYPE', variables('resourceAbbreviations').scalingPlans), 'LOCATION', variables('locationControlPlaneAbbreviation'))]",
            "uniqueStringHosts": "[uniqueString(subscription().subscriptionId, variables('resourceGroupHosts'))]",
            "appInsightsNameConv": "[replace(replace(variables('nameConv_HP_Resources'), 'RESOURCETYPE', variables('resourceAbbreviations').applicationInsights), 'LOCATION', variables('locationVirtualMachinesAbbreviation'))]",
            "functionAppNameConv": "[replace(replace(variables('nameConv_HP_Resources'), 'RESOURCETYPE', variables('resourceAbbreviations').functionApps), 'LOCATION', variables('locationVirtualMachinesAbbreviation'))]",
            "privateEndpointNameConv": "[replace(if(variables('nameConvReversed'), 'RESOURCE-SUBRESOURCE-VNETID-RESOURCETYPE', 'RESOURCETYPE-RESOURCE-SUBRESOURCE-VNETID'), 'RESOURCETYPE', variables('resourceAbbreviations').privateEndpoints)]",
            "privateEndpointNICNameConvTemp": "[if(variables('nameConvReversed'), format('{0}-RESOURCETYPE', variables('privateEndpointNameConv')), format('RESOURCETYPE-{0}', variables('privateEndpointNameConv')))]",
            "privateEndpointNICNameConv": "[replace(variables('privateEndpointNICNameConvTemp'), 'RESOURCETYPE', variables('resourceAbbreviations').networkInterfaces)]",
            "recoveryServicesVaultsNameConv": "[replace(replace(variables('nameConv_HP_Resources'), 'RESOURCETYPE', variables('resourceAbbreviations').recoveryServicesVaults), 'LOCATION', variables('locationVirtualMachinesAbbreviation'))]",
            "userAssignedIdentityNameConv": "[replace(replace(variables('nameConv_HP_Resources'), 'RESOURCETYPE', variables('resourceAbbreviations').userAssignedIdentities), 'LOCATION', variables('locationVirtualMachinesAbbreviation'))]",
            "resourceGroupHosts": "[replace(replace(replace(variables('nameConv_HP_ResGroups'), 'TOKEN', 'hosts'), 'LOCATION', format('{0}', variables('locationVirtualMachinesAbbreviation'))), 'RESOURCETYPE', format('{0}', variables('resourceAbbreviations').resourceGroups))]",
            "vmNamePrefixWithoutDash": "[toLower(if(equals(last(parameters('virtualMachineNamePrefix')), '-'), take(parameters('virtualMachineNamePrefix'), sub(length(parameters('virtualMachineNamePrefix')), 1)), parameters('virtualMachineNamePrefix')))]",
            "availabilitySetNamePrefix": "[if(variables('nameConvReversed'), format('{0}-{1}-', variables('vmNamePrefixWithoutDash'), variables('resourceAbbreviations').availabilitySets), format('{0}-{1}-', variables('resourceAbbreviations').availabilitySets, variables('vmNamePrefixWithoutDash')))]",
            "virtualMachineNameConv": "[if(variables('nameConvReversed'), format('{0}###-{1}', parameters('virtualMachineNamePrefix'), variables('resourceAbbreviations').virtualMachines), format('{0}-{1}###', variables('resourceAbbreviations').virtualMachines, parameters('virtualMachineNamePrefix')))]",
            "diskNameConv": "[if(variables('nameConvReversed'), format('{0}###-{1}', parameters('virtualMachineNamePrefix'), variables('resourceAbbreviations').osdisks), format('{0}-{1}###', variables('resourceAbbreviations').osdisks, parameters('virtualMachineNamePrefix')))]",
            "networkInterfaceNameConv": "[if(variables('nameConvReversed'), format('{0}###-{1}', parameters('virtualMachineNamePrefix'), variables('resourceAbbreviations').networkInterfaces), format('{0}-{1}###', variables('resourceAbbreviations').networkInterfaces, parameters('virtualMachineNamePrefix')))]",
            "diskAccessName": "[replace(replace(replace(variables('nameConv_HP_Resources'), 'RESOURCETYPE', variables('resourceAbbreviations').diskAccesses), 'LOCATION', variables('locationVirtualMachinesAbbreviation')), 'TOKEN-', '')]",
            "diskEncryptionSetNameConv": "[replace(replace(variables('nameConv_HP_Resources'), 'RESOURCETYPE', variables('resourceAbbreviations').diskEncryptionSets), 'LOCATION', variables('locationVirtualMachinesAbbreviation'))]",
            "resourceGroupStorage": "[replace(replace(replace(variables('nameConv_HP_ResGroups'), 'TOKEN', 'storage'), 'LOCATION', format('{0}', variables('locationVirtualMachinesAbbreviation'))), 'RESOURCETYPE', format('{0}', variables('resourceAbbreviations').resourceGroups))]",
            "netAppAccountName": "[replace(replace(replace(variables('nameConv_HP_Resources'), 'RESOURCETYPE', variables('resourceAbbreviations').netAppAccounts), 'LOCATION', variables('locationVirtualMachinesAbbreviation')), 'TOKEN-', '')]",
            "netAppCapacityPoolName": "[replace(replace(replace(variables('nameConv_HP_Resources'), 'RESOURCETYPE', variables('resourceAbbreviations').netAppCapacityPools), 'LOCATION', variables('locationVirtualMachinesAbbreviation')), 'TOKEN-', '')]",
            "appAttachStorageAccountName": "[take(format('appattach{0}', variables('uniqueStringManagement')), 15)]",
            "uniqueStringStorage": "[uniqueString(subscription().subscriptionId, variables('resourceGroupStorage'))]",
            "fslogixStorageAccountNamePrefix": "[if(empty(parameters('fslogixStorageCustomPrefix')), take(format('fslogix{0}', variables('uniqueStringStorage')), 13), toLower(parameters('fslogixStorageCustomPrefix')))]",
            "increaseQuotaFAStorageAccountName": "[take(format('saquota{0}', variables('uniqueStringStorage')), 13)]",
            "sessionHostReplacerFAStorageAccountName": "[format('shreplacer{0}', variables('uniqueStringHosts'))]",
            "fslogixfileShareNames": {
              "CloudCacheProfileContainer": [
                "profile-containers"
              ],
              "CloudCacheProfileOfficeContainer": [
                "profile-containers",
                "office-containers"
              ],
              "ProfileContainer": [
                "profile-containers"
              ],
              "ProfileOfficeContainer": [
                "profile-containers",
                "office-containers"
              ]
            }
          },
          "resources": [],
          "outputs": {
            "appInsightsNames": {
              "type": "object",
              "value": {
                "increaseStorageQuota": "[replace(variables('appInsightsNameConv'), 'TOKEN-', 'saquota-')]",
                "sessionHostReplacement": "[replace(variables('appInsightsNameConv'), 'TOKEN-', 'shreplacer-')]"
              }
            },
            "appServicePlanName": {
              "type": "string",
              "value": "[variables('appServicePlanName')]"
            },
            "availabilitySetNamePrefix": {
              "type": "string",
              "value": "[variables('availabilitySetNamePrefix')]"
            },
            "dataCollectionEndpointName": {
              "type": "string",
              "value": "[variables('dataCollectionEndpointName')]"
            },
            "depVirtualMachineName": {
              "type": "string",
              "value": "[variables('depVirtualMachineName')]"
            },
            "depVirtualMachineNicName": {
              "type": "string",
              "value": "[variables('depVirtualMachineNicName')]"
            },
            "depVirtualMachineDiskName": {
              "type": "string",
              "value": "[variables('depVirtualMachineDiskName')]"
            },
            "desktopApplicationGroupName": {
              "type": "string",
              "value": "[variables('desktopApplicationGroupName')]"
            },
            "diskAccessName": {
              "type": "string",
              "value": "[variables('diskAccessName')]"
            },
            "diskEncryptionSetNames": {
              "type": "object",
              "value": {
                "confidentialVMs": "[replace(variables('diskEncryptionSetNameConv'), 'TOKEN-', 'confvm-customer-keys-')]",
                "customerManaged": "[replace(variables('diskEncryptionSetNameConv'), 'TOKEN-', 'customer-keys-')]",
                "platformAndCustomerManaged": "[replace(variables('diskEncryptionSetNameConv'), 'TOKEN-', 'platform-and-customer-keys-')]"
              }
            },
            "fslogixFileShareNames": {
              "type": "object",
              "value": "[variables('fslogixfileShareNames')]"
            },
            "functionAppNames": {
              "type": "object",
              "value": {
                "increaseStorageQuota": "[replace(variables('functionAppNameConv'), 'TOKEN-', 'saquota-')]",
                "sessionHostReplacement": "[replace(variables('functionAppNameConv'), 'TOKEN-', 'shreplacer-')]"
              }
            },
            "globalFeedWorkspaceName": {
              "type": "string",
              "value": "[variables('globalFeedWorkspaceName')]"
            },
            "hostPoolName": {
              "type": "string",
              "value": "[variables('hostPoolName')]"
            },
            "keyVaultNames": {
              "type": "object",
              "value": {
                "encryptionKeys": "[variables('keyVaultNameEncryption')]",
                "secrets": "[variables('keyVaultNameSecrets')]"
              }
            },
            "encryptionKeyNames": {
              "type": "object",
              "value": {
                "appAttach": "[format('encryption-key-appattach-{0}', variables('appAttachStorageAccountName'))]",
                "fslogix": "[format('{0}-encryption-key-{1}##', variables('hpBaseName'), variables('fslogixStorageAccountNamePrefix'))]",
                "increaseStorageQuota": "[format('{0}-encryption-key-{1}', variables('hpBaseName'), variables('increaseQuotaFAStorageAccountName'))]",
                "sessionHostReplacement": "[format('{0}-encryption-key-{1}', variables('hpBaseName'), variables('sessionHostReplacerFAStorageAccountName'))]",
                "virtualMachines": "[format('{0}-encryption-key-vms', variables('hpBaseName'))]",
                "confidentialVMs": "[format('{0}-encryption-key-confidential-vms', variables('hpBaseName'))]"
              }
            },
            "locations": {
              "type": "object",
              "value": "[variables('locations')]"
            },
            "logAnalyticsWorkspaceName": {
              "type": "string",
              "value": "[variables('logAnalyticsWorkspaceName')]"
            },
            "netAppAccountName": {
              "type": "string",
              "value": "[variables('netAppAccountName')]"
            },
            "netAppCapacityPoolName": {
              "type": "string",
              "value": "[variables('netAppCapacityPoolName')]"
            },
            "privateEndpointNameConv": {
              "type": "string",
              "value": "[variables('privateEndpointNameConv')]"
            },
            "privateEndpointNICNameConv": {
              "type": "string",
              "value": "[variables('privateEndpointNICNameConv')]"
            },
            "recoveryServicesVaultNames": {
              "type": "object",
              "value": {
                "fslogixStorage": "[replace(variables('recoveryServicesVaultsNameConv'), 'TOKEN-', 'fslogix-storage-')]",
                "virtualMachines": "[replace(variables('recoveryServicesVaultsNameConv'), 'TOKEN-', 'virtual-machines-')]"
              }
            },
            "resourceGroupControlPlane": {
              "type": "string",
              "value": "[variables('resourceGroupControlPlane')]"
            },
            "resourceGroupGlobalFeed": {
              "type": "string",
              "value": "[variables('globalFeedResourceGroupName')]"
            },
            "resourceGroupHosts": {
              "type": "string",
              "value": "[variables('resourceGroupHosts')]"
            },
            "resourceGroupDeployment": {
              "type": "string",
              "value": "[variables('resourceGroupDeployment')]"
            },
            "resourceGroupManagement": {
              "type": "string",
              "value": "[variables('resourceGroupManagement')]"
            },
            "resourceGroupStorage": {
              "type": "string",
              "value": "[variables('resourceGroupStorage')]"
            },
            "scalingPlanName": {
              "type": "string",
              "value": "[variables('scalingPlanName')]"
            },
            "storageAccountNames": {
              "type": "object",
              "value": {
                "appAttach": "[variables('appAttachStorageAccountName')]",
                "fslogix": "[variables('fslogixStorageAccountNamePrefix')]",
                "increaseStorageQuota": "[variables('increaseQuotaFAStorageAccountName')]",
                "sessionHostReplacement": "[variables('sessionHostReplacerFAStorageAccountName')]"
              }
            },
            "userAssignedIdentityNameConv": {
              "type": "string",
              "value": "[variables('userAssignedIdentityNameConv')]"
            },
            "virtualMachineNameConv": {
              "type": "string",
              "value": "[variables('virtualMachineNameConv')]"
            },
            "virtualMachineDiskNameConv": {
              "type": "string",
              "value": "[variables('diskNameConv')]"
            },
            "virtualMachineNicNameConv": {
              "type": "string",
              "value": "[variables('networkInterfaceNameConv')]"
            },
            "workspaceName": {
              "type": "string",
              "value": "[variables('workspaceName')]"
            }
          }
        }
      }
    },
    {
      "copy": {
        "name": "rgs",
        "count": "[length(range(0, variables('resourceGroupsCount')))]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('ResourceGroup_{0}_{1}', range(0, variables('resourceGroupsCount'))[copyIndex()], parameters('timeStamp'))]",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": "[if(contains(union(if(variables('createDeploymentVm'), createArray(reference(subscriptionResourceId('Microsoft.Resources/deployments', format('ResourceNames_{0}', parameters('timeStamp'))), '2022-09-01').outputs.resourceGroupDeployment.value), createArray()), if(equals(parameters('deploymentType'), 'Complete'), createArray(reference(subscriptionResourceId('Microsoft.Resources/deployments', format('ResourceNames_{0}', parameters('timeStamp'))), '2022-09-01').outputs.resourceGroupManagement.value), createArray()), if(variables('deployControlPlaneRG'), createArray(reference(subscriptionResourceId('Microsoft.Resources/deployments', format('ResourceNames_{0}', parameters('timeStamp'))), '2022-09-01').outputs.resourceGroupControlPlane.value), createArray()), if(and(equals(parameters('avdPrivateLinkPrivateRoutes'), 'All'), not(empty(parameters('globalFeedPrivateEndpointSubnetResourceId')))), createArray(reference(subscriptionResourceId('Microsoft.Resources/deployments', format('ResourceNames_{0}', parameters('timeStamp'))), '2022-09-01').outputs.resourceGroupGlobalFeed.value), createArray()), if(parameters('deployFSLogixStorage'), createArray(reference(subscriptionResourceId('Microsoft.Resources/deployments', format('ResourceNames_{0}', parameters('timeStamp'))), '2022-09-01').outputs.resourceGroupStorage.value), createArray()), if(equals(parameters('deploymentType'), 'Complete'), createArray(reference(subscriptionResourceId('Microsoft.Resources/deployments', format('ResourceNames_{0}', parameters('timeStamp'))), '2022-09-01').outputs.resourceGroupHosts.value), createArray()))[range(0, variables('resourceGroupsCount'))[copyIndex()]], 'control-plane'), createObject('value', parameters('locationControlPlane')), if(contains(union(if(variables('createDeploymentVm'), createArray(reference(subscriptionResourceId('Microsoft.Resources/deployments', format('ResourceNames_{0}', parameters('timeStamp'))), '2022-09-01').outputs.resourceGroupDeployment.value), createArray()), if(equals(parameters('deploymentType'), 'Complete'), createArray(reference(subscriptionResourceId('Microsoft.Resources/deployments', format('ResourceNames_{0}', parameters('timeStamp'))), '2022-09-01').outputs.resourceGroupManagement.value), createArray()), if(variables('deployControlPlaneRG'), createArray(reference(subscriptionResourceId('Microsoft.Resources/deployments', format('ResourceNames_{0}', parameters('timeStamp'))), '2022-09-01').outputs.resourceGroupControlPlane.value), createArray()), if(and(equals(parameters('avdPrivateLinkPrivateRoutes'), 'All'), not(empty(parameters('globalFeedPrivateEndpointSubnetResourceId')))), createArray(reference(subscriptionResourceId('Microsoft.Resources/deployments', format('ResourceNames_{0}', parameters('timeStamp'))), '2022-09-01').outputs.resourceGroupGlobalFeed.value), createArray()), if(parameters('deployFSLogixStorage'), createArray(reference(subscriptionResourceId('Microsoft.Resources/deployments', format('ResourceNames_{0}', parameters('timeStamp'))), '2022-09-01').outputs.resourceGroupStorage.value), createArray()), if(equals(parameters('deploymentType'), 'Complete'), createArray(reference(subscriptionResourceId('Microsoft.Resources/deployments', format('ResourceNames_{0}', parameters('timeStamp'))), '2022-09-01').outputs.resourceGroupHosts.value), createArray()))[range(0, variables('resourceGroupsCount'))[copyIndex()]], 'global-feed'), if(not(empty(parameters('globalFeedPrivateEndpointSubnetResourceId'))), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('globalFeedPrivateEndpointSubnetResourceId'), '/')[2], split(parameters('globalFeedPrivateEndpointSubnetResourceId'), '/')[4]), 'Microsoft.Network/virtualNetworks', split(parameters('globalFeedPrivateEndpointSubnetResourceId'), '/')[8]), '2023-04-01', 'full').location), createObject('value', '')), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('virtualMachineSubnetResourceId'), '/')[2], split(parameters('virtualMachineSubnetResourceId'), '/')[4]), 'Microsoft.Network/virtualNetworks', split(parameters('virtualMachineSubnetResourceId'), '/')[8]), '2023-04-01', 'full').location)))]",
          "resourceGroupName": {
            "value": "[union(if(variables('createDeploymentVm'), createArray(reference(subscriptionResourceId('Microsoft.Resources/deployments', format('ResourceNames_{0}', parameters('timeStamp'))), '2022-09-01').outputs.resourceGroupDeployment.value), createArray()), if(equals(parameters('deploymentType'), 'Complete'), createArray(reference(subscriptionResourceId('Microsoft.Resources/deployments', format('ResourceNames_{0}', parameters('timeStamp'))), '2022-09-01').outputs.resourceGroupManagement.value), createArray()), if(variables('deployControlPlaneRG'), createArray(reference(subscriptionResourceId('Microsoft.Resources/deployments', format('ResourceNames_{0}', parameters('timeStamp'))), '2022-09-01').outputs.resourceGroupControlPlane.value), createArray()), if(and(equals(parameters('avdPrivateLinkPrivateRoutes'), 'All'), not(empty(parameters('globalFeedPrivateEndpointSubnetResourceId')))), createArray(reference(subscriptionResourceId('Microsoft.Resources/deployments', format('ResourceNames_{0}', parameters('timeStamp'))), '2022-09-01').outputs.resourceGroupGlobalFeed.value), createArray()), if(parameters('deployFSLogixStorage'), createArray(reference(subscriptionResourceId('Microsoft.Resources/deployments', format('ResourceNames_{0}', parameters('timeStamp'))), '2022-09-01').outputs.resourceGroupStorage.value), createArray()), if(equals(parameters('deploymentType'), 'Complete'), createArray(reference(subscriptionResourceId('Microsoft.Resources/deployments', format('ResourceNames_{0}', parameters('timeStamp'))), '2022-09-01').outputs.resourceGroupHosts.value), createArray()))[range(0, variables('resourceGroupsCount'))[copyIndex()]]]"
          },
          "tags": "[if(or(contains(union(if(variables('createDeploymentVm'), createArray(reference(subscriptionResourceId('Microsoft.Resources/deployments', format('ResourceNames_{0}', parameters('timeStamp'))), '2022-09-01').outputs.resourceGroupDeployment.value), createArray()), if(equals(parameters('deploymentType'), 'Complete'), createArray(reference(subscriptionResourceId('Microsoft.Resources/deployments', format('ResourceNames_{0}', parameters('timeStamp'))), '2022-09-01').outputs.resourceGroupManagement.value), createArray()), if(variables('deployControlPlaneRG'), createArray(reference(subscriptionResourceId('Microsoft.Resources/deployments', format('ResourceNames_{0}', parameters('timeStamp'))), '2022-09-01').outputs.resourceGroupControlPlane.value), createArray()), if(and(equals(parameters('avdPrivateLinkPrivateRoutes'), 'All'), not(empty(parameters('globalFeedPrivateEndpointSubnetResourceId')))), createArray(reference(subscriptionResourceId('Microsoft.Resources/deployments', format('ResourceNames_{0}', parameters('timeStamp'))), '2022-09-01').outputs.resourceGroupGlobalFeed.value), createArray()), if(parameters('deployFSLogixStorage'), createArray(reference(subscriptionResourceId('Microsoft.Resources/deployments', format('ResourceNames_{0}', parameters('timeStamp'))), '2022-09-01').outputs.resourceGroupStorage.value), createArray()), if(equals(parameters('deploymentType'), 'Complete'), createArray(reference(subscriptionResourceId('Microsoft.Resources/deployments', format('ResourceNames_{0}', parameters('timeStamp'))), '2022-09-01').outputs.resourceGroupHosts.value), createArray()))[range(0, variables('resourceGroupsCount'))[copyIndex()]], 'storage'), contains(union(if(variables('createDeploymentVm'), createArray(reference(subscriptionResourceId('Microsoft.Resources/deployments', format('ResourceNames_{0}', parameters('timeStamp'))), '2022-09-01').outputs.resourceGroupDeployment.value), createArray()), if(equals(parameters('deploymentType'), 'Complete'), createArray(reference(subscriptionResourceId('Microsoft.Resources/deployments', format('ResourceNames_{0}', parameters('timeStamp'))), '2022-09-01').outputs.resourceGroupManagement.value), createArray()), if(variables('deployControlPlaneRG'), createArray(reference(subscriptionResourceId('Microsoft.Resources/deployments', format('ResourceNames_{0}', parameters('timeStamp'))), '2022-09-01').outputs.resourceGroupControlPlane.value), createArray()), if(and(equals(parameters('avdPrivateLinkPrivateRoutes'), 'All'), not(empty(parameters('globalFeedPrivateEndpointSubnetResourceId')))), createArray(reference(subscriptionResourceId('Microsoft.Resources/deployments', format('ResourceNames_{0}', parameters('timeStamp'))), '2022-09-01').outputs.resourceGroupGlobalFeed.value), createArray()), if(parameters('deployFSLogixStorage'), createArray(reference(subscriptionResourceId('Microsoft.Resources/deployments', format('ResourceNames_{0}', parameters('timeStamp'))), '2022-09-01').outputs.resourceGroupStorage.value), createArray()), if(equals(parameters('deploymentType'), 'Complete'), createArray(reference(subscriptionResourceId('Microsoft.Resources/deployments', format('ResourceNames_{0}', parameters('timeStamp'))), '2022-09-01').outputs.resourceGroupHosts.value), createArray()))[range(0, variables('resourceGroupsCount'))[copyIndex()]], 'hosts')), createObject('value', union(coalesce(tryGet(parameters('tags'), 'Microsoft.Resources/resourceGroups'), createObject()), createObject('cm-resource-parent', format('{0}/resourceGroups/{1}/providers/Microsoft.DesktopVirtualization/hostpools/{2}', subscription().id, reference(subscriptionResourceId('Microsoft.Resources/deployments', format('ResourceNames_{0}', parameters('timeStamp'))), '2022-09-01').outputs.resourceGroupControlPlane.value, reference(subscriptionResourceId('Microsoft.Resources/deployments', format('ResourceNames_{0}', parameters('timeStamp'))), '2022-09-01').outputs.hostPoolName.value)))), createObject('value', coalesce(tryGet(parameters('tags'), 'Microsoft.Resources/resourceGroups'), createObject())))]"
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.1.42791",
              "templateHash": "16569023182856618136"
            }
          },
          "parameters": {
            "location": {
              "type": "string"
            },
            "resourceGroupName": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Resources/resourceGroups",
              "apiVersion": "2020-10-01",
              "name": "[parameters('resourceGroupName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]"
            }
          ]
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('ResourceNames_{0}', parameters('timeStamp')))]"
      ]
    },
    {
      "condition": "[and(equals(parameters('deploymentType'), 'Complete'), or(parameters('deployScalingPlan'), parameters('startVmOnConnect')))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('Subscription_RoleAssignments_{0}', parameters('timeStamp'))]",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "avdObjectId": {
            "value": "[parameters('avdObjectId')]"
          },
          "deployScalingPlan": {
            "value": "[parameters('deployScalingPlan')]"
          },
          "startVmOnConnect": {
            "value": "[parameters('startVmOnConnect')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.1.42791",
              "templateHash": "5345254085997690134"
            }
          },
          "parameters": {
            "avdObjectId": {
              "type": "string"
            },
            "deployScalingPlan": {
              "type": "bool"
            },
            "startVmOnConnect": {
              "type": "bool"
            }
          },
          "resources": [
            {
              "condition": "[and(not(parameters('deployScalingPlan')), parameters('startVmOnConnect'))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(parameters('avdObjectId'), '489581de-a3bd-480d-9518-53dea7416b33', subscription().id)]",
              "properties": {
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', '489581de-a3bd-480d-9518-53dea7416b33')]",
                "principalId": "[parameters('avdObjectId')]"
              }
            },
            {
              "condition": "[parameters('deployScalingPlan')]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(parameters('avdObjectId'), '40c5ff49-9181-41f8-ae61-143b0e78555e', subscription().id)]",
              "properties": {
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', '40c5ff49-9181-41f8-ae61-143b0e78555e')]",
                "principalId": "[parameters('avdObjectId')]"
              }
            }
          ]
        }
      }
    },
    {
      "condition": "[variables('createDeploymentVm')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('Deployment_Prereqs_{0}', parameters('timeStamp'))]",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "confidentialVMOSDiskEncryption": {
            "value": "[parameters('confidentialVMOSDiskEncryption')]"
          },
          "deploymentType": {
            "value": "[parameters('deploymentType')]"
          },
          "deploymentVmSize": {
            "value": "[parameters('deploymentVmSize')]"
          },
          "diskSku": {
            "value": "[parameters('diskSku')]"
          },
          "domainJoinUserPassword": "[if(contains(parameters('identitySolution'), 'DomainServices'), if(not(empty(parameters('domainJoinUserPassword'))), createObject('value', parameters('domainJoinUserPassword')), if(not(empty(parameters('credentialsKeyVaultResourceId'))), createObject('reference', createObject('keyVault', createObject('id', extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('credentialsKeyVaultResourceId'), '/')[2], split(parameters('credentialsKeyVaultResourceId'), '/')[4]), 'Microsoft.KeyVault/vaults', last(split(parameters('credentialsKeyVaultResourceId'), '/')))), 'secretName', 'DomainJoinUserPassword')), createObject('value', ''))), createObject('value', ''))]",
          "domainJoinUserPrincipalName": "[if(contains(parameters('identitySolution'), 'DomainServices'), if(not(empty(parameters('domainJoinUserPrincipalName'))), createObject('value', parameters('domainJoinUserPrincipalName')), if(not(empty(parameters('credentialsKeyVaultResourceId'))), createObject('reference', createObject('keyVault', createObject('id', extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('credentialsKeyVaultResourceId'), '/')[2], split(parameters('credentialsKeyVaultResourceId'), '/')[4]), 'Microsoft.KeyVault/vaults', last(split(parameters('credentialsKeyVaultResourceId'), '/')))), 'secretName', 'DomainJoinUserPrincipalName')), createObject('value', ''))), createObject('value', ''))]",
          "domainName": {
            "value": "[parameters('domainName')]"
          },
          "encryptionAtHost": {
            "value": "[parameters('encryptionAtHost')]"
          },
          "fslogix": {
            "value": "[parameters('deployFSLogixStorage')]"
          },
          "hostPoolName": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('ResourceNames_{0}', parameters('timeStamp'))), '2022-09-01').outputs.hostPoolName.value]"
          },
          "identitySolution": {
            "value": "[parameters('identitySolution')]"
          },
          "keyManagementDisks": {
            "value": "[parameters('keyManagementDisks')]"
          },
          "locationVirtualMachines": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('virtualMachineSubnetResourceId'), '/')[2], split(parameters('virtualMachineSubnetResourceId'), '/')[4]), 'Microsoft.Network/virtualNetworks', split(parameters('virtualMachineSubnetResourceId'), '/')[8]), '2023-04-01', 'full').location]"
          },
          "ouPath": {
            "value": "[parameters('vmOUPath')]"
          },
          "resourceGroupControlPlane": "[if(equals(parameters('deploymentType'), 'Complete'), createObject('value', reference(subscriptionResourceId('Microsoft.Resources/deployments', format('ResourceNames_{0}', parameters('timeStamp'))), '2022-09-01').outputs.resourceGroupControlPlane.value), createObject('value', split(parameters('existingHostPoolResourceId'), '/')[4]))]",
          "resourceGroupDeployment": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('ResourceNames_{0}', parameters('timeStamp'))), '2022-09-01').outputs.resourceGroupDeployment.value]"
          },
          "resourceGroupHosts": "[if(equals(parameters('deploymentType'), 'Complete'), createObject('value', reference(subscriptionResourceId('Microsoft.Resources/deployments', format('ResourceNames_{0}', parameters('timeStamp'))), '2022-09-01').outputs.resourceGroupHosts.value), createObject('value', parameters('existingHostsResourceGroupName')))]",
          "resourceGroupManagement": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('ResourceNames_{0}', parameters('timeStamp'))), '2022-09-01').outputs.resourceGroupManagement.value]"
          },
          "resourceGroupStorage": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('ResourceNames_{0}', parameters('timeStamp'))), '2022-09-01').outputs.resourceGroupStorage.value]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "timeStamp": {
            "value": "[parameters('timeStamp')]"
          },
          "userAssignedIdentityNameConv": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('ResourceNames_{0}', parameters('timeStamp'))), '2022-09-01').outputs.userAssignedIdentityNameConv.value]"
          },
          "virtualMachineAdminPassword": "[if(not(empty(parameters('credentialsKeyVaultResourceId'))), createObject('reference', createObject('keyVault', createObject('id', extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('credentialsKeyVaultResourceId'), '/')[2], split(parameters('credentialsKeyVaultResourceId'), '/')[4]), 'Microsoft.KeyVault/vaults', last(split(parameters('credentialsKeyVaultResourceId'), '/')))), 'secretName', 'VirtualMachineAdminPassword')), createObject('value', parameters('virtualMachineAdminPassword')))]",
          "virtualMachineAdminUserName": "[if(not(empty(parameters('credentialsKeyVaultResourceId'))), createObject('reference', createObject('keyVault', createObject('id', extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('credentialsKeyVaultResourceId'), '/')[2], split(parameters('credentialsKeyVaultResourceId'), '/')[4]), 'Microsoft.KeyVault/vaults', last(split(parameters('credentialsKeyVaultResourceId'), '/')))), 'secretName', 'VirtualMachineAdminUserName')), createObject('value', parameters('virtualMachineAdminUserName')))]",
          "virtualMachineName": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('ResourceNames_{0}', parameters('timeStamp'))), '2022-09-01').outputs.depVirtualMachineName.value]"
          },
          "virtualMachineNICName": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('ResourceNames_{0}', parameters('timeStamp'))), '2022-09-01').outputs.depVirtualMachineNicName.value]"
          },
          "virtualMachineDiskName": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('ResourceNames_{0}', parameters('timeStamp'))), '2022-09-01').outputs.depVirtualMachineDiskName.value]"
          },
          "virtualMachineSubnetResourceId": {
            "value": "[parameters('virtualMachineSubnetResourceId')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.1.42791",
              "templateHash": "4711474605705495116"
            }
          },
          "parameters": {
            "confidentialVMOSDiskEncryption": {
              "type": "bool"
            },
            "deploymentType": {
              "type": "string"
            },
            "diskSku": {
              "type": "string"
            },
            "domainJoinUserPassword": {
              "type": "securestring"
            },
            "domainJoinUserPrincipalName": {
              "type": "securestring"
            },
            "domainName": {
              "type": "string"
            },
            "deploymentVmSize": {
              "type": "string"
            },
            "encryptionAtHost": {
              "type": "bool"
            },
            "fslogix": {
              "type": "bool"
            },
            "hostPoolName": {
              "type": "string"
            },
            "identitySolution": {
              "type": "string"
            },
            "keyManagementDisks": {
              "type": "string"
            },
            "locationVirtualMachines": {
              "type": "string"
            },
            "ouPath": {
              "type": "string"
            },
            "resourceGroupControlPlane": {
              "type": "string"
            },
            "resourceGroupDeployment": {
              "type": "string"
            },
            "resourceGroupHosts": {
              "type": "string"
            },
            "resourceGroupManagement": {
              "type": "string"
            },
            "resourceGroupStorage": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            },
            "timeStamp": {
              "type": "string"
            },
            "userAssignedIdentityNameConv": {
              "type": "string"
            },
            "virtualMachineName": {
              "type": "string"
            },
            "virtualMachineNICName": {
              "type": "string"
            },
            "virtualMachineDiskName": {
              "type": "string"
            },
            "virtualMachineAdminPassword": {
              "type": "securestring"
            },
            "virtualMachineAdminUserName": {
              "type": "securestring"
            },
            "virtualMachineSubnetResourceId": {
              "type": "string"
            }
          },
          "variables": {
            "deploymentUserAssignedIdentityName": "[replace(parameters('userAssignedIdentityNameConv'), 'TOKEN', 'avd-deployment')]",
            "roleDefinitions": {
              "Contributor": "b24988ac-6180-42a0-ab88-20f7382dd24c",
              "DesktopVirtualizationApplicationGroupContributor": "86240b0e-9422-4c43-887b-b61143f32ba8",
              "DesktopVirtualizationSessionHostOperator": "2ad6aaab-ead9-4eaa-8ac5-da422f562408",
              "KeyVaultCryptoOfficer": "14b46e9e-c2b7-41b4-b07b-48a6ebf60603",
              "RoleBasedAccessControlAdministrator": "f58310d9-a9f6-439a-9e8d-f62e7b41a168",
              "StorageAccountContributor": "17d1049b-9a84-46fb-8f53-869881c3d3ab",
              "VirtualMachineContributor": "9980e02c-c2be-4d73-94e8-173b1dc7cf3c"
            },
            "roleAssignmentsControlPlane": [
              {
                "roleDefinitionId": "[variables('roleDefinitions').DesktopVirtualizationApplicationGroupContributor]",
                "depName": "ControlPlane-DVAppGroupCont",
                "resourceGroup": "[parameters('resourceGroupControlPlane')]",
                "subscription": "[subscription().subscriptionId]"
              },
              {
                "roleDefinitionId": "[variables('roleDefinitions').DesktopVirtualizationSessionHostOperator]",
                "depName": "ControlPlane-DVSessionHostOp",
                "resourceGroup": "[parameters('resourceGroupControlPlane')]",
                "subscription": "[subscription().subscriptionId]"
              },
              {
                "roleDefinitionId": "[variables('roleDefinitions').RoleBasedAccessControlAdministrator]",
                "depName": "ControlPlane-RBACAdmin",
                "resourceGroup": "[parameters('resourceGroupControlPlane')]",
                "subscription": "[subscription().subscriptionId]"
              }
            ],
            "roleAssignmentsDeployment": [
              {
                "roleDefinitionId": "[variables('roleDefinitions').Contributor]",
                "depName": "Deployment-Cont",
                "resourceGroup": "[parameters('resourceGroupDeployment')]",
                "subscription": "[subscription().subscriptionId]"
              }
            ],
            "roleAssignmentsHosts": [
              {
                "roleDefinitionId": "[variables('roleDefinitions').VirtualMachineContributor]",
                "depName": "Hosts-VMCont",
                "resourceGroup": "[parameters('resourceGroupHosts')]",
                "subscription": "[subscription().subscriptionId]"
              },
              {
                "roleDefinitionId": "[variables('roleDefinitions').RoleBasedAccessControlAdministrator]",
                "depName": "Hosts-RBACAdmin",
                "resourceGroup": "[parameters('resourceGroupHosts')]",
                "subscription": "[subscription().subscriptionId]"
              }
            ],
            "roleAssignmentsManagement": "[if(and(and(equals(parameters('deploymentType'), 'Complete'), parameters('confidentialVMOSDiskEncryption')), equals(parameters('keyManagementDisks'), 'CustomerManagedHSM')), createArray(createObject('roleDefinitionId', variables('roleDefinitions').KeyVaultCryptoOfficer, 'depName', 'Management-KVCryptoOff', 'resourceGroup', parameters('resourceGroupManagement'), 'subscription', subscription().subscriptionId)), createArray())]",
            "roleAssignmentsStorage": "[if(and(and(equals(parameters('deploymentType'), 'Complete'), parameters('fslogix')), contains(parameters('identitySolution'), 'DomainServices')), createArray(createObject('roleDefinitionId', variables('roleDefinitions').StorageAccountContributor, 'depName', 'Storage-StorageAcctCont', 'resourceGroup', parameters('resourceGroupStorage'), 'subscription', subscription().subscriptionId), createObject('roleDefinitionId', variables('roleDefinitions').RoleBasedAccessControlAdministrator, 'depName', 'Storage-RBACAdmin', 'resourceGroup', parameters('resourceGroupStorage'), 'subscription', subscription().subscriptionId)), createArray())]",
            "roleAssignments": "[union(variables('roleAssignmentsControlPlane'), variables('roleAssignmentsDeployment'), variables('roleAssignmentsHosts'), variables('roleAssignmentsManagement'), variables('roleAssignmentsStorage'))]"
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('UserAssignedIdentity_Deployment_{0}', parameters('timeStamp'))]",
              "resourceGroup": "[parameters('resourceGroupDeployment')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('locationVirtualMachines')]"
                  },
                  "name": {
                    "value": "[variables('deploymentUserAssignedIdentityName')]"
                  },
                  "tags": {
                    "value": "[union(createObject('cm-resource-parent', format('{0}/resourceGroups/{1}/providers/Microsoft.DesktopVirtualization/hostPools/{2}', subscription().id, parameters('resourceGroupControlPlane'), parameters('hostPoolName'))), coalesce(tryGet(parameters('tags'), 'Microsoft.ManagedIdentity/userAssignedIdentities'), createObject()))]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.36.1.42791",
                      "templateHash": "4626216023323723915"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]"
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {}
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
                      "apiVersion": "2023-01-31",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]"
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name'))]"
                    },
                    "principalId": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name')), '2023-01-31').principalId]"
                    },
                    "clientId": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name')), '2023-01-31').clientId]"
                    }
                  }
                }
              }
            },
            {
              "copy": {
                "name": "roleAssignments_deployment",
                "count": "[length(range(0, length(variables('roleAssignments'))))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('RA-{0}-{1}', variables('roleAssignments')[range(0, length(variables('roleAssignments')))[copyIndex()]].depName, parameters('timeStamp'))]",
              "subscriptionId": "[variables('roleAssignments')[range(0, length(variables('roleAssignments')))[copyIndex()]].subscription]",
              "resourceGroup": "[variables('roleAssignments')[range(0, length(variables('roleAssignments')))[copyIndex()]].resourceGroup]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "principalId": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupDeployment')), 'Microsoft.Resources/deployments', format('UserAssignedIdentity_Deployment_{0}', parameters('timeStamp'))), '2022-09-01').outputs.principalId.value]"
                  },
                  "principalType": {
                    "value": "ServicePrincipal"
                  },
                  "roleDefinitionId": {
                    "value": "[variables('roleAssignments')[range(0, length(variables('roleAssignments')))[copyIndex()]].roleDefinitionId]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.36.1.42791",
                      "templateHash": "7171613509360905345"
                    }
                  },
                  "parameters": {
                    "roleDefinitionId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. You can provide either the role definition GUID or its fully qualified ID in the following format: \\'/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11\\'.\nYou can find the GUIDs in the ID column on the table at https://learn.microsoft.com/en-us/azure/role-based-access-control/built-in-roles.\n"
                      }
                    },
                    "principalId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The Principal or Object ID of the Security Principal (User, Group, Service Principal, Managed Identity)."
                      }
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().name]",
                      "metadata": {
                        "description": "Optional. Name of the Resource Group to assign the RBAC role to. If not provided, will use the current scope for deployment."
                      }
                    },
                    "subscriptionId": {
                      "type": "string",
                      "defaultValue": "[subscription().subscriptionId]",
                      "metadata": {
                        "description": "Optional. Subscription ID of the subscription to assign the RBAC role to. If not provided, will use the current scope for deployment."
                      }
                    },
                    "principalType": {
                      "type": "string",
                      "defaultValue": "",
                      "allowedValues": [
                        "ServicePrincipal",
                        "Group",
                        "User",
                        "ForeignGroup",
                        "Device",
                        ""
                      ],
                      "metadata": {
                        "description": "Optional. The principal type of the assigned principal ID."
                      }
                    }
                  },
                  "variables": {
                    "roleDefinitionIdVar": "[if(contains(parameters('roleDefinitionId'), '/providers/Microsoft.Authorization/roleDefinitions/'), parameters('roleDefinitionId'), format('/providers/Microsoft.Authorization/roleDefinitions/{0}', parameters('roleDefinitionId')))]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "name": "[guid(parameters('subscriptionId'), parameters('resourceGroupName'), variables('roleDefinitionIdVar'), parameters('principalId'))]",
                      "properties": {
                        "roleDefinitionId": "[variables('roleDefinitionIdVar')]",
                        "principalId": "[parameters('principalId')]",
                        "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]"
                      }
                    }
                  ],
                  "outputs": {
                    "resourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Authorization/roleAssignments', guid(parameters('subscriptionId'), parameters('resourceGroupName'), variables('roleDefinitionIdVar'), parameters('principalId')))]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupDeployment')), 'Microsoft.Resources/deployments', format('UserAssignedIdentity_Deployment_{0}', parameters('timeStamp')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('VirtualMachine_Deployment_{0}', parameters('timeStamp'))]",
              "resourceGroup": "[parameters('resourceGroupDeployment')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "identitySolution": {
                    "value": "[parameters('identitySolution')]"
                  },
                  "diskName": {
                    "value": "[parameters('virtualMachineDiskName')]"
                  },
                  "diskSku": {
                    "value": "[parameters('diskSku')]"
                  },
                  "domainJoinUserPassword": {
                    "value": "[parameters('domainJoinUserPassword')]"
                  },
                  "domainJoinUserPrincipalName": {
                    "value": "[parameters('domainJoinUserPrincipalName')]"
                  },
                  "domainName": {
                    "value": "[parameters('domainName')]"
                  },
                  "encryptionAtHost": {
                    "value": "[parameters('encryptionAtHost')]"
                  },
                  "location": {
                    "value": "[parameters('locationVirtualMachines')]"
                  },
                  "networkInterfaceName": {
                    "value": "[parameters('virtualMachineNICName')]"
                  },
                  "ouPath": {
                    "value": "[parameters('ouPath')]"
                  },
                  "subnetResourceId": {
                    "value": "[parameters('virtualMachineSubnetResourceId')]"
                  },
                  "tagsNetworkInterfaces": {
                    "value": "[union(createObject('cm-resource-parent', format('{0}/resourceGroups/{1}/providers/Microsoft.DesktopVirtualization/hostPools/{2}', subscription().id, parameters('resourceGroupControlPlane'), parameters('hostPoolName'))), coalesce(tryGet(parameters('tags'), 'Microsoft.Network/networkInterfaces'), createObject()))]"
                  },
                  "tagsVirtualMachines": {
                    "value": "[union(createObject('cm-resource-parent', format('{0}/resourceGroups/{1}/providers/Microsoft.DesktopVirtualization/hostPools/{2}', subscription().id, parameters('resourceGroupControlPlane'), parameters('hostPoolName'))), coalesce(tryGet(parameters('tags'), 'Microsoft.Compute/virtualMachines'), createObject()))]"
                  },
                  "timeStamp": {
                    "value": "[parameters('timeStamp')]"
                  },
                  "userAssignedIdentitiesResourceIds": {
                    "value": {
                      "[format('{0}', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupDeployment')), 'Microsoft.Resources/deployments', format('UserAssignedIdentity_Deployment_{0}', parameters('timeStamp'))), '2022-09-01').outputs.resourceId.value)]": {}
                    }
                  },
                  "virtualMachineName": {
                    "value": "[parameters('virtualMachineName')]"
                  },
                  "virtualMachineAdminPassword": {
                    "value": "[parameters('virtualMachineAdminPassword')]"
                  },
                  "virtualMachineAdminUserName": {
                    "value": "[parameters('virtualMachineAdminUserName')]"
                  },
                  "vmSize": {
                    "value": "[parameters('deploymentVmSize')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.36.1.42791",
                      "templateHash": "15654920487796332121"
                    }
                  },
                  "parameters": {
                    "identitySolution": {
                      "type": "string"
                    },
                    "diskName": {
                      "type": "string"
                    },
                    "diskSku": {
                      "type": "string"
                    },
                    "domainJoinUserPassword": {
                      "type": "securestring"
                    },
                    "domainJoinUserPrincipalName": {
                      "type": "securestring"
                    },
                    "domainName": {
                      "type": "string"
                    },
                    "encryptionAtHost": {
                      "type": "bool"
                    },
                    "location": {
                      "type": "string"
                    },
                    "networkInterfaceName": {
                      "type": "string"
                    },
                    "ouPath": {
                      "type": "string"
                    },
                    "subnetResourceId": {
                      "type": "string"
                    },
                    "tagsNetworkInterfaces": {
                      "type": "object"
                    },
                    "tagsVirtualMachines": {
                      "type": "object"
                    },
                    "timeStamp": {
                      "type": "string",
                      "defaultValue": "[utcNow('yyyyMMddhhmmss')]"
                    },
                    "userAssignedIdentitiesResourceIds": {
                      "type": "object"
                    },
                    "virtualMachineName": {
                      "type": "string"
                    },
                    "virtualMachineAdminPassword": {
                      "type": "securestring"
                    },
                    "virtualMachineAdminUserName": {
                      "type": "securestring"
                    },
                    "vmSize": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/networkInterfaces",
                      "apiVersion": "2020-05-01",
                      "name": "[parameters('networkInterfaceName')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tagsNetworkInterfaces')]",
                      "properties": {
                        "ipConfigurations": [
                          {
                            "name": "Ipv4config",
                            "properties": {
                              "privateIPAllocationMethod": "Dynamic",
                              "subnet": {
                                "id": "[parameters('subnetResourceId')]"
                              },
                              "primary": true,
                              "privateIPAddressVersion": "IPv4"
                            }
                          }
                        ],
                        "enableAcceleratedNetworking": false,
                        "enableIPForwarding": false
                      }
                    },
                    {
                      "type": "Microsoft.Compute/virtualMachines",
                      "apiVersion": "2021-11-01",
                      "name": "[parameters('virtualMachineName')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tagsVirtualMachines')]",
                      "properties": {
                        "hardwareProfile": {
                          "vmSize": "[parameters('vmSize')]"
                        },
                        "storageProfile": {
                          "imageReference": {
                            "publisher": "MicrosoftWindowsServer",
                            "offer": "WindowsServer",
                            "sku": "2019-datacenter-core-g2",
                            "version": "latest"
                          },
                          "osDisk": {
                            "name": "[parameters('diskName')]",
                            "osType": "Windows",
                            "createOption": "FromImage",
                            "deleteOption": "Delete",
                            "caching": "None",
                            "managedDisk": {
                              "storageAccountType": "[parameters('diskSku')]"
                            }
                          },
                          "dataDisks": []
                        },
                        "osProfile": {
                          "computerName": "[parameters('virtualMachineName')]",
                          "adminUsername": "[parameters('virtualMachineAdminUserName')]",
                          "adminPassword": "[parameters('virtualMachineAdminPassword')]",
                          "windowsConfiguration": {
                            "provisionVMAgent": true,
                            "enableAutomaticUpdates": true
                          },
                          "secrets": [],
                          "allowExtensionOperations": true
                        },
                        "networkProfile": {
                          "networkInterfaces": [
                            {
                              "id": "[resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName'))]",
                              "properties": {
                                "deleteOption": "Delete"
                              }
                            }
                          ]
                        },
                        "securityProfile": {
                          "uefiSettings": {
                            "secureBootEnabled": true,
                            "vTpmEnabled": true
                          },
                          "securityType": "trustedLaunch",
                          "encryptionAtHost": "[parameters('encryptionAtHost')]"
                        },
                        "diagnosticsProfile": {
                          "bootDiagnostics": {
                            "enabled": false
                          }
                        },
                        "licenseType": "Windows_Server"
                      },
                      "identity": {
                        "type": "SystemAssigned, UserAssigned",
                        "userAssignedIdentities": "[parameters('userAssignedIdentitiesResourceIds')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName'))]"
                      ]
                    },
                    {
                      "condition": "[not(startsWith(environment().name, 'USN'))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-03-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'IaaSAntimalware')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tagsVirtualMachines')]",
                      "properties": {
                        "publisher": "Microsoft.Azure.Security",
                        "type": "IaaSAntimalware",
                        "typeHandlerVersion": "1.3",
                        "autoUpgradeMinorVersion": true,
                        "enableAutomaticUpgrade": false,
                        "settings": {
                          "AntimalwareEnabled": true,
                          "RealtimeProtectionEnabled": "true",
                          "ScheduledScanSettings": {
                            "isEnabled": "true",
                            "day": "7",
                            "time": "120",
                            "scanType": "Quick"
                          },
                          "Exclusions": {}
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-03-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'GuestAttestation')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "publisher": "Microsoft.Azure.Security.WindowsAttestation",
                        "type": "GuestAttestation",
                        "typeHandlerVersion": "1.0",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                          "AttestationConfig": {
                            "MaaSettings": {
                              "maaEndpoint": "",
                              "maaTenantName": "GuestAttestation"
                            },
                            "AscSettings": {
                              "ascReportingEndpoint": "",
                              "ascReportingFrequency": ""
                            },
                            "useCustomToken": "false",
                            "disableAlerts": "false"
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
                      ]
                    },
                    {
                      "condition": "[contains(parameters('identitySolution'), 'DomainServices')]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2019-07-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'JsonADDomainExtension')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "forceUpdateTag": "[parameters('timeStamp')]",
                        "publisher": "Microsoft.Compute",
                        "type": "JsonADDomainExtension",
                        "typeHandlerVersion": "1.3",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                          "Name": "[parameters('domainName')]",
                          "User": "[parameters('domainJoinUserPrincipalName')]",
                          "Restart": "true",
                          "Options": "3",
                          "OUPath": "[parameters('ouPath')]"
                        },
                        "protectedSettings": {
                          "Password": "[parameters('domainJoinUserPassword')]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "Name": {
                      "type": "string",
                      "value": "[parameters('virtualMachineName')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupDeployment')), 'Microsoft.Resources/deployments', format('UserAssignedIdentity_Deployment_{0}', parameters('timeStamp')))]"
              ]
            }
          ],
          "outputs": {
            "deploymentUserAssignedIdentityClientId": {
              "type": "string",
              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupDeployment')), 'Microsoft.Resources/deployments', format('UserAssignedIdentity_Deployment_{0}', parameters('timeStamp'))), '2022-09-01').outputs.clientId.value]"
            },
            "deploymentUserAssignedIdentityResourceId": {
              "type": "string",
              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupDeployment')), 'Microsoft.Resources/deployments', format('UserAssignedIdentity_Deployment_{0}', parameters('timeStamp'))), '2022-09-01').outputs.resourceId.value]"
            },
            "deploymentUserAssignedIdentityRoleAssignmentIds": {
              "type": "array",
              "copy": {
                "count": "[length(range(0, length(variables('roleAssignments'))))]",
                "input": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('roleAssignments')[range(0, length(variables('roleAssignments')))[range(0, length(variables('roleAssignments')))[copyIndex()]]].subscription, variables('roleAssignments')[range(0, length(variables('roleAssignments')))[range(0, length(variables('roleAssignments')))[copyIndex()]]].resourceGroup), 'Microsoft.Resources/deployments', format('RA-{0}-{1}', variables('roleAssignments')[range(0, length(variables('roleAssignments')))[range(0, length(variables('roleAssignments')))[copyIndex()]]].depName, parameters('timeStamp'))), '2022-09-01').outputs.resourceId.value]"
              }
            },
            "virtualMachineName": {
              "type": "string",
              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupDeployment')), 'Microsoft.Resources/deployments', format('VirtualMachine_Deployment_{0}', parameters('timeStamp'))), '2022-09-01').outputs.Name.value]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('ResourceNames_{0}', parameters('timeStamp')))]",
        "rgs"
      ]
    },
    {
      "condition": "[equals(parameters('deploymentType'), 'Complete')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('Management_{0}', parameters('timeStamp'))]",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "appServicePlanName": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('ResourceNames_{0}', parameters('timeStamp'))), '2022-09-01').outputs.appServicePlanName.value]"
          },
          "azureKeyVaultPrivateDnsZoneResourceId": {
            "value": "[parameters('azureKeyVaultPrivateDnsZoneResourceId')]"
          },
          "azureMonitorPrivateLinkScopeResourceId": {
            "value": "[parameters('azureMonitorPrivateLinkScopeResourceId')]"
          },
          "dataCollectionEndpointName": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('ResourceNames_{0}', parameters('timeStamp'))), '2022-09-01').outputs.dataCollectionEndpointName.value]"
          },
          "enableMonitoring": {
            "value": "[parameters('enableMonitoring')]"
          },
          "enableQuotaManagement": {
            "value": "[parameters('deployIncreaseQuota')]"
          },
          "encryptionKeysKeyVaultName": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('ResourceNames_{0}', parameters('timeStamp'))), '2022-09-01').outputs.keyVaultNames.value.encryptionKeys]"
          },
          "domainJoinUserPassword": {
            "value": "[parameters('domainJoinUserPassword')]"
          },
          "domainJoinUserPrincipalName": {
            "value": "[parameters('domainJoinUserPrincipalName')]"
          },
          "deployEncryptionKeysKeyVault": {
            "value": "[or(contains(parameters('keyManagementDisks'), 'Customer'), contains(parameters('keyManagementStorageAccounts'), 'Customer'))]"
          },
          "deploySecretsKeyVault": {
            "value": "[parameters('deploySecretsKeyVault')]"
          },
          "keyVaultEnablePurgeProtection": {
            "value": "[parameters('secretsKeyVaultEnablePurgeProtection')]"
          },
          "keyVaultEnableSoftDelete": {
            "value": "[parameters('secretsKeyVaultEnableSoftDelete')]"
          },
          "secretsKeyVaultName": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('ResourceNames_{0}', parameters('timeStamp'))), '2022-09-01').outputs.keyVaultNames.value.secrets]"
          },
          "keyVaultRetentionInDays": {
            "value": "[parameters('keyVaultRetentionInDays')]"
          },
          "location": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('virtualMachineSubnetResourceId'), '/')[2], split(parameters('virtualMachineSubnetResourceId'), '/')[4]), 'Microsoft.Network/virtualNetworks', split(parameters('virtualMachineSubnetResourceId'), '/')[8]), '2023-04-01', 'full').location]"
          },
          "logAnalyticsWorkspaceName": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('ResourceNames_{0}', parameters('timeStamp'))), '2022-09-01').outputs.logAnalyticsWorkspaceName.value]"
          },
          "logAnalyticsWorkspaceRetention": {
            "value": "[parameters('logAnalyticsWorkspaceRetention')]"
          },
          "logAnalyticsWorkspaceSku": {
            "value": "[parameters('logAnalyticsWorkspaceSku')]"
          },
          "privateEndpointSubnetResourceId": {
            "value": "[parameters('keyVaultPrivateEndpointSubnetResourceId')]"
          },
          "privateEndpoint": {
            "value": "[parameters('deployPrivateEndpoints')]"
          },
          "privateEndpointNameConv": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('ResourceNames_{0}', parameters('timeStamp'))), '2022-09-01').outputs.privateEndpointNameConv.value]"
          },
          "privateEndpointNICNameConv": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('ResourceNames_{0}', parameters('timeStamp'))), '2022-09-01').outputs.privateEndpointNICNameConv.value]"
          },
          "resourceGroupManagement": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('ResourceNames_{0}', parameters('timeStamp'))), '2022-09-01').outputs.resourceGroupManagement.value]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "timeStamp": {
            "value": "[parameters('timeStamp')]"
          },
          "virtualMachineAdminPassword": {
            "value": "[parameters('virtualMachineAdminPassword')]"
          },
          "virtualMachineAdminUserName": {
            "value": "[parameters('virtualMachineAdminUserName')]"
          },
          "zoneRedundant": {
            "value": "[equals(parameters('availability'), 'availabilityZones')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.1.42791",
              "templateHash": "1114187332771591702"
            }
          },
          "parameters": {
            "appServicePlanName": {
              "type": "string"
            },
            "azureKeyVaultPrivateDnsZoneResourceId": {
              "type": "string"
            },
            "azureMonitorPrivateLinkScopeResourceId": {
              "type": "string"
            },
            "dataCollectionEndpointName": {
              "type": "string"
            },
            "deploySecretsKeyVault": {
              "type": "bool"
            },
            "enableMonitoring": {
              "type": "bool"
            },
            "enableQuotaManagement": {
              "type": "bool"
            },
            "encryptionKeysKeyVaultName": {
              "type": "string"
            },
            "deployEncryptionKeysKeyVault": {
              "type": "bool"
            },
            "domainJoinUserPassword": {
              "type": "securestring"
            },
            "domainJoinUserPrincipalName": {
              "type": "securestring"
            },
            "secretsKeyVaultName": {
              "type": "string"
            },
            "keyVaultEnableSoftDelete": {
              "type": "bool"
            },
            "keyVaultEnablePurgeProtection": {
              "type": "bool"
            },
            "keyVaultRetentionInDays": {
              "type": "int"
            },
            "location": {
              "type": "string"
            },
            "logAnalyticsWorkspaceName": {
              "type": "string"
            },
            "logAnalyticsWorkspaceRetention": {
              "type": "int"
            },
            "logAnalyticsWorkspaceSku": {
              "type": "string"
            },
            "privateEndpointSubnetResourceId": {
              "type": "string"
            },
            "privateEndpoint": {
              "type": "bool"
            },
            "privateEndpointNameConv": {
              "type": "string"
            },
            "privateEndpointNICNameConv": {
              "type": "string"
            },
            "resourceGroupManagement": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            },
            "timeStamp": {
              "type": "string"
            },
            "virtualMachineAdminPassword": {
              "type": "securestring"
            },
            "virtualMachineAdminUserName": {
              "type": "securestring"
            },
            "zoneRedundant": {
              "type": "bool"
            }
          },
          "variables": {
            "secretList": "[union(if(not(empty(parameters('domainJoinUserPassword'))), createArray(createObject('name', 'DomainJoinUserPassword', 'value', parameters('domainJoinUserPassword'))), createArray()), if(not(empty(parameters('domainJoinUserPrincipalName'))), createArray(createObject('name', 'DomainJoinUserPrincipalName', 'value', parameters('domainJoinUserPrincipalName'))), createArray()), if(not(empty(parameters('virtualMachineAdminPassword'))), createArray(createObject('name', 'VirtualMachineAdminPassword', 'value', parameters('virtualMachineAdminPassword'))), createArray()), if(not(empty(parameters('virtualMachineAdminUserName'))), createArray(createObject('name', 'VirtualMachineAdminUserName', 'value', parameters('virtualMachineAdminUserName'))), createArray()))]"
          },
          "resources": [
            {
              "condition": "[and(parameters('deploySecretsKeyVault'), not(empty(variables('secretList'))))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('Secrets_KeyVault_{0}', parameters('timeStamp'))]",
              "resourceGroup": "[parameters('resourceGroupManagement')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[parameters('secretsKeyVaultName')]"
                  },
                  "diagnosticWorkspaceId": "[if(parameters('enableMonitoring'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('LogAnalytics_{0}', parameters('timeStamp'))), '2022-09-01').outputs.resourceId.value), createObject('value', ''))]",
                  "enablePurgeProtection": {
                    "value": "[parameters('keyVaultEnablePurgeProtection')]"
                  },
                  "enableSoftDelete": {
                    "value": "[parameters('keyVaultEnableSoftDelete')]"
                  },
                  "softDeleteRetentionInDays": {
                    "value": "[parameters('keyVaultRetentionInDays')]"
                  },
                  "enableVaultForDeployment": {
                    "value": false
                  },
                  "enableVaultForDiskEncryption": {
                    "value": false
                  },
                  "enableVaultForTemplateDeployment": {
                    "value": true
                  },
                  "privateEndpoints": "[if(and(parameters('privateEndpoint'), not(empty(parameters('privateEndpointSubnetResourceId')))), createObject('value', createArray(createObject('customNetworkInterfaceName', replace(replace(replace(parameters('privateEndpointNICNameConv'), 'SUBRESOURCE', 'vault'), 'RESOURCE', parameters('secretsKeyVaultName')), 'VNETID', format('{0}', split(parameters('privateEndpointSubnetResourceId'), '/')[8])), 'name', replace(replace(replace(parameters('privateEndpointNameConv'), 'SUBRESOURCE', 'vault'), 'RESOURCE', parameters('secretsKeyVaultName')), 'VNETID', format('{0}', split(parameters('privateEndpointSubnetResourceId'), '/')[8])), 'privateDnsZoneGroup', if(empty(parameters('azureKeyVaultPrivateDnsZoneResourceId')), null(), createObject('privateDNSResourceIds', createArray(parameters('azureKeyVaultPrivateDnsZoneResourceId')))), 'service', 'vault', 'subnetResourceId', parameters('privateEndpointSubnetResourceId'), 'tags', coalesce(tryGet(parameters('tags'), 'Microsoft.Network/privateEndpoints'), createObject())))), createObject('value', null()))]",
                  "secrets": {
                    "value": {
                      "secureList": "[variables('secretList')]"
                    }
                  },
                  "tags": {
                    "value": "[coalesce(tryGet(parameters('tags'), 'Microsoft.KeyVault/vaults'), createObject())]"
                  },
                  "vaultSku": {
                    "value": "standard"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.36.1.42791",
                      "templateHash": "17558858841376386572"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "maxLength": 24,
                      "metadata": {
                        "description": "Required. Name of the Key Vault. Must be globally unique."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all resources."
                      }
                    },
                    "secrets": {
                      "type": "secureObject",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. All secrets to create."
                      }
                    },
                    "keys": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. All keys to create."
                      }
                    },
                    "enableVaultForDeployment": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Specifies if the vault is enabled for deployment by script or compute."
                      }
                    },
                    "enableVaultForTemplateDeployment": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Specifies if the vault is enabled for a template deployment."
                      }
                    },
                    "enableVaultForDiskEncryption": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Specifies if the azure platform has access to the vault for enabling disk encryption scenarios."
                      }
                    },
                    "enableSoftDelete": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Required. Switch to enable/disable Key Vault's soft delete feature."
                      }
                    },
                    "softDeleteRetentionInDays": {
                      "type": "int",
                      "defaultValue": 0,
                      "metadata": {
                        "description": "Optional. softDelete data retention days. It accepts >=7 and <=90."
                      }
                    },
                    "enableRbacAuthorization": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Property that controls how data actions are authorized. When true, the key vault will use Role Based Access Control (RBAC) for authorization of data actions, and the access policies specified in vault properties will be ignored. When false, the key vault will use the access policies specified in vault properties, and any policy stored on Azure Resource Manager will be ignored. Note that management actions are always authorized with RBAC."
                      }
                    },
                    "createMode": {
                      "type": "string",
                      "defaultValue": "default",
                      "metadata": {
                        "description": "Optional. The vault's create mode to indicate whether the vault need to be recovered or not. - recover or default."
                      }
                    },
                    "enablePurgeProtection": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Provide 'true' to enable Key Vault's purge protection feature."
                      }
                    },
                    "vaultSku": {
                      "type": "string",
                      "defaultValue": "premium",
                      "allowedValues": [
                        "premium",
                        "standard"
                      ],
                      "metadata": {
                        "description": "Optional. Specifies the SKU for the vault."
                      }
                    },
                    "networkAcls": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Service endpoint object information. For security reasons, it is recommended to set the DefaultAction Deny."
                      }
                    },
                    "publicNetworkAccess": {
                      "type": "string",
                      "defaultValue": "",
                      "allowedValues": [
                        "",
                        "Enabled",
                        "Disabled"
                      ],
                      "metadata": {
                        "description": "Optional. Whether or not public network access is allowed for this resource. For security reasons it should be disabled. If not specified, it will be disabled by default if private endpoints are set and networkAcls are not set."
                      }
                    },
                    "diagnosticStorageAccountId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                      }
                    },
                    "diagnosticWorkspaceId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                      }
                    },
                    "diagnosticEventHubAuthorizationRuleId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                      }
                    },
                    "diagnosticEventHubName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                      }
                    },
                    "privateEndpoints": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Configuration details for private endpoints. For security reasons, it is recommended to use private endpoints whenever possible."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Resource tags."
                      }
                    },
                    "diagnosticLogCategoriesToEnable": {
                      "type": "array",
                      "defaultValue": [
                        "allLogs"
                      ],
                      "allowedValues": [
                        "",
                        "allLogs",
                        "AuditEvent",
                        "AzurePolicyEvaluationDetails"
                      ],
                      "metadata": {
                        "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to '' to disable log collection."
                      }
                    },
                    "diagnosticMetricsToEnable": {
                      "type": "array",
                      "defaultValue": [
                        "AllMetrics"
                      ],
                      "allowedValues": [
                        "AllMetrics"
                      ],
                      "metadata": {
                        "description": "Optional. The name of metrics that will be streamed."
                      }
                    },
                    "diagnosticSettingsName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The name of the diagnostic setting, if deployed. If left empty, it defaults to \"<resourceName>-diagnosticSettings\"."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "diagnosticsLogsSpecified",
                        "count": "[length(filter(parameters('diagnosticLogCategoriesToEnable'), lambda('item', and(not(equals(lambdaVariables('item'), 'allLogs')), not(equals(lambdaVariables('item'), ''))))))]",
                        "input": {
                          "category": "[filter(parameters('diagnosticLogCategoriesToEnable'), lambda('item', and(not(equals(lambdaVariables('item'), 'allLogs')), not(equals(lambdaVariables('item'), '')))))[copyIndex('diagnosticsLogsSpecified')]]",
                          "enabled": true
                        }
                      },
                      {
                        "name": "diagnosticsMetrics",
                        "count": "[length(parameters('diagnosticMetricsToEnable'))]",
                        "input": {
                          "category": "[parameters('diagnosticMetricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                          "timeGrain": null,
                          "enabled": true
                        }
                      }
                    ],
                    "diagnosticsLogs": "[if(contains(parameters('diagnosticLogCategoriesToEnable'), 'allLogs'), createArray(createObject('categoryGroup', 'allLogs', 'enabled', true())), if(contains(parameters('diagnosticLogCategoriesToEnable'), ''), createArray(), variables('diagnosticsLogsSpecified')))]",
                    "secretList": "[if(not(empty(parameters('secrets'))), parameters('secrets').secureList, createArray())]",
                    "varPublicNetworkAccess": "[if(not(empty(parameters('publicNetworkAccess'))), parameters('publicNetworkAccess'), if(and(not(empty(parameters('privateEndpoints'))), empty(parameters('networkAcls'))), 'Disabled', null()))]",
                    "bypass": "[if(or(or(or(parameters('enableVaultForDeployment'), parameters('enableVaultForTemplateDeployment')), parameters('enableVaultForDiskEncryption')), equals(variables('varPublicNetworkAccess'), 'Disabled')), 'AzureServices', 'None')]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.KeyVault/vaults",
                      "apiVersion": "2022-07-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "enabledForDeployment": "[parameters('enableVaultForDeployment')]",
                        "enabledForTemplateDeployment": "[parameters('enableVaultForTemplateDeployment')]",
                        "enabledForDiskEncryption": "[parameters('enableVaultForDiskEncryption')]",
                        "enableSoftDelete": "[if(parameters('enableSoftDelete'), parameters('enableSoftDelete'), null())]",
                        "softDeleteRetentionInDays": "[if(parameters('enableSoftDelete'), parameters('softDeleteRetentionInDays'), null())]",
                        "enableRbacAuthorization": "[parameters('enableRbacAuthorization')]",
                        "createMode": "[parameters('createMode')]",
                        "enablePurgeProtection": "[if(parameters('enablePurgeProtection'), parameters('enablePurgeProtection'), null())]",
                        "tenantId": "[subscription().tenantId]",
                        "sku": {
                          "name": "[parameters('vaultSku')]",
                          "family": "A"
                        },
                        "networkAcls": "[if(not(empty(parameters('networkAcls'))), createObject('bypass', coalesce(tryGet(parameters('networkAcls'), 'bypass'), null()), 'defaultAction', coalesce(tryGet(parameters('networkAcls'), 'defaultAction'), null()), 'virtualNetworkRules', coalesce(tryGet(parameters('networkAcls'), 'virtualNetworkRules'), createArray()), 'ipRules', coalesce(tryGet(parameters('networkAcls'), 'ipRules'), createArray())), createObject('bypass', variables('bypass'), 'defaultAction', 'Deny'))]",
                        "publicNetworkAccess": "[variables('varPublicNetworkAccess')]"
                      }
                    },
                    {
                      "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('diagnosticWorkspaceId')))), not(empty(parameters('diagnosticEventHubAuthorizationRuleId')))), not(empty(parameters('diagnosticEventHubName'))))]",
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.KeyVault/vaults/{0}', parameters('name'))]",
                      "name": "[if(not(empty(parameters('diagnosticSettingsName'))), parameters('diagnosticSettingsName'), format('{0}-diagnosticSettings', parameters('name')))]",
                      "properties": {
                        "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                        "workspaceId": "[if(not(empty(parameters('diagnosticWorkspaceId'))), parameters('diagnosticWorkspaceId'), null())]",
                        "eventHubAuthorizationRuleId": "[if(not(empty(parameters('diagnosticEventHubAuthorizationRuleId'))), parameters('diagnosticEventHubAuthorizationRuleId'), null())]",
                        "eventHubName": "[if(not(empty(parameters('diagnosticEventHubName'))), parameters('diagnosticEventHubName'), null())]",
                        "metrics": "[variables('diagnosticsMetrics')]",
                        "logs": "[variables('diagnosticsLogs')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults', parameters('name'))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "keyVault_secrets",
                        "count": "[length(variables('secretList'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('KeyVault-Secret-{0}-{1}', copyIndex(), uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[variables('secretList')[copyIndex()].name]"
                          },
                          "value": {
                            "value": "[variables('secretList')[copyIndex()].value]"
                          },
                          "keyVaultName": {
                            "value": "[parameters('name')]"
                          },
                          "attributesEnabled": {
                            "value": "[coalesce(tryGet(variables('secretList')[copyIndex()], 'attributesEnabled'), true())]"
                          },
                          "attributesExp": {
                            "value": "[coalesce(tryGet(variables('secretList')[copyIndex()], 'attributesExp'), -1)]"
                          },
                          "attributesNbf": {
                            "value": "[coalesce(tryGet(variables('secretList')[copyIndex()], 'attributesNbf'), -1)]"
                          },
                          "contentType": {
                            "value": "[coalesce(tryGet(variables('secretList')[copyIndex()], 'contentType'), '')]"
                          },
                          "tags": {
                            "value": "[coalesce(tryGet(variables('secretList')[copyIndex()], 'tags'), createObject())]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.36.1.42791",
                              "templateHash": "4501297762340503157"
                            }
                          },
                          "parameters": {
                            "keyVaultName": {
                              "type": "string"
                            },
                            "name": {
                              "type": "string"
                            },
                            "tags": {
                              "type": "object",
                              "defaultValue": {}
                            },
                            "attributesEnabled": {
                              "type": "bool",
                              "defaultValue": true
                            },
                            "attributesExp": {
                              "type": "int",
                              "defaultValue": -1
                            },
                            "attributesNbf": {
                              "type": "int",
                              "defaultValue": -1
                            },
                            "contentType": {
                              "type": "securestring",
                              "defaultValue": ""
                            },
                            "value": {
                              "type": "securestring"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.KeyVault/vaults/secrets",
                              "apiVersion": "2022-07-01",
                              "name": "[format('{0}/{1}', parameters('keyVaultName'), parameters('name'))]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "contentType": "[parameters('contentType')]",
                                "attributes": {
                                  "enabled": "[parameters('attributesEnabled')]",
                                  "exp": "[if(not(equals(parameters('attributesExp'), -1)), parameters('attributesExp'), null())]",
                                  "nbf": "[if(not(equals(parameters('attributesNbf'), -1)), parameters('attributesNbf'), null())]"
                                },
                                "value": "[parameters('value')]"
                              }
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.KeyVault/vaults/secrets', parameters('keyVaultName'), parameters('name'))]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults', parameters('name'))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "keyVault_keys",
                        "count": "[length(parameters('keys'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('KeyVault-Key-{0}-{1}', copyIndex(), uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[parameters('keys')[copyIndex()].name]"
                          },
                          "keyVaultName": {
                            "value": "[parameters('name')]"
                          },
                          "attributesEnabled": {
                            "value": "[coalesce(tryGet(parameters('keys')[copyIndex()], 'attributesEnabled'), true())]"
                          },
                          "attributesExp": {
                            "value": "[coalesce(tryGet(parameters('keys')[copyIndex()], 'attributesExp'), -1)]"
                          },
                          "attributesExportable": {
                            "value": "[coalesce(tryGet(parameters('keys')[copyIndex()], 'attributesExportable'), false())]"
                          },
                          "attributesNbf": {
                            "value": "[coalesce(tryGet(parameters('keys')[copyIndex()], 'attributesNbf'), -1)]"
                          },
                          "curveName": {
                            "value": "[coalesce(tryGet(parameters('keys')[copyIndex()], 'curveName'), 'P-256')]"
                          },
                          "keyOps": {
                            "value": "[coalesce(tryGet(parameters('keys')[copyIndex()], 'keyOps'), createArray())]"
                          },
                          "keySize": {
                            "value": "[coalesce(tryGet(parameters('keys')[copyIndex()], 'keySize'), -1)]"
                          },
                          "kty": {
                            "value": "[coalesce(tryGet(parameters('keys')[copyIndex()], 'kty'), 'EC')]"
                          },
                          "tags": {
                            "value": "[coalesce(tryGet(parameters('keys')[copyIndex()], 'tags'), createObject())]"
                          },
                          "rotationPolicy": {
                            "value": "[coalesce(tryGet(parameters('keys')[copyIndex()], 'rotationPolicy'), createObject())]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.36.1.42791",
                              "templateHash": "1654904861852809717"
                            }
                          },
                          "parameters": {
                            "keyVaultName": {
                              "type": "string"
                            },
                            "name": {
                              "type": "string"
                            },
                            "tags": {
                              "type": "object",
                              "defaultValue": {}
                            },
                            "attributesEnabled": {
                              "type": "bool",
                              "defaultValue": true
                            },
                            "attributesExp": {
                              "type": "int",
                              "defaultValue": -1
                            },
                            "attributesNbf": {
                              "type": "int",
                              "defaultValue": -1
                            },
                            "curveName": {
                              "type": "string",
                              "defaultValue": "P-256"
                            },
                            "attributesExportable": {
                              "type": "bool",
                              "defaultValue": false
                            },
                            "keyOps": {
                              "type": "array",
                              "defaultValue": []
                            },
                            "keySize": {
                              "type": "int",
                              "defaultValue": -1
                            },
                            "kty": {
                              "type": "string",
                              "defaultValue": "EC"
                            },
                            "release_policy": {
                              "type": "object",
                              "defaultValue": {}
                            },
                            "rotationPolicy": {
                              "type": "object",
                              "defaultValue": {}
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.KeyVault/vaults/keys",
                              "apiVersion": "2022-07-01",
                              "name": "[format('{0}/{1}', parameters('keyVaultName'), parameters('name'))]",
                              "tags": "[if(empty(parameters('tags')), null(), parameters('tags'))]",
                              "properties": {
                                "attributes": {
                                  "enabled": "[parameters('attributesEnabled')]",
                                  "exportable": "[parameters('attributesExportable')]",
                                  "exp": "[if(not(equals(parameters('attributesExp'), -1)), parameters('attributesExp'), null())]",
                                  "nbf": "[if(not(equals(parameters('attributesNbf'), -1)), parameters('attributesNbf'), null())]"
                                },
                                "curveName": "[parameters('curveName')]",
                                "keyOps": "[parameters('keyOps')]",
                                "keySize": "[if(not(equals(parameters('keySize'), -1)), parameters('keySize'), null())]",
                                "kty": "[parameters('kty')]",
                                "release_policy": "[if(empty(parameters('release_policy')), null(), parameters('release_policy'))]",
                                "rotationPolicy": "[if(empty(parameters('rotationPolicy')), null(), parameters('rotationPolicy'))]"
                              }
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.KeyVault/vaults/keys', parameters('keyVaultName'), parameters('name'))]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults', parameters('name'))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "keyVault_privateEndpoints",
                        "count": "[length(parameters('privateEndpoints'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('KeyVault-PrivateEndpoint-{0}-{1}', copyIndex(), uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "groupIds": {
                            "value": [
                              "[parameters('privateEndpoints')[copyIndex()].service]"
                            ]
                          },
                          "name": {
                            "value": "[coalesce(tryGet(parameters('privateEndpoints')[copyIndex()], 'name'), format('pe-{0}-{1}-{2}', last(split(resourceId('Microsoft.KeyVault/vaults', parameters('name')), '/')), parameters('privateEndpoints')[copyIndex()].service, copyIndex()))]"
                          },
                          "serviceResourceId": {
                            "value": "[resourceId('Microsoft.KeyVault/vaults', parameters('name'))]"
                          },
                          "subnetResourceId": {
                            "value": "[parameters('privateEndpoints')[copyIndex()].subnetResourceId]"
                          },
                          "location": {
                            "value": "[coalesce(tryGet(parameters('privateEndpoints')[copyIndex()], 'location'), reference(split(parameters('privateEndpoints')[copyIndex()].subnetResourceId, '/subnets/')[0], '2020-06-01', 'Full').location)]"
                          },
                          "privateDnsZoneGroup": {
                            "value": "[coalesce(tryGet(parameters('privateEndpoints')[copyIndex()], 'privateDnsZoneGroup'), createObject())]"
                          },
                          "tags": {
                            "value": "[coalesce(tryGet(parameters('privateEndpoints')[copyIndex()], 'tags'), createObject())]"
                          },
                          "manualPrivateLinkServiceConnections": {
                            "value": "[coalesce(tryGet(parameters('privateEndpoints')[copyIndex()], 'manualPrivateLinkServiceConnections'), createArray())]"
                          },
                          "customDnsConfigs": {
                            "value": "[coalesce(tryGet(parameters('privateEndpoints')[copyIndex()], 'customDnsConfigs'), createArray())]"
                          },
                          "ipConfigurations": {
                            "value": "[coalesce(tryGet(parameters('privateEndpoints')[copyIndex()], 'ipConfigurations'), createArray())]"
                          },
                          "applicationSecurityGroups": {
                            "value": "[coalesce(tryGet(parameters('privateEndpoints')[copyIndex()], 'applicationSecurityGroups'), createArray())]"
                          },
                          "customNetworkInterfaceName": {
                            "value": "[coalesce(tryGet(parameters('privateEndpoints')[copyIndex()], 'customNetworkInterfaceName'), '')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.36.1.42791",
                              "templateHash": "5820984105601907039"
                            },
                            "name": "Private Endpoints"
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the private endpoint resource to create."
                              }
                            },
                            "subnetResourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
                              }
                            },
                            "serviceResourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Resource ID of the resource that needs to be connected to the network."
                              }
                            },
                            "applicationSecurityGroups": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Application security groups in which the private endpoint IP configuration is included."
                              }
                            },
                            "customNetworkInterfaceName": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The custom name of the network interface attached to the private endpoint."
                              }
                            },
                            "ipConfigurations": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. A list of IP configurations of the private endpoint. This will be used to map to the First Party Service endpoints."
                              }
                            },
                            "groupIds": {
                              "type": "array",
                              "metadata": {
                                "description": "Required. Subtype(s) of the connection to be created. The allowed values depend on the type serviceResourceId refers to."
                              }
                            },
                            "privateDnsZoneGroup": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. The private DNS zone group configuration used to associate the private endpoint with one or multiple private DNS zones. A DNS zone group can support up to 5 DNS zones."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. Location for all Resources."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Tags to be applied on all resources/resource groups in this deployment."
                              }
                            },
                            "customDnsConfigs": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Custom DNS configurations."
                              }
                            },
                            "manualPrivateLinkServiceConnections": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Manual PrivateLink Service Connections."
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/privateEndpoints",
                              "apiVersion": "2023-04-01",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "applicationSecurityGroups": "[parameters('applicationSecurityGroups')]",
                                "customDnsConfigs": "[parameters('customDnsConfigs')]",
                                "customNetworkInterfaceName": "[parameters('customNetworkInterfaceName')]",
                                "ipConfigurations": "[parameters('ipConfigurations')]",
                                "manualPrivateLinkServiceConnections": "[parameters('manualPrivateLinkServiceConnections')]",
                                "privateLinkServiceConnections": [
                                  {
                                    "name": "[parameters('name')]",
                                    "properties": {
                                      "privateLinkServiceId": "[parameters('serviceResourceId')]",
                                      "groupIds": "[parameters('groupIds')]"
                                    }
                                  }
                                ],
                                "subnet": {
                                  "id": "[parameters('subnetResourceId')]"
                                }
                              }
                            },
                            {
                              "condition": "[not(empty(parameters('privateDnsZoneGroup')))]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('PE-PrivateDnsZoneGroup-{0}', uniqueString(deployment().name))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "privateDNSResourceIds": {
                                    "value": "[parameters('privateDnsZoneGroup').privateDNSResourceIds]"
                                  },
                                  "privateEndpointName": {
                                    "value": "[parameters('name')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.36.1.42791",
                                      "templateHash": "7513849818521025348"
                                    }
                                  },
                                  "parameters": {
                                    "privateEndpointName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent private endpoint. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "privateDNSResourceIds": {
                                      "type": "array",
                                      "minLength": 1,
                                      "maxLength": 5,
                                      "metadata": {
                                        "description": "Required. Array of private DNS zone resource IDs. A DNS zone group can support up to 5 DNS zones."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "defaultValue": "default",
                                      "metadata": {
                                        "description": "Optional. The name of the private DNS zone group."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "copy": [
                                      {
                                        "name": "privateDnsZoneConfigs",
                                        "count": "[length(parameters('privateDNSResourceIds'))]",
                                        "input": {
                                          "name": "[last(split(parameters('privateDNSResourceIds')[copyIndex('privateDnsZoneConfigs')], '/'))]",
                                          "properties": {
                                            "privateDnsZoneId": "[parameters('privateDNSResourceIds')[copyIndex('privateDnsZoneConfigs')]]"
                                          }
                                        }
                                      }
                                    ]
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                                      "apiVersion": "2023-04-01",
                                      "name": "[format('{0}/{1}', parameters('privateEndpointName'), parameters('name'))]",
                                      "properties": {
                                        "privateDnsZoneConfigs": "[variables('privateDnsZoneConfigs')]"
                                      }
                                    }
                                  ],
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the private endpoint DNS zone group."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the private endpoint DNS zone group."
                                      },
                                      "value": "[resourceId('Microsoft.Network/privateEndpoints/privateDnsZoneGroups', parameters('privateEndpointName'), parameters('name'))]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group the private endpoint was deployed into."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the private endpoint."
                              },
                              "value": "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the private endpoint."
                              },
                              "value": "[parameters('name')]"
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "The location the resource was deployed into."
                              },
                              "value": "[reference(resourceId('Microsoft.Network/privateEndpoints', parameters('name')), '2023-04-01', 'full').location]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults', parameters('name'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the key vault."
                      },
                      "value": "[resourceId('Microsoft.KeyVault/vaults', parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the resource group the key vault was created in."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the key vault."
                      },
                      "value": "[parameters('name')]"
                    },
                    "uri": {
                      "type": "string",
                      "metadata": {
                        "description": "The URI of the key vault."
                      },
                      "value": "[reference(resourceId('Microsoft.KeyVault/vaults', parameters('name')), '2022-07-01').vaultUri]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference(resourceId('Microsoft.KeyVault/vaults', parameters('name')), '2022-07-01', 'full').location]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('LogAnalytics_{0}', parameters('timeStamp')))]"
              ]
            },
            {
              "condition": "[parameters('deployEncryptionKeysKeyVault')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('Encryption_Keys_KeyVault_{0}', parameters('timeStamp'))]",
              "resourceGroup": "[parameters('resourceGroupManagement')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[parameters('encryptionKeysKeyVaultName')]"
                  },
                  "diagnosticWorkspaceId": "[if(parameters('enableMonitoring'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('LogAnalytics_{0}', parameters('timeStamp'))), '2022-09-01').outputs.resourceId.value), createObject('value', ''))]",
                  "enablePurgeProtection": {
                    "value": true
                  },
                  "enableSoftDelete": {
                    "value": true
                  },
                  "softDeleteRetentionInDays": {
                    "value": "[parameters('keyVaultRetentionInDays')]"
                  },
                  "enableVaultForDeployment": {
                    "value": false
                  },
                  "enableVaultForDiskEncryption": {
                    "value": true
                  },
                  "enableVaultForTemplateDeployment": {
                    "value": false
                  },
                  "privateEndpoints": "[if(and(parameters('privateEndpoint'), not(empty(parameters('privateEndpointSubnetResourceId')))), createObject('value', createArray(createObject('customNetworkInterfaceName', replace(replace(replace(parameters('privateEndpointNICNameConv'), 'SUBRESOURCE', 'vault'), 'RESOURCE', parameters('encryptionKeysKeyVaultName')), 'VNETID', format('{0}', split(parameters('privateEndpointSubnetResourceId'), '/')[8])), 'name', replace(replace(replace(parameters('privateEndpointNameConv'), 'SUBRESOURCE', 'vault'), 'RESOURCE', parameters('encryptionKeysKeyVaultName')), 'VNETID', format('{0}', split(parameters('privateEndpointSubnetResourceId'), '/')[8])), 'privateDnsZoneGroup', if(empty(parameters('azureKeyVaultPrivateDnsZoneResourceId')), null(), createObject('privateDNSResourceIds', createArray(parameters('azureKeyVaultPrivateDnsZoneResourceId')))), 'service', 'vault', 'subnetResourceId', parameters('privateEndpointSubnetResourceId'), 'tags', coalesce(tryGet(parameters('tags'), 'Microsoft.Network/privateEndpoints'), createObject())))), createObject('value', null()))]",
                  "tags": {
                    "value": "[coalesce(tryGet(parameters('tags'), 'Microsoft.KeyVault/vaults'), createObject())]"
                  },
                  "vaultSku": {
                    "value": "premium"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.36.1.42791",
                      "templateHash": "17558858841376386572"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "maxLength": 24,
                      "metadata": {
                        "description": "Required. Name of the Key Vault. Must be globally unique."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all resources."
                      }
                    },
                    "secrets": {
                      "type": "secureObject",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. All secrets to create."
                      }
                    },
                    "keys": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. All keys to create."
                      }
                    },
                    "enableVaultForDeployment": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Specifies if the vault is enabled for deployment by script or compute."
                      }
                    },
                    "enableVaultForTemplateDeployment": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Specifies if the vault is enabled for a template deployment."
                      }
                    },
                    "enableVaultForDiskEncryption": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Specifies if the azure platform has access to the vault for enabling disk encryption scenarios."
                      }
                    },
                    "enableSoftDelete": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Required. Switch to enable/disable Key Vault's soft delete feature."
                      }
                    },
                    "softDeleteRetentionInDays": {
                      "type": "int",
                      "defaultValue": 0,
                      "metadata": {
                        "description": "Optional. softDelete data retention days. It accepts >=7 and <=90."
                      }
                    },
                    "enableRbacAuthorization": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Property that controls how data actions are authorized. When true, the key vault will use Role Based Access Control (RBAC) for authorization of data actions, and the access policies specified in vault properties will be ignored. When false, the key vault will use the access policies specified in vault properties, and any policy stored on Azure Resource Manager will be ignored. Note that management actions are always authorized with RBAC."
                      }
                    },
                    "createMode": {
                      "type": "string",
                      "defaultValue": "default",
                      "metadata": {
                        "description": "Optional. The vault's create mode to indicate whether the vault need to be recovered or not. - recover or default."
                      }
                    },
                    "enablePurgeProtection": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Provide 'true' to enable Key Vault's purge protection feature."
                      }
                    },
                    "vaultSku": {
                      "type": "string",
                      "defaultValue": "premium",
                      "allowedValues": [
                        "premium",
                        "standard"
                      ],
                      "metadata": {
                        "description": "Optional. Specifies the SKU for the vault."
                      }
                    },
                    "networkAcls": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Service endpoint object information. For security reasons, it is recommended to set the DefaultAction Deny."
                      }
                    },
                    "publicNetworkAccess": {
                      "type": "string",
                      "defaultValue": "",
                      "allowedValues": [
                        "",
                        "Enabled",
                        "Disabled"
                      ],
                      "metadata": {
                        "description": "Optional. Whether or not public network access is allowed for this resource. For security reasons it should be disabled. If not specified, it will be disabled by default if private endpoints are set and networkAcls are not set."
                      }
                    },
                    "diagnosticStorageAccountId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                      }
                    },
                    "diagnosticWorkspaceId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                      }
                    },
                    "diagnosticEventHubAuthorizationRuleId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                      }
                    },
                    "diagnosticEventHubName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                      }
                    },
                    "privateEndpoints": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Configuration details for private endpoints. For security reasons, it is recommended to use private endpoints whenever possible."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Resource tags."
                      }
                    },
                    "diagnosticLogCategoriesToEnable": {
                      "type": "array",
                      "defaultValue": [
                        "allLogs"
                      ],
                      "allowedValues": [
                        "",
                        "allLogs",
                        "AuditEvent",
                        "AzurePolicyEvaluationDetails"
                      ],
                      "metadata": {
                        "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to '' to disable log collection."
                      }
                    },
                    "diagnosticMetricsToEnable": {
                      "type": "array",
                      "defaultValue": [
                        "AllMetrics"
                      ],
                      "allowedValues": [
                        "AllMetrics"
                      ],
                      "metadata": {
                        "description": "Optional. The name of metrics that will be streamed."
                      }
                    },
                    "diagnosticSettingsName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The name of the diagnostic setting, if deployed. If left empty, it defaults to \"<resourceName>-diagnosticSettings\"."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "diagnosticsLogsSpecified",
                        "count": "[length(filter(parameters('diagnosticLogCategoriesToEnable'), lambda('item', and(not(equals(lambdaVariables('item'), 'allLogs')), not(equals(lambdaVariables('item'), ''))))))]",
                        "input": {
                          "category": "[filter(parameters('diagnosticLogCategoriesToEnable'), lambda('item', and(not(equals(lambdaVariables('item'), 'allLogs')), not(equals(lambdaVariables('item'), '')))))[copyIndex('diagnosticsLogsSpecified')]]",
                          "enabled": true
                        }
                      },
                      {
                        "name": "diagnosticsMetrics",
                        "count": "[length(parameters('diagnosticMetricsToEnable'))]",
                        "input": {
                          "category": "[parameters('diagnosticMetricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                          "timeGrain": null,
                          "enabled": true
                        }
                      }
                    ],
                    "diagnosticsLogs": "[if(contains(parameters('diagnosticLogCategoriesToEnable'), 'allLogs'), createArray(createObject('categoryGroup', 'allLogs', 'enabled', true())), if(contains(parameters('diagnosticLogCategoriesToEnable'), ''), createArray(), variables('diagnosticsLogsSpecified')))]",
                    "secretList": "[if(not(empty(parameters('secrets'))), parameters('secrets').secureList, createArray())]",
                    "varPublicNetworkAccess": "[if(not(empty(parameters('publicNetworkAccess'))), parameters('publicNetworkAccess'), if(and(not(empty(parameters('privateEndpoints'))), empty(parameters('networkAcls'))), 'Disabled', null()))]",
                    "bypass": "[if(or(or(or(parameters('enableVaultForDeployment'), parameters('enableVaultForTemplateDeployment')), parameters('enableVaultForDiskEncryption')), equals(variables('varPublicNetworkAccess'), 'Disabled')), 'AzureServices', 'None')]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.KeyVault/vaults",
                      "apiVersion": "2022-07-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "enabledForDeployment": "[parameters('enableVaultForDeployment')]",
                        "enabledForTemplateDeployment": "[parameters('enableVaultForTemplateDeployment')]",
                        "enabledForDiskEncryption": "[parameters('enableVaultForDiskEncryption')]",
                        "enableSoftDelete": "[if(parameters('enableSoftDelete'), parameters('enableSoftDelete'), null())]",
                        "softDeleteRetentionInDays": "[if(parameters('enableSoftDelete'), parameters('softDeleteRetentionInDays'), null())]",
                        "enableRbacAuthorization": "[parameters('enableRbacAuthorization')]",
                        "createMode": "[parameters('createMode')]",
                        "enablePurgeProtection": "[if(parameters('enablePurgeProtection'), parameters('enablePurgeProtection'), null())]",
                        "tenantId": "[subscription().tenantId]",
                        "sku": {
                          "name": "[parameters('vaultSku')]",
                          "family": "A"
                        },
                        "networkAcls": "[if(not(empty(parameters('networkAcls'))), createObject('bypass', coalesce(tryGet(parameters('networkAcls'), 'bypass'), null()), 'defaultAction', coalesce(tryGet(parameters('networkAcls'), 'defaultAction'), null()), 'virtualNetworkRules', coalesce(tryGet(parameters('networkAcls'), 'virtualNetworkRules'), createArray()), 'ipRules', coalesce(tryGet(parameters('networkAcls'), 'ipRules'), createArray())), createObject('bypass', variables('bypass'), 'defaultAction', 'Deny'))]",
                        "publicNetworkAccess": "[variables('varPublicNetworkAccess')]"
                      }
                    },
                    {
                      "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('diagnosticWorkspaceId')))), not(empty(parameters('diagnosticEventHubAuthorizationRuleId')))), not(empty(parameters('diagnosticEventHubName'))))]",
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.KeyVault/vaults/{0}', parameters('name'))]",
                      "name": "[if(not(empty(parameters('diagnosticSettingsName'))), parameters('diagnosticSettingsName'), format('{0}-diagnosticSettings', parameters('name')))]",
                      "properties": {
                        "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                        "workspaceId": "[if(not(empty(parameters('diagnosticWorkspaceId'))), parameters('diagnosticWorkspaceId'), null())]",
                        "eventHubAuthorizationRuleId": "[if(not(empty(parameters('diagnosticEventHubAuthorizationRuleId'))), parameters('diagnosticEventHubAuthorizationRuleId'), null())]",
                        "eventHubName": "[if(not(empty(parameters('diagnosticEventHubName'))), parameters('diagnosticEventHubName'), null())]",
                        "metrics": "[variables('diagnosticsMetrics')]",
                        "logs": "[variables('diagnosticsLogs')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults', parameters('name'))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "keyVault_secrets",
                        "count": "[length(variables('secretList'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('KeyVault-Secret-{0}-{1}', copyIndex(), uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[variables('secretList')[copyIndex()].name]"
                          },
                          "value": {
                            "value": "[variables('secretList')[copyIndex()].value]"
                          },
                          "keyVaultName": {
                            "value": "[parameters('name')]"
                          },
                          "attributesEnabled": {
                            "value": "[coalesce(tryGet(variables('secretList')[copyIndex()], 'attributesEnabled'), true())]"
                          },
                          "attributesExp": {
                            "value": "[coalesce(tryGet(variables('secretList')[copyIndex()], 'attributesExp'), -1)]"
                          },
                          "attributesNbf": {
                            "value": "[coalesce(tryGet(variables('secretList')[copyIndex()], 'attributesNbf'), -1)]"
                          },
                          "contentType": {
                            "value": "[coalesce(tryGet(variables('secretList')[copyIndex()], 'contentType'), '')]"
                          },
                          "tags": {
                            "value": "[coalesce(tryGet(variables('secretList')[copyIndex()], 'tags'), createObject())]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.36.1.42791",
                              "templateHash": "4501297762340503157"
                            }
                          },
                          "parameters": {
                            "keyVaultName": {
                              "type": "string"
                            },
                            "name": {
                              "type": "string"
                            },
                            "tags": {
                              "type": "object",
                              "defaultValue": {}
                            },
                            "attributesEnabled": {
                              "type": "bool",
                              "defaultValue": true
                            },
                            "attributesExp": {
                              "type": "int",
                              "defaultValue": -1
                            },
                            "attributesNbf": {
                              "type": "int",
                              "defaultValue": -1
                            },
                            "contentType": {
                              "type": "securestring",
                              "defaultValue": ""
                            },
                            "value": {
                              "type": "securestring"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.KeyVault/vaults/secrets",
                              "apiVersion": "2022-07-01",
                              "name": "[format('{0}/{1}', parameters('keyVaultName'), parameters('name'))]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "contentType": "[parameters('contentType')]",
                                "attributes": {
                                  "enabled": "[parameters('attributesEnabled')]",
                                  "exp": "[if(not(equals(parameters('attributesExp'), -1)), parameters('attributesExp'), null())]",
                                  "nbf": "[if(not(equals(parameters('attributesNbf'), -1)), parameters('attributesNbf'), null())]"
                                },
                                "value": "[parameters('value')]"
                              }
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.KeyVault/vaults/secrets', parameters('keyVaultName'), parameters('name'))]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults', parameters('name'))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "keyVault_keys",
                        "count": "[length(parameters('keys'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('KeyVault-Key-{0}-{1}', copyIndex(), uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[parameters('keys')[copyIndex()].name]"
                          },
                          "keyVaultName": {
                            "value": "[parameters('name')]"
                          },
                          "attributesEnabled": {
                            "value": "[coalesce(tryGet(parameters('keys')[copyIndex()], 'attributesEnabled'), true())]"
                          },
                          "attributesExp": {
                            "value": "[coalesce(tryGet(parameters('keys')[copyIndex()], 'attributesExp'), -1)]"
                          },
                          "attributesExportable": {
                            "value": "[coalesce(tryGet(parameters('keys')[copyIndex()], 'attributesExportable'), false())]"
                          },
                          "attributesNbf": {
                            "value": "[coalesce(tryGet(parameters('keys')[copyIndex()], 'attributesNbf'), -1)]"
                          },
                          "curveName": {
                            "value": "[coalesce(tryGet(parameters('keys')[copyIndex()], 'curveName'), 'P-256')]"
                          },
                          "keyOps": {
                            "value": "[coalesce(tryGet(parameters('keys')[copyIndex()], 'keyOps'), createArray())]"
                          },
                          "keySize": {
                            "value": "[coalesce(tryGet(parameters('keys')[copyIndex()], 'keySize'), -1)]"
                          },
                          "kty": {
                            "value": "[coalesce(tryGet(parameters('keys')[copyIndex()], 'kty'), 'EC')]"
                          },
                          "tags": {
                            "value": "[coalesce(tryGet(parameters('keys')[copyIndex()], 'tags'), createObject())]"
                          },
                          "rotationPolicy": {
                            "value": "[coalesce(tryGet(parameters('keys')[copyIndex()], 'rotationPolicy'), createObject())]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.36.1.42791",
                              "templateHash": "1654904861852809717"
                            }
                          },
                          "parameters": {
                            "keyVaultName": {
                              "type": "string"
                            },
                            "name": {
                              "type": "string"
                            },
                            "tags": {
                              "type": "object",
                              "defaultValue": {}
                            },
                            "attributesEnabled": {
                              "type": "bool",
                              "defaultValue": true
                            },
                            "attributesExp": {
                              "type": "int",
                              "defaultValue": -1
                            },
                            "attributesNbf": {
                              "type": "int",
                              "defaultValue": -1
                            },
                            "curveName": {
                              "type": "string",
                              "defaultValue": "P-256"
                            },
                            "attributesExportable": {
                              "type": "bool",
                              "defaultValue": false
                            },
                            "keyOps": {
                              "type": "array",
                              "defaultValue": []
                            },
                            "keySize": {
                              "type": "int",
                              "defaultValue": -1
                            },
                            "kty": {
                              "type": "string",
                              "defaultValue": "EC"
                            },
                            "release_policy": {
                              "type": "object",
                              "defaultValue": {}
                            },
                            "rotationPolicy": {
                              "type": "object",
                              "defaultValue": {}
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.KeyVault/vaults/keys",
                              "apiVersion": "2022-07-01",
                              "name": "[format('{0}/{1}', parameters('keyVaultName'), parameters('name'))]",
                              "tags": "[if(empty(parameters('tags')), null(), parameters('tags'))]",
                              "properties": {
                                "attributes": {
                                  "enabled": "[parameters('attributesEnabled')]",
                                  "exportable": "[parameters('attributesExportable')]",
                                  "exp": "[if(not(equals(parameters('attributesExp'), -1)), parameters('attributesExp'), null())]",
                                  "nbf": "[if(not(equals(parameters('attributesNbf'), -1)), parameters('attributesNbf'), null())]"
                                },
                                "curveName": "[parameters('curveName')]",
                                "keyOps": "[parameters('keyOps')]",
                                "keySize": "[if(not(equals(parameters('keySize'), -1)), parameters('keySize'), null())]",
                                "kty": "[parameters('kty')]",
                                "release_policy": "[if(empty(parameters('release_policy')), null(), parameters('release_policy'))]",
                                "rotationPolicy": "[if(empty(parameters('rotationPolicy')), null(), parameters('rotationPolicy'))]"
                              }
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.KeyVault/vaults/keys', parameters('keyVaultName'), parameters('name'))]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults', parameters('name'))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "keyVault_privateEndpoints",
                        "count": "[length(parameters('privateEndpoints'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('KeyVault-PrivateEndpoint-{0}-{1}', copyIndex(), uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "groupIds": {
                            "value": [
                              "[parameters('privateEndpoints')[copyIndex()].service]"
                            ]
                          },
                          "name": {
                            "value": "[coalesce(tryGet(parameters('privateEndpoints')[copyIndex()], 'name'), format('pe-{0}-{1}-{2}', last(split(resourceId('Microsoft.KeyVault/vaults', parameters('name')), '/')), parameters('privateEndpoints')[copyIndex()].service, copyIndex()))]"
                          },
                          "serviceResourceId": {
                            "value": "[resourceId('Microsoft.KeyVault/vaults', parameters('name'))]"
                          },
                          "subnetResourceId": {
                            "value": "[parameters('privateEndpoints')[copyIndex()].subnetResourceId]"
                          },
                          "location": {
                            "value": "[coalesce(tryGet(parameters('privateEndpoints')[copyIndex()], 'location'), reference(split(parameters('privateEndpoints')[copyIndex()].subnetResourceId, '/subnets/')[0], '2020-06-01', 'Full').location)]"
                          },
                          "privateDnsZoneGroup": {
                            "value": "[coalesce(tryGet(parameters('privateEndpoints')[copyIndex()], 'privateDnsZoneGroup'), createObject())]"
                          },
                          "tags": {
                            "value": "[coalesce(tryGet(parameters('privateEndpoints')[copyIndex()], 'tags'), createObject())]"
                          },
                          "manualPrivateLinkServiceConnections": {
                            "value": "[coalesce(tryGet(parameters('privateEndpoints')[copyIndex()], 'manualPrivateLinkServiceConnections'), createArray())]"
                          },
                          "customDnsConfigs": {
                            "value": "[coalesce(tryGet(parameters('privateEndpoints')[copyIndex()], 'customDnsConfigs'), createArray())]"
                          },
                          "ipConfigurations": {
                            "value": "[coalesce(tryGet(parameters('privateEndpoints')[copyIndex()], 'ipConfigurations'), createArray())]"
                          },
                          "applicationSecurityGroups": {
                            "value": "[coalesce(tryGet(parameters('privateEndpoints')[copyIndex()], 'applicationSecurityGroups'), createArray())]"
                          },
                          "customNetworkInterfaceName": {
                            "value": "[coalesce(tryGet(parameters('privateEndpoints')[copyIndex()], 'customNetworkInterfaceName'), '')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.36.1.42791",
                              "templateHash": "5820984105601907039"
                            },
                            "name": "Private Endpoints"
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the private endpoint resource to create."
                              }
                            },
                            "subnetResourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
                              }
                            },
                            "serviceResourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Resource ID of the resource that needs to be connected to the network."
                              }
                            },
                            "applicationSecurityGroups": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Application security groups in which the private endpoint IP configuration is included."
                              }
                            },
                            "customNetworkInterfaceName": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The custom name of the network interface attached to the private endpoint."
                              }
                            },
                            "ipConfigurations": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. A list of IP configurations of the private endpoint. This will be used to map to the First Party Service endpoints."
                              }
                            },
                            "groupIds": {
                              "type": "array",
                              "metadata": {
                                "description": "Required. Subtype(s) of the connection to be created. The allowed values depend on the type serviceResourceId refers to."
                              }
                            },
                            "privateDnsZoneGroup": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. The private DNS zone group configuration used to associate the private endpoint with one or multiple private DNS zones. A DNS zone group can support up to 5 DNS zones."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. Location for all Resources."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Tags to be applied on all resources/resource groups in this deployment."
                              }
                            },
                            "customDnsConfigs": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Custom DNS configurations."
                              }
                            },
                            "manualPrivateLinkServiceConnections": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Manual PrivateLink Service Connections."
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/privateEndpoints",
                              "apiVersion": "2023-04-01",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "applicationSecurityGroups": "[parameters('applicationSecurityGroups')]",
                                "customDnsConfigs": "[parameters('customDnsConfigs')]",
                                "customNetworkInterfaceName": "[parameters('customNetworkInterfaceName')]",
                                "ipConfigurations": "[parameters('ipConfigurations')]",
                                "manualPrivateLinkServiceConnections": "[parameters('manualPrivateLinkServiceConnections')]",
                                "privateLinkServiceConnections": [
                                  {
                                    "name": "[parameters('name')]",
                                    "properties": {
                                      "privateLinkServiceId": "[parameters('serviceResourceId')]",
                                      "groupIds": "[parameters('groupIds')]"
                                    }
                                  }
                                ],
                                "subnet": {
                                  "id": "[parameters('subnetResourceId')]"
                                }
                              }
                            },
                            {
                              "condition": "[not(empty(parameters('privateDnsZoneGroup')))]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('PE-PrivateDnsZoneGroup-{0}', uniqueString(deployment().name))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "privateDNSResourceIds": {
                                    "value": "[parameters('privateDnsZoneGroup').privateDNSResourceIds]"
                                  },
                                  "privateEndpointName": {
                                    "value": "[parameters('name')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.36.1.42791",
                                      "templateHash": "7513849818521025348"
                                    }
                                  },
                                  "parameters": {
                                    "privateEndpointName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent private endpoint. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "privateDNSResourceIds": {
                                      "type": "array",
                                      "minLength": 1,
                                      "maxLength": 5,
                                      "metadata": {
                                        "description": "Required. Array of private DNS zone resource IDs. A DNS zone group can support up to 5 DNS zones."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "defaultValue": "default",
                                      "metadata": {
                                        "description": "Optional. The name of the private DNS zone group."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "copy": [
                                      {
                                        "name": "privateDnsZoneConfigs",
                                        "count": "[length(parameters('privateDNSResourceIds'))]",
                                        "input": {
                                          "name": "[last(split(parameters('privateDNSResourceIds')[copyIndex('privateDnsZoneConfigs')], '/'))]",
                                          "properties": {
                                            "privateDnsZoneId": "[parameters('privateDNSResourceIds')[copyIndex('privateDnsZoneConfigs')]]"
                                          }
                                        }
                                      }
                                    ]
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                                      "apiVersion": "2023-04-01",
                                      "name": "[format('{0}/{1}', parameters('privateEndpointName'), parameters('name'))]",
                                      "properties": {
                                        "privateDnsZoneConfigs": "[variables('privateDnsZoneConfigs')]"
                                      }
                                    }
                                  ],
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the private endpoint DNS zone group."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the private endpoint DNS zone group."
                                      },
                                      "value": "[resourceId('Microsoft.Network/privateEndpoints/privateDnsZoneGroups', parameters('privateEndpointName'), parameters('name'))]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group the private endpoint was deployed into."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the private endpoint."
                              },
                              "value": "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the private endpoint."
                              },
                              "value": "[parameters('name')]"
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "The location the resource was deployed into."
                              },
                              "value": "[reference(resourceId('Microsoft.Network/privateEndpoints', parameters('name')), '2023-04-01', 'full').location]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults', parameters('name'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the key vault."
                      },
                      "value": "[resourceId('Microsoft.KeyVault/vaults', parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the resource group the key vault was created in."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the key vault."
                      },
                      "value": "[parameters('name')]"
                    },
                    "uri": {
                      "type": "string",
                      "metadata": {
                        "description": "The URI of the key vault."
                      },
                      "value": "[reference(resourceId('Microsoft.KeyVault/vaults', parameters('name')), '2022-07-01').vaultUri]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference(resourceId('Microsoft.KeyVault/vaults', parameters('name')), '2022-07-01', 'full').location]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('LogAnalytics_{0}', parameters('timeStamp')))]"
              ]
            },
            {
              "condition": "[parameters('enableMonitoring')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('LogAnalytics_{0}', parameters('timeStamp'))]",
              "resourceGroup": "[parameters('resourceGroupManagement')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "logAnalyticsWorkspaceName": {
                    "value": "[parameters('logAnalyticsWorkspaceName')]"
                  },
                  "logAnalyticsWorkspaceRetention": {
                    "value": "[parameters('logAnalyticsWorkspaceRetention')]"
                  },
                  "logAnalyticsWorkspaceSku": {
                    "value": "[parameters('logAnalyticsWorkspaceSku')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[coalesce(tryGet(parameters('tags'), 'Microsoft.OperationalInsights/workspaces'), createObject())]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.36.1.42791",
                      "templateHash": "10048662161968859100"
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string"
                    },
                    "logAnalyticsWorkspaceName": {
                      "type": "string"
                    },
                    "logAnalyticsWorkspaceRetention": {
                      "type": "int"
                    },
                    "logAnalyticsWorkspaceSku": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.OperationalInsights/workspaces",
                      "apiVersion": "2021-06-01",
                      "name": "[parameters('logAnalyticsWorkspaceName')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "sku": {
                          "name": "[parameters('logAnalyticsWorkspaceSku')]"
                        },
                        "retentionInDays": "[parameters('logAnalyticsWorkspaceRetention')]",
                        "workspaceCapping": {
                          "dailyQuotaGb": -1
                        },
                        "publicNetworkAccessForIngestion": "Enabled",
                        "publicNetworkAccessForQuery": "Enabled"
                      }
                    }
                  ],
                  "outputs": {
                    "resourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName'))]"
                    }
                  }
                }
              }
            },
            {
              "condition": "[parameters('enableMonitoring')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('AVDInsights_DataCollectionRule_{0}', parameters('timeStamp'))]",
              "resourceGroup": "[parameters('resourceGroupManagement')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "dataCollectionEndpointId": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('DataCollectionEndpoint_{0}', parameters('timeStamp'))), '2022-09-01').outputs.resourceId.value]"
                  },
                  "logAWorkspaceResourceId": "[if(parameters('enableMonitoring'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('LogAnalytics_{0}', parameters('timeStamp'))), '2022-09-01').outputs.resourceId.value), createObject('value', ''))]",
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[coalesce(tryGet(parameters('tags'), 'Microsoft.Insights/dataCollectionRules'), createObject())]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.36.1.42791",
                      "templateHash": "17179039963814846761"
                    }
                  },
                  "parameters": {
                    "dataCollectionEndpointId": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "logAWorkspaceResourceId": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Insights/dataCollectionRules",
                      "apiVersion": "2022-06-01",
                      "name": "[format('microsoft-avdi-{0}', parameters('location'))]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "kind": "Windows",
                      "properties": {
                        "dataCollectionEndpointId": "[if(not(empty(parameters('dataCollectionEndpointId'))), parameters('dataCollectionEndpointId'), null())]",
                        "dataSources": {
                          "performanceCounters": [
                            {
                              "streams": [
                                "Microsoft-Perf"
                              ],
                              "samplingFrequencyInSeconds": 30,
                              "counterSpecifiers": [
                                "\\LogicalDisk(C:)\\Avg. Disk Queue Length",
                                "\\LogicalDisk(C:)\\Current Disk Queue Length",
                                "\\Memory\\Available Mbytes",
                                "\\Memory\\Page Faults/sec",
                                "\\Memory\\Pages/sec",
                                "\\Memory\\% Committed Bytes In Use",
                                "\\PhysicalDisk(*)\\Avg. Disk Queue Length",
                                "\\PhysicalDisk(*)\\Avg. Disk sec/Read",
                                "\\PhysicalDisk(*)\\Avg. Disk sec/Transfer",
                                "\\PhysicalDisk(*)\\Avg. Disk sec/Write",
                                "\\Processor Information(_Total)\\% Processor Time",
                                "\\User Input Delay per Process(*)\\Max Input Delay",
                                "\\User Input Delay per Session(*)\\Max Input Delay"
                              ],
                              "name": "perfCounterDataSource30"
                            },
                            {
                              "streams": [
                                "Microsoft-Perf"
                              ],
                              "samplingFrequencyInSeconds": 60,
                              "counterSpecifiers": [
                                "\\LogicalDisk(C:)\\% Free Space",
                                "\\LogicalDisk(C:)\\Avg. Disk sec/Transfer"
                              ],
                              "name": "perfCounterDataSource60"
                            }
                          ],
                          "windowsEventLogs": [
                            {
                              "streams": [
                                "Microsoft-Event"
                              ],
                              "xPathQueries": [
                                "Microsoft-Windows-TerminalServices-RemoteConnectionManager/Admin!*[System[(Level=2 or Level=3 or Level=4 or Level=0)]]",
                                "Microsoft-Windows-TerminalServices-LocalSessionManager/Operational!*[System[(Level=2 or Level=3 or Level=4 or Level=0)]]",
                                "System!*",
                                "Microsoft-FSLogix-Apps/Operational!*[System[(Level=2 or Level=3 or Level=4 or Level=0)]]",
                                "Application!*[System[(Level=2 or Level=3)]]",
                                "Microsoft-FSLogix-Apps/Admin!*[System[(Level=2 or Level=3 or Level=4 or Level=0)]]"
                              ],
                              "name": "eventLogsDataSource"
                            }
                          ]
                        },
                        "destinations": {
                          "logAnalytics": [
                            {
                              "workspaceResourceId": "[parameters('logAWorkspaceResourceId')]",
                              "name": "la-workspace"
                            }
                          ]
                        },
                        "dataFlows": [
                          {
                            "streams": [
                              "Microsoft-Perf",
                              "Microsoft-Event"
                            ],
                            "destinations": [
                              "la-workspace"
                            ]
                          }
                        ]
                      }
                    }
                  ],
                  "outputs": {
                    "dataCollectionRulesId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Insights/dataCollectionRules', format('microsoft-avdi-{0}', parameters('location')))]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('DataCollectionEndpoint_{0}', parameters('timeStamp')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('LogAnalytics_{0}', parameters('timeStamp')))]"
              ]
            },
            {
              "condition": "[parameters('enableMonitoring')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('VMInsights_DataCollectionRule_{0}', parameters('timeStamp'))]",
              "resourceGroup": "[parameters('resourceGroupManagement')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "dataCollectionEndpointId": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('DataCollectionEndpoint_{0}', parameters('timeStamp'))), '2022-09-01').outputs.resourceId.value]"
                  },
                  "logAWorkspaceResourceId": "[if(parameters('enableMonitoring'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('LogAnalytics_{0}', parameters('timeStamp'))), '2022-09-01').outputs.resourceId.value), createObject('value', ''))]",
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[coalesce(tryGet(parameters('tags'), 'Microsoft.Insights/dataCollectionRules'), createObject())]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.36.1.42791",
                      "templateHash": "2275858240471098954"
                    }
                  },
                  "parameters": {
                    "dataCollectionEndpointId": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "logAWorkspaceResourceId": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Insights/dataCollectionRules",
                      "apiVersion": "2022-06-01",
                      "name": "[format('MSVMI-{0}', parameters('location'))]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "dataCollectionEndpointId": "[if(not(empty(parameters('dataCollectionEndpointId'))), parameters('dataCollectionEndpointId'), null())]",
                        "description": "Data collection rule for VM Insights.",
                        "dataSources": {
                          "performanceCounters": [
                            {
                              "name": "VMInsightsPerfCounters",
                              "streams": [
                                "Microsoft-InsightsMetrics"
                              ],
                              "samplingFrequencyInSeconds": 60,
                              "counterSpecifiers": [
                                "\\VmInsights\\DetailedMetrics"
                              ]
                            }
                          ],
                          "extensions": [
                            {
                              "streams": [
                                "Microsoft-ServiceMap"
                              ],
                              "extensionName": "DependencyAgent",
                              "extensionSettings": {},
                              "name": "DependencyAgentDataSource"
                            }
                          ]
                        },
                        "destinations": {
                          "logAnalytics": [
                            {
                              "workspaceResourceId": "[parameters('logAWorkspaceResourceId')]",
                              "name": "VMInsightsPerf-Logs-Dest"
                            }
                          ]
                        },
                        "dataFlows": [
                          {
                            "streams": [
                              "Microsoft-InsightsMetrics"
                            ],
                            "destinations": [
                              "VMInsightsPerf-Logs-Dest"
                            ]
                          },
                          {
                            "streams": [
                              "Microsoft-ServiceMap"
                            ],
                            "destinations": [
                              "VMInsightsPerf-Logs-Dest"
                            ]
                          }
                        ]
                      }
                    }
                  ],
                  "outputs": {
                    "dataCollectionRulesId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Insights/dataCollectionRules', format('MSVMI-{0}', parameters('location')))]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('DataCollectionEndpoint_{0}', parameters('timeStamp')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('LogAnalytics_{0}', parameters('timeStamp')))]"
              ]
            },
            {
              "condition": "[parameters('enableMonitoring')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('DataCollectionEndpoint_{0}', parameters('timeStamp'))]",
              "resourceGroup": "[parameters('resourceGroupManagement')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[coalesce(tryGet(parameters('tags'), 'Microsoft.Insights/dataCollectionEndpoints'), createObject())]"
                  },
                  "name": {
                    "value": "[parameters('dataCollectionEndpointName')]"
                  },
                  "publicNetworkAccess": "[if(empty(parameters('azureMonitorPrivateLinkScopeResourceId')), createObject('value', 'Enabled'), createObject('value', 'Disabled'))]"
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.36.1.42791",
                      "templateHash": "9617744153890901158"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "publicNetworkAccess": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Insights/dataCollectionEndpoints",
                      "apiVersion": "2022-06-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "networkAcls": {
                          "publicNetworkAccess": "[parameters('publicNetworkAccess')]"
                        }
                      },
                      "tags": "[parameters('tags')]"
                    }
                  ],
                  "outputs": {
                    "resourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Insights/dataCollectionEndpoints', parameters('name'))]"
                    }
                  }
                }
              }
            },
            {
              "condition": "[and(parameters('enableMonitoring'), not(empty(parameters('azureMonitorPrivateLinkScopeResourceId'))))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('PrivateLlinkScope-{0}', parameters('timeStamp'))]",
              "location": "[deployment().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "privateLinkScopeResourceId": {
                    "value": "[parameters('azureMonitorPrivateLinkScopeResourceId')]"
                  },
                  "scopedResourceIds": {
                    "value": [
                      "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('LogAnalytics_{0}', parameters('timeStamp'))), '2022-09-01').outputs.resourceId.value]",
                      "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('DataCollectionEndpoint_{0}', parameters('timeStamp'))), '2022-09-01').outputs.resourceId.value]"
                    ]
                  },
                  "timeStamp": {
                    "value": "[parameters('timeStamp')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.36.1.42791",
                      "templateHash": "13149038920170790102"
                    }
                  },
                  "parameters": {
                    "privateLinkScopeResourceId": {
                      "type": "string"
                    },
                    "scopedResourceIds": {
                      "type": "array"
                    },
                    "timeStamp": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('addScopedResources-{0}', parameters('timeStamp'))]",
                      "subscriptionId": "[split(parameters('privateLinkScopeResourceId'), '/')[2]]",
                      "resourceGroup": "[split(parameters('privateLinkScopeResourceId'), '/')[4]]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "privateLinkScopeResourceId": {
                            "value": "[parameters('privateLinkScopeResourceId')]"
                          },
                          "scopedResourceIds": {
                            "value": "[parameters('scopedResourceIds')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.36.1.42791",
                              "templateHash": "17913142480251977729"
                            }
                          },
                          "parameters": {
                            "scopedResourceIds": {
                              "type": "array"
                            },
                            "privateLinkScopeResourceId": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "scopedResources",
                                "count": "[length(parameters('scopedResourceIds'))]"
                              },
                              "type": "Microsoft.Insights/privateLinkScopes/scopedResources",
                              "apiVersion": "2021-07-01-preview",
                              "name": "[format('{0}/{1}', last(split(parameters('privateLinkScopeResourceId'), '/')), last(split(parameters('scopedResourceIds')[copyIndex()], '/')))]",
                              "properties": {
                                "linkedResourceId": "[parameters('scopedResourceIds')[copyIndex()]]"
                              }
                            }
                          ]
                        }
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('DataCollectionEndpoint_{0}', parameters('timeStamp')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('LogAnalytics_{0}', parameters('timeStamp')))]"
              ]
            },
            {
              "condition": "[parameters('enableQuotaManagement')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('FunctionAppHostingPlan_{0}', parameters('timeStamp'))]",
              "resourceGroup": "[parameters('resourceGroupManagement')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "functionAppKind": {
                    "value": "functionApp"
                  },
                  "hostingPlanType": {
                    "value": "FunctionsPremium"
                  },
                  "logAnalyticsWorkspaceId": "[if(parameters('enableMonitoring'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('LogAnalytics_{0}', parameters('timeStamp'))), '2022-09-01').outputs.resourceId.value), createObject('value', ''))]",
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "name": {
                    "value": "[parameters('appServicePlanName')]"
                  },
                  "planPricing": {
                    "value": "PremiumV3_P0v3"
                  },
                  "tags": {
                    "value": "[coalesce(tryGet(parameters('tags'), 'Microsoft.Web/serverfarms'), createObject())]"
                  },
                  "zoneRedundant": {
                    "value": "[parameters('zoneRedundant')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.36.1.42791",
                      "templateHash": "17555101977947159681"
                    }
                  },
                  "parameters": {
                    "hostingPlanType": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "logAnalyticsWorkspaceId": {
                      "type": "string"
                    },
                    "functionAppKind": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "planPricing": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "zoneRedundant": {
                      "type": "bool"
                    }
                  },
                  "variables": {
                    "sku": {
                      "name": "[split(parameters('planPricing'), '_')[1]]",
                      "tier": "[split(parameters('planPricing'), '_')[0]]",
                      "capacity": "[if(parameters('zoneRedundant'), 3, 1)]"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Web/serverfarms",
                      "apiVersion": "2023-12-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "sku": "[variables('sku')]",
                      "tags": "[coalesce(tryGet(parameters('tags'), 'Microsoft.Web/serverfarms'), createObject())]",
                      "properties": {
                        "maximumElasticWorkerCount": "[if(contains(parameters('hostingPlanType'), 'Consumption'), null(), if(equals(parameters('hostingPlanType'), 'FunctionsPremium'), 20, 1))]",
                        "reserved": "[if(contains(parameters('functionAppKind'), 'linux'), true(), false())]",
                        "zoneRedundant": "[parameters('zoneRedundant')]"
                      }
                    },
                    {
                      "condition": "[not(empty(parameters('logAnalyticsWorkspaceId')))]",
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.Web/serverfarms/{0}', parameters('name'))]",
                      "name": "[format('{0}-diagnosticSettings', parameters('name'))]",
                      "properties": {
                        "metrics": [
                          {
                            "category": "AllMetrics",
                            "enabled": true
                          }
                        ],
                        "workspaceId": "[parameters('logAnalyticsWorkspaceId')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Web/serverfarms', parameters('name'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "hostingPlanId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Web/serverfarms', parameters('name'))]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('LogAnalytics_{0}', parameters('timeStamp')))]"
              ]
            }
          ],
          "outputs": {
            "appServicePlanId": {
              "type": "string",
              "value": "[if(parameters('enableQuotaManagement'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('FunctionAppHostingPlan_{0}', parameters('timeStamp'))), '2022-09-01').outputs.hostingPlanId.value, '')]"
            },
            "avdInsightsDataCollectionRulesResourceId": {
              "type": "string",
              "value": "[if(parameters('enableMonitoring'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('AVDInsights_DataCollectionRule_{0}', parameters('timeStamp'))), '2022-09-01').outputs.dataCollectionRulesId.value, '')]"
            },
            "dataCollectionEndpointResourceId": {
              "type": "string",
              "value": "[if(parameters('enableMonitoring'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('DataCollectionEndpoint_{0}', parameters('timeStamp'))), '2022-09-01').outputs.resourceId.value, '')]"
            },
            "logAnalyticsWorkspaceResourceId": {
              "type": "string",
              "value": "[if(parameters('enableMonitoring'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('LogAnalytics_{0}', parameters('timeStamp'))), '2022-09-01').outputs.resourceId.value, '')]"
            },
            "vmInsightsDataCollectionRulesResourceId": {
              "type": "string",
              "value": "[if(parameters('enableMonitoring'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('VMInsights_DataCollectionRule_{0}', parameters('timeStamp'))), '2022-09-01').outputs.dataCollectionRulesId.value, '')]"
            },
            "encryptionKeyVaultResourceId": {
              "type": "string",
              "value": "[if(parameters('deployEncryptionKeysKeyVault'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('Encryption_Keys_KeyVault_{0}', parameters('timeStamp'))), '2022-09-01').outputs.resourceId.value, '')]"
            },
            "encryptionKeyVaultUri": {
              "type": "string",
              "value": "[if(parameters('deployEncryptionKeysKeyVault'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('Encryption_Keys_KeyVault_{0}', parameters('timeStamp'))), '2022-09-01').outputs.uri.value, '')]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('ResourceNames_{0}', parameters('timeStamp')))]",
        "rgs"
      ]
    },
    {
      "condition": "[equals(parameters('deploymentType'), 'Complete')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('ControlPlane_{0}', parameters('timeStamp'))]",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "appGroupSecurityGroups": {
            "value": "[map(parameters('appGroupSecurityGroups'), lambda('group', lambdaVariables('group').objectId))]"
          },
          "avdPrivateDnsZoneResourceId": {
            "value": "[parameters('avdPrivateDnsZoneResourceId')]"
          },
          "avdPrivateLinkPrivateRoutes": {
            "value": "[parameters('avdPrivateLinkPrivateRoutes')]"
          },
          "deployScalingPlan": {
            "value": "[parameters('deployScalingPlan')]"
          },
          "deploymentUserAssignedIdentityClientId": "[if(and(equals(parameters('deploymentType'), 'Complete'), not(empty(parameters('desktopFriendlyName')))), createObject('value', reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Deployment_Prereqs_{0}', parameters('timeStamp'))), '2022-09-01').outputs.deploymentUserAssignedIdentityClientId.value), createObject('value', ''))]",
          "deploymentVirtualMachineName": "[if(and(equals(parameters('deploymentType'), 'Complete'), not(empty(parameters('desktopFriendlyName')))), createObject('value', reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Deployment_Prereqs_{0}', parameters('timeStamp'))), '2022-09-01').outputs.virtualMachineName.value), createObject('value', ''))]",
          "desktopApplicationGroupName": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('ResourceNames_{0}', parameters('timeStamp'))), '2022-09-01').outputs.desktopApplicationGroupName.value]"
          },
          "desktopFriendlyName": {
            "value": "[parameters('desktopFriendlyName')]"
          },
          "enableMonitoring": {
            "value": "[parameters('enableMonitoring')]"
          },
          "existingFeedWorkspaceResourceId": {
            "value": "[parameters('existingFeedWorkspaceResourceId')]"
          },
          "existingGlobalWorkspaceResourceId": {
            "value": "[parameters('existingGlobalFeedResourceId')]"
          },
          "globalFeedPrivateDnsZoneResourceId": {
            "value": "[parameters('globalFeedPrivateDnsZoneResourceId')]"
          },
          "globalFeedPrivateEndpointSubnetResourceId": {
            "value": "[parameters('globalFeedPrivateEndpointSubnetResourceId')]"
          },
          "globalWorkspaceName": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('ResourceNames_{0}', parameters('timeStamp'))), '2022-09-01').outputs.globalFeedWorkspaceName.value]"
          },
          "hostPoolMaxSessionLimit": {
            "value": "[parameters('hostPoolMaxSessionLimit')]"
          },
          "hostPoolName": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('ResourceNames_{0}', parameters('timeStamp'))), '2022-09-01').outputs.hostPoolName.value]"
          },
          "hostPoolPrivateEndpointSubnetResourceId": {
            "value": "[parameters('hostpoolPrivateEndpointSubnetResourceId')]"
          },
          "hostPoolPublicNetworkAccess": {
            "value": "[parameters('hostPoolPublicNetworkAccess')]"
          },
          "hostPoolRDPProperties": {
            "value": "[parameters('hostPoolRDPProperties')]"
          },
          "hostPoolType": {
            "value": "[parameters('hostPoolType')]"
          },
          "hostPoolValidationEnvironment": {
            "value": "[parameters('hostPoolValidationEnvironment')]"
          },
          "hostPoolVmTemplate": {
            "value": {
              "identityType": "[parameters('identitySolution')]",
              "domain": "[if(not(empty(parameters('domainName'))), parameters('domainName'), null())]",
              "ouPath": "[if(not(empty(parameters('vmOUPath'))), parameters('vmOUPath'), null())]",
              "namePrefix": "[parameters('virtualMachineNamePrefix')]",
              "imageType": "[if(empty(parameters('customImageResourceId')), 'Gallery', 'CustomImage')]",
              "imageUri": null,
              "customImageId": "[if(empty(parameters('customImageResourceId')), null(), parameters('customImageResourceId'))]",
              "galleryImageOffer": "[if(empty(parameters('customImageResourceId')), parameters('imageOffer'), null())]",
              "galleryImagePublisher": "[if(empty(parameters('customImageResourceId')), parameters('imagePublisher'), null())]",
              "galleryImageSku": "[if(empty(parameters('customImageResourceId')), parameters('imageSku'), null())]",
              "osDiskType": "[parameters('diskSku')]",
              "diskSizeGB": "[parameters('diskSizeGB')]",
              "useManagedDisks": true,
              "vmSize": {
                "id": "[parameters('virtualMachineSize')]",
                "cores": "[if(equals(parameters('vCPUs'), 0), null(), parameters('vCPUs'))]",
                "ram": "[if(equals(parameters('memoryGB'), 0), null(), parameters('memoryGB'))]"
              },
              "encryptionAtHost": "[parameters('encryptionAtHost')]",
              "acceleratedNetworking": "[parameters('enableAcceleratedNetworking')]",
              "diskEncryptionSetName": "[if(parameters('confidentialVMOSDiskEncryption'), reference(subscriptionResourceId('Microsoft.Resources/deployments', format('ResourceNames_{0}', parameters('timeStamp'))), '2022-09-01').outputs.diskEncryptionSetNames.value.confidentialVMs, if(startsWith(parameters('keyManagementDisks'), 'CustomerManaged'), reference(subscriptionResourceId('Microsoft.Resources/deployments', format('ResourceNames_{0}', parameters('timeStamp'))), '2022-09-01').outputs.diskEncryptionSetNames.value.customerManaged, if(contains(parameters('keyManagementDisks'), 'PlatformManagedAndCustomerManaged'), reference(subscriptionResourceId('Microsoft.Resources/deployments', format('ResourceNames_{0}', parameters('timeStamp'))), '2022-09-01').outputs.diskEncryptionSetNames.value.platformAndCustomerManaged, null())))]",
              "hibernate": "[parameters('hibernationEnabled')]",
              "securityType": "[parameters('securityType')]",
              "secureBoot": "[parameters('secureBootEnabled')]",
              "vTPM": "[parameters('vTpmEnabled')]",
              "subnetId": "[parameters('virtualMachineSubnetResourceId')]",
              "availability": "[if(equals(parameters('availability'), 'availabilityZones'), 'Availability Zones', if(equals(parameters('availability'), 'availabilitySets'), 'Availability Sets', 'No infrastructure redundancy required'))]",
              "vmInfrastructureType": "Cloud",
              "nameConvResTypeAtEnd": "[parameters('nameConvResTypeAtEnd')]"
            }
          },
          "locationControlPlane": {
            "value": "[parameters('locationControlPlane')]"
          },
          "locationGlobalFeed": "[if(not(empty(parameters('globalFeedPrivateEndpointSubnetResourceId'))), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('globalFeedPrivateEndpointSubnetResourceId'), '/')[2], split(parameters('globalFeedPrivateEndpointSubnetResourceId'), '/')[4]), 'Microsoft.Network/virtualNetworks', split(parameters('globalFeedPrivateEndpointSubnetResourceId'), '/')[8]), '2023-04-01', 'full').location), createObject('value', ''))]",
          "locationVirtualMachines": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('virtualMachineSubnetResourceId'), '/')[2], split(parameters('virtualMachineSubnetResourceId'), '/')[4]), 'Microsoft.Network/virtualNetworks', split(parameters('virtualMachineSubnetResourceId'), '/')[8]), '2023-04-01', 'full').location]"
          },
          "logAnalyticsWorkspaceResourceId": "[if(and(parameters('enableMonitoring'), equals(parameters('deploymentType'), 'Complete')), createObject('value', reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Management_{0}', parameters('timeStamp'))), '2022-09-01').outputs.logAnalyticsWorkspaceResourceId.value), createObject('value', ''))]",
          "privateEndpointNameConv": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('ResourceNames_{0}', parameters('timeStamp'))), '2022-09-01').outputs.privateEndpointNameConv.value]"
          },
          "privateEndpointNICNameConv": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('ResourceNames_{0}', parameters('timeStamp'))), '2022-09-01').outputs.privateEndpointNICNameConv.value]"
          },
          "resourceGroupControlPlane": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('ResourceNames_{0}', parameters('timeStamp'))), '2022-09-01').outputs.resourceGroupControlPlane.value]"
          },
          "resourceGroupGlobalFeed": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('ResourceNames_{0}', parameters('timeStamp'))), '2022-09-01').outputs.resourceGroupGlobalFeed.value]"
          },
          "resourceGroupDeployment": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('ResourceNames_{0}', parameters('timeStamp'))), '2022-09-01').outputs.resourceGroupDeployment.value]"
          },
          "scalingPlanName": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('ResourceNames_{0}', parameters('timeStamp'))), '2022-09-01').outputs.scalingPlanName.value]"
          },
          "scalingPlanSchedules": {
            "value": "[variables('scalingPlanSchedules')]"
          },
          "scalingPlanExclusionTag": {
            "value": "[parameters('scalingPlanExclusionTag')]"
          },
          "startVmOnConnect": {
            "value": "[parameters('startVmOnConnect')]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "timeStamp": {
            "value": "[parameters('timeStamp')]"
          },
          "virtualMachinesTimeZone": {
            "value": "[parameters('virtualMachinesTimeZone')]"
          },
          "workspaceFeedPrivateEndpointSubnetResourceId": {
            "value": "[parameters('workspaceFeedPrivateEndpointSubnetResourceId')]"
          },
          "workspaceFriendlyName": {
            "value": "[parameters('workspaceFriendlyName')]"
          },
          "workspaceName": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('ResourceNames_{0}', parameters('timeStamp'))), '2022-09-01').outputs.workspaceName.value]"
          },
          "workspacePublicNetworkAccess": {
            "value": "[parameters('workspaceFeedPublicNetworkAccess')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.1.42791",
              "templateHash": "4574913367212931651"
            }
          },
          "parameters": {
            "appGroupSecurityGroups": {
              "type": "array"
            },
            "avdPrivateDnsZoneResourceId": {
              "type": "string"
            },
            "avdPrivateLinkPrivateRoutes": {
              "type": "string"
            },
            "deploymentUserAssignedIdentityClientId": {
              "type": "string"
            },
            "deploymentVirtualMachineName": {
              "type": "string"
            },
            "deployScalingPlan": {
              "type": "bool"
            },
            "desktopApplicationGroupName": {
              "type": "string"
            },
            "desktopFriendlyName": {
              "type": "string"
            },
            "enableMonitoring": {
              "type": "bool"
            },
            "existingGlobalWorkspaceResourceId": {
              "type": "string"
            },
            "existingFeedWorkspaceResourceId": {
              "type": "string"
            },
            "globalFeedPrivateDnsZoneResourceId": {
              "type": "string"
            },
            "globalFeedPrivateEndpointSubnetResourceId": {
              "type": "string"
            },
            "globalWorkspaceName": {
              "type": "string"
            },
            "hostPoolMaxSessionLimit": {
              "type": "int"
            },
            "hostPoolName": {
              "type": "string"
            },
            "hostPoolPrivateEndpointSubnetResourceId": {
              "type": "string"
            },
            "hostPoolPublicNetworkAccess": {
              "type": "string"
            },
            "hostPoolRDPProperties": {
              "type": "string"
            },
            "hostPoolType": {
              "type": "string"
            },
            "hostPoolValidationEnvironment": {
              "type": "bool"
            },
            "hostPoolVmTemplate": {
              "type": "object"
            },
            "locationControlPlane": {
              "type": "string"
            },
            "locationGlobalFeed": {
              "type": "string"
            },
            "locationVirtualMachines": {
              "type": "string"
            },
            "logAnalyticsWorkspaceResourceId": {
              "type": "string"
            },
            "privateEndpointNameConv": {
              "type": "string"
            },
            "privateEndpointNICNameConv": {
              "type": "string"
            },
            "resourceGroupControlPlane": {
              "type": "string"
            },
            "resourceGroupDeployment": {
              "type": "string"
            },
            "resourceGroupGlobalFeed": {
              "type": "string"
            },
            "scalingPlanExclusionTag": {
              "type": "string"
            },
            "scalingPlanName": {
              "type": "string"
            },
            "scalingPlanSchedules": {
              "type": "array"
            },
            "startVmOnConnect": {
              "type": "bool"
            },
            "tags": {
              "type": "object"
            },
            "timeStamp": {
              "type": "string"
            },
            "virtualMachinesTimeZone": {
              "type": "string"
            },
            "workspaceFeedPrivateEndpointSubnetResourceId": {
              "type": "string"
            },
            "workspaceFriendlyName": {
              "type": "string"
            },
            "workspaceName": {
              "type": "string"
            },
            "workspacePublicNetworkAccess": {
              "type": "string"
            }
          },
          "variables": {
            "feedPrivateEndpointName": "[if(and(or(not(equals(parameters('avdPrivateLinkPrivateRoutes'), 'None')), not(equals(parameters('avdPrivateLinkPrivateRoutes'), 'HostPool'))), not(empty(parameters('workspaceFeedPrivateEndpointSubnetResourceId')))), replace(replace(replace(parameters('privateEndpointNameConv'), 'SUBRESOURCE', 'feed'), 'RESOURCE', parameters('workspaceName')), 'VNETID', format('{0}', split(parameters('workspaceFeedPrivateEndpointSubnetResourceId'), '/')[8])), 'feedPrivateEndpointName')]",
            "feedPrivateEndpointNICName": "[if(and(or(not(equals(parameters('avdPrivateLinkPrivateRoutes'), 'None')), not(equals(parameters('avdPrivateLinkPrivateRoutes'), 'HostPool'))), not(empty(parameters('workspaceFeedPrivateEndpointSubnetResourceId')))), replace(replace(replace(parameters('privateEndpointNICNameConv'), 'SUBRESOURCE', 'feed'), 'RESOURCE', parameters('workspaceName')), 'VNETID', format('{0}', split(parameters('workspaceFeedPrivateEndpointSubnetResourceId'), '/')[8])), 'feedPrivateEndpointName')]",
            "globalFeedPrivateEndpointName": "[if(and(equals(parameters('avdPrivateLinkPrivateRoutes'), 'All'), not(empty(parameters('globalFeedPrivateEndpointSubnetResourceId')))), replace(replace(replace(parameters('privateEndpointNameConv'), 'SUBRESOURCE', 'global'), 'RESOURCE', parameters('workspaceName')), 'VNETID', format('{0}', split(parameters('globalFeedPrivateEndpointSubnetResourceId'), '/')[8])), 'globalFeedPrivateEndpointName')]",
            "globalFeedPrivateEndpointNICName": "[if(and(equals(parameters('avdPrivateLinkPrivateRoutes'), 'All'), not(empty(parameters('globalFeedPrivateEndpointSubnetResourceId')))), replace(replace(replace(parameters('privateEndpointNICNameConv'), 'SUBRESOURCE', 'global'), 'RESOURCE', parameters('workspaceName')), 'VNETID', format('{0}', split(parameters('globalFeedPrivateEndpointSubnetResourceId'), '/')[8])), 'globalFeedPrivateEndpointName')]",
            "hostPoolPrivateEndpointName": "[if(and(not(equals(parameters('avdPrivateLinkPrivateRoutes'), 'None')), not(empty(parameters('hostPoolPrivateEndpointSubnetResourceId')))), replace(replace(replace(parameters('privateEndpointNameConv'), 'SUBRESOURCE', 'connection'), 'RESOURCE', parameters('hostPoolName')), 'VNETID', format('{0}', split(parameters('hostPoolPrivateEndpointSubnetResourceId'), '/')[8])), 'hostPoolPrivateEndpointName')]",
            "hostPoolPrivateEndpointNICName": "[if(and(not(equals(parameters('avdPrivateLinkPrivateRoutes'), 'None')), not(empty(parameters('hostPoolPrivateEndpointSubnetResourceId')))), replace(replace(replace(parameters('privateEndpointNICNameConv'), 'SUBRESOURCE', 'connection'), 'RESOURCE', parameters('hostPoolName')), 'VNETID', format('{0}', split(parameters('hostPoolPrivateEndpointSubnetResourceId'), '/')[8])), 'hostPoolPrivateEndpointName')]"
          },
          "resources": [
            {
              "condition": "[and(not(equals(parameters('avdPrivateLinkPrivateRoutes'), 'None')), not(empty(parameters('hostPoolPrivateEndpointSubnetResourceId'))))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('HostPoolPrivateEndpointVnet_{0}', parameters('timeStamp'))]",
              "location": "[deployment().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "privateEndpointSubnetResourceId": {
                    "value": "[parameters('hostPoolPrivateEndpointSubnetResourceId')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.36.1.42791",
                      "templateHash": "18337011305175971"
                    }
                  },
                  "parameters": {
                    "privateEndpointSubnetResourceId": {
                      "type": "string"
                    }
                  },
                  "resources": [],
                  "outputs": {
                    "location": {
                      "type": "string",
                      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('privateEndpointSubnetResourceId'), '/')[2], split(parameters('privateEndpointSubnetResourceId'), '/')[4]), 'Microsoft.Network/virtualNetworks', split(parameters('privateEndpointSubnetResourceId'), '/')[8]), '2023-11-01', 'full').location]"
                    }
                  }
                }
              }
            },
            {
              "condition": "[and(or(equals(parameters('avdPrivateLinkPrivateRoutes'), 'All'), equals(parameters('avdPrivateLinkPrivateRoutes'), 'FeedAndHostPool')), not(empty(parameters('workspaceFeedPrivateEndpointSubnetResourceId'))))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('WorkspaceFeedPrivateEndpointVnet_{0}', parameters('timeStamp'))]",
              "location": "[deployment().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "privateEndpointSubnetResourceId": {
                    "value": "[parameters('workspaceFeedPrivateEndpointSubnetResourceId')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.36.1.42791",
                      "templateHash": "18337011305175971"
                    }
                  },
                  "parameters": {
                    "privateEndpointSubnetResourceId": {
                      "type": "string"
                    }
                  },
                  "resources": [],
                  "outputs": {
                    "location": {
                      "type": "string",
                      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('privateEndpointSubnetResourceId'), '/')[2], split(parameters('privateEndpointSubnetResourceId'), '/')[4]), 'Microsoft.Network/virtualNetworks', split(parameters('privateEndpointSubnetResourceId'), '/')[8]), '2023-11-01', 'full').location]"
                    }
                  }
                }
              }
            },
            {
              "condition": "[and(equals(parameters('avdPrivateLinkPrivateRoutes'), 'All'), not(empty(parameters('globalFeedPrivateEndpointSubnetResourceId'))))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('GlobalFeedPrivateEndpointVnet_{0}', parameters('timeStamp'))]",
              "location": "[deployment().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "privateEndpointSubnetResourceId": {
                    "value": "[parameters('globalFeedPrivateEndpointSubnetResourceId')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.36.1.42791",
                      "templateHash": "18337011305175971"
                    }
                  },
                  "parameters": {
                    "privateEndpointSubnetResourceId": {
                      "type": "string"
                    }
                  },
                  "resources": [],
                  "outputs": {
                    "location": {
                      "type": "string",
                      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('privateEndpointSubnetResourceId'), '/')[2], split(parameters('privateEndpointSubnetResourceId'), '/')[4]), 'Microsoft.Network/virtualNetworks', split(parameters('privateEndpointSubnetResourceId'), '/')[8]), '2023-11-01', 'full').location]"
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('HostPool_{0}', parameters('timeStamp'))]",
              "resourceGroup": "[parameters('resourceGroupControlPlane')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "hostPoolRDPProperties": {
                    "value": "[parameters('hostPoolRDPProperties')]"
                  },
                  "hostPoolName": {
                    "value": "[parameters('hostPoolName')]"
                  },
                  "hostPoolPrivateDnsZoneResourceId": {
                    "value": "[parameters('avdPrivateDnsZoneResourceId')]"
                  },
                  "hostPoolPublicNetworkAccess": {
                    "value": "[parameters('hostPoolPublicNetworkAccess')]"
                  },
                  "hostPoolType": {
                    "value": "[parameters('hostPoolType')]"
                  },
                  "hostPoolValidationEnvironment": {
                    "value": "[parameters('hostPoolValidationEnvironment')]"
                  },
                  "location": {
                    "value": "[parameters('locationControlPlane')]"
                  },
                  "logAnalyticsWorkspaceResourceId": {
                    "value": "[parameters('logAnalyticsWorkspaceResourceId')]"
                  },
                  "hostPoolMaxSessionLimit": {
                    "value": "[parameters('hostPoolMaxSessionLimit')]"
                  },
                  "enableMonitoring": {
                    "value": "[parameters('enableMonitoring')]"
                  },
                  "privateEndpoint": "[if(not(equals(parameters('avdPrivateLinkPrivateRoutes'), 'None')), createObject('value', true()), createObject('value', false()))]",
                  "privateEndpointLocation": "[if(and(not(equals(parameters('avdPrivateLinkPrivateRoutes'), 'None')), not(empty(parameters('hostPoolPrivateEndpointSubnetResourceId')))), createObject('value', reference(subscriptionResourceId('Microsoft.Resources/deployments', format('HostPoolPrivateEndpointVnet_{0}', parameters('timeStamp'))), '2022-09-01').outputs.location.value), createObject('value', ''))]",
                  "privateEndpointName": {
                    "value": "[variables('hostPoolPrivateEndpointName')]"
                  },
                  "privateEndpointNICName": {
                    "value": "[variables('hostPoolPrivateEndpointNICName')]"
                  },
                  "privateEndpointSubnetResourceId": {
                    "value": "[parameters('hostPoolPrivateEndpointSubnetResourceId')]"
                  },
                  "startVmOnConnect": {
                    "value": "[parameters('startVmOnConnect')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "timeStamp": {
                    "value": "[parameters('timeStamp')]"
                  },
                  "virtualMachineTemplate": {
                    "value": "[parameters('hostPoolVmTemplate')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.36.1.42791",
                      "templateHash": "16247341823184416126"
                    }
                  },
                  "parameters": {
                    "hostPoolPrivateDnsZoneResourceId": {
                      "type": "string"
                    },
                    "hostPoolRDPProperties": {
                      "type": "string"
                    },
                    "hostPoolName": {
                      "type": "string"
                    },
                    "hostPoolPublicNetworkAccess": {
                      "type": "string"
                    },
                    "hostPoolType": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "logAnalyticsWorkspaceResourceId": {
                      "type": "string"
                    },
                    "privateEndpoint": {
                      "type": "bool"
                    },
                    "privateEndpointLocation": {
                      "type": "string"
                    },
                    "privateEndpointName": {
                      "type": "string"
                    },
                    "privateEndpointNICName": {
                      "type": "string"
                    },
                    "privateEndpointSubnetResourceId": {
                      "type": "string"
                    },
                    "hostPoolMaxSessionLimit": {
                      "type": "int"
                    },
                    "startVmOnConnect": {
                      "type": "bool"
                    },
                    "enableMonitoring": {
                      "type": "bool"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "timeStamp": {
                      "type": "string"
                    },
                    "time": {
                      "type": "string",
                      "defaultValue": "[utcNow('u')]"
                    },
                    "hostPoolValidationEnvironment": {
                      "type": "bool"
                    },
                    "virtualMachineTemplate": {
                      "type": "object"
                    }
                  },
                  "variables": {
                    "vmDomain": "[if(empty(parameters('virtualMachineTemplate').domain), createObject(), createObject('vmDomain', parameters('virtualMachineTemplate').domain))]",
                    "vmOUPath": "[if(empty(parameters('virtualMachineTemplate').ouPath), createObject(), createObject('vmOUPath', parameters('virtualMachineTemplate').ouPath))]",
                    "vmCustomImageId": "[if(empty(parameters('virtualMachineTemplate').customImageId), createObject(), createObject('vmCustomImageId', parameters('virtualMachineTemplate').customImageId))]",
                    "vmImageOffer": "[if(empty(parameters('virtualMachineTemplate').galleryImageOffer), createObject(), createObject('vmImageOffer', parameters('virtualMachineTemplate').galleryImageOffer))]",
                    "vmImagePublisher": "[if(empty(parameters('virtualMachineTemplate').galleryImagePublisher), createObject(), createObject('vmImagePublisher', parameters('virtualMachineTemplate').galleryImagePublisher))]",
                    "vmImageSku": "[if(empty(parameters('virtualMachineTemplate').galleryImageSku), createObject(), createObject('vmImageSku', parameters('virtualMachineTemplate').galleryImageSKU))]",
                    "vmDiskEncryptionSetName": "[if(empty(parameters('virtualMachineTemplate').diskEncryptionSetName), createObject(), createObject('vmDiskEncryptionSetName', parameters('virtualMachineTemplate').diskEncryptionSetName))]",
                    "hostPoolVmTemplateTags": "[union(createObject('vmIdentityType', parameters('virtualMachineTemplate').identityType, 'vmNamePrefix', parameters('virtualMachineTemplate').namePrefix, 'vmImageType', parameters('virtualMachineTemplate').imageType, 'vmOSDiskType', parameters('virtualMachineTemplate').osDiskType, 'vmDiskSizeGB', parameters('virtualMachineTemplate').diskSizeGB, 'vmSize', parameters('virtualMachineTemplate').vmSize.id, 'vmAvailability', parameters('virtualMachineTemplate').availability, 'vmEncryptionAtHost', coalesce(tryGet(parameters('virtualMachineTemplate'), 'encryptionAtHost'), false()), 'vmAcceleratedNetworking', coalesce(tryGet(parameters('virtualMachineTemplate'), 'acceleratedNetworking'), false()), 'vmHibernate', coalesce(tryGet(parameters('virtualMachineTemplate'), 'hibernate'), false()), 'vmSecurityType', coalesce(tryGet(parameters('virtualMachineTemplate'), 'securityType'), 'Standard'), 'vmSecureBoot', coalesce(tryGet(parameters('virtualMachineTemplate'), 'secureBoot'), false()), 'vmVirtualTPM', coalesce(tryGet(parameters('virtualMachineTemplate'), 'vTPM'), false()), 'vmSubnetId', parameters('virtualMachineTemplate').subnetId, 'nameConvResTypeAtEnd', parameters('virtualMachineTemplate').nameConvResTypeAtEnd), variables('vmDomain'), variables('vmOUPath'), variables('vmCustomImageId'), variables('vmImageOffer'), variables('vmImagePublisher'), variables('vmImageSku'), variables('vmDiskEncryptionSetName'))]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.DesktopVirtualization/hostPools",
                      "apiVersion": "2023-09-05",
                      "name": "[parameters('hostPoolName')]",
                      "location": "[parameters('location')]",
                      "tags": "[union(variables('hostPoolVmTemplateTags'), createObject('cm-resource-parent', format('{0}/resourceGroups/{1}/providers/Microsoft.DesktopVirtualization/hostPools/{2}', subscription().id, resourceGroup().name, parameters('hostPoolName'))), coalesce(tryGet(parameters('tags'), 'Microsoft.DesktopVirtualization/hostPools'), createObject()))]",
                      "properties": {
                        "hostPoolType": "[split(parameters('hostPoolType'), ' ')[0]]",
                        "maxSessionLimit": "[parameters('hostPoolMaxSessionLimit')]",
                        "loadBalancerType": "[if(contains(parameters('hostPoolType'), 'Pooled'), split(parameters('hostPoolType'), ' ')[1], 'Persistent')]",
                        "validationEnvironment": "[parameters('hostPoolValidationEnvironment')]",
                        "registrationInfo": {
                          "expirationTime": "[dateTimeAdd(parameters('time'), 'PT2H')]",
                          "registrationTokenOperation": "Update"
                        },
                        "preferredAppGroupType": "Desktop",
                        "customRdpProperty": "[parameters('hostPoolRDPProperties')]",
                        "personalDesktopAssignmentType": "[if(contains(parameters('hostPoolType'), 'Personal'), split(parameters('hostPoolType'), ' ')[1], null())]",
                        "publicNetworkAccess": "[parameters('hostPoolPublicNetworkAccess')]",
                        "startVMOnConnect": "[parameters('startVmOnConnect')]",
                        "vmTemplate": "[string(parameters('virtualMachineTemplate'))]"
                      }
                    },
                    {
                      "condition": "[parameters('enableMonitoring')]",
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.DesktopVirtualization/hostPools/{0}', parameters('hostPoolName'))]",
                      "name": "WVDInsights",
                      "properties": {
                        "logs": [
                          {
                            "categoryGroup": "allLogs",
                            "enabled": true,
                            "retentionPolicy": {
                              "days": 0,
                              "enabled": false
                            }
                          }
                        ],
                        "workspaceId": "[parameters('logAnalyticsWorkspaceResourceId')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.DesktopVirtualization/hostPools', parameters('hostPoolName'))]"
                      ]
                    },
                    {
                      "condition": "[and(parameters('privateEndpoint'), not(empty(parameters('privateEndpointSubnetResourceId'))))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}_privateEndpoint_{1}', parameters('hostPoolName'), parameters('timeStamp'))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "customNetworkInterfaceName": {
                            "value": "[parameters('privateEndpointNICName')]"
                          },
                          "groupIds": {
                            "value": [
                              "connection"
                            ]
                          },
                          "location": "[if(not(empty(parameters('privateEndpointLocation'))), createObject('value', parameters('privateEndpointLocation')), createObject('value', parameters('location')))]",
                          "name": {
                            "value": "[parameters('privateEndpointName')]"
                          },
                          "privateDnsZoneGroup": "[if(empty(parameters('hostPoolPrivateDnsZoneResourceId')), createObject('value', null()), createObject('value', createObject('privateDNSResourceIds', createArray(parameters('hostPoolPrivateDnsZoneResourceId')))))]",
                          "serviceResourceId": {
                            "value": "[resourceId('Microsoft.DesktopVirtualization/hostPools', parameters('hostPoolName'))]"
                          },
                          "subnetResourceId": {
                            "value": "[parameters('privateEndpointSubnetResourceId')]"
                          },
                          "tags": {
                            "value": "[union(createObject('cm-resource-parent', resourceId('Microsoft.DesktopVirtualization/hostPools', parameters('hostPoolName'))), coalesce(tryGet(parameters('tags'), 'Microsoft.Network/privateEndpoints'), createObject()))]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.36.1.42791",
                              "templateHash": "5820984105601907039"
                            },
                            "name": "Private Endpoints"
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the private endpoint resource to create."
                              }
                            },
                            "subnetResourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
                              }
                            },
                            "serviceResourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Resource ID of the resource that needs to be connected to the network."
                              }
                            },
                            "applicationSecurityGroups": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Application security groups in which the private endpoint IP configuration is included."
                              }
                            },
                            "customNetworkInterfaceName": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The custom name of the network interface attached to the private endpoint."
                              }
                            },
                            "ipConfigurations": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. A list of IP configurations of the private endpoint. This will be used to map to the First Party Service endpoints."
                              }
                            },
                            "groupIds": {
                              "type": "array",
                              "metadata": {
                                "description": "Required. Subtype(s) of the connection to be created. The allowed values depend on the type serviceResourceId refers to."
                              }
                            },
                            "privateDnsZoneGroup": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. The private DNS zone group configuration used to associate the private endpoint with one or multiple private DNS zones. A DNS zone group can support up to 5 DNS zones."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. Location for all Resources."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Tags to be applied on all resources/resource groups in this deployment."
                              }
                            },
                            "customDnsConfigs": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Custom DNS configurations."
                              }
                            },
                            "manualPrivateLinkServiceConnections": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Manual PrivateLink Service Connections."
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/privateEndpoints",
                              "apiVersion": "2023-04-01",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "applicationSecurityGroups": "[parameters('applicationSecurityGroups')]",
                                "customDnsConfigs": "[parameters('customDnsConfigs')]",
                                "customNetworkInterfaceName": "[parameters('customNetworkInterfaceName')]",
                                "ipConfigurations": "[parameters('ipConfigurations')]",
                                "manualPrivateLinkServiceConnections": "[parameters('manualPrivateLinkServiceConnections')]",
                                "privateLinkServiceConnections": [
                                  {
                                    "name": "[parameters('name')]",
                                    "properties": {
                                      "privateLinkServiceId": "[parameters('serviceResourceId')]",
                                      "groupIds": "[parameters('groupIds')]"
                                    }
                                  }
                                ],
                                "subnet": {
                                  "id": "[parameters('subnetResourceId')]"
                                }
                              }
                            },
                            {
                              "condition": "[not(empty(parameters('privateDnsZoneGroup')))]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('PE-PrivateDnsZoneGroup-{0}', uniqueString(deployment().name))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "privateDNSResourceIds": {
                                    "value": "[parameters('privateDnsZoneGroup').privateDNSResourceIds]"
                                  },
                                  "privateEndpointName": {
                                    "value": "[parameters('name')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.36.1.42791",
                                      "templateHash": "7513849818521025348"
                                    }
                                  },
                                  "parameters": {
                                    "privateEndpointName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent private endpoint. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "privateDNSResourceIds": {
                                      "type": "array",
                                      "minLength": 1,
                                      "maxLength": 5,
                                      "metadata": {
                                        "description": "Required. Array of private DNS zone resource IDs. A DNS zone group can support up to 5 DNS zones."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "defaultValue": "default",
                                      "metadata": {
                                        "description": "Optional. The name of the private DNS zone group."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "copy": [
                                      {
                                        "name": "privateDnsZoneConfigs",
                                        "count": "[length(parameters('privateDNSResourceIds'))]",
                                        "input": {
                                          "name": "[last(split(parameters('privateDNSResourceIds')[copyIndex('privateDnsZoneConfigs')], '/'))]",
                                          "properties": {
                                            "privateDnsZoneId": "[parameters('privateDNSResourceIds')[copyIndex('privateDnsZoneConfigs')]]"
                                          }
                                        }
                                      }
                                    ]
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                                      "apiVersion": "2023-04-01",
                                      "name": "[format('{0}/{1}', parameters('privateEndpointName'), parameters('name'))]",
                                      "properties": {
                                        "privateDnsZoneConfigs": "[variables('privateDnsZoneConfigs')]"
                                      }
                                    }
                                  ],
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the private endpoint DNS zone group."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the private endpoint DNS zone group."
                                      },
                                      "value": "[resourceId('Microsoft.Network/privateEndpoints/privateDnsZoneGroups', parameters('privateEndpointName'), parameters('name'))]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group the private endpoint was deployed into."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the private endpoint."
                              },
                              "value": "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the private endpoint."
                              },
                              "value": "[parameters('name')]"
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "The location the resource was deployed into."
                              },
                              "value": "[reference(resourceId('Microsoft.Network/privateEndpoints', parameters('name')), '2023-04-01', 'full').location]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.DesktopVirtualization/hostPools', parameters('hostPoolName'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "resourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.DesktopVirtualization/hostPools', parameters('hostPoolName'))]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('HostPoolPrivateEndpointVnet_{0}', parameters('timeStamp')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('ApplicationGroup_{0}', parameters('timeStamp'))]",
              "resourceGroup": "[parameters('resourceGroupControlPlane')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "deploymentUserAssignedIdentityClientId": {
                    "value": "[parameters('deploymentUserAssignedIdentityClientId')]"
                  },
                  "desktopApplicationGroupName": {
                    "value": "[parameters('desktopApplicationGroupName')]"
                  },
                  "desktopFriendlyName": {
                    "value": "[parameters('desktopFriendlyName')]"
                  },
                  "hostPoolResourceId": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupControlPlane')), 'Microsoft.Resources/deployments', format('HostPool_{0}', parameters('timeStamp'))), '2022-09-01').outputs.resourceId.value]"
                  },
                  "location": {
                    "value": "[parameters('locationControlPlane')]"
                  },
                  "locationVirtualMachines": {
                    "value": "[parameters('locationVirtualMachines')]"
                  },
                  "logAnalyticsWorkspaceResourceId": {
                    "value": "[parameters('logAnalyticsWorkspaceResourceId')]"
                  },
                  "deploymentVirtualMachineName": {
                    "value": "[parameters('deploymentVirtualMachineName')]"
                  },
                  "resourceGroupDeployment": {
                    "value": "[parameters('resourceGroupDeployment')]"
                  },
                  "appGroupSecurityGroups": {
                    "value": "[parameters('appGroupSecurityGroups')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "timeStamp": {
                    "value": "[parameters('timeStamp')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.36.1.42791",
                      "templateHash": "1842275249887004639"
                    }
                  },
                  "parameters": {
                    "deploymentUserAssignedIdentityClientId": {
                      "type": "string"
                    },
                    "desktopApplicationGroupName": {
                      "type": "string"
                    },
                    "desktopFriendlyName": {
                      "type": "string"
                    },
                    "hostPoolResourceId": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "locationVirtualMachines": {
                      "type": "string"
                    },
                    "logAnalyticsWorkspaceResourceId": {
                      "type": "string"
                    },
                    "deploymentVirtualMachineName": {
                      "type": "string"
                    },
                    "resourceGroupDeployment": {
                      "type": "string"
                    },
                    "appGroupSecurityGroups": {
                      "type": "array"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "timeStamp": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "applicationGroupLogs": [
                      {
                        "categoryGroup": "allLogs",
                        "enabled": true
                      }
                    ],
                    "desktopVirtualizationUserRoleId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '1d18fff3-a72a-46b5-b4a9-0b38a3cd7e63')]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.DesktopVirtualization/applicationGroups",
                      "apiVersion": "2021-03-09-preview",
                      "name": "[parameters('desktopApplicationGroupName')]",
                      "location": "[parameters('location')]",
                      "tags": "[union(createObject('cm-resource-parent', parameters('hostPoolResourceId')), coalesce(tryGet(parameters('tags'), 'Microsoft.DesktopVirtualization/applicationGroups'), createObject()))]",
                      "properties": {
                        "hostPoolArmPath": "[parameters('hostPoolResourceId')]",
                        "applicationGroupType": "Desktop"
                      }
                    },
                    {
                      "condition": "[not(empty(parameters('logAnalyticsWorkspaceResourceId')))]",
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.DesktopVirtualization/applicationGroups/{0}', parameters('desktopApplicationGroupName'))]",
                      "name": "[format('diag-{0}', parameters('desktopApplicationGroupName'))]",
                      "properties": {
                        "logs": "[variables('applicationGroupLogs')]",
                        "workspaceId": "[parameters('logAnalyticsWorkspaceResourceId')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.DesktopVirtualization/applicationGroups', parameters('desktopApplicationGroupName'))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "roleAssignment",
                        "count": "[length(range(0, length(parameters('appGroupSecurityGroups'))))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.DesktopVirtualization/applicationGroups/{0}', parameters('desktopApplicationGroupName'))]",
                      "name": "[guid(resourceId('Microsoft.DesktopVirtualization/applicationGroups', parameters('desktopApplicationGroupName')), parameters('appGroupSecurityGroups')[range(0, length(parameters('appGroupSecurityGroups')))[copyIndex()]], variables('desktopVirtualizationUserRoleId'))]",
                      "properties": {
                        "roleDefinitionId": "[variables('desktopVirtualizationUserRoleId')]",
                        "principalId": "[parameters('appGroupSecurityGroups')[range(0, length(parameters('appGroupSecurityGroups')))[copyIndex()]]]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.DesktopVirtualization/applicationGroups', parameters('desktopApplicationGroupName'))]"
                      ]
                    },
                    {
                      "condition": "[not(empty(parameters('desktopFriendlyName')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('DesktopFriendlyName_{0}', parameters('timeStamp'))]",
                      "resourceGroup": "[parameters('resourceGroupDeployment')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "applicationGroupResourceId": {
                            "value": "[resourceId('Microsoft.DesktopVirtualization/applicationGroups', parameters('desktopApplicationGroupName'))]"
                          },
                          "desktopFriendlyName": {
                            "value": "[parameters('desktopFriendlyName')]"
                          },
                          "userAssignedIdentityClientId": {
                            "value": "[parameters('deploymentUserAssignedIdentityClientId')]"
                          },
                          "location": {
                            "value": "[parameters('locationVirtualMachines')]"
                          },
                          "timeStamp": {
                            "value": "[parameters('timeStamp')]"
                          },
                          "virtualMachineName": {
                            "value": "[parameters('deploymentVirtualMachineName')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.36.1.42791",
                              "templateHash": "3363465810164786237"
                            }
                          },
                          "parameters": {
                            "applicationGroupResourceId": {
                              "type": "string"
                            },
                            "desktopFriendlyName": {
                              "type": "string"
                            },
                            "location": {
                              "type": "string"
                            },
                            "timeStamp": {
                              "type": "string"
                            },
                            "userAssignedIdentityClientId": {
                              "type": "string"
                            },
                            "virtualMachineName": {
                              "type": "string"
                            }
                          },
                          "variables": {
                            "$fxv#0": "Param(\r\n    [string]$ApplicationGroupResourceId,\r\n    [string]$FriendlyName,\r\n    [string]$ResourceManagerUri,\r\n    [string]$UserAssignedIdentityClientId\r\n)\r\n\r\n$ErrorActionPreference = 'Stop'\r\n$WarningPreference = 'SilentlyContinue'\r\n\r\nfunction Update-AvdSessionDesktopName {\r\n    # Get an access token for Azure resources\r\n    $AzureManagementAccessToken = (Invoke-RestMethod `\r\n            -Headers @{Metadata = \"true\" } `\r\n            -Uri $('http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01&resource=' + $ResourceManagerUriFixed + '&client_id=' + $UserAssignedIdentityClientId)).access_token\r\n\r\n    # Set header for Azure Management API\r\n    $AzureManagementHeader = @{\r\n        'Content-Type'  = 'application/json'\r\n        'Authorization' = 'Bearer ' + $AzureManagementAccessToken\r\n    }\r\n\r\n    # Update the friendly name on the session desktop\r\n    Invoke-RestMethod `\r\n        -Body (@{properties = @{friendlyName = $FriendlyName.Replace('\"', '')}} | ConvertTo-Json) `\r\n        -Headers $AzureManagementHeader `\r\n        -Method 'PATCH' `\r\n        -Uri $($ResourceManagerUriFixed + $ApplicationGroupResourceId + '/desktops/SessionDesktop?api-version=2023-09-05') | Out-Null\r\n}\r\n\r\n# Fix the resource manager URI since only AzureCloud contains a trailing slash\r\n$ResourceManagerUriFixed = if ($ResourceManagerUri[-1] -eq '/') { $ResourceManagerUri.Substring(0, $ResourceManagerUri.Length - 1) } else { $ResourceManagerUri }\r\n\r\ntry {\r\n    Update-AvdSessionDesktopName\r\n}\r\ncatch {\r\n    # Wait for role assignment propagation\r\n    Start-Sleep -Seconds 30\r\n    Update-AvdSessionDesktopName\r\n}"
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Compute/virtualMachines/runCommands",
                              "apiVersion": "2023-03-01",
                              "name": "[format('{0}/{1}', parameters('virtualMachineName'), format('updateDesktopFriendlyName_{0}', parameters('timeStamp')))]",
                              "location": "[parameters('location')]",
                              "properties": {
                                "asyncExecution": false,
                                "parameters": [
                                  {
                                    "name": "ApplicationGroupResourceId",
                                    "value": "[parameters('applicationGroupResourceId')]"
                                  },
                                  {
                                    "name": "FriendlyName",
                                    "value": "[parameters('desktopFriendlyName')]"
                                  },
                                  {
                                    "name": "ResourceManagerUri",
                                    "value": "[environment().resourceManager]"
                                  },
                                  {
                                    "name": "UserAssignedIdentityClientId",
                                    "value": "[parameters('userAssignedIdentityClientId')]"
                                  }
                                ],
                                "source": {
                                  "script": "[variables('$fxv#0')]"
                                },
                                "timeoutInSeconds": 120,
                                "treatFailureAsDeploymentFailure": true
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.DesktopVirtualization/applicationGroups', parameters('desktopApplicationGroupName'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "Name": {
                      "type": "string",
                      "value": "[parameters('desktopApplicationGroupName')]"
                    },
                    "ApplicationGroupResourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.DesktopVirtualization/applicationGroups', parameters('desktopApplicationGroupName'))]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupControlPlane')), 'Microsoft.Resources/deployments', format('HostPool_{0}', parameters('timeStamp')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('WorkspaceFeed_{0}', parameters('timeStamp'))]",
              "resourceGroup": "[parameters('resourceGroupControlPlane')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "applicationGroupResourceId": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupControlPlane')), 'Microsoft.Resources/deployments', format('ApplicationGroup_{0}', parameters('timeStamp'))), '2022-09-01').outputs.ApplicationGroupResourceId.value]"
                  },
                  "enableMonitoring": {
                    "value": "[parameters('enableMonitoring')]"
                  },
                  "existingWorkspaceProperties": "[if(not(empty(parameters('existingFeedWorkspaceResourceId'))), createObject('value', createObject('applicationGroupReferences', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('existingFeedWorkspaceResourceId'), '/')[2], split(parameters('existingFeedWorkspaceResourceId'), '/')[4]), 'Microsoft.DesktopVirtualization/workspaces', last(split(parameters('existingFeedWorkspaceResourceId'), '/'))), '2023-09-05').applicationGroupReferences, 'friendlyName', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('existingFeedWorkspaceResourceId'), '/')[2], split(parameters('existingFeedWorkspaceResourceId'), '/')[4]), 'Microsoft.DesktopVirtualization/workspaces', last(split(parameters('existingFeedWorkspaceResourceId'), '/'))), '2023-09-05').friendlyName, 'location', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('existingFeedWorkspaceResourceId'), '/')[2], split(parameters('existingFeedWorkspaceResourceId'), '/')[4]), 'Microsoft.DesktopVirtualization/workspaces', last(split(parameters('existingFeedWorkspaceResourceId'), '/'))), '2023-09-05', 'full').location, 'name', last(split(parameters('existingFeedWorkspaceResourceId'), '/')), 'publicNetworkAccess', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('existingFeedWorkspaceResourceId'), '/')[2], split(parameters('existingFeedWorkspaceResourceId'), '/')[4]), 'Microsoft.DesktopVirtualization/workspaces', last(split(parameters('existingFeedWorkspaceResourceId'), '/'))), '2023-09-05').publicNetworkAccess, 'resourceId', parameters('existingFeedWorkspaceResourceId'), 'tags', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('existingFeedWorkspaceResourceId'), '/')[2], split(parameters('existingFeedWorkspaceResourceId'), '/')[4]), 'Microsoft.DesktopVirtualization/workspaces', last(split(parameters('existingFeedWorkspaceResourceId'), '/'))), '2023-09-05', 'full').tags)), createObject('value', createObject()))]",
                  "friendlyName": {
                    "value": "[parameters('workspaceFriendlyName')]"
                  },
                  "groupIds": {
                    "value": [
                      "feed"
                    ]
                  },
                  "location": {
                    "value": "[parameters('locationControlPlane')]"
                  },
                  "logAnalyticsWorkspaceResourceId": {
                    "value": "[parameters('logAnalyticsWorkspaceResourceId')]"
                  },
                  "privateDnsZoneResourceId": {
                    "value": "[parameters('avdPrivateDnsZoneResourceId')]"
                  },
                  "privateEndpoint": "[if(or(not(equals(parameters('avdPrivateLinkPrivateRoutes'), 'None')), not(equals(parameters('avdPrivateLinkPrivateRoutes'), 'HostPool'))), createObject('value', true()), createObject('value', false()))]",
                  "privateEndpointLocation": "[if(not(empty(parameters('workspaceFeedPrivateEndpointSubnetResourceId'))), createObject('value', reference(subscriptionResourceId('Microsoft.Resources/deployments', format('WorkspaceFeedPrivateEndpointVnet_{0}', parameters('timeStamp'))), '2022-09-01').outputs.location.value), createObject('value', ''))]",
                  "privateEndpointName": {
                    "value": "[variables('feedPrivateEndpointName')]"
                  },
                  "privateEndpointNICName": {
                    "value": "[variables('feedPrivateEndpointNICName')]"
                  },
                  "privateEndpointSubnetResourceId": {
                    "value": "[parameters('workspaceFeedPrivateEndpointSubnetResourceId')]"
                  },
                  "publicNetworkAccess": {
                    "value": "[parameters('workspacePublicNetworkAccess')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "timeStamp": {
                    "value": "[parameters('timeStamp')]"
                  },
                  "workspaceName": {
                    "value": "[parameters('workspaceName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.36.1.42791",
                      "templateHash": "9772555778801875893"
                    }
                  },
                  "parameters": {
                    "applicationGroupResourceId": {
                      "type": "string"
                    },
                    "existingWorkspaceProperties": {
                      "type": "object"
                    },
                    "friendlyName": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "logAnalyticsWorkspaceResourceId": {
                      "type": "string"
                    },
                    "enableMonitoring": {
                      "type": "bool"
                    },
                    "groupIds": {
                      "type": "array"
                    },
                    "privateDnsZoneResourceId": {
                      "type": "string"
                    },
                    "privateEndpoint": {
                      "type": "bool"
                    },
                    "privateEndpointLocation": {
                      "type": "string"
                    },
                    "privateEndpointName": {
                      "type": "string"
                    },
                    "privateEndpointNICName": {
                      "type": "string"
                    },
                    "publicNetworkAccess": {
                      "type": "string"
                    },
                    "privateEndpointSubnetResourceId": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "timeStamp": {
                      "type": "string"
                    },
                    "workspaceName": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "existingWorkspaceReferences": "[if(not(empty(parameters('existingWorkspaceProperties'))), map(parameters('existingWorkspaceProperties').applicationGroupReferences, lambda('resId', toLower(lambdaVariables('resId')))), createArray())]",
                    "appGroupResId": "[toLower(parameters('applicationGroupResourceId'))]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.DesktopVirtualization/workspaces",
                      "apiVersion": "2023-09-05",
                      "name": "[if(empty(parameters('existingWorkspaceProperties')), parameters('workspaceName'), parameters('existingWorkspaceProperties').name)]",
                      "location": "[if(empty(parameters('existingWorkspaceProperties')), parameters('location'), parameters('existingWorkspaceProperties').location)]",
                      "tags": "[if(empty(parameters('existingWorkspaceProperties')), coalesce(tryGet(parameters('tags'), 'Microsoft.DesktopVirtualization/Workspaces'), createObject()), parameters('existingWorkspaceProperties').tags)]",
                      "properties": {
                        "applicationGroupReferences": "[if(empty(parameters('existingWorkspaceProperties')), createArray(parameters('applicationGroupResourceId')), union(variables('existingWorkspaceReferences'), createArray(variables('appGroupResId'))))]",
                        "friendlyName": "[if(empty(parameters('existingWorkspaceProperties')), parameters('friendlyName'), parameters('existingWorkspaceProperties').friendlyName)]",
                        "publicNetworkAccess": "[if(empty(parameters('existingWorkspaceProperties')), parameters('publicNetworkAccess'), parameters('existingWorkspaceProperties').publicNetworkAccess)]"
                      }
                    },
                    {
                      "condition": "[and(empty(parameters('existingWorkspaceProperties')), parameters('enableMonitoring'))]",
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.DesktopVirtualization/workspaces/{0}', if(empty(parameters('existingWorkspaceProperties')), parameters('workspaceName'), parameters('existingWorkspaceProperties').name))]",
                      "name": "WVDInsights",
                      "properties": {
                        "logs": [
                          {
                            "categoryGroup": "allLogs",
                            "enabled": true,
                            "retentionPolicy": {
                              "days": 0,
                              "enabled": false
                            }
                          }
                        ],
                        "workspaceId": "[parameters('logAnalyticsWorkspaceResourceId')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.DesktopVirtualization/workspaces', if(empty(parameters('existingWorkspaceProperties')), parameters('workspaceName'), parameters('existingWorkspaceProperties').name))]"
                      ]
                    },
                    {
                      "condition": "[and(parameters('privateEndpoint'), not(empty(parameters('privateEndpointSubnetResourceId'))))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}_privateEndpoint_{1}', parameters('workspaceName'), parameters('timeStamp'))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "customNetworkInterfaceName": {
                            "value": "[parameters('privateEndpointNICName')]"
                          },
                          "groupIds": {
                            "value": "[parameters('groupIds')]"
                          },
                          "location": "[if(not(empty(parameters('privateEndpointLocation'))), createObject('value', parameters('privateEndpointLocation')), createObject('value', parameters('location')))]",
                          "name": {
                            "value": "[parameters('privateEndpointName')]"
                          },
                          "privateDnsZoneGroup": "[if(empty(parameters('privateDnsZoneResourceId')), createObject('value', null()), createObject('value', createObject('privateDNSResourceIds', createArray(parameters('privateDnsZoneResourceId')))))]",
                          "serviceResourceId": "[if(empty(parameters('existingWorkspaceProperties')), createObject('value', resourceId('Microsoft.DesktopVirtualization/workspaces', if(empty(parameters('existingWorkspaceProperties')), parameters('workspaceName'), parameters('existingWorkspaceProperties').name))), createObject('value', parameters('existingWorkspaceProperties').resourceId))]",
                          "subnetResourceId": {
                            "value": "[parameters('privateEndpointSubnetResourceId')]"
                          },
                          "tags": {
                            "value": "[union(createObject('cm-resource-parent', resourceId('Microsoft.DesktopVirtualization/workspaces', if(empty(parameters('existingWorkspaceProperties')), parameters('workspaceName'), parameters('existingWorkspaceProperties').name))), coalesce(tryGet(parameters('tags'), 'Microsoft.Network/privateEndpoints'), createObject()))]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.36.1.42791",
                              "templateHash": "5820984105601907039"
                            },
                            "name": "Private Endpoints"
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the private endpoint resource to create."
                              }
                            },
                            "subnetResourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
                              }
                            },
                            "serviceResourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Resource ID of the resource that needs to be connected to the network."
                              }
                            },
                            "applicationSecurityGroups": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Application security groups in which the private endpoint IP configuration is included."
                              }
                            },
                            "customNetworkInterfaceName": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The custom name of the network interface attached to the private endpoint."
                              }
                            },
                            "ipConfigurations": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. A list of IP configurations of the private endpoint. This will be used to map to the First Party Service endpoints."
                              }
                            },
                            "groupIds": {
                              "type": "array",
                              "metadata": {
                                "description": "Required. Subtype(s) of the connection to be created. The allowed values depend on the type serviceResourceId refers to."
                              }
                            },
                            "privateDnsZoneGroup": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. The private DNS zone group configuration used to associate the private endpoint with one or multiple private DNS zones. A DNS zone group can support up to 5 DNS zones."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. Location for all Resources."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Tags to be applied on all resources/resource groups in this deployment."
                              }
                            },
                            "customDnsConfigs": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Custom DNS configurations."
                              }
                            },
                            "manualPrivateLinkServiceConnections": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Manual PrivateLink Service Connections."
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/privateEndpoints",
                              "apiVersion": "2023-04-01",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "applicationSecurityGroups": "[parameters('applicationSecurityGroups')]",
                                "customDnsConfigs": "[parameters('customDnsConfigs')]",
                                "customNetworkInterfaceName": "[parameters('customNetworkInterfaceName')]",
                                "ipConfigurations": "[parameters('ipConfigurations')]",
                                "manualPrivateLinkServiceConnections": "[parameters('manualPrivateLinkServiceConnections')]",
                                "privateLinkServiceConnections": [
                                  {
                                    "name": "[parameters('name')]",
                                    "properties": {
                                      "privateLinkServiceId": "[parameters('serviceResourceId')]",
                                      "groupIds": "[parameters('groupIds')]"
                                    }
                                  }
                                ],
                                "subnet": {
                                  "id": "[parameters('subnetResourceId')]"
                                }
                              }
                            },
                            {
                              "condition": "[not(empty(parameters('privateDnsZoneGroup')))]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('PE-PrivateDnsZoneGroup-{0}', uniqueString(deployment().name))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "privateDNSResourceIds": {
                                    "value": "[parameters('privateDnsZoneGroup').privateDNSResourceIds]"
                                  },
                                  "privateEndpointName": {
                                    "value": "[parameters('name')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.36.1.42791",
                                      "templateHash": "7513849818521025348"
                                    }
                                  },
                                  "parameters": {
                                    "privateEndpointName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent private endpoint. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "privateDNSResourceIds": {
                                      "type": "array",
                                      "minLength": 1,
                                      "maxLength": 5,
                                      "metadata": {
                                        "description": "Required. Array of private DNS zone resource IDs. A DNS zone group can support up to 5 DNS zones."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "defaultValue": "default",
                                      "metadata": {
                                        "description": "Optional. The name of the private DNS zone group."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "copy": [
                                      {
                                        "name": "privateDnsZoneConfigs",
                                        "count": "[length(parameters('privateDNSResourceIds'))]",
                                        "input": {
                                          "name": "[last(split(parameters('privateDNSResourceIds')[copyIndex('privateDnsZoneConfigs')], '/'))]",
                                          "properties": {
                                            "privateDnsZoneId": "[parameters('privateDNSResourceIds')[copyIndex('privateDnsZoneConfigs')]]"
                                          }
                                        }
                                      }
                                    ]
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                                      "apiVersion": "2023-04-01",
                                      "name": "[format('{0}/{1}', parameters('privateEndpointName'), parameters('name'))]",
                                      "properties": {
                                        "privateDnsZoneConfigs": "[variables('privateDnsZoneConfigs')]"
                                      }
                                    }
                                  ],
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the private endpoint DNS zone group."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the private endpoint DNS zone group."
                                      },
                                      "value": "[resourceId('Microsoft.Network/privateEndpoints/privateDnsZoneGroups', parameters('privateEndpointName'), parameters('name'))]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group the private endpoint was deployed into."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the private endpoint."
                              },
                              "value": "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the private endpoint."
                              },
                              "value": "[parameters('name')]"
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "The location the resource was deployed into."
                              },
                              "value": "[reference(resourceId('Microsoft.Network/privateEndpoints', parameters('name')), '2023-04-01', 'full').location]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.DesktopVirtualization/workspaces', if(empty(parameters('existingWorkspaceProperties')), parameters('workspaceName'), parameters('existingWorkspaceProperties').name))]"
                      ]
                    }
                  ]
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupControlPlane')), 'Microsoft.Resources/deployments', format('ApplicationGroup_{0}', parameters('timeStamp')))]",
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('WorkspaceFeedPrivateEndpointVnet_{0}', parameters('timeStamp')))]"
              ]
            },
            {
              "condition": "[and(parameters('deployScalingPlan'), contains(parameters('hostPoolType'), 'Pooled'))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('ScalingPlan_{0}', parameters('timeStamp'))]",
              "resourceGroup": "[parameters('resourceGroupControlPlane')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "diagnosticWorkspaceId": {
                    "value": "[parameters('logAnalyticsWorkspaceResourceId')]"
                  },
                  "exclusionTag": {
                    "value": "[parameters('scalingPlanExclusionTag')]"
                  },
                  "hostPoolResourceId": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupControlPlane')), 'Microsoft.Resources/deployments', format('HostPool_{0}', parameters('timeStamp'))), '2022-09-01').outputs.resourceId.value]"
                  },
                  "hostPoolType": {
                    "value": "[split(parameters('hostPoolType'), ' ')[0]]"
                  },
                  "location": {
                    "value": "[parameters('locationVirtualMachines')]"
                  },
                  "name": {
                    "value": "[parameters('scalingPlanName')]"
                  },
                  "schedules": {
                    "value": "[parameters('scalingPlanSchedules')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "timeZone": {
                    "value": "[parameters('virtualMachinesTimeZone')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.36.1.42791",
                      "templateHash": "720310608388393558"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "minLength": 3,
                      "metadata": {
                        "description": "Required. Name of the scaling plan."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all resources."
                      }
                    },
                    "friendlyName": {
                      "type": "string",
                      "defaultValue": "[parameters('name')]",
                      "metadata": {
                        "description": "Optional. Friendly Name of the scaling plan."
                      }
                    },
                    "description": {
                      "type": "string",
                      "defaultValue": "[parameters('name')]",
                      "metadata": {
                        "description": "Optional. Description of the scaling plan."
                      }
                    },
                    "timeZone": {
                      "type": "string",
                      "metadata": {
                        "description": "Optional. Timezone to be used for the scaling plan."
                      }
                    },
                    "hostPoolResourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "Optional. An array of references to hostpools."
                      }
                    },
                    "hostPoolType": {
                      "type": "string",
                      "metadata": {
                        "description": "Optional. The type of hostpool where this scaling plan should be applied."
                      }
                    },
                    "exclusionTag": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Provide a tag to be used for hosts that should not be affected by the scaling plan."
                      }
                    },
                    "schedules": {
                      "type": "array",
                      "defaultValue": [
                        {
                          "rampUpStartTime": {
                            "hour": 7,
                            "minute": 0
                          },
                          "peakStartTime": {
                            "hour": 8,
                            "minute": 0
                          },
                          "rampDownStartTime": {
                            "hour": 17,
                            "minute": 0
                          },
                          "offPeakStartTime": {
                            "hour": 20,
                            "minute": 0
                          },
                          "name": "weekdays_schedule",
                          "daysOfWeek": [
                            "Monday",
                            "Tuesday",
                            "Wednesday",
                            "Thursday",
                            "Friday"
                          ],
                          "rampUpLoadBalancingAlgorithm": "DepthFirst",
                          "rampUpMinimumHostsPct": 20,
                          "rampUpCapacityThresholdPct": 60,
                          "peakLoadBalancingAlgorithm": "DepthFirst",
                          "rampDownLoadBalancingAlgorithm": "DepthFirst",
                          "rampDownMinimumHostsPct": 10,
                          "rampDownCapacityThresholdPct": 90,
                          "rampDownForceLogoffUsers": true,
                          "rampDownWaitTimeMinutes": 30,
                          "rampDownNotificationMessage": "You will be logged off in 30 min. Make sure to save your work.",
                          "rampDownStopHostsWhen": "ZeroSessions",
                          "offPeakLoadBalancingAlgorithm": "DepthFirst"
                        }
                      ],
                      "metadata": {
                        "description": "Optional. The schedules related to this scaling plan. If no value is provided a default schedule will be provided."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    },
                    "diagnosticWorkspaceId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic log analytics workspace."
                      }
                    },
                    "diagnosticLogCategoriesToEnable": {
                      "type": "array",
                      "defaultValue": [
                        "allLogs"
                      ],
                      "allowedValues": [
                        "allLogs",
                        "Autoscale"
                      ],
                      "metadata": {
                        "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "diagnosticsLogsSpecified",
                        "count": "[length(filter(parameters('diagnosticLogCategoriesToEnable'), lambda('item', not(equals(lambdaVariables('item'), 'allLogs')))))]",
                        "input": {
                          "category": "[filter(parameters('diagnosticLogCategoriesToEnable'), lambda('item', not(equals(lambdaVariables('item'), 'allLogs'))))[copyIndex('diagnosticsLogsSpecified')]]",
                          "enabled": true
                        }
                      }
                    ],
                    "diagnosticsLogs": "[if(contains(parameters('diagnosticLogCategoriesToEnable'), 'allLogs'), createArray(createObject('categoryGroup', 'allLogs', 'enabled', true())), variables('diagnosticsLogsSpecified'))]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.DesktopVirtualization/scalingPlans",
                      "apiVersion": "2022-09-09",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[coalesce(tryGet(parameters('tags'), 'Microsoft.DesktopVirtualization/scalingPlans'), createObject())]",
                      "properties": {
                        "friendlyName": "[parameters('friendlyName')]",
                        "timeZone": "[parameters('timeZone')]",
                        "hostPoolType": "[parameters('hostPoolType')]",
                        "exclusionTag": "[parameters('exclusionTag')]",
                        "schedules": "[parameters('schedules')]",
                        "hostPoolReferences": [
                          {
                            "hostPoolArmPath": "[parameters('hostPoolResourceId')]",
                            "scalingPlanEnabled": true
                          }
                        ],
                        "description": "[parameters('description')]"
                      }
                    },
                    {
                      "condition": "[not(empty(parameters('diagnosticWorkspaceId')))]",
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.DesktopVirtualization/scalingPlans/{0}', parameters('name'))]",
                      "name": "[format('{0}-diagnosticsetting', parameters('name'))]",
                      "properties": {
                        "workspaceId": "[if(not(empty(parameters('diagnosticWorkspaceId'))), parameters('diagnosticWorkspaceId'), null())]",
                        "logs": "[variables('diagnosticsLogs')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.DesktopVirtualization/scalingPlans', parameters('name'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the AVD scaling plan."
                      },
                      "value": "[resourceId('Microsoft.DesktopVirtualization/scalingPlans', parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group the AVD scaling plan was deployed into."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the AVD scaling plan."
                      },
                      "value": "[parameters('name')]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference(resourceId('Microsoft.DesktopVirtualization/scalingPlans', parameters('name')), '2022-09-09', 'full').location]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupControlPlane')), 'Microsoft.Resources/deployments', format('HostPool_{0}', parameters('timeStamp')))]"
              ]
            },
            {
              "condition": "[and(and(and(empty(parameters('existingGlobalWorkspaceResourceId')), equals(parameters('avdPrivateLinkPrivateRoutes'), 'All')), not(empty(parameters('globalFeedPrivateDnsZoneResourceId')))), not(empty(parameters('globalFeedPrivateEndpointSubnetResourceId'))))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('Global_Feed_Workspace_{0}', parameters('timeStamp'))]",
              "resourceGroup": "[parameters('resourceGroupGlobalFeed')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "applicationGroupResourceId": {
                    "value": ""
                  },
                  "existingWorkspaceProperties": {
                    "value": {}
                  },
                  "enableMonitoring": {
                    "value": "[parameters('enableMonitoring')]"
                  },
                  "friendlyName": {
                    "value": ""
                  },
                  "groupIds": {
                    "value": [
                      "global"
                    ]
                  },
                  "location": {
                    "value": "[parameters('locationGlobalFeed')]"
                  },
                  "logAnalyticsWorkspaceResourceId": {
                    "value": "[parameters('logAnalyticsWorkspaceResourceId')]"
                  },
                  "privateDnsZoneResourceId": {
                    "value": "[parameters('globalFeedPrivateDnsZoneResourceId')]"
                  },
                  "privateEndpoint": {
                    "value": true
                  },
                  "privateEndpointLocation": "[if(not(empty(parameters('globalFeedPrivateEndpointSubnetResourceId'))), createObject('value', reference(subscriptionResourceId('Microsoft.Resources/deployments', format('GlobalFeedPrivateEndpointVnet_{0}', parameters('timeStamp'))), '2022-09-01').outputs.location.value), createObject('value', ''))]",
                  "privateEndpointName": {
                    "value": "[variables('globalFeedPrivateEndpointName')]"
                  },
                  "privateEndpointNICName": {
                    "value": "[variables('globalFeedPrivateEndpointNICName')]"
                  },
                  "privateEndpointSubnetResourceId": {
                    "value": "[parameters('globalFeedPrivateEndpointSubnetResourceId')]"
                  },
                  "publicNetworkAccess": {
                    "value": "Enabled"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "timeStamp": {
                    "value": "[parameters('timeStamp')]"
                  },
                  "workspaceName": {
                    "value": "[parameters('globalWorkspaceName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.36.1.42791",
                      "templateHash": "9772555778801875893"
                    }
                  },
                  "parameters": {
                    "applicationGroupResourceId": {
                      "type": "string"
                    },
                    "existingWorkspaceProperties": {
                      "type": "object"
                    },
                    "friendlyName": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "logAnalyticsWorkspaceResourceId": {
                      "type": "string"
                    },
                    "enableMonitoring": {
                      "type": "bool"
                    },
                    "groupIds": {
                      "type": "array"
                    },
                    "privateDnsZoneResourceId": {
                      "type": "string"
                    },
                    "privateEndpoint": {
                      "type": "bool"
                    },
                    "privateEndpointLocation": {
                      "type": "string"
                    },
                    "privateEndpointName": {
                      "type": "string"
                    },
                    "privateEndpointNICName": {
                      "type": "string"
                    },
                    "publicNetworkAccess": {
                      "type": "string"
                    },
                    "privateEndpointSubnetResourceId": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "timeStamp": {
                      "type": "string"
                    },
                    "workspaceName": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "existingWorkspaceReferences": "[if(not(empty(parameters('existingWorkspaceProperties'))), map(parameters('existingWorkspaceProperties').applicationGroupReferences, lambda('resId', toLower(lambdaVariables('resId')))), createArray())]",
                    "appGroupResId": "[toLower(parameters('applicationGroupResourceId'))]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.DesktopVirtualization/workspaces",
                      "apiVersion": "2023-09-05",
                      "name": "[if(empty(parameters('existingWorkspaceProperties')), parameters('workspaceName'), parameters('existingWorkspaceProperties').name)]",
                      "location": "[if(empty(parameters('existingWorkspaceProperties')), parameters('location'), parameters('existingWorkspaceProperties').location)]",
                      "tags": "[if(empty(parameters('existingWorkspaceProperties')), coalesce(tryGet(parameters('tags'), 'Microsoft.DesktopVirtualization/Workspaces'), createObject()), parameters('existingWorkspaceProperties').tags)]",
                      "properties": {
                        "applicationGroupReferences": "[if(empty(parameters('existingWorkspaceProperties')), createArray(parameters('applicationGroupResourceId')), union(variables('existingWorkspaceReferences'), createArray(variables('appGroupResId'))))]",
                        "friendlyName": "[if(empty(parameters('existingWorkspaceProperties')), parameters('friendlyName'), parameters('existingWorkspaceProperties').friendlyName)]",
                        "publicNetworkAccess": "[if(empty(parameters('existingWorkspaceProperties')), parameters('publicNetworkAccess'), parameters('existingWorkspaceProperties').publicNetworkAccess)]"
                      }
                    },
                    {
                      "condition": "[and(empty(parameters('existingWorkspaceProperties')), parameters('enableMonitoring'))]",
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.DesktopVirtualization/workspaces/{0}', if(empty(parameters('existingWorkspaceProperties')), parameters('workspaceName'), parameters('existingWorkspaceProperties').name))]",
                      "name": "WVDInsights",
                      "properties": {
                        "logs": [
                          {
                            "categoryGroup": "allLogs",
                            "enabled": true,
                            "retentionPolicy": {
                              "days": 0,
                              "enabled": false
                            }
                          }
                        ],
                        "workspaceId": "[parameters('logAnalyticsWorkspaceResourceId')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.DesktopVirtualization/workspaces', if(empty(parameters('existingWorkspaceProperties')), parameters('workspaceName'), parameters('existingWorkspaceProperties').name))]"
                      ]
                    },
                    {
                      "condition": "[and(parameters('privateEndpoint'), not(empty(parameters('privateEndpointSubnetResourceId'))))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}_privateEndpoint_{1}', parameters('workspaceName'), parameters('timeStamp'))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "customNetworkInterfaceName": {
                            "value": "[parameters('privateEndpointNICName')]"
                          },
                          "groupIds": {
                            "value": "[parameters('groupIds')]"
                          },
                          "location": "[if(not(empty(parameters('privateEndpointLocation'))), createObject('value', parameters('privateEndpointLocation')), createObject('value', parameters('location')))]",
                          "name": {
                            "value": "[parameters('privateEndpointName')]"
                          },
                          "privateDnsZoneGroup": "[if(empty(parameters('privateDnsZoneResourceId')), createObject('value', null()), createObject('value', createObject('privateDNSResourceIds', createArray(parameters('privateDnsZoneResourceId')))))]",
                          "serviceResourceId": "[if(empty(parameters('existingWorkspaceProperties')), createObject('value', resourceId('Microsoft.DesktopVirtualization/workspaces', if(empty(parameters('existingWorkspaceProperties')), parameters('workspaceName'), parameters('existingWorkspaceProperties').name))), createObject('value', parameters('existingWorkspaceProperties').resourceId))]",
                          "subnetResourceId": {
                            "value": "[parameters('privateEndpointSubnetResourceId')]"
                          },
                          "tags": {
                            "value": "[union(createObject('cm-resource-parent', resourceId('Microsoft.DesktopVirtualization/workspaces', if(empty(parameters('existingWorkspaceProperties')), parameters('workspaceName'), parameters('existingWorkspaceProperties').name))), coalesce(tryGet(parameters('tags'), 'Microsoft.Network/privateEndpoints'), createObject()))]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.36.1.42791",
                              "templateHash": "5820984105601907039"
                            },
                            "name": "Private Endpoints"
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the private endpoint resource to create."
                              }
                            },
                            "subnetResourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
                              }
                            },
                            "serviceResourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Resource ID of the resource that needs to be connected to the network."
                              }
                            },
                            "applicationSecurityGroups": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Application security groups in which the private endpoint IP configuration is included."
                              }
                            },
                            "customNetworkInterfaceName": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The custom name of the network interface attached to the private endpoint."
                              }
                            },
                            "ipConfigurations": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. A list of IP configurations of the private endpoint. This will be used to map to the First Party Service endpoints."
                              }
                            },
                            "groupIds": {
                              "type": "array",
                              "metadata": {
                                "description": "Required. Subtype(s) of the connection to be created. The allowed values depend on the type serviceResourceId refers to."
                              }
                            },
                            "privateDnsZoneGroup": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. The private DNS zone group configuration used to associate the private endpoint with one or multiple private DNS zones. A DNS zone group can support up to 5 DNS zones."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. Location for all Resources."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Tags to be applied on all resources/resource groups in this deployment."
                              }
                            },
                            "customDnsConfigs": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Custom DNS configurations."
                              }
                            },
                            "manualPrivateLinkServiceConnections": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Manual PrivateLink Service Connections."
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/privateEndpoints",
                              "apiVersion": "2023-04-01",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "applicationSecurityGroups": "[parameters('applicationSecurityGroups')]",
                                "customDnsConfigs": "[parameters('customDnsConfigs')]",
                                "customNetworkInterfaceName": "[parameters('customNetworkInterfaceName')]",
                                "ipConfigurations": "[parameters('ipConfigurations')]",
                                "manualPrivateLinkServiceConnections": "[parameters('manualPrivateLinkServiceConnections')]",
                                "privateLinkServiceConnections": [
                                  {
                                    "name": "[parameters('name')]",
                                    "properties": {
                                      "privateLinkServiceId": "[parameters('serviceResourceId')]",
                                      "groupIds": "[parameters('groupIds')]"
                                    }
                                  }
                                ],
                                "subnet": {
                                  "id": "[parameters('subnetResourceId')]"
                                }
                              }
                            },
                            {
                              "condition": "[not(empty(parameters('privateDnsZoneGroup')))]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('PE-PrivateDnsZoneGroup-{0}', uniqueString(deployment().name))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "privateDNSResourceIds": {
                                    "value": "[parameters('privateDnsZoneGroup').privateDNSResourceIds]"
                                  },
                                  "privateEndpointName": {
                                    "value": "[parameters('name')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.36.1.42791",
                                      "templateHash": "7513849818521025348"
                                    }
                                  },
                                  "parameters": {
                                    "privateEndpointName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent private endpoint. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "privateDNSResourceIds": {
                                      "type": "array",
                                      "minLength": 1,
                                      "maxLength": 5,
                                      "metadata": {
                                        "description": "Required. Array of private DNS zone resource IDs. A DNS zone group can support up to 5 DNS zones."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "defaultValue": "default",
                                      "metadata": {
                                        "description": "Optional. The name of the private DNS zone group."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "copy": [
                                      {
                                        "name": "privateDnsZoneConfigs",
                                        "count": "[length(parameters('privateDNSResourceIds'))]",
                                        "input": {
                                          "name": "[last(split(parameters('privateDNSResourceIds')[copyIndex('privateDnsZoneConfigs')], '/'))]",
                                          "properties": {
                                            "privateDnsZoneId": "[parameters('privateDNSResourceIds')[copyIndex('privateDnsZoneConfigs')]]"
                                          }
                                        }
                                      }
                                    ]
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                                      "apiVersion": "2023-04-01",
                                      "name": "[format('{0}/{1}', parameters('privateEndpointName'), parameters('name'))]",
                                      "properties": {
                                        "privateDnsZoneConfigs": "[variables('privateDnsZoneConfigs')]"
                                      }
                                    }
                                  ],
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the private endpoint DNS zone group."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the private endpoint DNS zone group."
                                      },
                                      "value": "[resourceId('Microsoft.Network/privateEndpoints/privateDnsZoneGroups', parameters('privateEndpointName'), parameters('name'))]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group the private endpoint was deployed into."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the private endpoint."
                              },
                              "value": "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the private endpoint."
                              },
                              "value": "[parameters('name')]"
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "The location the resource was deployed into."
                              },
                              "value": "[reference(resourceId('Microsoft.Network/privateEndpoints', parameters('name')), '2023-04-01', 'full').location]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.DesktopVirtualization/workspaces', if(empty(parameters('existingWorkspaceProperties')), parameters('workspaceName'), parameters('existingWorkspaceProperties').name))]"
                      ]
                    }
                  ]
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupControlPlane')), 'Microsoft.Resources/deployments', format('WorkspaceFeed_{0}', parameters('timeStamp')))]",
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('GlobalFeedPrivateEndpointVnet_{0}', parameters('timeStamp')))]"
              ]
            }
          ],
          "outputs": {
            "hostPoolResourceId": {
              "type": "string",
              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupControlPlane')), 'Microsoft.Resources/deployments', format('HostPool_{0}', parameters('timeStamp'))), '2022-09-01').outputs.resourceId.value]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('Deployment_Prereqs_{0}', parameters('timeStamp')))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('Management_{0}', parameters('timeStamp')))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('ResourceNames_{0}', parameters('timeStamp')))]",
        "rgs"
      ]
    },
    {
      "condition": "[and(equals(parameters('deploymentType'), 'Complete'), parameters('deployFSLogixStorage'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('FSLogix_{0}', parameters('timeStamp'))]",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "activeDirectoryConnection": {
            "value": "[parameters('existingSharedActiveDirectoryConnection')]"
          },
          "availability": {
            "value": "[parameters('availability')]"
          },
          "azureBackupPrivateDnsZoneResourceId": {
            "value": "[parameters('azureBackupPrivateDnsZoneResourceId')]"
          },
          "azureBlobPrivateDnsZoneResourceId": {
            "value": "[parameters('azureBlobPrivateDnsZoneResourceId')]"
          },
          "azureFilePrivateDnsZoneResourceId": {
            "value": "[parameters('azureFilesPrivateDnsZoneResourceId')]"
          },
          "azureFunctionAppPrivateDnsZoneResourceId": {
            "value": "[parameters('azureFunctionAppPrivateDnsZoneResourceId')]"
          },
          "azureQueuePrivateDnsZoneResourceId": {
            "value": "[parameters('azureQueuePrivateDnsZoneResourceId')]"
          },
          "azureTablePrivateDnsZoneResourceId": {
            "value": "[parameters('azureTablePrivateDnsZoneResourceId')]"
          },
          "deploymentUserAssignedIdentityClientId": "[if(and(equals(parameters('deploymentType'), 'Complete'), or(contains(parameters('identitySolution'), 'DomainServices'), contains(parameters('fslogixStorageService'), 'AzureNetApp'))), createObject('value', reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Deployment_Prereqs_{0}', parameters('timeStamp'))), '2022-09-01').outputs.deploymentUserAssignedIdentityClientId.value), createObject('value', ''))]",
          "deploymentVirtualMachineName": "[if(and(equals(parameters('deploymentType'), 'Complete'), or(contains(parameters('identitySolution'), 'DomainServices'), contains(parameters('fslogixStorageService'), 'AzureNetApp'))), createObject('value', reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Deployment_Prereqs_{0}', parameters('timeStamp'))), '2022-09-01').outputs.virtualMachineName.value), createObject('value', ''))]",
          "domainJoinUserPassword": "[if(contains(parameters('identitySolution'), 'DomainServices'), if(not(empty(parameters('domainJoinUserPassword'))), createObject('value', parameters('domainJoinUserPassword')), if(not(empty(parameters('credentialsKeyVaultResourceId'))), createObject('reference', createObject('keyVault', createObject('id', extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('credentialsKeyVaultResourceId'), '/')[2], split(parameters('credentialsKeyVaultResourceId'), '/')[4]), 'Microsoft.KeyVault/vaults', last(split(parameters('credentialsKeyVaultResourceId'), '/')))), 'secretName', 'DomainJoinUserPassword')), createObject('value', ''))), createObject('value', ''))]",
          "domainJoinUserPrincipalName": "[if(contains(parameters('identitySolution'), 'DomainServices'), if(not(empty(parameters('domainJoinUserPrincipalName'))), createObject('value', parameters('domainJoinUserPrincipalName')), if(not(empty(parameters('credentialsKeyVaultResourceId'))), createObject('reference', createObject('keyVault', createObject('id', extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('credentialsKeyVaultResourceId'), '/')[2], split(parameters('credentialsKeyVaultResourceId'), '/')[4]), 'Microsoft.KeyVault/vaults', last(split(parameters('credentialsKeyVaultResourceId'), '/')))), 'secretName', 'DomainJoinUserPrincipalName')), createObject('value', ''))), createObject('value', ''))]",
          "domainName": {
            "value": "[parameters('domainName')]"
          },
          "encryptionKeyVaultResourceId": "[if(equals(parameters('deploymentType'), 'Complete'), createObject('value', reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Management_{0}', parameters('timeStamp'))), '2022-09-01').outputs.encryptionKeyVaultResourceId.value), createObject('value', ''))]",
          "encryptionKeyVaultUri": "[if(equals(parameters('deploymentType'), 'Complete'), createObject('value', reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Management_{0}', parameters('timeStamp'))), '2022-09-01').outputs.encryptionKeyVaultUri.value), createObject('value', ''))]",
          "fslogixAdminGroups": {
            "value": "[parameters('fslogixAdminGroups')]"
          },
          "fslogixEncryptionKeyNameConv": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('ResourceNames_{0}', parameters('timeStamp'))), '2022-09-01').outputs.encryptionKeyNames.value.fslogix]"
          },
          "fslogixFileShares": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('ResourceNames_{0}', parameters('timeStamp'))), '2022-09-01').outputs.fslogixFileShareNames.value[parameters('fslogixContainerType')]]"
          },
          "fslogixShardOptions": {
            "value": "[parameters('fslogixShardOptions')]"
          },
          "fslogixUserGroups": {
            "value": "[variables('fslogixNTFSGroups')]"
          },
          "functionAppDelegatedSubnetResourceId": {
            "value": "[parameters('functionAppSubnetResourceId')]"
          },
          "hostPoolResourceId": "[if(equals(parameters('deploymentType'), 'Complete'), createObject('value', reference(subscriptionResourceId('Microsoft.Resources/deployments', format('ControlPlane_{0}', parameters('timeStamp'))), '2022-09-01').outputs.hostPoolResourceId.value), createObject('value', parameters('existingHostPoolResourceId')))]",
          "identitySolution": {
            "value": "[parameters('identitySolution')]"
          },
          "increaseQuota": {
            "value": "[parameters('deployIncreaseQuota')]"
          },
          "increaseQuotaAppInsightsName": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('ResourceNames_{0}', parameters('timeStamp'))), '2022-09-01').outputs.appInsightsNames.value.increaseStorageQuota]"
          },
          "increaseQuotaEncryptionKeyName": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('ResourceNames_{0}', parameters('timeStamp'))), '2022-09-01').outputs.encryptionKeyNames.value.increaseStorageQuota]"
          },
          "increaseQuotaFunctionAppName": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('ResourceNames_{0}', parameters('timeStamp'))), '2022-09-01').outputs.functionAppNames.value.increaseStorageQuota]"
          },
          "increaseQuotaStorageAccountName": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('ResourceNames_{0}', parameters('timeStamp'))), '2022-09-01').outputs.storageAccountNames.value.increaseStorageQuota]"
          },
          "kerberosEncryptionType": {
            "value": "[parameters('fslogixStorageAccountADKerberosEncryption')]"
          },
          "keyExpirationInDays": {
            "value": "[parameters('keyExpirationInDays')]"
          },
          "keyManagementStorageAccounts": {
            "value": "[parameters('keyManagementStorageAccounts')]"
          },
          "location": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('virtualMachineSubnetResourceId'), '/')[2], split(parameters('virtualMachineSubnetResourceId'), '/')[4]), 'Microsoft.Network/virtualNetworks', split(parameters('virtualMachineSubnetResourceId'), '/')[8]), '2023-04-01', 'full').location]"
          },
          "logAnalyticsWorkspaceResourceId": "[if(and(equals(parameters('deploymentType'), 'Complete'), parameters('enableMonitoring')), createObject('value', reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Management_{0}', parameters('timeStamp'))), '2022-09-01').outputs.logAnalyticsWorkspaceResourceId.value), createObject('value', ''))]",
          "netAppVolumesSubnetResourceId": {
            "value": "[parameters('netAppVolumesSubnetResourceId')]"
          },
          "netAppAccountName": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('ResourceNames_{0}', parameters('timeStamp'))), '2022-09-01').outputs.netAppAccountName.value]"
          },
          "netAppCapacityPoolName": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('ResourceNames_{0}', parameters('timeStamp'))), '2022-09-01').outputs.netAppCapacityPoolName.value]"
          },
          "ouPath": "[if(empty(parameters('fslogixOUPath')), createObject('value', parameters('vmOUPath')), createObject('value', parameters('fslogixOUPath')))]",
          "privateEndpoint": {
            "value": "[parameters('deployPrivateEndpoints')]"
          },
          "privateEndpointNameConv": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('ResourceNames_{0}', parameters('timeStamp'))), '2022-09-01').outputs.privateEndpointNameConv.value]"
          },
          "privateEndpointNICNameConv": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('ResourceNames_{0}', parameters('timeStamp'))), '2022-09-01').outputs.privateEndpointNICNameConv.value]"
          },
          "privateEndpointSubnetResourceId": {
            "value": "[parameters('hostPoolResourcesPrivateEndpointSubnetResourceId')]"
          },
          "privateLinkScopeResourceId": {
            "value": "[parameters('azureMonitorPrivateLinkScopeResourceId')]"
          },
          "recoveryServices": {
            "value": "[parameters('recoveryServices')]"
          },
          "recoveryServicesVaultName": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('ResourceNames_{0}', parameters('timeStamp'))), '2022-09-01').outputs.recoveryServicesVaultNames.value.fslogixStorage]"
          },
          "resourceGroupDeployment": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('ResourceNames_{0}', parameters('timeStamp'))), '2022-09-01').outputs.resourceGroupDeployment.value]"
          },
          "resourceGroupStorage": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('ResourceNames_{0}', parameters('timeStamp'))), '2022-09-01').outputs.resourceGroupStorage.value]"
          },
          "serverFarmId": "[if(equals(parameters('deploymentType'), 'Complete'), createObject('value', reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Management_{0}', parameters('timeStamp'))), '2022-09-01').outputs.appServicePlanId.value), createObject('value', ''))]",
          "shareSizeInGB": {
            "value": "[parameters('fslogixShareSizeInGB')]"
          },
          "smbServerLocation": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('ResourceNames_{0}', parameters('timeStamp'))), '2022-09-01').outputs.locations.value[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('virtualMachineSubnetResourceId'), '/')[2], split(parameters('virtualMachineSubnetResourceId'), '/')[4]), 'Microsoft.Network/virtualNetworks', split(parameters('virtualMachineSubnetResourceId'), '/')[8]), '2023-04-01', 'full').location].abbreviation]"
          },
          "storageAccountNamePrefix": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('ResourceNames_{0}', parameters('timeStamp'))), '2022-09-01').outputs.storageAccountNames.value.fslogix]"
          },
          "storageCount": {
            "value": "[variables('fslogixStorageCount')]"
          },
          "storageIndex": {
            "value": "[parameters('fslogixStorageIndex')]"
          },
          "storageSku": "[if(equals(parameters('fslogixStorageService'), 'None'), createObject('value', 'None'), createObject('value', split(parameters('fslogixStorageService'), ' ')[1]))]",
          "storageSolution": {
            "value": "[split(parameters('fslogixStorageService'), ' ')[0]]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "timeStamp": {
            "value": "[parameters('timeStamp')]"
          },
          "timeZone": {
            "value": "[parameters('virtualMachinesTimeZone')]"
          },
          "userAssignedIdentityNameConv": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('ResourceNames_{0}', parameters('timeStamp'))), '2022-09-01').outputs.userAssignedIdentityNameConv.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.1.42791",
              "templateHash": "14045362553127969792"
            }
          },
          "parameters": {
            "activeDirectoryConnection": {
              "type": "bool"
            },
            "identitySolution": {
              "type": "string"
            },
            "availability": {
              "type": "string"
            },
            "azureBackupPrivateDnsZoneResourceId": {
              "type": "string"
            },
            "azureBlobPrivateDnsZoneResourceId": {
              "type": "string"
            },
            "azureFilePrivateDnsZoneResourceId": {
              "type": "string"
            },
            "azureFunctionAppPrivateDnsZoneResourceId": {
              "type": "string"
            },
            "azureQueuePrivateDnsZoneResourceId": {
              "type": "string"
            },
            "azureTablePrivateDnsZoneResourceId": {
              "type": "string"
            },
            "deploymentUserAssignedIdentityClientId": {
              "type": "string"
            },
            "deploymentVirtualMachineName": {
              "type": "string"
            },
            "domainJoinUserPassword": {
              "type": "securestring"
            },
            "domainJoinUserPrincipalName": {
              "type": "securestring"
            },
            "domainName": {
              "type": "string"
            },
            "encryptionKeyVaultResourceId": {
              "type": "string"
            },
            "encryptionKeyVaultUri": {
              "type": "string"
            },
            "fslogixAdminGroups": {
              "type": "array"
            },
            "fslogixEncryptionKeyNameConv": {
              "type": "string"
            },
            "fslogixFileShares": {
              "type": "array"
            },
            "fslogixShardOptions": {
              "type": "string"
            },
            "fslogixUserGroups": {
              "type": "array"
            },
            "functionAppDelegatedSubnetResourceId": {
              "type": "string"
            },
            "hostPoolResourceId": {
              "type": "string"
            },
            "increaseQuota": {
              "type": "bool"
            },
            "increaseQuotaAppInsightsName": {
              "type": "string"
            },
            "increaseQuotaEncryptionKeyName": {
              "type": "string"
            },
            "increaseQuotaFunctionAppName": {
              "type": "string"
            },
            "increaseQuotaStorageAccountName": {
              "type": "string"
            },
            "kerberosEncryptionType": {
              "type": "string"
            },
            "keyExpirationInDays": {
              "type": "int"
            },
            "keyManagementStorageAccounts": {
              "type": "string"
            },
            "location": {
              "type": "string"
            },
            "logAnalyticsWorkspaceResourceId": {
              "type": "string"
            },
            "netAppAccountName": {
              "type": "string"
            },
            "netAppCapacityPoolName": {
              "type": "string"
            },
            "netAppVolumesSubnetResourceId": {
              "type": "string"
            },
            "ouPath": {
              "type": "string"
            },
            "privateEndpoint": {
              "type": "bool"
            },
            "privateEndpointNameConv": {
              "type": "string"
            },
            "privateEndpointNICNameConv": {
              "type": "string"
            },
            "privateEndpointSubnetResourceId": {
              "type": "string"
            },
            "privateLinkScopeResourceId": {
              "type": "string"
            },
            "recoveryServices": {
              "type": "bool"
            },
            "recoveryServicesVaultName": {
              "type": "string"
            },
            "resourceGroupDeployment": {
              "type": "string"
            },
            "resourceGroupStorage": {
              "type": "string"
            },
            "serverFarmId": {
              "type": "string"
            },
            "shareSizeInGB": {
              "type": "int"
            },
            "smbServerLocation": {
              "type": "string"
            },
            "storageAccountNamePrefix": {
              "type": "string"
            },
            "storageCount": {
              "type": "int"
            },
            "storageIndex": {
              "type": "int"
            },
            "storageSku": {
              "type": "string"
            },
            "storageSolution": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            },
            "timeStamp": {
              "type": "string"
            },
            "timeZone": {
              "type": "string"
            },
            "userAssignedIdentityNameConv": {
              "type": "string"
            }
          },
          "resources": [
            {
              "condition": "[and(equals(parameters('storageSolution'), 'AzureFiles'), not(equals(parameters('keyManagementStorageAccounts'), 'MicrosoftManaged')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('CustomerManagedKeys_{0}', parameters('timeStamp'))]",
              "resourceGroup": "[parameters('resourceGroupStorage')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "hostPoolResourceId": {
                    "value": "[parameters('hostPoolResourceId')]"
                  },
                  "keyExpirationInDays": {
                    "value": "[parameters('keyExpirationInDays')]"
                  },
                  "keyManagementStorageAccounts": {
                    "value": "[parameters('keyManagementStorageAccounts')]"
                  },
                  "keyVaultResourceId": {
                    "value": "[parameters('encryptionKeyVaultResourceId')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "storageCount": {
                    "value": "[parameters('storageCount')]"
                  },
                  "storageIndex": {
                    "value": "[parameters('storageIndex')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "timeStamp": {
                    "value": "[parameters('timeStamp')]"
                  },
                  "userAssignedIdentityNameConv": {
                    "value": "[parameters('userAssignedIdentityNameConv')]"
                  },
                  "fslogixEncryptionKeyNameConv": {
                    "value": "[parameters('fslogixEncryptionKeyNameConv')]"
                  },
                  "increaseQuotaEncryptionKeyName": {
                    "value": "[parameters('increaseQuotaEncryptionKeyName')]"
                  },
                  "increaseQuota": {
                    "value": "[parameters('increaseQuota')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.36.1.42791",
                      "templateHash": "6252815144203709911"
                    }
                  },
                  "parameters": {
                    "hostPoolResourceId": {
                      "type": "string"
                    },
                    "keyExpirationInDays": {
                      "type": "int"
                    },
                    "keyManagementStorageAccounts": {
                      "type": "string"
                    },
                    "fslogixEncryptionKeyNameConv": {
                      "type": "string"
                    },
                    "keyVaultResourceId": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "storageCount": {
                      "type": "int"
                    },
                    "storageIndex": {
                      "type": "int"
                    },
                    "increaseQuota": {
                      "type": "bool"
                    },
                    "increaseQuotaEncryptionKeyName": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "timeStamp": {
                      "type": "string"
                    },
                    "userAssignedIdentityNameConv": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "keyVaultName": "[last(split(parameters('keyVaultResourceId'), '/'))]",
                    "keyVaultResourceGroup": "[split(parameters('keyVaultResourceId'), '/')[4]]"
                  },
                  "resources": [
                    {
                      "copy": {
                        "name": "fslogixStorageAccountEncryptionKeys",
                        "count": "[length(range(0, parameters('storageCount')))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('StorageEncryptionKey_{0}_{1}', add(range(0, parameters('storageCount'))[copyIndex()], parameters('storageIndex')), parameters('timeStamp'))]",
                      "resourceGroup": "[variables('keyVaultResourceGroup')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "keyVaultName": {
                            "value": "[variables('keyVaultName')]"
                          },
                          "name": {
                            "value": "[replace(parameters('fslogixEncryptionKeyNameConv'), '##', padLeft(add(range(0, parameters('storageCount'))[copyIndex()], parameters('storageIndex')), 2, '0'))]"
                          },
                          "attributesExportable": {
                            "value": false
                          },
                          "keySize": {
                            "value": 4096
                          },
                          "kty": "[if(contains(parameters('keyManagementStorageAccounts'), 'HSM'), createObject('value', 'RSA-HSM'), createObject('value', 'RSA'))]",
                          "rotationPolicy": {
                            "value": {
                              "attributes": {
                                "expiryTime": "[format('P{0}D', string(parameters('keyExpirationInDays')))]"
                              },
                              "lifetimeActions": [
                                {
                                  "action": {
                                    "type": "Notify"
                                  },
                                  "trigger": {
                                    "timeBeforeExpiry": "P10D"
                                  }
                                },
                                {
                                  "action": {
                                    "type": "Rotate"
                                  },
                                  "trigger": {
                                    "timeAfterCreate": "[format('P{0}D', string(sub(parameters('keyExpirationInDays'), 7)))]"
                                  }
                                }
                              ]
                            }
                          },
                          "tags": {
                            "value": {
                              "cm-resource-parent": "[parameters('hostPoolResourceId')]"
                            }
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.36.1.42791",
                              "templateHash": "1654904861852809717"
                            }
                          },
                          "parameters": {
                            "keyVaultName": {
                              "type": "string"
                            },
                            "name": {
                              "type": "string"
                            },
                            "tags": {
                              "type": "object",
                              "defaultValue": {}
                            },
                            "attributesEnabled": {
                              "type": "bool",
                              "defaultValue": true
                            },
                            "attributesExp": {
                              "type": "int",
                              "defaultValue": -1
                            },
                            "attributesNbf": {
                              "type": "int",
                              "defaultValue": -1
                            },
                            "curveName": {
                              "type": "string",
                              "defaultValue": "P-256"
                            },
                            "attributesExportable": {
                              "type": "bool",
                              "defaultValue": false
                            },
                            "keyOps": {
                              "type": "array",
                              "defaultValue": []
                            },
                            "keySize": {
                              "type": "int",
                              "defaultValue": -1
                            },
                            "kty": {
                              "type": "string",
                              "defaultValue": "EC"
                            },
                            "release_policy": {
                              "type": "object",
                              "defaultValue": {}
                            },
                            "rotationPolicy": {
                              "type": "object",
                              "defaultValue": {}
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.KeyVault/vaults/keys",
                              "apiVersion": "2022-07-01",
                              "name": "[format('{0}/{1}', parameters('keyVaultName'), parameters('name'))]",
                              "tags": "[if(empty(parameters('tags')), null(), parameters('tags'))]",
                              "properties": {
                                "attributes": {
                                  "enabled": "[parameters('attributesEnabled')]",
                                  "exportable": "[parameters('attributesExportable')]",
                                  "exp": "[if(not(equals(parameters('attributesExp'), -1)), parameters('attributesExp'), null())]",
                                  "nbf": "[if(not(equals(parameters('attributesNbf'), -1)), parameters('attributesNbf'), null())]"
                                },
                                "curveName": "[parameters('curveName')]",
                                "keyOps": "[parameters('keyOps')]",
                                "keySize": "[if(not(equals(parameters('keySize'), -1)), parameters('keySize'), null())]",
                                "kty": "[parameters('kty')]",
                                "release_policy": "[if(empty(parameters('release_policy')), null(), parameters('release_policy'))]",
                                "rotationPolicy": "[if(empty(parameters('rotationPolicy')), null(), parameters('rotationPolicy'))]"
                              }
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.KeyVault/vaults/keys', parameters('keyVaultName'), parameters('name'))]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "condition": "[parameters('increaseQuota')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('IncreaseQuotaEncryptionKey_{0}', parameters('timeStamp'))]",
                      "resourceGroup": "[variables('keyVaultResourceGroup')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "keyVaultName": {
                            "value": "[variables('keyVaultName')]"
                          },
                          "name": {
                            "value": "[parameters('increaseQuotaEncryptionKeyName')]"
                          },
                          "attributesExportable": {
                            "value": false
                          },
                          "keySize": {
                            "value": 4096
                          },
                          "kty": "[if(contains(parameters('keyManagementStorageAccounts'), 'HSM'), createObject('value', 'RSA-HSM'), createObject('value', 'RSA'))]",
                          "rotationPolicy": {
                            "value": {
                              "attributes": {
                                "expiryTime": "[format('P{0}D', string(parameters('keyExpirationInDays')))]"
                              },
                              "lifetimeActions": [
                                {
                                  "action": {
                                    "type": "Notify"
                                  },
                                  "trigger": {
                                    "timeBeforeExpiry": "P10D"
                                  }
                                },
                                {
                                  "action": {
                                    "type": "Rotate"
                                  },
                                  "trigger": {
                                    "timeAfterCreate": "[format('P{0}D', string(sub(parameters('keyExpirationInDays'), 7)))]"
                                  }
                                }
                              ]
                            }
                          },
                          "tags": {
                            "value": {
                              "cm-resource-parent": "[parameters('hostPoolResourceId')]"
                            }
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.36.1.42791",
                              "templateHash": "1654904861852809717"
                            }
                          },
                          "parameters": {
                            "keyVaultName": {
                              "type": "string"
                            },
                            "name": {
                              "type": "string"
                            },
                            "tags": {
                              "type": "object",
                              "defaultValue": {}
                            },
                            "attributesEnabled": {
                              "type": "bool",
                              "defaultValue": true
                            },
                            "attributesExp": {
                              "type": "int",
                              "defaultValue": -1
                            },
                            "attributesNbf": {
                              "type": "int",
                              "defaultValue": -1
                            },
                            "curveName": {
                              "type": "string",
                              "defaultValue": "P-256"
                            },
                            "attributesExportable": {
                              "type": "bool",
                              "defaultValue": false
                            },
                            "keyOps": {
                              "type": "array",
                              "defaultValue": []
                            },
                            "keySize": {
                              "type": "int",
                              "defaultValue": -1
                            },
                            "kty": {
                              "type": "string",
                              "defaultValue": "EC"
                            },
                            "release_policy": {
                              "type": "object",
                              "defaultValue": {}
                            },
                            "rotationPolicy": {
                              "type": "object",
                              "defaultValue": {}
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.KeyVault/vaults/keys",
                              "apiVersion": "2022-07-01",
                              "name": "[format('{0}/{1}', parameters('keyVaultName'), parameters('name'))]",
                              "tags": "[if(empty(parameters('tags')), null(), parameters('tags'))]",
                              "properties": {
                                "attributes": {
                                  "enabled": "[parameters('attributesEnabled')]",
                                  "exportable": "[parameters('attributesExportable')]",
                                  "exp": "[if(not(equals(parameters('attributesExp'), -1)), parameters('attributesExp'), null())]",
                                  "nbf": "[if(not(equals(parameters('attributesNbf'), -1)), parameters('attributesNbf'), null())]"
                                },
                                "curveName": "[parameters('curveName')]",
                                "keyOps": "[parameters('keyOps')]",
                                "keySize": "[if(not(equals(parameters('keySize'), -1)), parameters('keySize'), null())]",
                                "kty": "[parameters('kty')]",
                                "release_policy": "[if(empty(parameters('release_policy')), null(), parameters('release_policy'))]",
                                "rotationPolicy": "[if(empty(parameters('rotationPolicy')), null(), parameters('rotationPolicy'))]"
                              }
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.KeyVault/vaults/keys', parameters('keyVaultName'), parameters('name'))]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('UAI_Encryption_{0}', parameters('timeStamp'))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "name": {
                            "value": "[replace(parameters('userAssignedIdentityNameConv'), 'TOKEN', 'storage-encryption')]"
                          },
                          "tags": {
                            "value": "[union(createObject('cm-resource-parent', parameters('hostPoolResourceId')), coalesce(tryGet(parameters('tags'), 'Microsoft.ManagedIdentity/userAssignedIdentities'), createObject()))]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.36.1.42791",
                              "templateHash": "4626216023323723915"
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string"
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]"
                            },
                            "tags": {
                              "type": "object",
                              "defaultValue": {}
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
                              "apiVersion": "2023-01-31",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]"
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name'))]"
                            },
                            "principalId": {
                              "type": "string",
                              "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name')), '2023-01-31').principalId]"
                            },
                            "clientId": {
                              "type": "string",
                              "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name')), '2023-01-31').clientId]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "copy": {
                        "name": "roleAssignment_UAI_EncryptionUser_FSLogix",
                        "count": "[length(range(0, parameters('storageCount')))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('RA_Encryption_User_FSLogix_{0}-{1}', padLeft(add(range(0, parameters('storageCount'))[copyIndex()], parameters('storageIndex')), 2, '0'), parameters('timeStamp'))]",
                      "resourceGroup": "[variables('keyVaultResourceGroup')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "keyName": {
                            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('keyVaultResourceGroup')), 'Microsoft.Resources/deployments', format('StorageEncryptionKey_{0}_{1}', add(range(0, parameters('storageCount'))[range(0, parameters('storageCount'))[copyIndex()]], parameters('storageIndex')), parameters('timeStamp'))), '2022-09-01').outputs.name.value]"
                          },
                          "keyVaultName": {
                            "value": "[variables('keyVaultName')]"
                          },
                          "principalId": {
                            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('UAI_Encryption_{0}', parameters('timeStamp'))), '2022-09-01').outputs.principalId.value]"
                          },
                          "principalType": {
                            "value": "ServicePrincipal"
                          },
                          "roleDefinitionId": {
                            "value": "e147488a-f6f5-4113-8e2d-b22465e65bf6"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.36.1.42791",
                              "templateHash": "2517269434095045270"
                            }
                          },
                          "parameters": {
                            "keyVaultName": {
                              "type": "string"
                            },
                            "principalId": {
                              "type": "string"
                            },
                            "principalType": {
                              "type": "string"
                            },
                            "keyName": {
                              "type": "string"
                            },
                            "roleDefinitionId": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.KeyVault/vaults/{0}/keys/{1}', parameters('keyVaultName'), parameters('keyName'))]",
                              "name": "[guid(resourceId('Microsoft.KeyVault/vaults/keys', parameters('keyVaultName'), parameters('keyName')), parameters('principalId'), parameters('roleDefinitionId'))]",
                              "properties": {
                                "principalId": "[parameters('principalId')]",
                                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', parameters('roleDefinitionId'))]",
                                "principalType": "[parameters('principalType')]"
                              }
                            }
                          ],
                          "outputs": {
                            "roleAssignmentId": {
                              "type": "string",
                              "value": "[extensionResourceId(resourceId('Microsoft.KeyVault/vaults/keys', parameters('keyVaultName'), parameters('keyName')), 'Microsoft.Authorization/roleAssignments', guid(resourceId('Microsoft.KeyVault/vaults/keys', parameters('keyVaultName'), parameters('keyName')), parameters('principalId'), parameters('roleDefinitionId')))]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('keyVaultResourceGroup')), 'Microsoft.Resources/deployments', format('StorageEncryptionKey_{0}_{1}', add(range(0, parameters('storageCount'))[range(0, parameters('storageCount'))[copyIndex()]], parameters('storageIndex')), parameters('timeStamp')))]",
                        "[resourceId('Microsoft.Resources/deployments', format('UAI_Encryption_{0}', parameters('timeStamp')))]"
                      ]
                    },
                    {
                      "condition": "[parameters('increaseQuota')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('RA_Encryption_User_IncreaseQuota-{0}', parameters('timeStamp'))]",
                      "resourceGroup": "[variables('keyVaultResourceGroup')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "keyName": {
                            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('keyVaultResourceGroup')), 'Microsoft.Resources/deployments', format('IncreaseQuotaEncryptionKey_{0}', parameters('timeStamp'))), '2022-09-01').outputs.name.value]"
                          },
                          "keyVaultName": {
                            "value": "[variables('keyVaultName')]"
                          },
                          "principalId": {
                            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('UAI_Encryption_{0}', parameters('timeStamp'))), '2022-09-01').outputs.principalId.value]"
                          },
                          "principalType": {
                            "value": "ServicePrincipal"
                          },
                          "roleDefinitionId": {
                            "value": "e147488a-f6f5-4113-8e2d-b22465e65bf6"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.36.1.42791",
                              "templateHash": "2517269434095045270"
                            }
                          },
                          "parameters": {
                            "keyVaultName": {
                              "type": "string"
                            },
                            "principalId": {
                              "type": "string"
                            },
                            "principalType": {
                              "type": "string"
                            },
                            "keyName": {
                              "type": "string"
                            },
                            "roleDefinitionId": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.KeyVault/vaults/{0}/keys/{1}', parameters('keyVaultName'), parameters('keyName'))]",
                              "name": "[guid(resourceId('Microsoft.KeyVault/vaults/keys', parameters('keyVaultName'), parameters('keyName')), parameters('principalId'), parameters('roleDefinitionId'))]",
                              "properties": {
                                "principalId": "[parameters('principalId')]",
                                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', parameters('roleDefinitionId'))]",
                                "principalType": "[parameters('principalType')]"
                              }
                            }
                          ],
                          "outputs": {
                            "roleAssignmentId": {
                              "type": "string",
                              "value": "[extensionResourceId(resourceId('Microsoft.KeyVault/vaults/keys', parameters('keyVaultName'), parameters('keyName')), 'Microsoft.Authorization/roleAssignments', guid(resourceId('Microsoft.KeyVault/vaults/keys', parameters('keyVaultName'), parameters('keyName')), parameters('principalId'), parameters('roleDefinitionId')))]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('keyVaultResourceGroup')), 'Microsoft.Resources/deployments', format('IncreaseQuotaEncryptionKey_{0}', parameters('timeStamp')))]",
                        "[resourceId('Microsoft.Resources/deployments', format('UAI_Encryption_{0}', parameters('timeStamp')))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "userAssignedIdentityResourceId": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', format('UAI_Encryption_{0}', parameters('timeStamp'))), '2022-09-01').outputs.resourceId.value]"
                    },
                    "storageAccountKeyRoleAssignments": {
                      "type": "array",
                      "copy": {
                        "count": "[length(range(0, parameters('storageCount')))]",
                        "input": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('keyVaultResourceGroup')), 'Microsoft.Resources/deployments', format('RA_Encryption_User_FSLogix_{0}-{1}', padLeft(add(range(0, parameters('storageCount'))[range(0, parameters('storageCount'))[copyIndex()]], parameters('storageIndex')), 2, '0'), parameters('timeStamp'))), '2022-09-01').outputs.roleAssignmentId.value]"
                      }
                    },
                    "increaseQuotaKeyRoleAssignmentId": {
                      "type": "string",
                      "value": "[if(parameters('increaseQuota'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('keyVaultResourceGroup')), 'Microsoft.Resources/deployments', format('RA_Encryption_User_IncreaseQuota-{0}', parameters('timeStamp'))), '2022-09-01').outputs.roleAssignmentId.value, '')]"
                    }
                  }
                }
              }
            },
            {
              "condition": "[and(equals(parameters('storageSolution'), 'AzureNetAppFiles'), contains(parameters('identitySolution'), 'DomainServices'))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('AzureNetAppFiles_{0}', parameters('timeStamp'))]",
              "resourceGroup": "[parameters('resourceGroupStorage')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "activeDirectoryConnection": {
                    "value": "[parameters('activeDirectoryConnection')]"
                  },
                  "deploymentVirtualMachineName": {
                    "value": "[parameters('deploymentVirtualMachineName')]"
                  },
                  "domainJoinUserPassword": {
                    "value": "[parameters('domainJoinUserPassword')]"
                  },
                  "domainJoinUserPrincipalName": {
                    "value": "[parameters('domainJoinUserPrincipalName')]"
                  },
                  "domainName": {
                    "value": "[parameters('domainName')]"
                  },
                  "shares": {
                    "value": "[parameters('fslogixFileShares')]"
                  },
                  "shareSizeInGB": {
                    "value": "[parameters('shareSizeInGB')]"
                  },
                  "shareAdminGroups": {
                    "value": "[parameters('fslogixAdminGroups')]"
                  },
                  "shareUserGroups": {
                    "value": "[parameters('fslogixUserGroups')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "netAppAccountName": {
                    "value": "[parameters('netAppAccountName')]"
                  },
                  "netAppCapacityPoolName": {
                    "value": "[parameters('netAppCapacityPoolName')]"
                  },
                  "netAppVolumesSubnetResourceId": {
                    "value": "[parameters('netAppVolumesSubnetResourceId')]"
                  },
                  "ouPath": {
                    "value": "[parameters('ouPath')]"
                  },
                  "resourceGroupDeployment": {
                    "value": "[parameters('resourceGroupDeployment')]"
                  },
                  "smbServerLocation": {
                    "value": "[parameters('smbServerLocation')]"
                  },
                  "storageSku": {
                    "value": "[parameters('storageSku')]"
                  },
                  "storageSolution": {
                    "value": "[parameters('storageSolution')]"
                  },
                  "tagsNetAppAccount": {
                    "value": "[union(createObject('cm-resource-parent', parameters('hostPoolResourceId')), coalesce(tryGet(parameters('tags'), 'Microsoft.NetApp/netAppAccounts'), createObject()))]"
                  },
                  "timeStamp": {
                    "value": "[parameters('timeStamp')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.36.1.42791",
                      "templateHash": "18434780482586491974"
                    }
                  },
                  "parameters": {
                    "activeDirectoryConnection": {
                      "type": "bool"
                    },
                    "domainJoinUserPassword": {
                      "type": "securestring"
                    },
                    "domainJoinUserPrincipalName": {
                      "type": "securestring"
                    },
                    "domainName": {
                      "type": "string"
                    },
                    "shareSizeInGB": {
                      "type": "int"
                    },
                    "location": {
                      "type": "string"
                    },
                    "deploymentVirtualMachineName": {
                      "type": "string"
                    },
                    "netAppAccountName": {
                      "type": "string"
                    },
                    "netAppCapacityPoolName": {
                      "type": "string"
                    },
                    "netAppVolumesSubnetResourceId": {
                      "type": "string"
                    },
                    "ouPath": {
                      "type": "string"
                    },
                    "resourceGroupDeployment": {
                      "type": "string"
                    },
                    "shares": {
                      "type": "array"
                    },
                    "shareAdminGroups": {
                      "type": "array"
                    },
                    "shareUserGroups": {
                      "type": "array"
                    },
                    "smbServerLocation": {
                      "type": "string"
                    },
                    "storageSku": {
                      "type": "string"
                    },
                    "storageSolution": {
                      "type": "string"
                    },
                    "tagsNetAppAccount": {
                      "type": "object"
                    },
                    "timeStamp": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "ouRelativePath": "[if(contains(parameters('ouPath'), 'DC'), substring(split(parameters('ouPath'), 'DC')[0], 0, sub(length(split(parameters('ouPath'), 'DC')[0]), 1)), parameters('ouPath'))]",
                    "shareSizeInBytes": "[mul(mul(mul(parameters('shareSizeInGB'), 1024), 1024), 1024)]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.NetApp/netAppAccounts",
                      "apiVersion": "2021-06-01",
                      "name": "[parameters('netAppAccountName')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tagsNetAppAccount')]",
                      "properties": {
                        "activeDirectories": "[if(parameters('activeDirectoryConnection'), createArray(createObject('aesEncryption', true(), 'domain', parameters('domainName'), 'dns', string(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('netAppVolumesSubnetResourceId'), '/')[2], split(parameters('netAppVolumesSubnetResourceId'), '/')[4]), 'Microsoft.Network/virtualNetworks', split(parameters('netAppVolumesSubnetResourceId'), '/')[8]), '2023-11-01').dhcpOptions.dnsServers), 'organizationalUnit', variables('ouRelativePath'), 'password', parameters('domainJoinUserPassword'), 'smbServerName', format('anf-{0}', parameters('smbServerLocation')), 'username', split(parameters('domainJoinUserPrincipalName'), '@')[0])), null())]",
                        "encryption": {
                          "keySource": "Microsoft.NetApp"
                        }
                      }
                    },
                    {
                      "type": "Microsoft.NetApp/netAppAccounts/capacityPools",
                      "apiVersion": "2021-06-01",
                      "name": "[format('{0}/{1}', parameters('netAppAccountName'), parameters('netAppCapacityPoolName'))]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tagsNetAppAccount')]",
                      "properties": {
                        "coolAccess": false,
                        "encryptionType": "Single",
                        "qosType": "Auto",
                        "serviceLevel": "[parameters('storageSku')]",
                        "size": 4398046511104
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.NetApp/netAppAccounts', parameters('netAppAccountName'))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "volumes",
                        "count": "[length(range(0, length(parameters('shares'))))]"
                      },
                      "type": "Microsoft.NetApp/netAppAccounts/capacityPools/volumes",
                      "apiVersion": "2021-06-01",
                      "name": "[format('{0}/{1}/{2}', parameters('netAppAccountName'), parameters('netAppCapacityPoolName'), parameters('shares')[range(0, length(parameters('shares')))[copyIndex()]])]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tagsNetAppAccount')]",
                      "properties": {
                        "avsDataStore": "Disabled",
                        "coolAccess": false,
                        "creationToken": "[parameters('shares')[range(0, length(parameters('shares')))[copyIndex()]]]",
                        "defaultGroupQuotaInKiBs": 0,
                        "defaultUserQuotaInKiBs": 0,
                        "encryptionKeySource": "Microsoft.NetApp",
                        "isDefaultQuotaEnabled": false,
                        "kerberosEnabled": false,
                        "ldapEnabled": false,
                        "networkFeatures": "Standard",
                        "protocolTypes": [
                          "CIFS"
                        ],
                        "securityStyle": "ntfs",
                        "serviceLevel": "[parameters('storageSku')]",
                        "smbContinuouslyAvailable": true,
                        "smbEncryption": true,
                        "snapshotDirectoryVisible": true,
                        "subnetId": "[parameters('netAppVolumesSubnetResourceId')]",
                        "usageThreshold": "[variables('shareSizeInBytes')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.NetApp/netAppAccounts/capacityPools', parameters('netAppAccountName'), parameters('netAppCapacityPoolName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('Set-NTFSPermissions_{0}', parameters('timeStamp'))]",
                      "resourceGroup": "[parameters('resourceGroupDeployment')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "adminGroupNames": {
                            "value": "[map(parameters('shareAdminGroups'), lambda('group', lambdaVariables('group').displayName))]"
                          },
                          "domainJoinUserPrincipalName": {
                            "value": "[parameters('domainJoinUserPrincipalName')]"
                          },
                          "domainJoinUserPassword": {
                            "value": "[parameters('domainJoinUserPassword')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "netAppServers": "[if(greater(length(parameters('shares')), 1), createObject('value', createArray(reference(resourceId('Microsoft.NetApp/netAppAccounts/capacityPools/volumes', parameters('netAppAccountName'), parameters('netAppCapacityPoolName'), parameters('shares')[range(0, length(parameters('shares')))[0]]), '2021-06-01').mountTargets[0].smbServerFqdn, reference(resourceId('Microsoft.NetApp/netAppAccounts/capacityPools/volumes', parameters('netAppAccountName'), parameters('netAppCapacityPoolName'), parameters('shares')[range(0, length(parameters('shares')))[1]]), '2021-06-01').mountTargets[0].smbServerFqdn)), createObject('value', createArray(reference(resourceId('Microsoft.NetApp/netAppAccounts/capacityPools/volumes', parameters('netAppAccountName'), parameters('netAppCapacityPoolName'), parameters('shares')[range(0, length(parameters('shares')))[0]]), '2021-06-01').mountTargets[0].smbServerFqdn)))]",
                          "shardingOptions": {
                            "value": "None"
                          },
                          "shares": {
                            "value": "[parameters('shares')]"
                          },
                          "storageSolution": {
                            "value": "[parameters('storageSolution')]"
                          },
                          "timeStamp": {
                            "value": "[parameters('timeStamp')]"
                          },
                          "userGroupNames": {
                            "value": "[map(parameters('shareUserGroups'), lambda('group', lambdaVariables('group').displayName))]"
                          },
                          "virtualMachineName": {
                            "value": "[parameters('deploymentVirtualMachineName')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.36.1.42791",
                              "templateHash": "1927959068564144115"
                            }
                          },
                          "parameters": {
                            "adminGroupNames": {
                              "type": "array",
                              "defaultValue": []
                            },
                            "shares": {
                              "type": "array"
                            },
                            "domainJoinUserPrincipalName": {
                              "type": "securestring"
                            },
                            "domainJoinUserPassword": {
                              "type": "securestring"
                            },
                            "kerberosEncryptionType": {
                              "type": "string",
                              "defaultValue": ""
                            },
                            "location": {
                              "type": "string"
                            },
                            "netAppServers": {
                              "type": "array",
                              "defaultValue": []
                            },
                            "ouPath": {
                              "type": "string",
                              "defaultValue": ""
                            },
                            "resourceGroupStorage": {
                              "type": "string",
                              "defaultValue": ""
                            },
                            "shardingOptions": {
                              "type": "string"
                            },
                            "storageAccountNamePrefix": {
                              "type": "string",
                              "defaultValue": ""
                            },
                            "storageCount": {
                              "type": "int",
                              "defaultValue": 0
                            },
                            "storageIndex": {
                              "type": "int",
                              "defaultValue": 0
                            },
                            "storageSolution": {
                              "type": "string"
                            },
                            "timeStamp": {
                              "type": "string"
                            },
                            "userGroupNames": {
                              "type": "array",
                              "defaultValue": []
                            },
                            "userAssignedIdentityClientId": {
                              "type": "string",
                              "defaultValue": ""
                            },
                            "virtualMachineName": {
                              "type": "string"
                            }
                          },
                          "variables": {
                            "$fxv#0": "param \r\n(       \r\n    [Parameter(Mandatory = $false)]\r\n    [string]$AdminGroupNames,\r\n\r\n    [Parameter(Mandatory = $true)]\r\n    [String]$Shares,\r\n\r\n    [Parameter(Mandatory = $false)]\r\n    [string]$ShardAzureFilesStorage,\r\n    \r\n    [Parameter(Mandatory = $false)]\r\n    [String]$DomainAccountType = \"ComputerAccount\",\r\n\r\n    [Parameter(Mandatory = $true)]\r\n    [String]$DomainJoinUserPwd,\r\n\r\n    [Parameter(Mandatory = $true)]\r\n    [String]$DomainJoinUserPrincipalName,\r\n\r\n    [Parameter(Mandatory = $false)]\r\n    [ValidateSet(\"AES256\", \"RC4\")]\r\n    [String]$KerberosEncryptionType,\r\n\r\n    [Parameter(Mandatory = $false)]\r\n    [String]$NetAppServers,\r\n\r\n    [Parameter(Mandatory = $false)]\r\n    [String]$OuPath,\r\n\r\n    [Parameter(Mandatory = $false)]\r\n    [string]$ResourceManagerUri,\r\n\r\n    [Parameter(Mandatory = $false)]\r\n    [String]$StorageAccountPrefix,\r\n\r\n    [Parameter(Mandatory = $false)]\r\n    [String]$StorageAccountResourceGroupName,\r\n\r\n    [Parameter(Mandatory = $false)]\r\n    [String]$StorageCount,\r\n\r\n    [Parameter(Mandatory = $false)]\r\n    [String]$StorageIndex,\r\n\r\n    [Parameter(Mandatory = $true)]\r\n    [String]$StorageSolution,\r\n\r\n    [Parameter(Mandatory = $false)]\r\n    [String]$StorageSuffix,\r\n\r\n    [Parameter(Mandatory = $false)]\r\n    [string]$SubscriptionId,\r\n\r\n    [Parameter(Mandatory = $false)]\r\n    [String]$UserGroupNames,\r\n\r\n    [Parameter(Mandatory = $false)]\r\n    [string]$UserAssignedIdentityClientId\r\n)\r\n\r\n$ErrorActionPreference = 'Stop'\r\n$WarningPreference = 'SilentlyContinue'\r\n\r\n[string]$Script:LogDir = \"C:\\WindowsAzure\\Logs\\RunCommands\"\r\n[string]$Script:Name = 'Set-NTFSPermissions'\r\n\r\nFunction ConvertFrom-JsonString {\r\n    [CmdletBinding()]\r\n    param (\r\n        [string]$JsonString,\r\n        [string]$Name,\r\n        [switch]$SensitiveValues      \r\n    )\r\n    If ($JsonString -ne '[]' -and $JsonString -ne $null) {\r\n        [array]$Array = $JsonString.replace('\\\"', '\"') | ConvertFrom-Json\r\n        If ($Array.Length -gt 0) {\r\n            If ($SensitiveValues) { Write-Log -message \"Array '$Name' has $($Array.Length) members\" } Else { Write-Log -message \"$($Name): '$($Array -join \"', '\")'\" }\r\n            Return $Array\r\n        }\r\n        Else {\r\n            Return $null\r\n        }            \r\n    }\r\n    Else {\r\n        Return $null\r\n    }    \r\n}\r\n\r\nFunction Get-FullyQualifiedGroupName {\r\n    [CmdletBinding()]\r\n    param (\r\n        [Parameter()]\r\n        [string]$GroupDisplayName,\r\n        [pscredential]$Credential\r\n    )\r\n    $Group = $null\r\n    $Group = Get-ADGroup -Filter \"Name -eq '$groupDisplayName'\" -Credential $Credential    \r\n    If ($null -ne $Group) {\r\n        # Extract the domain components from the distinguished name\r\n        $domainComponents = ($group.DistinguishedName -split ',') | Where-Object { $_ -like 'DC=*' }\r\n        # Construct the domain name\r\n        $domainName = ($domainComponents -replace 'DC=', '') -join '.'\r\n        # Get the domain information\r\n        $domain = Get-ADDomain -Identity $domainName\r\n        # Get the NetBIOS name\r\n        $netbiosName = $domain.NetBIOSName\r\n        # Combine NetBIOS name and group name\r\n        $GroupName = \"$netbiosName\\$($group.SamAccountName)\"\r\n        Return $GroupName\r\n    }\r\n    Return $null\r\n}\r\n\r\nfunction Update-ACL {\r\n    Param (\r\n        [Parameter(Mandatory = $false)]\r\n        [Array]$AdminGroups,\r\n        [Parameter(Mandatory = $true)]\r\n        [pscredential]$Credential,\r\n        [Parameter(Mandatory = $true)]\r\n        [String]$FileShare,\r\n        [Parameter(Mandatory = $true)]\r\n        [Array]$UserGroups\r\n    )\r\n    # Map Drive\r\n    Write-Log -message \"[Update-ACL]: Mapping Drive to $FileShare\"\r\n    New-PSDrive -Name 'Z' -PSProvider 'FileSystem' -Root $FileShare -Credential $Credential | Out-Null\r\n    # Set recommended NTFS permissions on the file share\r\n    Write-Log -message \"[Update-ACL]: Getting Existing ACL for $FileShare\"\r\n    $ACL = Get-Acl -Path 'Z:'\r\n    $CreatorOwner = [System.Security.Principal.Ntaccount](\"Creator Owner\")\r\n    Write-Log -message \"[Update-ACL]: Purging Existing Access Control Entries for 'Creater Owner' from ACL\"\r\n    $ACL.PurgeAccessRules($CreatorOwner)\r\n    $AuthenticatedUsers = [System.Security.Principal.Ntaccount](\"Authenticated Users\")\r\n    Write-Log -message \"[Update-ACL]: Purging Existing Access Control Entries for 'Authenticated Users' from ACL\"\r\n    $ACL.PurgeAccessRules($AuthenticatedUsers)\r\n    $Users = [System.Security.Principal.Ntaccount](\"Users\")\r\n    Write-Log -message \"[Update-ACL]: Purging Existing Access Control Entries for 'Users' from ACL\"\r\n    $ACL.PurgeAccessRules($Users)\r\n    If ($AdminGroups.Count -gt 0) {\r\n        ForEach ($Group in $AdminGroups) {\r\n            Write-Log -message \"[Update-ACL]: Adding ACE '$($Group):Full Control' to ACL.\"\r\n            $Ntaccount = [System.Security.Principal.Ntaccount](\"$Group\")\r\n            $ACE = ([System.Security.AccessControl.FileSystemAccessRule]::new(\"$Ntaccount\", \"FullControl\", \"ContainerInherit,ObjectInherit\", \"None\", \"Allow\"))\r\n            $ACL.SetAccessRule($ACE)\r\n        }\r\n    }\r\n\r\n    ForEach ($Group in $UserGroups) {\r\n        Write-Log -message \"[Update-ACL]: Adding ACE '$($Group):Modify (This Folder Only)' to ACL.\"\r\n        $Ntaccount = [System.Security.Principal.Ntaccount](\"$Group\")\r\n        $ACE = ([System.Security.AccessControl.FileSystemAccessRule]::new(\"$Ntaccount\", \"Modify\", \"None\", \"None\", \"Allow\"))\r\n        $ACL.SetAccessRule($ACE)\r\n    }\r\n\r\n    Write-Log -message \"[Update-ACL]: Adding ACE 'Creator Owner:Modify (Subfolder and Files Only)' to ACL.\"\r\n    $ACE = ([System.Security.AccessControl.FileSystemAccessRule]::new(\"$CreatorOwner\", \"Modify\", \"ContainerInherit,ObjectInherit\", \"InheritOnly\", \"Allow\"))\r\n    $ACL.SetAccessRule($ACE)\r\n    Write-Log -message \"[Update-ACL]: Applying the following ACL to $($FileShare):\"\r\n    Write-Log -message \"$($ACL.access | Format-Table | Out-String)\"\r\n    $ACL | Set-Acl -Path 'Z:' | Out-Null\r\n    Start-Sleep -Seconds 5 | Out-Null\r\n    $ACL = Get-Acl -Path 'Z:'\r\n    Write-Log -message \"[Update-ACL]: Current ACL of $($FileShare):\"\r\n    Write-Log -message \"$($ACL.access | Format-Table | Out-String)\"\r\n    # Unmount file share\r\n    Write-Log -message \"[Update-ACL]: Unmapping Drive from $FileShare\"\r\n    Remove-PSDrive -Name 'Z' -PSProvider 'FileSystem' -Force | Out-Null\r\n    Start-Sleep -Seconds 5 | Out-Null\r\n}\r\n\r\nfunction New-Log {\r\n    <#\r\n    .SYNOPSIS\r\n    Sets default log file and stores in a script accessible variable $script:Log\r\n    Log File name \"packageExecution_$date.log\"\r\n\r\n    .PARAMETER Path\r\n    Path to the log file\r\n\r\n    .EXAMPLE\r\n    New-Log c:\\Windows\\Logs\r\n    Create a new log file in c:\\Windows\\Logs\r\n    #>\r\n\r\n    Param (\r\n        [Parameter(Mandatory = $true, Position = 0)]\r\n        [string] $Path\r\n    )\r\n\r\n    # Create central log file with given date\r\n\r\n    $date = Get-Date -UFormat \"%Y-%m-%d %H-%M-%S\"\r\n    Set-Variable logFile -Scope Script\r\n    $script:logFile = \"$Script:Name-$date.log\"\r\n\r\n    if ((Test-Path $path ) -eq $false) {\r\n        $null = New-Item -Path $path -type directory\r\n    }\r\n\r\n    $script:Log = Join-Path $path $logfile\r\n\r\n    Add-Content $script:Log \"Date`t`t`tCategory`t`tDetails\"\r\n}\r\n\r\nfunction Write-Log {\r\n\r\n    <#\r\n    .SYNOPSIS\r\n    Creates a log file and stores logs based on categories with tab seperation\r\n\r\n    .PARAMETER category\r\n    Category to put into the trace\r\n\r\n    .PARAMETER message\r\n    Message to be loged\r\n\r\n    .EXAMPLE\r\n    Log 'Info' 'Message'\r\n\r\n    #>\r\n\r\n    Param (\r\n        [Parameter(Mandatory = $false, Position = 0)]\r\n        [ValidateSet(\"Info\", \"Warning\", \"Error\")]\r\n        $category = 'Info',\r\n        [Parameter(Mandatory = $true, Position = 1)]\r\n        $message\r\n    )\r\n\r\n    $date = get-date\r\n    $content = \"[$date]`t$category`t`t$message\" \r\n    Add-Content $Script:Log $content -ErrorAction Stop\r\n}\r\n\r\ntry {\r\n    \r\n    New-Log -Path $Script:LogDir\r\n    write-log -message \"*** Parameter Values ***\"\r\n\r\n    # Convert Parameters passed as a JSON String to an array and remove any backslashes\r\n    [array]$AdminGroupNames = ConvertFrom-JsonString -JsonString $AdminGroupNames -Name 'AdminGroupNames'\r\n    [array]$Shares = ConvertFrom-JsonString -JsonString $Shares -Name 'Shares'\r\n    [array]$UserGroupNames = ConvertFrom-JsonString -JsonString $UserGroupNames -Name 'UserGroupNames'\r\n\r\n    # Check if the Active Directory module is installed\r\n    $RsatInstalled = (Get-WindowsFeature -Name 'RSAT-AD-PowerShell').Installed\r\n    if (!$RsatInstalled) {\r\n        Install-WindowsFeature -Name 'RSAT-AD-PowerShell' | Out-Null\r\n    }\r\n    # Create Domain credential\r\n    $DomainJoinUserName = $DomainJoinUserPrincipalName.Split('@')[0]\r\n    $DomainPassword = ConvertTo-SecureString -String $DomainJoinUserPwd -AsPlainText -Force\r\n    [pscredential]$DomainCredential = New-Object System.Management.Automation.PSCredential ($DomainJoinUserName, $DomainPassword)\r\n\r\n    # Get Domain information\r\n    $Domain = Get-ADDomain -Credential $DomainCredential -Current 'LocalComputer'\r\n    Write-Log -message \"Domain Information:\"\r\n    Write-Log -message \"DistiguishedName: $($Domain.DistinguishedName)\"\r\n    Write-Log -message \"DNSRoot: $($Domain.DNSRoot)\"\r\n    Write-Log -message \"NetBIOSName: $($Domain.NetBIOSName)\"\r\n\r\n    # Get the SamAccountName for all the DisplayNames provided.\r\n    if ($AdminGroupNames.Count -gt 0) {\r\n        [array]$AdminGroups = @()\r\n        Write-Log -message \"Processing AdminGroupNames by searching AD for Groups with the provided display name and returning the SamAccountName\"\r\n        ForEach ($DisplayName in $AdminGroupNames) {\r\n            Write-Log -message \"Processing AdminGroupName: $DisplayName\"\r\n            $FullyQualifiedGroupName = $null\r\n            $FullyQualifiedGroupName = Get-FullyQualifiedGroupName -GroupDisplayName $DisplayName -Credential $DomainCredential\r\n            If ($null -ne $FullyQualifiedGroupName) {\r\n                Write-Log -message \"Found Group: $FullyQualifiedGroupName\"\r\n                $AdminGroups += $FullyQualifiedGroupName\r\n            }\r\n            Else {\r\n                Write-Log -message \"Admin Group not found in Active Directory\"\r\n            }            \r\n        }\r\n    }\r\n\r\n    Write-Log -message \"Processing UserGroupNames by searching AD for Groups with the provided display name and returning the SamAccountName\"\r\n    [array]$UserGroups = @()\r\n    ForEach ($DisplayName in $UserGroupNames) {\r\n        Write-Log -message \"Processing UserGroupName: $DisplayName\"\r\n        $FullyQualifiedGroupName = $null\r\n        $FullyQualifiedGroupName = Get-FullyQualifiedGroupName -GroupDisplayName $DisplayName -Credential $DomainCredential\r\n        If ($null -ne $FullyQualifiedGroupName) {\r\n            Write-Log -message \"Found Group: $FullyQualifiedGroupName\"\r\n            $UserGroups += $FullyQualifiedGroupName\r\n        }\r\n        Else {\r\n            Write-Log -message \"User not found\"\r\n        }    \r\n    }\r\n\r\n    Switch ($StorageSolution) {\r\n        'AzureFiles' {\r\n            Write-Log -message \"Processing Azure Files\"\r\n            # Convert strings to integers    \r\n            [int]$StCount = $StorageCount.replace('\\\"', '\"')\r\n            [int]$StIndex = $StorageIndex.replace('\\\"', '\"')\r\n            Write-Log -message \"Storage Account Count: $StCount\"\r\n            Write-Log -message \"Storage Account Index: $StIndex\"\r\n            # Remove any escape characters from strings\r\n            $OuPath = $OuPath.Replace('\\\"', '\"')\r\n            Write-Log -message \"OU Path: $OuPath\"\r\n            $ResourceManagerUri = $ResourceManagerUri.Replace('\\\"', '\"')\r\n            Write-Log -message \"ResourceManagerUri: $ResourceManagerUri\"\r\n            $StorageAccountPrefix = $StorageAccountPrefix.ToLower().replace('\\\"', '\"')\r\n            Write-Log -message \"Storage Account Prefix: $StorageAccountPrefix\"\r\n            $StorageAccountResourceGroupName = $StorageAccountResourceGroupName.Replace('\\\"', '\"')\r\n            Write-Log -message \"Storage Account Resource Group Name: $StorageAccountResourceGroupName\"\r\n            $SubscriptionId = $SubscriptionId.replace('\\\"', '\"')\r\n            Write-Log -message \"Subscription Id: $SubscriptionId\"            \r\n            $UserAssignedIdentityClientId = $UserAssignedIdentityClientId.replace('\\\"', '\"')\r\n            Write-Log -message \"User Assigned Identity Client Id: $UserAssignedIdentityClientId\"\r\n            # Set the suffix for the Azure Files\r\n            $FilesSuffix = \".file.$($StorageSuffix.Replace('\\\"', '\"'))\"\r\n            Write-Log -message \"Files Suffix: $FilesSuffix\"\r\n            # Fix the resource manager URI since only AzureCloud contains a trailing slash\r\n            $ResourceManagerUriFixed = if ($ResourceManagerUri[-1] -eq '/') { $ResourceManagerUri.Substring(0, $ResourceManagerUri.Length - 1) } else { $ResourceManagerUri }\r\n            # Get an access token for Azure resources\r\n            Write-Log -message \"Getting an access token for Azure resources\"\r\n            $AzureManagementAccessToken = (Invoke-RestMethod `\r\n                    -Headers @{Metadata = \"true\" } `\r\n                    -Uri $('http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01&resource=' + $ResourceManagerUriFixed + '&client_id=' + $UserAssignedIdentityClientId)).access_token\r\n            # Set header for Azure Management API\r\n            $AzureManagementHeader = @{\r\n                'Content-Type'  = 'application/json'\r\n                'Authorization' = 'Bearer ' + $AzureManagementAccessToken\r\n            }   \r\n            for ($i = 0; $i -lt $StCount; $i++) {\r\n                # Build the Storage Account Name and FQDN\r\n                $StorageAccountName = $StorageAccountPrefix + ($i + $StIndex).ToString().PadLeft(2, '0')\r\n                Write-Log -message \"Processing Storage Account Name: $StorageAccountName\"\r\n                $FileServer = '\\\\' + $StorageAccountName + $FilesSuffix\r\n                # Get the storage account key\r\n                $StorageKey = (Invoke-RestMethod `\r\n                        -Headers $AzureManagementHeader `\r\n                        -Method 'POST' `\r\n                        -Uri $($ResourceManagerUriFixed + '/subscriptions/' + $SubscriptionId + '/resourceGroups/' + $StorageAccountResourceGroupName + '/providers/Microsoft.Storage/storageAccounts/' + $StorageAccountName + '/listKeys?api-version=2023-05-01')).keys[0].value\r\n                \r\n                # Create credential for accessing the storage account\r\n                Write-Log -message \"Building Storage Key Credential\"\r\n                $StorageUsername = 'Azure\\' + $StorageAccountName\r\n                $StoragePassword = ConvertTo-SecureString -String \"$($StorageKey)\" -AsPlainText -Force\r\n                [pscredential]$StorageKeyCredential = New-Object System.Management.Automation.PSCredential ($StorageUsername, $StoragePassword)\r\n                Write-Log -message \"Successfully Built Storage Key Credential\"\r\n                # Get / create kerberos key for Azure Storage Account\r\n                Write-Log -message \"Getting Kerberos Key for Azure Storage Account\"\r\n                $KerberosKey = ((Invoke-RestMethod `\r\n                            -Headers $AzureManagementHeader `\r\n                            -Method 'POST' `\r\n                            -Uri $($ResourceManagerUriFixed + '/subscriptions/' + $SubscriptionId + '/resourceGroups/' + $StorageAccountResourceGroupName + '/providers/Microsoft.Storage/storageAccounts/' + $StorageAccountName + '/listKeys?api-version=2023-05-01&$expand=kerb')).keys | Where-Object { $_.Keyname -contains 'kerb1' }).Value\r\n                \r\n                if (!$KerberosKey) {\r\n                    Write-Log -message \"Kerberos Key not found, Generating a new key\"\r\n                    $null = Invoke-RestMethod `\r\n                        -Body (@{keyName = 'kerb1' } | ConvertTo-Json) `\r\n                        -Headers $AzureManagementHeader `\r\n                        -Method 'POST' `\r\n                        -Uri $($ResourceManagerUriFixed + '/subscriptions/' + $SubscriptionId + '/resourceGroups/' + $StorageAccountResourceGroupName + '/providers/Microsoft.Storage/storageAccounts/' + $StorageAccountName + '/regenerateKey?api-version=2023-05-01')\r\n                    $Key = ((Invoke-RestMethod `\r\n                                -Headers $AzureManagementHeader `\r\n                                -Method 'POST' `\r\n                                -Uri $($ResourceManagerUriFixed + '/subscriptions/' + $SubscriptionId + '/resourceGroups/' + $StorageAccountResourceGroupName + '/providers/Microsoft.Storage/storageAccounts/' + $StorageAccountName + '/listKeys?api-version=2023-05-01&$expand=kerb')).keys | Where-Object { $_.Keyname -contains 'kerb1' }).Value\r\n                } \r\n                else {\r\n                    Write-Log -message \"Kerberos Key found\"\r\n                    $Key = $KerberosKey\r\n                }\r\n                # Creates a password for the Azure Storage Account in AD using the Kerberos key\r\n                Write-Log -message \"Creating a password for the Azure Storage Account in AD using the Kerberos key\"\r\n                $ComputerPassword = ConvertTo-SecureString -String $Key.Replace(\"'\", \"\") -AsPlainText -Force  \r\n                # Create the SPN value for the Azure Storage Account; attribute for computer object in AD\r\n                Write-Log -message \"Creating the SPN value for the Azure Storage Account\" \r\n                $SPN = 'cifs/' + $StorageAccountName + $FilesSuffix\r\n                # Create the Description value for the Azure Storage Account; attribute for computer object in AD \r\n                $Description = \"Computer account object for Azure storage account $($StorageAccountName).\"\r\n\r\n                # Create the AD computer object for the Azure Storage Account\r\n                Write-Log -message \"Searching for existing computer account object for Azure Storage Account\"\r\n                $Computer = Get-ADComputer -Credential $DomainCredential -Filter { Name -eq $StorageAccountName }\r\n                if ($Computer) {\r\n                    Write-Log -message \"Computer account object for Azure Storage Account found, removing the existing object\"\r\n                    Remove-ADComputer -Credential $DomainCredential -Identity $StorageAccountName -Confirm:$false\r\n                }\r\n                Else {\r\n                    Write-Log -message \"Computer account object for Azure Storage Account not found\"\r\n                }\r\n                Write-Log -message \"Creating the AD computer object for the Azure Storage Account\"\r\n                $ComputerObject = New-ADComputer -Credential $DomainCredential -Name $StorageAccountName -Path $OuPath -ServicePrincipalNames $SPN -AccountPassword $ComputerPassword -Description $Description -PassThru\r\n                # Update the Azure Storage Account with the domain join 'INFO'\r\n                Write-Log -message \"Updating the Azure Storage Account with the domain join 'INFO'\"\r\n                $SamAccountName = switch ($KerberosEncryptionType) {\r\n                    'AES256' { $StorageAccountName }\r\n                    'RC4' { $ComputerObject.SamAccountName }\r\n                }    \r\n                $Body = (@{\r\n                        properties = @{\r\n                            azureFilesIdentityBasedAuthentication = @{\r\n                                activeDirectoryProperties = @{\r\n                                    accountType       = 'Computer'\r\n                                    azureStorageSid   = $ComputerObject.SID.Value\r\n                                    domainGuid        = $Domain.ObjectGUID.Guid\r\n                                    domainName        = $Domain.DNSRoot\r\n                                    domainSid         = $Domain.DomainSID.Value\r\n                                    forestName        = $Domain.Forest\r\n                                    netBiosDomainName = $Domain.NetBIOSName\r\n                                    samAccountName    = $samAccountName\r\n                                }\r\n                                directoryServiceOptions   = 'AD'\r\n                            }\r\n                        }\r\n                    } | ConvertTo-Json -Depth 6 -Compress)  \r\n\r\n                $null = Invoke-RestMethod `\r\n                    -Body $Body `\r\n                    -Headers $AzureManagementHeader `\r\n                    -Method 'PATCH' `\r\n                    -Uri $($ResourceManagerUriFixed + '/subscriptions/' + $SubscriptionId + '/resourceGroups/' + $StorageAccountResourceGroupName + '/providers/Microsoft.Storage/storageAccounts/' + $StorageAccountName + '?api-version=2023-05-01')             \r\n                \r\n                # Enable AES256 encryption if selected\r\n                if ($KerberosEncryptionType -eq 'AES256') {\r\n                    Write-Log -message \"Setting the Kerberos encryption to $KerberosEncryptionType the computer object\"\r\n                    # Set the Kerberos encryption on the computer object\r\n                    $DistinguishedName = 'CN=' + $StorageAccountName + ',' + $OuPath\r\n                    Set-ADComputer -Credential $DomainCredential -Identity $DistinguishedName -KerberosEncryptionType 'AES256' | Out-Null\r\n                    \r\n                    # Reset the Kerberos key on the Storage Account\r\n                    Write-Log -message \"Resetting the kerb1 key on the Storage Account\"\r\n                    $null = Invoke-RestMethod `\r\n                        -Body (@{keyName = 'kerb1' } | ConvertTo-Json) `\r\n                        -Headers $AzureManagementHeader `\r\n                        -Method 'POST' `\r\n                        -Uri $($ResourceManagerUriFixed + '/subscriptions/' + $SubscriptionId + '/resourceGroups/' + $StorageAccountResourceGroupName + '/providers/Microsoft.Storage/storageAccounts/' + $StorageAccountName + '/regenerateKey?api-version=2023-05-01')\r\n                    \r\n                    Write-Log -message \"Resetting the kerb2 key on the Storage Account\"\r\n                    $null = Invoke-RestMethod `\r\n                        -Body (@{keyName = 'kerb2' } | ConvertTo-Json) `\r\n                        -Headers $AzureManagementHeader `\r\n                        -Method 'POST' `\r\n                        -Uri $($ResourceManagerUriFixed + '/subscriptions/' + $SubscriptionId + '/resourceGroups/' + $StorageAccountResourceGroupName + '/providers/Microsoft.Storage/storageAccounts/' + $StorageAccountName + '/regenerateKey?api-version=2023-05-01')\r\n\r\n                    $Key = ((Invoke-RestMethod `\r\n                                -Headers $AzureManagementHeader `\r\n                                -Method 'POST' `\r\n                                -Uri $($ResourceManagerUriFixed + '/subscriptions/' + $SubscriptionId + '/resourceGroups/' + $StorageAccountResourceGroupName + '/providers/Microsoft.Storage/storageAccounts/' + $StorageAccountName + '/listKeys?api-version=2023-05-01&$expand=kerb')).keys | Where-Object { $_.Keyname -contains 'kerb1' }).Value\r\n                \r\n                    # Update the password on the computer object with the new Kerberos key on the Storage Account\r\n                    Write-Log -message \"Updating the password on the computer object with the new Kerberos key (kerb1) on the Storage Account\"\r\n                    $NewPassword = ConvertTo-SecureString -String $Key -AsPlainText -Force\r\n                    Set-ADAccountPassword -Credential $DomainCredential -Identity $DistinguishedName -Reset -NewPassword $NewPassword | Out-Null\r\n                }\r\n                if ($ShardAzureFilesStorage -eq 'true') {\r\n                    foreach ($Share in $Shares) {\r\n                        $FileShare = $FileServer + '\\' + $Share\r\n                        $UserGroup = $null\r\n                        [array]$UserGroup += $UserGroups[$i]\r\n                        Write-Log -message \"Processing File Share: $FileShare with UserGroup = $($UserGroups[$i])\"\r\n                        if ($AdminGroups.Count -gt 0) {\r\n                            Write-Log -message \"Admin Groups provided, executing Update-ACL with Admin Groups\"\r\n                            Update-ACL -AdminGroups $AdminGroups -Credential $StorageKeyCredential -FileShare $FileShare -UserGroups $UserGroup\r\n                        }\r\n                        Else {\r\n                            Write-Log -message \"Admin Groups not provided, executing Update-ACL without Admin Groups\"\r\n                            Update-ACL -Credential $StorageKeyCredential -FileShare $FileShare -UserGroups $UserGroup\r\n                        }\r\n                    }\r\n                }\r\n                Else {\r\n                    foreach ($Share in $Shares) {\r\n                        $FileShare = $FileServer + '\\' + $Share\r\n                        Write-Log -message \"Processing File Share: $FileShare\"\r\n                        if ($AdminGroups.Count -gt 0) {\r\n                            Write-Log -message \"Admin Groups provided, executing Update-ACL with Admin Groups\"\r\n                            Update-ACL -AdminGroups $AdminGroups -Credential $StorageKeyCredential -FileShare $FileShare -UserGroups $UserGroups\r\n                        }\r\n                        Else {\r\n                            Write-Log -message \"Admin Groups not provided, executing Update-ACL without Admin Groups\"\r\n                            Update-ACL -Credential $StorageKeyCredential -FileShare $FileShare -UserGroups $UserGroups\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        'AzureNetAppFiles' {\r\n            Write-Log -message \"Processing Azure NetApp Files\"        \r\n\r\n            [array]$NetAppServers = ConvertFrom-JsonString -JsonString $NetAppServers -Name 'NetAppServers'\r\n\r\n            $ProfileShare = \"\\\\$($NetAppServers[0])\\$($Shares[0])\"\r\n            Write-Log -message \"Processing Profile Share: $ProfileShare\"\r\n            if ($AdminGroups.Count -gt 0) {\r\n                Write-Log -message \"Admin Groups and UserGroups provided, executing Update-ACL with Admin Groups and UserGroups\"\r\n                Update-ACL -AdminGroups $AdminGroups -Credential $DomainCredential -FileShare $ProfileShare -UserGroups $UserGroups\r\n            }\r\n            Else {\r\n                Write-Log -message \"UserGroups provided, executing Update-ACL with UserGroups only\"\r\n                Update-ACL -Credential $DomainCredential -FileShare $ProfileShare -UserGroups $UserGroups\r\n            }\r\n            \r\n            If ($NetAppServers.Count -gt 1 -and $Shares.Count -gt 1) {\r\n                $OfficeShare = \"\\\\\" + $NetAppServers[1] + \"\\\" + $Shares[1]\r\n                Write-Log -message \"Processing Office Share: $OfficeShare\"\r\n                If ($AdminGroups.Count -gt 0 -and $UserGroups.Count -gt 0) {\r\n                    Write-Log -message \"Admin Groups and UserGroups provided, executing Update-ACL with Admin Groups and UserGroups\"\r\n                    Update-ACL -AdminGroups $AdminGroups -Credential $DomainCredential -FileShare $OfficeShare -UserGroups $UserGroups\r\n                }\r\n                ElseIf ($AdminGroups.Count -gt 0 -and $UserGroups.Count -eq 0) {\r\n                    Write-Log -message \"Admin Groups provided, executing Update-ACL with Admin Groups only\"\r\n                    Update-ACL -AdminGroups $AdminGroups -Credential $DomainCredential -FileShare $OfficeShare\r\n                }\r\n                ElseIf ($AdminGroups.Count -eq 0 -and $UserGroups.Count -gt 0) {\r\n                    Write-Log -message \"UserGroups provided, executing Update-ACL with UserGroups only\"\r\n                    Update-ACL -Credential $DomainCredential -FileShare $OfficeShare -UserGroups $UserGroups\r\n                }\r\n                Else {\r\n                    Write-Log -message \"No Admin Groups or UserGroups provided, executing Update-ACL without Admin Groups or UserGroups\"\r\n                    Update-ACL -Credential $DomainCredential -FileShare $OfficeShare\r\n                }\r\n            }\r\n        }\r\n    } \r\n}\r\ncatch {\r\n    throw\r\n}",
                            "azureFilesParameters": [
                              {
                                "name": "AdminGroupNames",
                                "value": "[string(parameters('adminGroupNames'))]"
                              },
                              {
                                "name": "Shares",
                                "value": "[string(parameters('shares'))]"
                              },
                              {
                                "name": "KerberosEncryptionType",
                                "value": "[parameters('kerberosEncryptionType')]"
                              },
                              {
                                "name": "OuPath",
                                "value": "[parameters('ouPath')]"
                              },
                              {
                                "name": "ResourceManagerUri",
                                "value": "[environment().resourceManager]"
                              },
                              {
                                "name": "ShardAzureFilesStorage",
                                "value": "[if(equals(parameters('shardingOptions'), 'None'), 'false', 'true')]"
                              },
                              {
                                "name": "StorageAccountPrefix",
                                "value": "[parameters('storageAccountNamePrefix')]"
                              },
                              {
                                "name": "StorageAccountResourceGroupName",
                                "value": "[parameters('resourceGroupStorage')]"
                              },
                              {
                                "name": "StorageCount",
                                "value": "[string(parameters('storageCount'))]"
                              },
                              {
                                "name": "StorageIndex",
                                "value": "[string(parameters('storageIndex'))]"
                              },
                              {
                                "name": "StorageSolution",
                                "value": "[parameters('storageSolution')]"
                              },
                              {
                                "name": "StorageSuffix",
                                "value": "[environment().suffixes.storage]"
                              },
                              {
                                "name": "SubscriptionId",
                                "value": "[subscription().subscriptionId]"
                              },
                              {
                                "name": "UserAssignedIdentityClientId",
                                "value": "[parameters('userAssignedIdentityClientId')]"
                              },
                              {
                                "name": "UserGroupNames",
                                "value": "[string(parameters('userGroupNames'))]"
                              }
                            ],
                            "azureNetAppParameters": [
                              {
                                "name": "AdminGroupNames",
                                "value": "[string(parameters('adminGroupNames'))]"
                              },
                              {
                                "name": "NetAppServers",
                                "value": "[string(parameters('netAppServers'))]"
                              },
                              {
                                "name": "Shares",
                                "value": "[string(parameters('shares'))]"
                              },
                              {
                                "name": "StorageSolution",
                                "value": "[parameters('storageSolution')]"
                              },
                              {
                                "name": "UserGroupNames",
                                "value": "[string(parameters('userGroupNames'))]"
                              }
                            ],
                            "runCommandName": "[if(equals(parameters('storageSolution'), 'AzureFiles'), format('Domain_Join_Set_NTFSPermissions_{0}', parameters('timeStamp')), format('Set_NTFS_Permissions_{0}', parameters('timeStamp')))]"
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Compute/virtualMachines/runCommands",
                              "apiVersion": "2023-03-01",
                              "name": "[format('{0}/{1}', parameters('virtualMachineName'), variables('runCommandName'))]",
                              "location": "[parameters('location')]",
                              "properties": {
                                "asyncExecution": false,
                                "parameters": "[if(equals(parameters('storageSolution'), 'AzureFiles'), variables('azureFilesParameters'), variables('azureNetAppParameters'))]",
                                "protectedParameters": [
                                  {
                                    "name": "DomainJoinUserPrincipalName",
                                    "value": "[parameters('domainJoinUserPrincipalName')]"
                                  },
                                  {
                                    "name": "DomainJoinUserPwd",
                                    "value": "[parameters('domainJoinUserPassword')]"
                                  }
                                ],
                                "source": {
                                  "script": "[variables('$fxv#0')]"
                                },
                                "timeoutInSeconds": 300,
                                "treatFailureAsDeploymentFailure": true
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "volumes"
                      ]
                    }
                  ],
                  "outputs": {
                    "volumeResourceIds": {
                      "type": "array",
                      "copy": {
                        "count": "[length(range(0, length(parameters('shares'))))]",
                        "input": "[resourceId('Microsoft.NetApp/netAppAccounts/capacityPools/volumes', parameters('netAppAccountName'), parameters('netAppCapacityPoolName'), parameters('shares')[range(0, length(parameters('shares')))[range(0, length(parameters('shares')))[copyIndex()]]])]"
                      }
                    }
                  }
                }
              }
            },
            {
              "condition": "[equals(parameters('storageSolution'), 'AzureFiles')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('AzureFiles_{0}', parameters('timeStamp'))]",
              "resourceGroup": "[parameters('resourceGroupStorage')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "availability": {
                    "value": "[parameters('availability')]"
                  },
                  "azureBackupPrivateDnsZoneResourceId": {
                    "value": "[parameters('azureBackupPrivateDnsZoneResourceId')]"
                  },
                  "azureFunctionAppPrivateDnsZoneResourceId": {
                    "value": "[parameters('azureFunctionAppPrivateDnsZoneResourceId')]"
                  },
                  "azureBlobPrivateDnsZoneResourceId": {
                    "value": "[parameters('azureBlobPrivateDnsZoneResourceId')]"
                  },
                  "azureFilePrivateDnsZoneResourceId": {
                    "value": "[parameters('azureFilePrivateDnsZoneResourceId')]"
                  },
                  "azureQueuePrivateDnsZoneResourceId": {
                    "value": "[parameters('azureQueuePrivateDnsZoneResourceId')]"
                  },
                  "azureTablePrivateDnsZoneResourceId": {
                    "value": "[parameters('azureTablePrivateDnsZoneResourceId')]"
                  },
                  "deploymentUserAssignedIdentityClientId": {
                    "value": "[parameters('deploymentUserAssignedIdentityClientId')]"
                  },
                  "deploymentVirtualMachineName": {
                    "value": "[parameters('deploymentVirtualMachineName')]"
                  },
                  "domainJoinUserPassword": "[if(contains(parameters('identitySolution'), 'DomainServices'), createObject('value', parameters('domainJoinUserPassword')), createObject('value', ''))]",
                  "domainJoinUserPrincipalName": "[if(contains(parameters('identitySolution'), 'DomainServices'), createObject('value', parameters('domainJoinUserPrincipalName')), createObject('value', ''))]",
                  "encryptionKeyVaultUri": {
                    "value": "[parameters('encryptionKeyVaultUri')]"
                  },
                  "encryptionUserAssignedIdentityResourceId": "[if(equals(parameters('keyManagementStorageAccounts'), 'MicrosoftManaged'), createObject('value', ''), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupStorage')), 'Microsoft.Resources/deployments', format('CustomerManagedKeys_{0}', parameters('timeStamp'))), '2022-09-01').outputs.userAssignedIdentityResourceId.value))]",
                  "fileShares": {
                    "value": "[parameters('fslogixFileShares')]"
                  },
                  "fslogixEncryptionKeyNameConv": {
                    "value": "[parameters('fslogixEncryptionKeyNameConv')]"
                  },
                  "functionAppDelegatedSubnetResourceId": {
                    "value": "[parameters('functionAppDelegatedSubnetResourceId')]"
                  },
                  "hostPoolResourceId": {
                    "value": "[parameters('hostPoolResourceId')]"
                  },
                  "identitySolution": {
                    "value": "[parameters('identitySolution')]"
                  },
                  "increaseQuota": {
                    "value": "[parameters('increaseQuota')]"
                  },
                  "increaseQuotaApplicationInsightsName": {
                    "value": "[parameters('increaseQuotaAppInsightsName')]"
                  },
                  "increaseQuotaEncryptionKeyName": {
                    "value": "[parameters('increaseQuotaEncryptionKeyName')]"
                  },
                  "increaseQuotaFunctionAppName": {
                    "value": "[parameters('increaseQuotaFunctionAppName')]"
                  },
                  "increaseQuotaStorageAccountName": {
                    "value": "[parameters('increaseQuotaStorageAccountName')]"
                  },
                  "kerberosEncryptionType": {
                    "value": "[parameters('kerberosEncryptionType')]"
                  },
                  "keyManagementStorageAccounts": {
                    "value": "[parameters('keyManagementStorageAccounts')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "logAnalyticsWorkspaceId": {
                    "value": "[parameters('logAnalyticsWorkspaceResourceId')]"
                  },
                  "ouPath": {
                    "value": "[parameters('ouPath')]"
                  },
                  "privateEndpoint": {
                    "value": "[parameters('privateEndpoint')]"
                  },
                  "privateEndpointLocation": "[if(and(parameters('privateEndpoint'), not(empty(parameters('privateEndpointSubnetResourceId')))), createObject('value', reference(split(parameters('privateEndpointSubnetResourceId'), '/subnets/')[0], '2020-06-01', 'Full').location), createObject('value', ''))]",
                  "privateEndpointNameConv": {
                    "value": "[parameters('privateEndpointNameConv')]"
                  },
                  "privateEndpointNICNameConv": {
                    "value": "[parameters('privateEndpointNICNameConv')]"
                  },
                  "privateEndpointSubnetResourceId": {
                    "value": "[parameters('privateEndpointSubnetResourceId')]"
                  },
                  "privateLinkScopeResourceId": {
                    "value": "[parameters('privateLinkScopeResourceId')]"
                  },
                  "recoveryServices": {
                    "value": "[parameters('recoveryServices')]"
                  },
                  "recoveryServicesVaultName": {
                    "value": "[parameters('recoveryServicesVaultName')]"
                  },
                  "resourceGroupDeployment": {
                    "value": "[parameters('resourceGroupDeployment')]"
                  },
                  "resourceGroupStorage": {
                    "value": "[parameters('resourceGroupStorage')]"
                  },
                  "serverFarmId": {
                    "value": "[parameters('serverFarmId')]"
                  },
                  "shardingOptions": {
                    "value": "[parameters('fslogixShardOptions')]"
                  },
                  "shareAdminGroups": {
                    "value": "[parameters('fslogixAdminGroups')]"
                  },
                  "shareSizeInGB": {
                    "value": "[parameters('shareSizeInGB')]"
                  },
                  "shareUserGroups": {
                    "value": "[parameters('fslogixUserGroups')]"
                  },
                  "storageAccountNamePrefix": {
                    "value": "[parameters('storageAccountNamePrefix')]"
                  },
                  "storageCount": {
                    "value": "[parameters('storageCount')]"
                  },
                  "storageIndex": {
                    "value": "[parameters('storageIndex')]"
                  },
                  "storageSku": {
                    "value": "[parameters('storageSku')]"
                  },
                  "storageSolution": {
                    "value": "[parameters('storageSolution')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "timeStamp": {
                    "value": "[parameters('timeStamp')]"
                  },
                  "timeZone": {
                    "value": "[parameters('timeZone')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.36.1.42791",
                      "templateHash": "16630716980650913180"
                    }
                  },
                  "parameters": {
                    "availability": {
                      "type": "string"
                    },
                    "azureBackupPrivateDnsZoneResourceId": {
                      "type": "string"
                    },
                    "azureBlobPrivateDnsZoneResourceId": {
                      "type": "string"
                    },
                    "azureFilePrivateDnsZoneResourceId": {
                      "type": "string"
                    },
                    "azureFunctionAppPrivateDnsZoneResourceId": {
                      "type": "string"
                    },
                    "azureQueuePrivateDnsZoneResourceId": {
                      "type": "string"
                    },
                    "azureTablePrivateDnsZoneResourceId": {
                      "type": "string"
                    },
                    "deploymentUserAssignedIdentityClientId": {
                      "type": "string"
                    },
                    "deploymentVirtualMachineName": {
                      "type": "string"
                    },
                    "domainJoinUserPassword": {
                      "type": "securestring"
                    },
                    "domainJoinUserPrincipalName": {
                      "type": "securestring"
                    },
                    "fslogixEncryptionKeyNameConv": {
                      "type": "string"
                    },
                    "encryptionKeyVaultUri": {
                      "type": "string"
                    },
                    "encryptionUserAssignedIdentityResourceId": {
                      "type": "string"
                    },
                    "fileShares": {
                      "type": "array"
                    },
                    "functionAppDelegatedSubnetResourceId": {
                      "type": "string"
                    },
                    "hostPoolResourceId": {
                      "type": "string"
                    },
                    "identitySolution": {
                      "type": "string"
                    },
                    "increaseQuota": {
                      "type": "bool"
                    },
                    "increaseQuotaEncryptionKeyName": {
                      "type": "string"
                    },
                    "increaseQuotaApplicationInsightsName": {
                      "type": "string"
                    },
                    "increaseQuotaFunctionAppName": {
                      "type": "string"
                    },
                    "increaseQuotaStorageAccountName": {
                      "type": "string"
                    },
                    "kerberosEncryptionType": {
                      "type": "string"
                    },
                    "keyManagementStorageAccounts": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "logAnalyticsWorkspaceId": {
                      "type": "string"
                    },
                    "ouPath": {
                      "type": "string"
                    },
                    "privateEndpoint": {
                      "type": "bool"
                    },
                    "privateEndpointLocation": {
                      "type": "string"
                    },
                    "privateEndpointNameConv": {
                      "type": "string"
                    },
                    "privateEndpointNICNameConv": {
                      "type": "string"
                    },
                    "privateEndpointSubnetResourceId": {
                      "type": "string"
                    },
                    "privateLinkScopeResourceId": {
                      "type": "string"
                    },
                    "recoveryServices": {
                      "type": "bool"
                    },
                    "recoveryServicesVaultName": {
                      "type": "string"
                    },
                    "resourceGroupDeployment": {
                      "type": "string"
                    },
                    "resourceGroupStorage": {
                      "type": "string"
                    },
                    "serverFarmId": {
                      "type": "string"
                    },
                    "shardingOptions": {
                      "type": "string"
                    },
                    "shareAdminGroups": {
                      "type": "array"
                    },
                    "shareSizeInGB": {
                      "type": "int"
                    },
                    "shareUserGroups": {
                      "type": "array"
                    },
                    "storageAccountNamePrefix": {
                      "type": "string"
                    },
                    "storageCount": {
                      "type": "int"
                    },
                    "storageIndex": {
                      "type": "int"
                    },
                    "storageSku": {
                      "type": "string"
                    },
                    "storageSolution": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "timeStamp": {
                      "type": "string"
                    },
                    "timeZone": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "$fxv#0": "# This file enables modules to be automatically managed by the Functions service.\r\n# See https://aka.ms/functionsmanageddependency for additional information.\r\n#\r\n@{\r\n    # For latest supported version, go to 'https://www.powershellgallery.com/packages/Az'. \r\n    # To use the Az module in your function app, please uncomment the line below.\r\n    # 'Az' = '7.*'\r\n}",
                    "$fxv#1": "param($Timer)\r\n\r\ntry\r\n{\r\n\t[string]$FileShareNames = $env:FileShareNames\r\n\t[string]$ResourceGroupName = $env:ResourceGroupName\r\n\t[string]$ResourceManagerUrl = $env:ResourceManagerUrl\r\n\t[string]$StorageSuffix = $env:StorageSuffix\r\n\t[string]$SubscriptionId = $env:SubscriptionId\r\n\r\n\t$ErrorActionPreference = 'Stop'\r\n\t$WarningPreference = 'SilentlyContinue'\r\n\r\n\t[array]$ShareNames = $FileShareNames.replace('\\\"', '\"') | ConvertFrom-Json\r\n\r\n\t#region Functions\r\n\tfunction Write-Log \r\n    {\r\n\t\t[CmdletBinding()]\r\n\t\tparam (\r\n\t\t\t[Parameter(Mandatory = $false)]\r\n\t\t\t[switch]$Err,\r\n\r\n\t\t\t[Parameter(Mandatory = $true)]\r\n\t\t\t[string]$Message,\r\n\r\n\t\t\t[Parameter(Mandatory = $true)]\r\n\t\t\t[string]$ResourceName,\r\n\r\n\t\t\t[Parameter(Mandatory = $false)]\r\n\t\t\t[switch]$Warn\r\n\t\t)\r\n\r\n\t\t[string]$MessageTimeStamp = Get-Date -Format 'yyyy-MM-dd HH:mm:ss'\r\n\t\t$Message = \"[$($MyInvocation.ScriptLineNumber)] [$($ResourceName)] $Message\"\r\n\t\t[string]$WriteMessage = \"[$($MessageTimeStamp)] $Message\"\r\n\r\n\t\tif ($Err)\r\n        {\r\n\t\t\tWrite-Error $WriteMessage\r\n\t\t\t$Message = \"ERROR: $Message\"\r\n\t\t}\r\n\t\telseif ($Warn)\r\n        {\r\n\t\t\tWrite-Warning $WriteMessage\r\n\t\t\t$Message = \"WARN: $Message\"\r\n\t\t}\r\n\t\telse \r\n        {\r\n\t\t\tWrite-Output $WriteMessage\r\n\t\t}\r\n\t}\r\n\t#endregion Functions\r\n\r\n\t# Note: https://stackoverflow.com/questions/41674518/powershell-setting-security-protocol-to-tls-1-2\r\n\t[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\r\n\r\n\r\n\t#region Azure Authentication\r\n    $AccessToken = $null\r\n    try\r\n    {\r\n\t\t$TokenAuthURI = $env:IDENTITY_ENDPOINT + '?resource=' + $ResourceManagerUrl + '&api-version=2019-08-01'\r\n\t\t$TokenResponse = Invoke-RestMethod -Method Get -Headers @{\"X-IDENTITY-HEADER\"=\"$env:IDENTITY_HEADER\"} -Uri $TokenAuthURI\r\n\t\t$AccessToken = $TokenResponse.access_token\r\n\t\t$Header = @{\r\n\t\t\t'Content-Type'='application/json'\r\n\t\t\t'Authorization'='Bearer ' + $AccessToken\r\n\t\t}\r\n    }\r\n    catch\r\n    {\r\n        throw [System.Exception]::new('Failed to authenticate Azure with application ID, tenant ID, subscription ID', $PSItem.Exception)\r\n    }\r\n    Write-Log -ResourceName \"$SubscriptionId\" -Message \"Successfully authenticated with Azure using a managed identity\"\r\n\t#endregion Azure Authentication\r\n\r\n\t# Get storage accounts\r\n\t$Uri = $ResourceManagerUrl + 'subscriptions/' + $SubscriptionId  + '/resourceGroups/' + $ResourceGroupName + '/providers/Microsoft.Storage/storageAccounts?api-version=2023-05-01'\r\n\t$StorageAccountNames = (Invoke-RestMethod -Headers $Header -Method 'GET' -Uri $Uri).value.name\r\n\r\n\tforeach($StorageAccountName in $StorageAccountNames)\r\n\t{\r\n\t\t$Shares = $ResourceManagerUrl + 'subscriptions/' + $SubscriptionId  + '/resourceGroups/' + $ResourceGroupName + '/providers/Microsoft.Storage/storageAccounts/' + $StorageAccountName + '/fileServices/default/shares?api-version=2023-05-01'\r\n\t\t$ExistingShareNames = (Invoke-RestMethod -Headers $Header -Method 'GET' -Uri $Shares).value.name\r\n\t\tForEach($ShareName in $ShareNames)\r\n\t\t{\r\n\t\t\tif($ShareName -in $ExistingShareNames)\r\n\t\t\t{\r\n\r\n\t\t\t\t$ShareUpdateUri = $ResourceManagerUrl + 'subscriptions/' + $SubscriptionId  + '/resourceGroups/' + $ResourceGroupName + '/providers/Microsoft.Storage/storageAccounts/' + $StorageAccountName + '/fileServices/default/shares/' + $ShareName + '?api-version=2023-05-01'\r\n\r\n\t\t\t\t# Get file share info\r\n\t\t\t\t$ShareGetUri = $ResourceManagerUrl + 'subscriptions/' + $SubscriptionId  + '/resourceGroups/' + $ResourceGroupName + '/providers/Microsoft.Storage/storageAccounts/' + $StorageAccountName + '/fileServices/default/shares/' + $ShareName + '?api-version=2023-05-01&$expand=stats'\r\n\t\t\t\t$PFS = (Invoke-RestMethod -Headers $Header -Method 'GET' -Uri $ShareGetUri).properties\r\n\t\t\r\n\t\t\t\t# Set variables for provisioned capacity and used capacity\r\n\t\t\t\t$ProvisionedCapacity = $PFS.shareQuota\r\n\t\t\t\t$UsedCapacity = $PFS.ShareUsageBytes\r\n\t\t\t\tWrite-Log -ResourceName \"$StorageAccountName/$ShareName\" -Message \"Share Capacity: $($ProvisionedCapacity)GB\"\r\n\t\t\t\tWrite-Log -ResourceName \"$StorageAccountName/$ShareName\" -Message \"Share Usage: $([math]::Round($UsedCapacity/1GB, 0))GB\"\r\n\t\t\r\n\t\t\t\t# GB Based Scaling\r\n\t\t\t\t# No scaling if no usage\r\n\t\t\t\tif($UsedCapacity -eq 0)\r\n\t\t\t\t{\r\n\t\t\t\t\tWrite-Log -ResourceName \"$StorageAccountName/$ShareName\" -Message \"Share Usage is 0GB. No Changes.\"\r\n\t\t\t\t}\r\n\t\t\t\t# Slow scaling up to 500GB\r\n\t\t\t\t# Increases share quota by 100GB if less than 50GB remains on the share\r\n\t\t\t\t# This allows time for an AVD Stamp to be rolled out \r\n\t\t\t\telseif ($ProvisionedCapacity -lt 500)\r\n\t\t\t\t{\r\n\t\t\t\t\tif (($ProvisionedCapacity - ($UsedCapacity / ([Math]::Pow(2,30)))) -lt 50) {\r\n\t\t\t\t\t\tWrite-Log -ResourceName \"$StorageAccountName/$ShareName\" -Message \"Share Usage has surpassed the Share Quota remaining threshold of 50GB. Increasing the file share quota by 100GB.\" \r\n\t\t\t\t\t\t$Quota = $ProvisionedCapacity + 100\r\n\t\t\t\t\t\tInvoke-RestMethod `\r\n\t\t\t\t\t\t\t-Body (@{properties = @{shareQuota = $Quota}} | ConvertTo-Json) `\r\n\t\t\t\t\t\t\t-Headers $Header `\r\n\t\t\t\t\t\t\t-Method 'PATCH' `\r\n\t\t\t\t\t\t\t-Uri $ShareUpdateUri | Out-Null\r\n\t\t\t\t\t\tWrite-Log -ResourceName \"$StorageAccountName/$ShareName\" -Message \"New Capacity: $($Quota)GB\"\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tWrite-Log -ResourceName \"$StorageAccountName/$ShareName\" -Message \"Share Usage is below Share Quota remaining threshold of 50GB. No Changes.\"\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t# Aggressive scaling\r\n\t\t\t\t# Increases share quota by 500GB if less than 500GB remains on the share\r\n\t\t\t\t# This ensures plenty of space is available during mass onboarding\r\n\t\t\t\telse \r\n\t\t\t\t{\r\n\t\t\t\t\tif (($ProvisionedCapacity - ($UsedCapacity / ([Math]::Pow(2,30)))) -lt 500) {\r\n\t\t\t\t\t\tWrite-Log -ResourceName \"$StorageAccountName/$ShareName\" -Message \"Share Usage has surpassed the Share Quota remaining threshold of 500GB. Increasing the file share quota by 500GB.\" \r\n\t\t\t\t\t\t$Quota = $ProvisionedCapacity + 500\r\n\t\t\t\t\t\tInvoke-RestMethod `\r\n\t\t\t\t\t\t\t-Body (@{properties = @{shareQuota = $Quota}} | ConvertTo-Json) `\r\n\t\t\t\t\t\t\t-Headers $Header `\r\n\t\t\t\t\t\t\t-Method 'PATCH' `\r\n\t\t\t\t\t\t\t-Uri $ShareUpdateUri | Out-Null\r\n\t\t\t\t\t\tWrite-Log -ResourceName \"$StorageAccountName/$ShareName\" -Message \"New Capacity: $($Quota)GB\"\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tWrite-Log -ResourceName \"$StorageAccountName/$ShareName\" -Message \"Share Usage is below Share Quota remaining threshold of 500GB. No Changes.\"\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\ncatch \r\n{\r\n\t$ErrContainer = $PSItem\r\n\t# $ErrContainer = $_\r\n\r\n\t[string]$ErrMsg = $ErrContainer | Format-List -Force | Out-String\r\n\t$ErrMsg += \"Version: $Version`n\"\r\n\r\n\tif (Get-Command 'Write-Log' -ErrorAction:SilentlyContinue)\r\n    {\r\n\t\tWrite-Log -ResourceName \"$StorageAccountName/$ShareName\" -Err -Message $ErrMsg -ErrorAction:Continue\r\n\t}\r\n\telse\r\n    {\r\n\t\tWrite-Error $ErrMsg -ErrorAction:Continue\r\n\t}\r\n\r\n\tthrow [System.Exception]::new($ErrMsg, $ErrContainer.Exception)\r\n}",
                    "$fxv#2": "# Authentication is provided in the script",
                    "adminRoleDefinitionId": "a7264617-510b-434b-a828-9731dc254ea7",
                    "privateEndpointVnetName": "[if(and(not(empty(parameters('privateEndpointSubnetResourceId'))), parameters('privateEndpoint')), split(parameters('privateEndpointSubnetResourceId'), '/')[8], '')]",
                    "smbMultiChannel": {
                      "multichannel": {
                        "enabled": true
                      }
                    },
                    "smbSettings": {
                      "versions": "SMB3.0;SMB3.1.1;",
                      "authenticationMethods": "NTLMv2;Kerberos;",
                      "kerberosTicketEncryption": "[if(equals(parameters('kerberosEncryptionType'), 'RC4'), 'RC4-HMAC;', 'AES-256;')]",
                      "channelEncryption": "AES-128-CCM;AES-128-GCM;AES-256-GCM;"
                    },
                    "storageRedundancy": "[if(equals(parameters('availability'), 'availabilityZones'), '_ZRS', '_LRS')]",
                    "backupPrivateDNSZoneResourceIds": [
                      "[parameters('azureBackupPrivateDnsZoneResourceId')]",
                      "[parameters('azureBlobPrivateDnsZoneResourceId')]",
                      "[parameters('azureQueuePrivateDnsZoneResourceId')]"
                    ],
                    "nonEmptyBackupPrivateDNSZoneResourceIds": "[filter(variables('backupPrivateDNSZoneResourceIds'), lambda('zone', not(empty(lambdaVariables('zone')))))]"
                  },
                  "resources": [
                    {
                      "copy": {
                        "name": "storageAccounts",
                        "count": "[length(range(0, parameters('storageCount')))]"
                      },
                      "type": "Microsoft.Storage/storageAccounts",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}{1}', parameters('storageAccountNamePrefix'), string(padLeft(add(range(0, parameters('storageCount'))[copyIndex()], parameters('storageIndex')), 2, '0')))]",
                      "kind": "[if(equals(parameters('storageSku'), 'Standard'), 'StorageV2', 'FileStorage')]",
                      "location": "[parameters('location')]",
                      "identity": "[if(not(equals(parameters('keyManagementStorageAccounts'), 'MicrosoftManaged')), createObject('type', 'UserAssigned', 'userAssignedIdentities', createObject(format('{0}', parameters('encryptionUserAssignedIdentityResourceId')), createObject())), null())]",
                      "properties": {
                        "accessTier": "Hot",
                        "allowBlobPublicAccess": false,
                        "allowCrossTenantReplication": false,
                        "allowedCopyScope": "[if(parameters('privateEndpoint'), 'PrivateLink', 'AAD')]",
                        "allowSharedKeyAccess": true,
                        "azureFilesIdentityBasedAuthentication": "[if(contains(parameters('identitySolution'), 'DomainServices'), createObject('defaultSharePermission', 'StorageFileDataSmbShareContributor', 'directoryServiceOptions', if(equals(parameters('identitySolution'), 'EntraDomainServices'), 'AADDS', 'None')), null())]",
                        "defaultToOAuthAuthentication": false,
                        "dnsEndpointType": "Standard",
                        "encryption": {
                          "identity": "[if(not(equals(parameters('keyManagementStorageAccounts'), 'MicrosoftManaged')), createObject('userAssignedIdentity', parameters('encryptionUserAssignedIdentityResourceId')), null())]",
                          "services": "[if(equals(parameters('storageSku'), 'Standard'), createObject('blob', createObject('keyType', 'Account', 'enabled', true()), 'file', createObject('keyType', 'Account', 'enabled', true())), createObject('file', createObject('keyType', 'Account', 'enabled', true())))]",
                          "keySource": "[if(not(equals(parameters('keyManagementStorageAccounts'), 'MicrosoftManaged')), 'Microsoft.KeyVault', 'Microsoft.Storage')]",
                          "keyvaultproperties": "[if(not(equals(parameters('keyManagementStorageAccounts'), 'MicrosoftManaged')), createObject('keyname', replace(parameters('fslogixEncryptionKeyNameConv'), '##', padLeft(add(range(0, parameters('storageCount'))[copyIndex()], parameters('storageIndex')), 2, '0')), 'keyvaulturi', parameters('encryptionKeyVaultUri')), null())]",
                          "requireInfrastructureEncryption": true
                        },
                        "largeFileSharesState": "[if(equals(parameters('storageSku'), 'Standard'), 'Enabled', null())]",
                        "minimumTlsVersion": "TLS1_2",
                        "networkAcls": {
                          "bypass": "AzureServices",
                          "defaultAction": "[if(parameters('privateEndpoint'), 'Deny', 'Allow')]"
                        },
                        "publicNetworkAccess": "[if(parameters('privateEndpoint'), 'Disabled', 'Enabled')]",
                        "sasPolicy": {
                          "expirationAction": "Log",
                          "sasExpirationPeriod": "180.00:00:00"
                        },
                        "supportsHttpsTrafficOnly": true
                      },
                      "sku": {
                        "name": "[format('{0}{1}', parameters('storageSku'), variables('storageRedundancy'))]"
                      },
                      "tags": "[union(createObject('cm-resource-parent', parameters('hostPoolResourceId')), coalesce(tryGet(parameters('tags'), 'Microsoft.Storage/storageAccounts'), createObject()))]"
                    },
                    {
                      "copy": {
                        "name": "fileServices",
                        "count": "[length(range(0, parameters('storageCount')))]"
                      },
                      "type": "Microsoft.Storage/storageAccounts/fileServices",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}/{1}', format('{0}{1}', parameters('storageAccountNamePrefix'), string(padLeft(add(range(0, parameters('storageCount'))[range(0, parameters('storageCount'))[copyIndex()]], parameters('storageIndex')), 2, '0'))), 'default')]",
                      "properties": {
                        "protocolSettings": {
                          "smb": "[if(equals(parameters('storageSku'), 'Standard'), variables('smbSettings'), union(variables('smbSettings'), variables('smbMultiChannel')))]"
                        },
                        "shareDeleteRetentionPolicy": {
                          "enabled": false
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', format('{0}{1}', parameters('storageAccountNamePrefix'), string(padLeft(add(range(0, parameters('storageCount'))[range(0, parameters('storageCount'))[copyIndex()]], parameters('storageIndex')), 2, '0'))))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "storageAccounts_diagnosticSettings",
                        "count": "[length(range(0, parameters('storageCount')))]"
                      },
                      "condition": "[not(empty(parameters('logAnalyticsWorkspaceId')))]",
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.Storage/storageAccounts/{0}', format('{0}{1}', parameters('storageAccountNamePrefix'), string(padLeft(add(range(0, parameters('storageCount'))[range(0, parameters('storageCount'))[copyIndex()]], parameters('storageIndex')), 2, '0'))))]",
                      "name": "[format('{0}-diagnosticSettings', format('{0}{1}', parameters('storageAccountNamePrefix'), string(padLeft(add(range(0, parameters('storageCount'))[range(0, parameters('storageCount'))[copyIndex()]], parameters('storageIndex')), 2, '0'))))]",
                      "properties": {
                        "metrics": [
                          {
                            "category": "Transaction",
                            "enabled": true
                          }
                        ],
                        "workspaceId": "[parameters('logAnalyticsWorkspaceId')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', format('{0}{1}', parameters('storageAccountNamePrefix'), string(padLeft(add(range(0, parameters('storageCount'))[range(0, parameters('storageCount'))[copyIndex()]], parameters('storageIndex')), 2, '0'))))]",
                        "[resourceId('Microsoft.Storage/storageAccounts', format('{0}{1}', parameters('storageAccountNamePrefix'), string(padLeft(add(range(0, parameters('storageCount'))[range(0, parameters('storageCount'))[copyIndex()]], parameters('storageIndex')), 2, '0'))))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "storageAccounts_file_diagnosticSettings",
                        "count": "[length(range(0, parameters('storageCount')))]"
                      },
                      "condition": "[not(empty(parameters('logAnalyticsWorkspaceId')))]",
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.Storage/storageAccounts/{0}/fileServices/{1}', format('{0}{1}', parameters('storageAccountNamePrefix'), string(padLeft(add(range(0, parameters('storageCount'))[range(0, parameters('storageCount'))[range(0, parameters('storageCount'))[copyIndex()]]], parameters('storageIndex')), 2, '0'))), 'default')]",
                      "name": "[format('{0}-file-diagnosticSettings', format('{0}{1}', parameters('storageAccountNamePrefix'), string(padLeft(add(range(0, parameters('storageCount'))[range(0, parameters('storageCount'))[copyIndex()]], parameters('storageIndex')), 2, '0'))))]",
                      "properties": {
                        "workspaceId": "[parameters('logAnalyticsWorkspaceId')]",
                        "logs": [
                          {
                            "category": "StorageDelete",
                            "enabled": true
                          }
                        ],
                        "metrics": [
                          {
                            "category": "Transaction",
                            "enabled": true
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts/fileServices', format('{0}{1}', parameters('storageAccountNamePrefix'), string(padLeft(add(range(0, parameters('storageCount'))[range(0, parameters('storageCount'))[range(0, parameters('storageCount'))[copyIndex()]]], parameters('storageIndex')), 2, '0'))), 'default')]",
                        "[resourceId('Microsoft.Storage/storageAccounts', format('{0}{1}', parameters('storageAccountNamePrefix'), string(padLeft(add(range(0, parameters('storageCount'))[range(0, parameters('storageCount'))[copyIndex()]], parameters('storageIndex')), 2, '0'))))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "roleAssignmentsAdmins",
                        "count": "[length(range(0, parameters('storageCount')))]"
                      },
                      "condition": "[and(contains(parameters('identitySolution'), 'DomainServices'), not(empty(parameters('shareAdminGroups'))))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}_AdminRoleAssignments_{1}', format('{0}{1}', parameters('storageAccountNamePrefix'), string(padLeft(add(range(0, parameters('storageCount'))[range(0, parameters('storageCount'))[copyIndex()]], parameters('storageIndex')), 2, '0'))), parameters('timeStamp'))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "principalIds": {
                            "value": "[map(parameters('shareAdminGroups'), lambda('group', lambdaVariables('group').objectId))]"
                          },
                          "principalType": {
                            "value": "Group"
                          },
                          "storageAccountResourceId": {
                            "value": "[resourceId('Microsoft.Storage/storageAccounts', format('{0}{1}', parameters('storageAccountNamePrefix'), string(padLeft(add(range(0, parameters('storageCount'))[range(0, parameters('storageCount'))[copyIndex()]], parameters('storageIndex')), 2, '0'))))]"
                          },
                          "roleDefinitionId": {
                            "value": "[variables('adminRoleDefinitionId')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.36.1.42791",
                              "templateHash": "5413482460947585295"
                            }
                          },
                          "parameters": {
                            "principalIds": {
                              "type": "array"
                            },
                            "principalType": {
                              "type": "string"
                            },
                            "storageAccountResourceId": {
                              "type": "string"
                            },
                            "roleDefinitionId": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "roleAssignments",
                                "count": "[length(range(0, length(parameters('principalIds'))))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2020-04-01-preview",
                              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', last(split(parameters('storageAccountResourceId'), '/')))]",
                              "name": "[guid(parameters('principalIds')[range(0, length(parameters('principalIds')))[copyIndex()]], parameters('roleDefinitionId'), parameters('storageAccountResourceId'))]",
                              "properties": {
                                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', parameters('roleDefinitionId'))]",
                                "principalId": "[parameters('principalIds')[range(0, length(parameters('principalIds')))[copyIndex()]]]",
                                "principalType": "[parameters('principalType')]"
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', format('{0}{1}', parameters('storageAccountNamePrefix'), string(padLeft(add(range(0, parameters('storageCount'))[range(0, parameters('storageCount'))[copyIndex()]], parameters('storageIndex')), 2, '0'))))]",
                        "[resourceId('Microsoft.Storage/storageAccounts', format('{0}{1}', parameters('storageAccountNamePrefix'), string(padLeft(add(range(0, parameters('storageCount'))[range(0, parameters('storageCount'))[copyIndex()]], parameters('storageIndex')), 2, '0'))))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "shares",
                        "count": "[length(range(0, parameters('storageCount')))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}_fileShares_{1}', format('{0}{1}', parameters('storageAccountNamePrefix'), string(padLeft(add(range(0, parameters('storageCount'))[range(0, parameters('storageCount'))[copyIndex()]], parameters('storageIndex')), 2, '0'))), parameters('timeStamp'))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "fileShares": {
                            "value": "[parameters('fileShares')]"
                          },
                          "shareSizeInGB": {
                            "value": "[parameters('shareSizeInGB')]"
                          },
                          "StorageAccountName": {
                            "value": "[format('{0}{1}', parameters('storageAccountNamePrefix'), string(padLeft(add(range(0, parameters('storageCount'))[range(0, parameters('storageCount'))[copyIndex()]], parameters('storageIndex')), 2, '0')))]"
                          },
                          "storageSku": {
                            "value": "[parameters('storageSku')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.36.1.42791",
                              "templateHash": "1525681326489176007"
                            }
                          },
                          "parameters": {
                            "fileShares": {
                              "type": "array"
                            },
                            "shareSizeInGB": {
                              "type": "int"
                            },
                            "StorageAccountName": {
                              "type": "string"
                            },
                            "storageSku": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "shares",
                                "count": "[length(range(0, length(parameters('fileShares'))))]"
                              },
                              "type": "Microsoft.Storage/storageAccounts/fileServices/shares",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}/default/{1}', parameters('StorageAccountName'), parameters('fileShares')[range(0, length(parameters('fileShares')))[copyIndex()]])]",
                              "properties": {
                                "accessTier": "[if(equals(parameters('storageSku'), 'Premium'), 'Premium', 'TransactionOptimized')]",
                                "shareQuota": "[parameters('shareSizeInGB')]",
                                "enabledProtocols": "SMB"
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "roleAssignmentsAdmins",
                        "[resourceId('Microsoft.Storage/storageAccounts', format('{0}{1}', parameters('storageAccountNamePrefix'), string(padLeft(add(range(0, parameters('storageCount'))[range(0, parameters('storageCount'))[copyIndex()]], parameters('storageIndex')), 2, '0'))))]",
                        "[resourceId('Microsoft.Storage/storageAccounts', format('{0}{1}', parameters('storageAccountNamePrefix'), string(padLeft(add(range(0, parameters('storageCount'))[range(0, parameters('storageCount'))[copyIndex()]], parameters('storageIndex')), 2, '0'))))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "privateEndpoints",
                        "count": "[length(range(0, parameters('storageCount')))]"
                      },
                      "condition": "[parameters('privateEndpoint')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}_privateEndpoint_{1}', format('{0}{1}', parameters('storageAccountNamePrefix'), string(padLeft(add(range(0, parameters('storageCount'))[range(0, parameters('storageCount'))[copyIndex()]], parameters('storageIndex')), 2, '0'))), parameters('timeStamp'))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "customNetworkInterfaceName": {
                            "value": "[replace(replace(replace(parameters('privateEndpointNICNameConv'), 'SUBRESOURCE', 'file'), 'RESOURCE', format('{0}', format('{0}{1}', parameters('storageAccountNamePrefix'), string(padLeft(add(range(0, parameters('storageCount'))[range(0, parameters('storageCount'))[copyIndex()]], parameters('storageIndex')), 2, '0'))))), 'VNETID', variables('privateEndpointVnetName'))]"
                          },
                          "groupIds": {
                            "value": [
                              "file"
                            ]
                          },
                          "location": "[if(not(empty(parameters('privateEndpointLocation'))), createObject('value', parameters('privateEndpointLocation')), createObject('value', parameters('location')))]",
                          "name": {
                            "value": "[replace(replace(replace(parameters('privateEndpointNameConv'), 'SUBRESOURCE', 'file'), 'RESOURCE', format('{0}', format('{0}{1}', parameters('storageAccountNamePrefix'), string(padLeft(add(range(0, parameters('storageCount'))[range(0, parameters('storageCount'))[copyIndex()]], parameters('storageIndex')), 2, '0'))))), 'VNETID', variables('privateEndpointVnetName'))]"
                          },
                          "privateDnsZoneGroup": "[if(empty(parameters('azureFilePrivateDnsZoneResourceId')), createObject('value', null()), createObject('value', createObject('privateDNSResourceIds', createArray(parameters('azureFilePrivateDnsZoneResourceId')))))]",
                          "serviceResourceId": {
                            "value": "[resourceId('Microsoft.Storage/storageAccounts', format('{0}{1}', parameters('storageAccountNamePrefix'), string(padLeft(add(range(0, parameters('storageCount'))[range(0, parameters('storageCount'))[copyIndex()]], parameters('storageIndex')), 2, '0'))))]"
                          },
                          "subnetResourceId": {
                            "value": "[parameters('privateEndpointSubnetResourceId')]"
                          },
                          "tags": {
                            "value": "[union(createObject('cm-resource-parent', parameters('hostPoolResourceId')), coalesce(tryGet(parameters('tags'), 'Microsoft.Network/privateEndpoints'), createObject()))]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.36.1.42791",
                              "templateHash": "5820984105601907039"
                            },
                            "name": "Private Endpoints"
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the private endpoint resource to create."
                              }
                            },
                            "subnetResourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
                              }
                            },
                            "serviceResourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Resource ID of the resource that needs to be connected to the network."
                              }
                            },
                            "applicationSecurityGroups": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Application security groups in which the private endpoint IP configuration is included."
                              }
                            },
                            "customNetworkInterfaceName": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The custom name of the network interface attached to the private endpoint."
                              }
                            },
                            "ipConfigurations": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. A list of IP configurations of the private endpoint. This will be used to map to the First Party Service endpoints."
                              }
                            },
                            "groupIds": {
                              "type": "array",
                              "metadata": {
                                "description": "Required. Subtype(s) of the connection to be created. The allowed values depend on the type serviceResourceId refers to."
                              }
                            },
                            "privateDnsZoneGroup": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. The private DNS zone group configuration used to associate the private endpoint with one or multiple private DNS zones. A DNS zone group can support up to 5 DNS zones."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. Location for all Resources."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Tags to be applied on all resources/resource groups in this deployment."
                              }
                            },
                            "customDnsConfigs": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Custom DNS configurations."
                              }
                            },
                            "manualPrivateLinkServiceConnections": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Manual PrivateLink Service Connections."
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/privateEndpoints",
                              "apiVersion": "2023-04-01",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "applicationSecurityGroups": "[parameters('applicationSecurityGroups')]",
                                "customDnsConfigs": "[parameters('customDnsConfigs')]",
                                "customNetworkInterfaceName": "[parameters('customNetworkInterfaceName')]",
                                "ipConfigurations": "[parameters('ipConfigurations')]",
                                "manualPrivateLinkServiceConnections": "[parameters('manualPrivateLinkServiceConnections')]",
                                "privateLinkServiceConnections": [
                                  {
                                    "name": "[parameters('name')]",
                                    "properties": {
                                      "privateLinkServiceId": "[parameters('serviceResourceId')]",
                                      "groupIds": "[parameters('groupIds')]"
                                    }
                                  }
                                ],
                                "subnet": {
                                  "id": "[parameters('subnetResourceId')]"
                                }
                              }
                            },
                            {
                              "condition": "[not(empty(parameters('privateDnsZoneGroup')))]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('PE-PrivateDnsZoneGroup-{0}', uniqueString(deployment().name))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "privateDNSResourceIds": {
                                    "value": "[parameters('privateDnsZoneGroup').privateDNSResourceIds]"
                                  },
                                  "privateEndpointName": {
                                    "value": "[parameters('name')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.36.1.42791",
                                      "templateHash": "7513849818521025348"
                                    }
                                  },
                                  "parameters": {
                                    "privateEndpointName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent private endpoint. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "privateDNSResourceIds": {
                                      "type": "array",
                                      "minLength": 1,
                                      "maxLength": 5,
                                      "metadata": {
                                        "description": "Required. Array of private DNS zone resource IDs. A DNS zone group can support up to 5 DNS zones."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "defaultValue": "default",
                                      "metadata": {
                                        "description": "Optional. The name of the private DNS zone group."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "copy": [
                                      {
                                        "name": "privateDnsZoneConfigs",
                                        "count": "[length(parameters('privateDNSResourceIds'))]",
                                        "input": {
                                          "name": "[last(split(parameters('privateDNSResourceIds')[copyIndex('privateDnsZoneConfigs')], '/'))]",
                                          "properties": {
                                            "privateDnsZoneId": "[parameters('privateDNSResourceIds')[copyIndex('privateDnsZoneConfigs')]]"
                                          }
                                        }
                                      }
                                    ]
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                                      "apiVersion": "2023-04-01",
                                      "name": "[format('{0}/{1}', parameters('privateEndpointName'), parameters('name'))]",
                                      "properties": {
                                        "privateDnsZoneConfigs": "[variables('privateDnsZoneConfigs')]"
                                      }
                                    }
                                  ],
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the private endpoint DNS zone group."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the private endpoint DNS zone group."
                                      },
                                      "value": "[resourceId('Microsoft.Network/privateEndpoints/privateDnsZoneGroups', parameters('privateEndpointName'), parameters('name'))]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group the private endpoint was deployed into."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the private endpoint."
                              },
                              "value": "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the private endpoint."
                              },
                              "value": "[parameters('name')]"
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "The location the resource was deployed into."
                              },
                              "value": "[reference(resourceId('Microsoft.Network/privateEndpoints', parameters('name')), '2023-04-01', 'full').location]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', format('{0}{1}', parameters('storageAccountNamePrefix'), string(padLeft(add(range(0, parameters('storageCount'))[range(0, parameters('storageCount'))[copyIndex()]], parameters('storageIndex')), 2, '0'))))]",
                        "[resourceId('Microsoft.Storage/storageAccounts', format('{0}{1}', parameters('storageAccountNamePrefix'), string(padLeft(add(range(0, parameters('storageCount'))[range(0, parameters('storageCount'))[copyIndex()]], parameters('storageIndex')), 2, '0'))))]",
                        "[resourceId('Microsoft.Storage/storageAccounts', format('{0}{1}', parameters('storageAccountNamePrefix'), string(padLeft(add(range(0, parameters('storageCount'))[range(0, parameters('storageCount'))[copyIndex()]], parameters('storageIndex')), 2, '0'))))]",
                        "[resourceId('Microsoft.Storage/storageAccounts', format('{0}{1}', parameters('storageAccountNamePrefix'), string(padLeft(add(range(0, parameters('storageCount'))[range(0, parameters('storageCount'))[copyIndex()]], parameters('storageIndex')), 2, '0'))))]"
                      ]
                    },
                    {
                      "condition": "[contains(parameters('identitySolution'), 'DomainServices')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('Set-NTFSPermissions_{0}', parameters('timeStamp'))]",
                      "resourceGroup": "[parameters('resourceGroupDeployment')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "adminGroupNames": {
                            "value": "[map(parameters('shareAdminGroups'), lambda('group', lambdaVariables('group').displayName))]"
                          },
                          "domainJoinUserPrincipalName": {
                            "value": "[parameters('domainJoinUserPrincipalName')]"
                          },
                          "domainJoinUserPassword": {
                            "value": "[parameters('domainJoinUserPassword')]"
                          },
                          "kerberosEncryptionType": {
                            "value": "[parameters('kerberosEncryptionType')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "ouPath": {
                            "value": "[parameters('ouPath')]"
                          },
                          "resourceGroupStorage": {
                            "value": "[parameters('resourceGroupStorage')]"
                          },
                          "shardingOptions": {
                            "value": "[parameters('shardingOptions')]"
                          },
                          "shares": {
                            "value": "[parameters('fileShares')]"
                          },
                          "storageAccountNamePrefix": {
                            "value": "[parameters('storageAccountNamePrefix')]"
                          },
                          "storageCount": {
                            "value": "[parameters('storageCount')]"
                          },
                          "storageIndex": {
                            "value": "[parameters('storageIndex')]"
                          },
                          "storageSolution": {
                            "value": "[parameters('storageSolution')]"
                          },
                          "timeStamp": {
                            "value": "[parameters('timeStamp')]"
                          },
                          "userAssignedIdentityClientId": {
                            "value": "[parameters('deploymentUserAssignedIdentityClientId')]"
                          },
                          "userGroupNames": {
                            "value": "[map(parameters('shareUserGroups'), lambda('group', lambdaVariables('group').displayName))]"
                          },
                          "virtualMachineName": {
                            "value": "[parameters('deploymentVirtualMachineName')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.36.1.42791",
                              "templateHash": "1927959068564144115"
                            }
                          },
                          "parameters": {
                            "adminGroupNames": {
                              "type": "array",
                              "defaultValue": []
                            },
                            "shares": {
                              "type": "array"
                            },
                            "domainJoinUserPrincipalName": {
                              "type": "securestring"
                            },
                            "domainJoinUserPassword": {
                              "type": "securestring"
                            },
                            "kerberosEncryptionType": {
                              "type": "string",
                              "defaultValue": ""
                            },
                            "location": {
                              "type": "string"
                            },
                            "netAppServers": {
                              "type": "array",
                              "defaultValue": []
                            },
                            "ouPath": {
                              "type": "string",
                              "defaultValue": ""
                            },
                            "resourceGroupStorage": {
                              "type": "string",
                              "defaultValue": ""
                            },
                            "shardingOptions": {
                              "type": "string"
                            },
                            "storageAccountNamePrefix": {
                              "type": "string",
                              "defaultValue": ""
                            },
                            "storageCount": {
                              "type": "int",
                              "defaultValue": 0
                            },
                            "storageIndex": {
                              "type": "int",
                              "defaultValue": 0
                            },
                            "storageSolution": {
                              "type": "string"
                            },
                            "timeStamp": {
                              "type": "string"
                            },
                            "userGroupNames": {
                              "type": "array",
                              "defaultValue": []
                            },
                            "userAssignedIdentityClientId": {
                              "type": "string",
                              "defaultValue": ""
                            },
                            "virtualMachineName": {
                              "type": "string"
                            }
                          },
                          "variables": {
                            "$fxv#0": "param \r\n(       \r\n    [Parameter(Mandatory = $false)]\r\n    [string]$AdminGroupNames,\r\n\r\n    [Parameter(Mandatory = $true)]\r\n    [String]$Shares,\r\n\r\n    [Parameter(Mandatory = $false)]\r\n    [string]$ShardAzureFilesStorage,\r\n    \r\n    [Parameter(Mandatory = $false)]\r\n    [String]$DomainAccountType = \"ComputerAccount\",\r\n\r\n    [Parameter(Mandatory = $true)]\r\n    [String]$DomainJoinUserPwd,\r\n\r\n    [Parameter(Mandatory = $true)]\r\n    [String]$DomainJoinUserPrincipalName,\r\n\r\n    [Parameter(Mandatory = $false)]\r\n    [ValidateSet(\"AES256\", \"RC4\")]\r\n    [String]$KerberosEncryptionType,\r\n\r\n    [Parameter(Mandatory = $false)]\r\n    [String]$NetAppServers,\r\n\r\n    [Parameter(Mandatory = $false)]\r\n    [String]$OuPath,\r\n\r\n    [Parameter(Mandatory = $false)]\r\n    [string]$ResourceManagerUri,\r\n\r\n    [Parameter(Mandatory = $false)]\r\n    [String]$StorageAccountPrefix,\r\n\r\n    [Parameter(Mandatory = $false)]\r\n    [String]$StorageAccountResourceGroupName,\r\n\r\n    [Parameter(Mandatory = $false)]\r\n    [String]$StorageCount,\r\n\r\n    [Parameter(Mandatory = $false)]\r\n    [String]$StorageIndex,\r\n\r\n    [Parameter(Mandatory = $true)]\r\n    [String]$StorageSolution,\r\n\r\n    [Parameter(Mandatory = $false)]\r\n    [String]$StorageSuffix,\r\n\r\n    [Parameter(Mandatory = $false)]\r\n    [string]$SubscriptionId,\r\n\r\n    [Parameter(Mandatory = $false)]\r\n    [String]$UserGroupNames,\r\n\r\n    [Parameter(Mandatory = $false)]\r\n    [string]$UserAssignedIdentityClientId\r\n)\r\n\r\n$ErrorActionPreference = 'Stop'\r\n$WarningPreference = 'SilentlyContinue'\r\n\r\n[string]$Script:LogDir = \"C:\\WindowsAzure\\Logs\\RunCommands\"\r\n[string]$Script:Name = 'Set-NTFSPermissions'\r\n\r\nFunction ConvertFrom-JsonString {\r\n    [CmdletBinding()]\r\n    param (\r\n        [string]$JsonString,\r\n        [string]$Name,\r\n        [switch]$SensitiveValues      \r\n    )\r\n    If ($JsonString -ne '[]' -and $JsonString -ne $null) {\r\n        [array]$Array = $JsonString.replace('\\\"', '\"') | ConvertFrom-Json\r\n        If ($Array.Length -gt 0) {\r\n            If ($SensitiveValues) { Write-Log -message \"Array '$Name' has $($Array.Length) members\" } Else { Write-Log -message \"$($Name): '$($Array -join \"', '\")'\" }\r\n            Return $Array\r\n        }\r\n        Else {\r\n            Return $null\r\n        }            \r\n    }\r\n    Else {\r\n        Return $null\r\n    }    \r\n}\r\n\r\nFunction Get-FullyQualifiedGroupName {\r\n    [CmdletBinding()]\r\n    param (\r\n        [Parameter()]\r\n        [string]$GroupDisplayName,\r\n        [pscredential]$Credential\r\n    )\r\n    $Group = $null\r\n    $Group = Get-ADGroup -Filter \"Name -eq '$groupDisplayName'\" -Credential $Credential    \r\n    If ($null -ne $Group) {\r\n        # Extract the domain components from the distinguished name\r\n        $domainComponents = ($group.DistinguishedName -split ',') | Where-Object { $_ -like 'DC=*' }\r\n        # Construct the domain name\r\n        $domainName = ($domainComponents -replace 'DC=', '') -join '.'\r\n        # Get the domain information\r\n        $domain = Get-ADDomain -Identity $domainName\r\n        # Get the NetBIOS name\r\n        $netbiosName = $domain.NetBIOSName\r\n        # Combine NetBIOS name and group name\r\n        $GroupName = \"$netbiosName\\$($group.SamAccountName)\"\r\n        Return $GroupName\r\n    }\r\n    Return $null\r\n}\r\n\r\nfunction Update-ACL {\r\n    Param (\r\n        [Parameter(Mandatory = $false)]\r\n        [Array]$AdminGroups,\r\n        [Parameter(Mandatory = $true)]\r\n        [pscredential]$Credential,\r\n        [Parameter(Mandatory = $true)]\r\n        [String]$FileShare,\r\n        [Parameter(Mandatory = $true)]\r\n        [Array]$UserGroups\r\n    )\r\n    # Map Drive\r\n    Write-Log -message \"[Update-ACL]: Mapping Drive to $FileShare\"\r\n    New-PSDrive -Name 'Z' -PSProvider 'FileSystem' -Root $FileShare -Credential $Credential | Out-Null\r\n    # Set recommended NTFS permissions on the file share\r\n    Write-Log -message \"[Update-ACL]: Getting Existing ACL for $FileShare\"\r\n    $ACL = Get-Acl -Path 'Z:'\r\n    $CreatorOwner = [System.Security.Principal.Ntaccount](\"Creator Owner\")\r\n    Write-Log -message \"[Update-ACL]: Purging Existing Access Control Entries for 'Creater Owner' from ACL\"\r\n    $ACL.PurgeAccessRules($CreatorOwner)\r\n    $AuthenticatedUsers = [System.Security.Principal.Ntaccount](\"Authenticated Users\")\r\n    Write-Log -message \"[Update-ACL]: Purging Existing Access Control Entries for 'Authenticated Users' from ACL\"\r\n    $ACL.PurgeAccessRules($AuthenticatedUsers)\r\n    $Users = [System.Security.Principal.Ntaccount](\"Users\")\r\n    Write-Log -message \"[Update-ACL]: Purging Existing Access Control Entries for 'Users' from ACL\"\r\n    $ACL.PurgeAccessRules($Users)\r\n    If ($AdminGroups.Count -gt 0) {\r\n        ForEach ($Group in $AdminGroups) {\r\n            Write-Log -message \"[Update-ACL]: Adding ACE '$($Group):Full Control' to ACL.\"\r\n            $Ntaccount = [System.Security.Principal.Ntaccount](\"$Group\")\r\n            $ACE = ([System.Security.AccessControl.FileSystemAccessRule]::new(\"$Ntaccount\", \"FullControl\", \"ContainerInherit,ObjectInherit\", \"None\", \"Allow\"))\r\n            $ACL.SetAccessRule($ACE)\r\n        }\r\n    }\r\n\r\n    ForEach ($Group in $UserGroups) {\r\n        Write-Log -message \"[Update-ACL]: Adding ACE '$($Group):Modify (This Folder Only)' to ACL.\"\r\n        $Ntaccount = [System.Security.Principal.Ntaccount](\"$Group\")\r\n        $ACE = ([System.Security.AccessControl.FileSystemAccessRule]::new(\"$Ntaccount\", \"Modify\", \"None\", \"None\", \"Allow\"))\r\n        $ACL.SetAccessRule($ACE)\r\n    }\r\n\r\n    Write-Log -message \"[Update-ACL]: Adding ACE 'Creator Owner:Modify (Subfolder and Files Only)' to ACL.\"\r\n    $ACE = ([System.Security.AccessControl.FileSystemAccessRule]::new(\"$CreatorOwner\", \"Modify\", \"ContainerInherit,ObjectInherit\", \"InheritOnly\", \"Allow\"))\r\n    $ACL.SetAccessRule($ACE)\r\n    Write-Log -message \"[Update-ACL]: Applying the following ACL to $($FileShare):\"\r\n    Write-Log -message \"$($ACL.access | Format-Table | Out-String)\"\r\n    $ACL | Set-Acl -Path 'Z:' | Out-Null\r\n    Start-Sleep -Seconds 5 | Out-Null\r\n    $ACL = Get-Acl -Path 'Z:'\r\n    Write-Log -message \"[Update-ACL]: Current ACL of $($FileShare):\"\r\n    Write-Log -message \"$($ACL.access | Format-Table | Out-String)\"\r\n    # Unmount file share\r\n    Write-Log -message \"[Update-ACL]: Unmapping Drive from $FileShare\"\r\n    Remove-PSDrive -Name 'Z' -PSProvider 'FileSystem' -Force | Out-Null\r\n    Start-Sleep -Seconds 5 | Out-Null\r\n}\r\n\r\nfunction New-Log {\r\n    <#\r\n    .SYNOPSIS\r\n    Sets default log file and stores in a script accessible variable $script:Log\r\n    Log File name \"packageExecution_$date.log\"\r\n\r\n    .PARAMETER Path\r\n    Path to the log file\r\n\r\n    .EXAMPLE\r\n    New-Log c:\\Windows\\Logs\r\n    Create a new log file in c:\\Windows\\Logs\r\n    #>\r\n\r\n    Param (\r\n        [Parameter(Mandatory = $true, Position = 0)]\r\n        [string] $Path\r\n    )\r\n\r\n    # Create central log file with given date\r\n\r\n    $date = Get-Date -UFormat \"%Y-%m-%d %H-%M-%S\"\r\n    Set-Variable logFile -Scope Script\r\n    $script:logFile = \"$Script:Name-$date.log\"\r\n\r\n    if ((Test-Path $path ) -eq $false) {\r\n        $null = New-Item -Path $path -type directory\r\n    }\r\n\r\n    $script:Log = Join-Path $path $logfile\r\n\r\n    Add-Content $script:Log \"Date`t`t`tCategory`t`tDetails\"\r\n}\r\n\r\nfunction Write-Log {\r\n\r\n    <#\r\n    .SYNOPSIS\r\n    Creates a log file and stores logs based on categories with tab seperation\r\n\r\n    .PARAMETER category\r\n    Category to put into the trace\r\n\r\n    .PARAMETER message\r\n    Message to be loged\r\n\r\n    .EXAMPLE\r\n    Log 'Info' 'Message'\r\n\r\n    #>\r\n\r\n    Param (\r\n        [Parameter(Mandatory = $false, Position = 0)]\r\n        [ValidateSet(\"Info\", \"Warning\", \"Error\")]\r\n        $category = 'Info',\r\n        [Parameter(Mandatory = $true, Position = 1)]\r\n        $message\r\n    )\r\n\r\n    $date = get-date\r\n    $content = \"[$date]`t$category`t`t$message\" \r\n    Add-Content $Script:Log $content -ErrorAction Stop\r\n}\r\n\r\ntry {\r\n    \r\n    New-Log -Path $Script:LogDir\r\n    write-log -message \"*** Parameter Values ***\"\r\n\r\n    # Convert Parameters passed as a JSON String to an array and remove any backslashes\r\n    [array]$AdminGroupNames = ConvertFrom-JsonString -JsonString $AdminGroupNames -Name 'AdminGroupNames'\r\n    [array]$Shares = ConvertFrom-JsonString -JsonString $Shares -Name 'Shares'\r\n    [array]$UserGroupNames = ConvertFrom-JsonString -JsonString $UserGroupNames -Name 'UserGroupNames'\r\n\r\n    # Check if the Active Directory module is installed\r\n    $RsatInstalled = (Get-WindowsFeature -Name 'RSAT-AD-PowerShell').Installed\r\n    if (!$RsatInstalled) {\r\n        Install-WindowsFeature -Name 'RSAT-AD-PowerShell' | Out-Null\r\n    }\r\n    # Create Domain credential\r\n    $DomainJoinUserName = $DomainJoinUserPrincipalName.Split('@')[0]\r\n    $DomainPassword = ConvertTo-SecureString -String $DomainJoinUserPwd -AsPlainText -Force\r\n    [pscredential]$DomainCredential = New-Object System.Management.Automation.PSCredential ($DomainJoinUserName, $DomainPassword)\r\n\r\n    # Get Domain information\r\n    $Domain = Get-ADDomain -Credential $DomainCredential -Current 'LocalComputer'\r\n    Write-Log -message \"Domain Information:\"\r\n    Write-Log -message \"DistiguishedName: $($Domain.DistinguishedName)\"\r\n    Write-Log -message \"DNSRoot: $($Domain.DNSRoot)\"\r\n    Write-Log -message \"NetBIOSName: $($Domain.NetBIOSName)\"\r\n\r\n    # Get the SamAccountName for all the DisplayNames provided.\r\n    if ($AdminGroupNames.Count -gt 0) {\r\n        [array]$AdminGroups = @()\r\n        Write-Log -message \"Processing AdminGroupNames by searching AD for Groups with the provided display name and returning the SamAccountName\"\r\n        ForEach ($DisplayName in $AdminGroupNames) {\r\n            Write-Log -message \"Processing AdminGroupName: $DisplayName\"\r\n            $FullyQualifiedGroupName = $null\r\n            $FullyQualifiedGroupName = Get-FullyQualifiedGroupName -GroupDisplayName $DisplayName -Credential $DomainCredential\r\n            If ($null -ne $FullyQualifiedGroupName) {\r\n                Write-Log -message \"Found Group: $FullyQualifiedGroupName\"\r\n                $AdminGroups += $FullyQualifiedGroupName\r\n            }\r\n            Else {\r\n                Write-Log -message \"Admin Group not found in Active Directory\"\r\n            }            \r\n        }\r\n    }\r\n\r\n    Write-Log -message \"Processing UserGroupNames by searching AD for Groups with the provided display name and returning the SamAccountName\"\r\n    [array]$UserGroups = @()\r\n    ForEach ($DisplayName in $UserGroupNames) {\r\n        Write-Log -message \"Processing UserGroupName: $DisplayName\"\r\n        $FullyQualifiedGroupName = $null\r\n        $FullyQualifiedGroupName = Get-FullyQualifiedGroupName -GroupDisplayName $DisplayName -Credential $DomainCredential\r\n        If ($null -ne $FullyQualifiedGroupName) {\r\n            Write-Log -message \"Found Group: $FullyQualifiedGroupName\"\r\n            $UserGroups += $FullyQualifiedGroupName\r\n        }\r\n        Else {\r\n            Write-Log -message \"User not found\"\r\n        }    \r\n    }\r\n\r\n    Switch ($StorageSolution) {\r\n        'AzureFiles' {\r\n            Write-Log -message \"Processing Azure Files\"\r\n            # Convert strings to integers    \r\n            [int]$StCount = $StorageCount.replace('\\\"', '\"')\r\n            [int]$StIndex = $StorageIndex.replace('\\\"', '\"')\r\n            Write-Log -message \"Storage Account Count: $StCount\"\r\n            Write-Log -message \"Storage Account Index: $StIndex\"\r\n            # Remove any escape characters from strings\r\n            $OuPath = $OuPath.Replace('\\\"', '\"')\r\n            Write-Log -message \"OU Path: $OuPath\"\r\n            $ResourceManagerUri = $ResourceManagerUri.Replace('\\\"', '\"')\r\n            Write-Log -message \"ResourceManagerUri: $ResourceManagerUri\"\r\n            $StorageAccountPrefix = $StorageAccountPrefix.ToLower().replace('\\\"', '\"')\r\n            Write-Log -message \"Storage Account Prefix: $StorageAccountPrefix\"\r\n            $StorageAccountResourceGroupName = $StorageAccountResourceGroupName.Replace('\\\"', '\"')\r\n            Write-Log -message \"Storage Account Resource Group Name: $StorageAccountResourceGroupName\"\r\n            $SubscriptionId = $SubscriptionId.replace('\\\"', '\"')\r\n            Write-Log -message \"Subscription Id: $SubscriptionId\"            \r\n            $UserAssignedIdentityClientId = $UserAssignedIdentityClientId.replace('\\\"', '\"')\r\n            Write-Log -message \"User Assigned Identity Client Id: $UserAssignedIdentityClientId\"\r\n            # Set the suffix for the Azure Files\r\n            $FilesSuffix = \".file.$($StorageSuffix.Replace('\\\"', '\"'))\"\r\n            Write-Log -message \"Files Suffix: $FilesSuffix\"\r\n            # Fix the resource manager URI since only AzureCloud contains a trailing slash\r\n            $ResourceManagerUriFixed = if ($ResourceManagerUri[-1] -eq '/') { $ResourceManagerUri.Substring(0, $ResourceManagerUri.Length - 1) } else { $ResourceManagerUri }\r\n            # Get an access token for Azure resources\r\n            Write-Log -message \"Getting an access token for Azure resources\"\r\n            $AzureManagementAccessToken = (Invoke-RestMethod `\r\n                    -Headers @{Metadata = \"true\" } `\r\n                    -Uri $('http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01&resource=' + $ResourceManagerUriFixed + '&client_id=' + $UserAssignedIdentityClientId)).access_token\r\n            # Set header for Azure Management API\r\n            $AzureManagementHeader = @{\r\n                'Content-Type'  = 'application/json'\r\n                'Authorization' = 'Bearer ' + $AzureManagementAccessToken\r\n            }   \r\n            for ($i = 0; $i -lt $StCount; $i++) {\r\n                # Build the Storage Account Name and FQDN\r\n                $StorageAccountName = $StorageAccountPrefix + ($i + $StIndex).ToString().PadLeft(2, '0')\r\n                Write-Log -message \"Processing Storage Account Name: $StorageAccountName\"\r\n                $FileServer = '\\\\' + $StorageAccountName + $FilesSuffix\r\n                # Get the storage account key\r\n                $StorageKey = (Invoke-RestMethod `\r\n                        -Headers $AzureManagementHeader `\r\n                        -Method 'POST' `\r\n                        -Uri $($ResourceManagerUriFixed + '/subscriptions/' + $SubscriptionId + '/resourceGroups/' + $StorageAccountResourceGroupName + '/providers/Microsoft.Storage/storageAccounts/' + $StorageAccountName + '/listKeys?api-version=2023-05-01')).keys[0].value\r\n                \r\n                # Create credential for accessing the storage account\r\n                Write-Log -message \"Building Storage Key Credential\"\r\n                $StorageUsername = 'Azure\\' + $StorageAccountName\r\n                $StoragePassword = ConvertTo-SecureString -String \"$($StorageKey)\" -AsPlainText -Force\r\n                [pscredential]$StorageKeyCredential = New-Object System.Management.Automation.PSCredential ($StorageUsername, $StoragePassword)\r\n                Write-Log -message \"Successfully Built Storage Key Credential\"\r\n                # Get / create kerberos key for Azure Storage Account\r\n                Write-Log -message \"Getting Kerberos Key for Azure Storage Account\"\r\n                $KerberosKey = ((Invoke-RestMethod `\r\n                            -Headers $AzureManagementHeader `\r\n                            -Method 'POST' `\r\n                            -Uri $($ResourceManagerUriFixed + '/subscriptions/' + $SubscriptionId + '/resourceGroups/' + $StorageAccountResourceGroupName + '/providers/Microsoft.Storage/storageAccounts/' + $StorageAccountName + '/listKeys?api-version=2023-05-01&$expand=kerb')).keys | Where-Object { $_.Keyname -contains 'kerb1' }).Value\r\n                \r\n                if (!$KerberosKey) {\r\n                    Write-Log -message \"Kerberos Key not found, Generating a new key\"\r\n                    $null = Invoke-RestMethod `\r\n                        -Body (@{keyName = 'kerb1' } | ConvertTo-Json) `\r\n                        -Headers $AzureManagementHeader `\r\n                        -Method 'POST' `\r\n                        -Uri $($ResourceManagerUriFixed + '/subscriptions/' + $SubscriptionId + '/resourceGroups/' + $StorageAccountResourceGroupName + '/providers/Microsoft.Storage/storageAccounts/' + $StorageAccountName + '/regenerateKey?api-version=2023-05-01')\r\n                    $Key = ((Invoke-RestMethod `\r\n                                -Headers $AzureManagementHeader `\r\n                                -Method 'POST' `\r\n                                -Uri $($ResourceManagerUriFixed + '/subscriptions/' + $SubscriptionId + '/resourceGroups/' + $StorageAccountResourceGroupName + '/providers/Microsoft.Storage/storageAccounts/' + $StorageAccountName + '/listKeys?api-version=2023-05-01&$expand=kerb')).keys | Where-Object { $_.Keyname -contains 'kerb1' }).Value\r\n                } \r\n                else {\r\n                    Write-Log -message \"Kerberos Key found\"\r\n                    $Key = $KerberosKey\r\n                }\r\n                # Creates a password for the Azure Storage Account in AD using the Kerberos key\r\n                Write-Log -message \"Creating a password for the Azure Storage Account in AD using the Kerberos key\"\r\n                $ComputerPassword = ConvertTo-SecureString -String $Key.Replace(\"'\", \"\") -AsPlainText -Force  \r\n                # Create the SPN value for the Azure Storage Account; attribute for computer object in AD\r\n                Write-Log -message \"Creating the SPN value for the Azure Storage Account\" \r\n                $SPN = 'cifs/' + $StorageAccountName + $FilesSuffix\r\n                # Create the Description value for the Azure Storage Account; attribute for computer object in AD \r\n                $Description = \"Computer account object for Azure storage account $($StorageAccountName).\"\r\n\r\n                # Create the AD computer object for the Azure Storage Account\r\n                Write-Log -message \"Searching for existing computer account object for Azure Storage Account\"\r\n                $Computer = Get-ADComputer -Credential $DomainCredential -Filter { Name -eq $StorageAccountName }\r\n                if ($Computer) {\r\n                    Write-Log -message \"Computer account object for Azure Storage Account found, removing the existing object\"\r\n                    Remove-ADComputer -Credential $DomainCredential -Identity $StorageAccountName -Confirm:$false\r\n                }\r\n                Else {\r\n                    Write-Log -message \"Computer account object for Azure Storage Account not found\"\r\n                }\r\n                Write-Log -message \"Creating the AD computer object for the Azure Storage Account\"\r\n                $ComputerObject = New-ADComputer -Credential $DomainCredential -Name $StorageAccountName -Path $OuPath -ServicePrincipalNames $SPN -AccountPassword $ComputerPassword -Description $Description -PassThru\r\n                # Update the Azure Storage Account with the domain join 'INFO'\r\n                Write-Log -message \"Updating the Azure Storage Account with the domain join 'INFO'\"\r\n                $SamAccountName = switch ($KerberosEncryptionType) {\r\n                    'AES256' { $StorageAccountName }\r\n                    'RC4' { $ComputerObject.SamAccountName }\r\n                }    \r\n                $Body = (@{\r\n                        properties = @{\r\n                            azureFilesIdentityBasedAuthentication = @{\r\n                                activeDirectoryProperties = @{\r\n                                    accountType       = 'Computer'\r\n                                    azureStorageSid   = $ComputerObject.SID.Value\r\n                                    domainGuid        = $Domain.ObjectGUID.Guid\r\n                                    domainName        = $Domain.DNSRoot\r\n                                    domainSid         = $Domain.DomainSID.Value\r\n                                    forestName        = $Domain.Forest\r\n                                    netBiosDomainName = $Domain.NetBIOSName\r\n                                    samAccountName    = $samAccountName\r\n                                }\r\n                                directoryServiceOptions   = 'AD'\r\n                            }\r\n                        }\r\n                    } | ConvertTo-Json -Depth 6 -Compress)  \r\n\r\n                $null = Invoke-RestMethod `\r\n                    -Body $Body `\r\n                    -Headers $AzureManagementHeader `\r\n                    -Method 'PATCH' `\r\n                    -Uri $($ResourceManagerUriFixed + '/subscriptions/' + $SubscriptionId + '/resourceGroups/' + $StorageAccountResourceGroupName + '/providers/Microsoft.Storage/storageAccounts/' + $StorageAccountName + '?api-version=2023-05-01')             \r\n                \r\n                # Enable AES256 encryption if selected\r\n                if ($KerberosEncryptionType -eq 'AES256') {\r\n                    Write-Log -message \"Setting the Kerberos encryption to $KerberosEncryptionType the computer object\"\r\n                    # Set the Kerberos encryption on the computer object\r\n                    $DistinguishedName = 'CN=' + $StorageAccountName + ',' + $OuPath\r\n                    Set-ADComputer -Credential $DomainCredential -Identity $DistinguishedName -KerberosEncryptionType 'AES256' | Out-Null\r\n                    \r\n                    # Reset the Kerberos key on the Storage Account\r\n                    Write-Log -message \"Resetting the kerb1 key on the Storage Account\"\r\n                    $null = Invoke-RestMethod `\r\n                        -Body (@{keyName = 'kerb1' } | ConvertTo-Json) `\r\n                        -Headers $AzureManagementHeader `\r\n                        -Method 'POST' `\r\n                        -Uri $($ResourceManagerUriFixed + '/subscriptions/' + $SubscriptionId + '/resourceGroups/' + $StorageAccountResourceGroupName + '/providers/Microsoft.Storage/storageAccounts/' + $StorageAccountName + '/regenerateKey?api-version=2023-05-01')\r\n                    \r\n                    Write-Log -message \"Resetting the kerb2 key on the Storage Account\"\r\n                    $null = Invoke-RestMethod `\r\n                        -Body (@{keyName = 'kerb2' } | ConvertTo-Json) `\r\n                        -Headers $AzureManagementHeader `\r\n                        -Method 'POST' `\r\n                        -Uri $($ResourceManagerUriFixed + '/subscriptions/' + $SubscriptionId + '/resourceGroups/' + $StorageAccountResourceGroupName + '/providers/Microsoft.Storage/storageAccounts/' + $StorageAccountName + '/regenerateKey?api-version=2023-05-01')\r\n\r\n                    $Key = ((Invoke-RestMethod `\r\n                                -Headers $AzureManagementHeader `\r\n                                -Method 'POST' `\r\n                                -Uri $($ResourceManagerUriFixed + '/subscriptions/' + $SubscriptionId + '/resourceGroups/' + $StorageAccountResourceGroupName + '/providers/Microsoft.Storage/storageAccounts/' + $StorageAccountName + '/listKeys?api-version=2023-05-01&$expand=kerb')).keys | Where-Object { $_.Keyname -contains 'kerb1' }).Value\r\n                \r\n                    # Update the password on the computer object with the new Kerberos key on the Storage Account\r\n                    Write-Log -message \"Updating the password on the computer object with the new Kerberos key (kerb1) on the Storage Account\"\r\n                    $NewPassword = ConvertTo-SecureString -String $Key -AsPlainText -Force\r\n                    Set-ADAccountPassword -Credential $DomainCredential -Identity $DistinguishedName -Reset -NewPassword $NewPassword | Out-Null\r\n                }\r\n                if ($ShardAzureFilesStorage -eq 'true') {\r\n                    foreach ($Share in $Shares) {\r\n                        $FileShare = $FileServer + '\\' + $Share\r\n                        $UserGroup = $null\r\n                        [array]$UserGroup += $UserGroups[$i]\r\n                        Write-Log -message \"Processing File Share: $FileShare with UserGroup = $($UserGroups[$i])\"\r\n                        if ($AdminGroups.Count -gt 0) {\r\n                            Write-Log -message \"Admin Groups provided, executing Update-ACL with Admin Groups\"\r\n                            Update-ACL -AdminGroups $AdminGroups -Credential $StorageKeyCredential -FileShare $FileShare -UserGroups $UserGroup\r\n                        }\r\n                        Else {\r\n                            Write-Log -message \"Admin Groups not provided, executing Update-ACL without Admin Groups\"\r\n                            Update-ACL -Credential $StorageKeyCredential -FileShare $FileShare -UserGroups $UserGroup\r\n                        }\r\n                    }\r\n                }\r\n                Else {\r\n                    foreach ($Share in $Shares) {\r\n                        $FileShare = $FileServer + '\\' + $Share\r\n                        Write-Log -message \"Processing File Share: $FileShare\"\r\n                        if ($AdminGroups.Count -gt 0) {\r\n                            Write-Log -message \"Admin Groups provided, executing Update-ACL with Admin Groups\"\r\n                            Update-ACL -AdminGroups $AdminGroups -Credential $StorageKeyCredential -FileShare $FileShare -UserGroups $UserGroups\r\n                        }\r\n                        Else {\r\n                            Write-Log -message \"Admin Groups not provided, executing Update-ACL without Admin Groups\"\r\n                            Update-ACL -Credential $StorageKeyCredential -FileShare $FileShare -UserGroups $UserGroups\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        'AzureNetAppFiles' {\r\n            Write-Log -message \"Processing Azure NetApp Files\"        \r\n\r\n            [array]$NetAppServers = ConvertFrom-JsonString -JsonString $NetAppServers -Name 'NetAppServers'\r\n\r\n            $ProfileShare = \"\\\\$($NetAppServers[0])\\$($Shares[0])\"\r\n            Write-Log -message \"Processing Profile Share: $ProfileShare\"\r\n            if ($AdminGroups.Count -gt 0) {\r\n                Write-Log -message \"Admin Groups and UserGroups provided, executing Update-ACL with Admin Groups and UserGroups\"\r\n                Update-ACL -AdminGroups $AdminGroups -Credential $DomainCredential -FileShare $ProfileShare -UserGroups $UserGroups\r\n            }\r\n            Else {\r\n                Write-Log -message \"UserGroups provided, executing Update-ACL with UserGroups only\"\r\n                Update-ACL -Credential $DomainCredential -FileShare $ProfileShare -UserGroups $UserGroups\r\n            }\r\n            \r\n            If ($NetAppServers.Count -gt 1 -and $Shares.Count -gt 1) {\r\n                $OfficeShare = \"\\\\\" + $NetAppServers[1] + \"\\\" + $Shares[1]\r\n                Write-Log -message \"Processing Office Share: $OfficeShare\"\r\n                If ($AdminGroups.Count -gt 0 -and $UserGroups.Count -gt 0) {\r\n                    Write-Log -message \"Admin Groups and UserGroups provided, executing Update-ACL with Admin Groups and UserGroups\"\r\n                    Update-ACL -AdminGroups $AdminGroups -Credential $DomainCredential -FileShare $OfficeShare -UserGroups $UserGroups\r\n                }\r\n                ElseIf ($AdminGroups.Count -gt 0 -and $UserGroups.Count -eq 0) {\r\n                    Write-Log -message \"Admin Groups provided, executing Update-ACL with Admin Groups only\"\r\n                    Update-ACL -AdminGroups $AdminGroups -Credential $DomainCredential -FileShare $OfficeShare\r\n                }\r\n                ElseIf ($AdminGroups.Count -eq 0 -and $UserGroups.Count -gt 0) {\r\n                    Write-Log -message \"UserGroups provided, executing Update-ACL with UserGroups only\"\r\n                    Update-ACL -Credential $DomainCredential -FileShare $OfficeShare -UserGroups $UserGroups\r\n                }\r\n                Else {\r\n                    Write-Log -message \"No Admin Groups or UserGroups provided, executing Update-ACL without Admin Groups or UserGroups\"\r\n                    Update-ACL -Credential $DomainCredential -FileShare $OfficeShare\r\n                }\r\n            }\r\n        }\r\n    } \r\n}\r\ncatch {\r\n    throw\r\n}",
                            "azureFilesParameters": [
                              {
                                "name": "AdminGroupNames",
                                "value": "[string(parameters('adminGroupNames'))]"
                              },
                              {
                                "name": "Shares",
                                "value": "[string(parameters('shares'))]"
                              },
                              {
                                "name": "KerberosEncryptionType",
                                "value": "[parameters('kerberosEncryptionType')]"
                              },
                              {
                                "name": "OuPath",
                                "value": "[parameters('ouPath')]"
                              },
                              {
                                "name": "ResourceManagerUri",
                                "value": "[environment().resourceManager]"
                              },
                              {
                                "name": "ShardAzureFilesStorage",
                                "value": "[if(equals(parameters('shardingOptions'), 'None'), 'false', 'true')]"
                              },
                              {
                                "name": "StorageAccountPrefix",
                                "value": "[parameters('storageAccountNamePrefix')]"
                              },
                              {
                                "name": "StorageAccountResourceGroupName",
                                "value": "[parameters('resourceGroupStorage')]"
                              },
                              {
                                "name": "StorageCount",
                                "value": "[string(parameters('storageCount'))]"
                              },
                              {
                                "name": "StorageIndex",
                                "value": "[string(parameters('storageIndex'))]"
                              },
                              {
                                "name": "StorageSolution",
                                "value": "[parameters('storageSolution')]"
                              },
                              {
                                "name": "StorageSuffix",
                                "value": "[environment().suffixes.storage]"
                              },
                              {
                                "name": "SubscriptionId",
                                "value": "[subscription().subscriptionId]"
                              },
                              {
                                "name": "UserAssignedIdentityClientId",
                                "value": "[parameters('userAssignedIdentityClientId')]"
                              },
                              {
                                "name": "UserGroupNames",
                                "value": "[string(parameters('userGroupNames'))]"
                              }
                            ],
                            "azureNetAppParameters": [
                              {
                                "name": "AdminGroupNames",
                                "value": "[string(parameters('adminGroupNames'))]"
                              },
                              {
                                "name": "NetAppServers",
                                "value": "[string(parameters('netAppServers'))]"
                              },
                              {
                                "name": "Shares",
                                "value": "[string(parameters('shares'))]"
                              },
                              {
                                "name": "StorageSolution",
                                "value": "[parameters('storageSolution')]"
                              },
                              {
                                "name": "UserGroupNames",
                                "value": "[string(parameters('userGroupNames'))]"
                              }
                            ],
                            "runCommandName": "[if(equals(parameters('storageSolution'), 'AzureFiles'), format('Domain_Join_Set_NTFSPermissions_{0}', parameters('timeStamp')), format('Set_NTFS_Permissions_{0}', parameters('timeStamp')))]"
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Compute/virtualMachines/runCommands",
                              "apiVersion": "2023-03-01",
                              "name": "[format('{0}/{1}', parameters('virtualMachineName'), variables('runCommandName'))]",
                              "location": "[parameters('location')]",
                              "properties": {
                                "asyncExecution": false,
                                "parameters": "[if(equals(parameters('storageSolution'), 'AzureFiles'), variables('azureFilesParameters'), variables('azureNetAppParameters'))]",
                                "protectedParameters": [
                                  {
                                    "name": "DomainJoinUserPrincipalName",
                                    "value": "[parameters('domainJoinUserPrincipalName')]"
                                  },
                                  {
                                    "name": "DomainJoinUserPwd",
                                    "value": "[parameters('domainJoinUserPassword')]"
                                  }
                                ],
                                "source": {
                                  "script": "[variables('$fxv#0')]"
                                },
                                "timeoutInSeconds": 300,
                                "treatFailureAsDeploymentFailure": true
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "privateEndpoints",
                        "shares"
                      ]
                    },
                    {
                      "condition": "[parameters('recoveryServices')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('RecoveryServices_AzureFiles_{0}', parameters('timeStamp'))]",
                      "resourceGroup": "[parameters('resourceGroupStorage')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "name": {
                            "value": "[parameters('recoveryServicesVaultName')]"
                          },
                          "backupPolicies": {
                            "value": [
                              {
                                "name": "filesharepolicy",
                                "type": "Microsoft.RecoveryServices/vaults/backupPolicies",
                                "properties": {
                                  "backupManagementType": "AzureStorage",
                                  "workloadType": "AzureFileShare",
                                  "schedulePolicy": {
                                    "schedulePolicyType": "SimpleSchedulePolicy",
                                    "scheduleRunFrequency": "Daily",
                                    "scheduleRunTimes": [
                                      "23:00"
                                    ]
                                  },
                                  "retentionPolicy": {
                                    "retentionPolicyType": "LongTermRetentionPolicy",
                                    "dailySchedule": {
                                      "retentionTimes": [
                                        "23:00"
                                      ],
                                      "retentionDuration": {
                                        "count": 30,
                                        "durationType": "Days"
                                      }
                                    }
                                  },
                                  "timeZone": "[parameters('timeZone')]",
                                  "workLoadType": "AzureFileShare"
                                }
                              }
                            ]
                          },
                          "diagnosticWorkspaceId": {
                            "value": "[parameters('logAnalyticsWorkspaceId')]"
                          },
                          "privateEndpoints": "[if(and(parameters('privateEndpoint'), not(empty(parameters('privateEndpointSubnetResourceId')))), createObject('value', createArray(createObject('customNetworkInterfaceName', replace(replace(replace(parameters('privateEndpointNICNameConv'), 'SUBRESOURCE', 'AzureBackup'), 'RESOURCE', parameters('recoveryServicesVaultName')), 'VNETID', format('{0}', split(parameters('privateEndpointSubnetResourceId'), '/')[8])), 'name', replace(replace(replace(parameters('privateEndpointNameConv'), 'SUBRESOURCE', 'AzureBackup'), 'RESOURCE', parameters('recoveryServicesVaultName')), 'VNETID', format('{0}', split(parameters('privateEndpointSubnetResourceId'), '/')[8])), 'privateDnsZoneGroup', if(empty(variables('nonEmptyBackupPrivateDNSZoneResourceIds')), null(), createObject('privateDNSResourceIds', variables('nonEmptyBackupPrivateDNSZoneResourceIds'))), 'service', 'AzureBackup', 'subnetResourceId', parameters('privateEndpointSubnetResourceId'), 'tags', union(createObject('cm-resource-parent', parameters('hostPoolResourceId')), coalesce(tryGet(parameters('tags'), 'Microsoft.Network/privateEndpoints'), createObject()))))), createObject('value', null()))]",
                          "protectionContainers": {
                            "copy": [
                              {
                                "name": "value",
                                "count": "[length(range(0, parameters('storageCount')))]",
                                "input": "[createObject('name', format('storagecontainer;Storage;{0};{1}', parameters('resourceGroupStorage'), format('{0}{1}', parameters('storageAccountNamePrefix'), string(padLeft(add(range(0, parameters('storageCount'))[range(0, parameters('storageCount'))[copyIndex('value')]], parameters('storageIndex')), 2, '0')))), 'friendlyName', format('{0}{1}', parameters('storageAccountNamePrefix'), string(padLeft(add(range(0, parameters('storageCount'))[range(0, parameters('storageCount'))[copyIndex('value')]], parameters('storageIndex')), 2, '0'))), 'sourceResourceId', resourceId('Microsoft.Storage/storageAccounts', format('{0}{1}', parameters('storageAccountNamePrefix'), string(padLeft(add(range(0, parameters('storageCount'))[range(0, parameters('storageCount'))[copyIndex('value')]], parameters('storageIndex')), 2, '0')))), 'backupManagementType', 'AzureStorage', 'containerType', 'StorageContainer', 'location', parameters('location'), 'protectedItems', createArray(createObject('name', format('AzureFileShare;{0}', parameters('fileShares')[0]), 'policyId', format('{0}/providers/Microsoft.RecoveryServices/vaults/{1}/backupPolicies/filesharepolicy', resourceGroup().id, parameters('recoveryServicesVaultName')), 'protectedItemType', 'AzureFileShareProtectedItem', 'sourceResourceId', resourceId('Microsoft.Storage/storageAccounts', format('{0}{1}', parameters('storageAccountNamePrefix'), string(padLeft(add(range(0, parameters('storageCount'))[range(0, parameters('storageCount'))[copyIndex('value')]], parameters('storageIndex')), 2, '0')))))))]"
                              }
                            ]
                          },
                          "publicNetworkAccess": "[if(parameters('privateEndpoint'), createObject('value', 'Disabled'), createObject('value', 'Enabled'))]",
                          "tags": {
                            "value": "[union(createObject('cm-resource-parent', parameters('hostPoolResourceId')), coalesce(tryGet(parameters('tags'), 'Microsoft.RecoveryServices/vaults'), createObject()))]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.36.1.42791",
                              "templateHash": "9789350740357542243"
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the Azure Recovery Service Vault."
                              }
                            },
                            "backupStorageConfig": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. The storage configuration for the Azure Recovery Service Vault."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. Location for all resources."
                              }
                            },
                            "backupPolicies": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. List of all backup policies."
                              }
                            },
                            "backupConfig": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. The backup configuration."
                              }
                            },
                            "protectionContainers": {
                              "type": "array",
                              "defaultValue": [],
                              "minLength": 0,
                              "metadata": {
                                "description": "Optional. List of all protection containers."
                              }
                            },
                            "replicationFabrics": {
                              "type": "array",
                              "defaultValue": [],
                              "minLength": 0,
                              "metadata": {
                                "description": "Optional. List of all replication fabrics."
                              }
                            },
                            "replicationPolicies": {
                              "type": "array",
                              "defaultValue": [],
                              "minLength": 0,
                              "metadata": {
                                "description": "Optional. List of all replication policies."
                              }
                            },
                            "replicationAlertSettings": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Replication alert settings."
                              }
                            },
                            "diagnosticStorageAccountId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of the diagnostic storage account."
                              }
                            },
                            "diagnosticWorkspaceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of the diagnostic log analytics workspace."
                              }
                            },
                            "diagnosticEventHubAuthorizationRuleId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                              }
                            },
                            "diagnosticEventHubName": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
                              }
                            },
                            "systemAssignedIdentity": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Enables system assigned managed identity on the resource."
                              }
                            },
                            "userAssignedIdentities": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. The ID(s) to assign to the resource."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Tags of the Recovery Service Vault resource."
                              }
                            },
                            "diagnosticLogCategoriesToEnable": {
                              "type": "array",
                              "defaultValue": [
                                "allLogs"
                              ],
                              "allowedValues": [
                                "",
                                "allLogs",
                                "AzureBackupReport",
                                "CoreAzureBackup",
                                "AddonAzureBackupJobs",
                                "AddonAzureBackupAlerts",
                                "AddonAzureBackupPolicy",
                                "AddonAzureBackupStorage",
                                "AddonAzureBackupProtectedInstance",
                                "AzureSiteRecoveryJobs",
                                "AzureSiteRecoveryEvents",
                                "AzureSiteRecoveryReplicatedItems",
                                "AzureSiteRecoveryReplicationStats",
                                "AzureSiteRecoveryRecoveryPoints",
                                "AzureSiteRecoveryReplicationDataUploadRate",
                                "AzureSiteRecoveryProtectedDiskDataChurn"
                              ],
                              "metadata": {
                                "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to '' to disable log collection."
                              }
                            },
                            "diagnosticMetricsToEnable": {
                              "type": "array",
                              "defaultValue": [
                                "AllMetrics"
                              ],
                              "allowedValues": [
                                "AllMetrics"
                              ],
                              "metadata": {
                                "description": "Optional. The name of metrics that will be streamed."
                              }
                            },
                            "diagnosticSettingsName": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The name of the diagnostic setting, if deployed. If left empty, it defaults to \"<resourceName>-diagnosticSettings\"."
                              }
                            },
                            "privateEndpoints": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Configuration details for private endpoints. For security reasons, it is recommended to use private endpoints whenever possible."
                              }
                            },
                            "monitoringSettings": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Monitoring Settings of the vault."
                              }
                            },
                            "securitySettings": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Security Settings of the vault."
                              }
                            },
                            "publicNetworkAccess": {
                              "type": "string",
                              "defaultValue": "Disabled",
                              "allowedValues": [
                                "Enabled",
                                "Disabled"
                              ],
                              "metadata": {
                                "description": "Optional. Whether or not public network access is allowed for this resource. For security reasons it should be disabled."
                              }
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "diagnosticsLogsSpecified",
                                "count": "[length(filter(parameters('diagnosticLogCategoriesToEnable'), lambda('item', and(not(equals(lambdaVariables('item'), 'allLogs')), not(equals(lambdaVariables('item'), ''))))))]",
                                "input": {
                                  "category": "[filter(parameters('diagnosticLogCategoriesToEnable'), lambda('item', and(not(equals(lambdaVariables('item'), 'allLogs')), not(equals(lambdaVariables('item'), '')))))[copyIndex('diagnosticsLogsSpecified')]]",
                                  "enabled": true
                                }
                              },
                              {
                                "name": "diagnosticsMetrics",
                                "count": "[length(parameters('diagnosticMetricsToEnable'))]",
                                "input": {
                                  "category": "[parameters('diagnosticMetricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                                  "timeGrain": null,
                                  "enabled": true
                                }
                              }
                            ],
                            "diagnosticsLogs": "[if(contains(parameters('diagnosticLogCategoriesToEnable'), 'allLogs'), createArray(createObject('categoryGroup', 'allLogs', 'enabled', true())), if(contains(parameters('diagnosticLogCategoriesToEnable'), ''), createArray(), variables('diagnosticsLogsSpecified')))]",
                            "identityType": "[if(parameters('systemAssignedIdentity'), if(not(empty(parameters('userAssignedIdentities'))), 'SystemAssigned,UserAssigned', 'SystemAssigned'), if(not(empty(parameters('userAssignedIdentities'))), 'UserAssigned', 'None'))]",
                            "identity": "[if(not(equals(variables('identityType'), 'None')), createObject('type', variables('identityType'), 'userAssignedIdentities', if(not(empty(parameters('userAssignedIdentities'))), parameters('userAssignedIdentities'), null())), null())]"
                          },
                          "resources": [
                            {
                              "type": "Microsoft.RecoveryServices/vaults",
                              "apiVersion": "2023-01-01",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "identity": "[variables('identity')]",
                              "sku": {
                                "name": "RS0",
                                "tier": "Standard"
                              },
                              "properties": {
                                "monitoringSettings": "[if(not(empty(parameters('monitoringSettings'))), parameters('monitoringSettings'), null())]",
                                "securitySettings": "[if(not(empty(parameters('securitySettings'))), parameters('securitySettings'), null())]",
                                "publicNetworkAccess": "[parameters('publicNetworkAccess')]"
                              }
                            },
                            {
                              "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('diagnosticWorkspaceId')))), not(empty(parameters('diagnosticEventHubAuthorizationRuleId')))), not(empty(parameters('diagnosticEventHubName'))))]",
                              "type": "Microsoft.Insights/diagnosticSettings",
                              "apiVersion": "2021-05-01-preview",
                              "scope": "[format('Microsoft.RecoveryServices/vaults/{0}', parameters('name'))]",
                              "name": "[if(not(empty(parameters('diagnosticSettingsName'))), parameters('diagnosticSettingsName'), format('{0}-diagnosticSettings', parameters('name')))]",
                              "properties": {
                                "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                                "workspaceId": "[if(not(empty(parameters('diagnosticWorkspaceId'))), parameters('diagnosticWorkspaceId'), null())]",
                                "eventHubAuthorizationRuleId": "[if(not(empty(parameters('diagnosticEventHubAuthorizationRuleId'))), parameters('diagnosticEventHubAuthorizationRuleId'), null())]",
                                "eventHubName": "[if(not(empty(parameters('diagnosticEventHubName'))), parameters('diagnosticEventHubName'), null())]",
                                "metrics": "[if(equals(environment().name, 'AzureCloud'), variables('diagnosticsMetrics'), null())]",
                                "logs": "[variables('diagnosticsLogs')]"
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.RecoveryServices/vaults', parameters('name'))]"
                              ]
                            },
                            {
                              "copy": {
                                "name": "rsv_replicationFabrics",
                                "count": "[length(parameters('replicationFabrics'))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-RSV-Fabric-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "recoveryVaultName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "[coalesce(tryGet(parameters('replicationFabrics')[copyIndex()], 'name'), parameters('replicationFabrics')[copyIndex()].location)]"
                                  },
                                  "location": {
                                    "value": "[parameters('replicationFabrics')[copyIndex()].location]"
                                  },
                                  "replicationContainers": {
                                    "value": "[coalesce(tryGet(parameters('replicationFabrics')[copyIndex()], 'replicationContainers'), createArray())]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.36.1.42791",
                                      "templateHash": "5746092174466361067"
                                    }
                                  },
                                  "parameters": {
                                    "recoveryVaultName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent Azure Recovery Service Vault. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "defaultValue": "[resourceGroup().location]",
                                      "metadata": {
                                        "description": "Required. The recovery location the fabric represents."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "defaultValue": "[parameters('location')]",
                                      "metadata": {
                                        "description": "Optional. The name of the fabric."
                                      }
                                    },
                                    "replicationContainers": {
                                      "type": "array",
                                      "defaultValue": [],
                                      "metadata": {
                                        "description": "Optional. Replication containers to create."
                                      }
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.RecoveryServices/vaults/replicationFabrics",
                                      "apiVersion": "2022-10-01",
                                      "name": "[format('{0}/{1}', parameters('recoveryVaultName'), parameters('name'))]",
                                      "properties": {
                                        "customDetails": {
                                          "instanceType": "Azure",
                                          "location": "[parameters('location')]"
                                        }
                                      }
                                    },
                                    {
                                      "copy": {
                                        "name": "fabric_replicationContainers",
                                        "count": "[length(parameters('replicationContainers'))]"
                                      },
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('RCont-{0}-{1}', copyIndex(), deployment().name)]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "name": {
                                            "value": "[parameters('replicationContainers')[copyIndex()].name]"
                                          },
                                          "recoveryVaultName": {
                                            "value": "[parameters('recoveryVaultName')]"
                                          },
                                          "replicationFabricName": {
                                            "value": "[parameters('name')]"
                                          },
                                          "replicationContainerMappings": {
                                            "value": "[coalesce(tryGet(parameters('replicationContainers')[copyIndex()], 'replicationContainerMappings'), createArray())]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.36.1.42791",
                                              "templateHash": "16786731585366035523"
                                            },
                                            "name": "Recovery Services Vault Replication Fabric Replication Protection Containers",
                                            "description": "This module deploys a Recovery Services Vault Replication Protection Container.\r\n\r\n> **Note**: this version of the module only supports the `instanceType: 'A2A'` scenario.",
                                            "owner": "Azure/module-maintainers"
                                          },
                                          "parameters": {
                                            "recoveryVaultName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Conditional. The name of the parent Azure Recovery Service Vault. Required if the template is used in a standalone deployment."
                                              }
                                            },
                                            "replicationFabricName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Conditional. The name of the parent Replication Fabric. Required if the template is used in a standalone deployment."
                                              }
                                            },
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The name of the replication container."
                                              }
                                            },
                                            "replicationContainerMappings": {
                                              "type": "array",
                                              "defaultValue": [],
                                              "metadata": {
                                                "description": "Optional. Replication containers mappings to create."
                                              }
                                            }
                                          },
                                          "resources": [
                                            {
                                              "type": "Microsoft.RecoveryServices/vaults/replicationFabrics/replicationProtectionContainers",
                                              "apiVersion": "2022-10-01",
                                              "name": "[format('{0}/{1}/{2}', parameters('recoveryVaultName'), parameters('replicationFabricName'), parameters('name'))]",
                                              "properties": {
                                                "providerSpecificInput": [
                                                  {
                                                    "instanceType": "A2A"
                                                  }
                                                ]
                                              }
                                            },
                                            {
                                              "copy": {
                                                "name": "fabric_container_containerMappings",
                                                "count": "[length(parameters('replicationContainerMappings'))]"
                                              },
                                              "type": "Microsoft.Resources/deployments",
                                              "apiVersion": "2022-09-01",
                                              "name": "[format('Map-{0}-{1}', copyIndex(), deployment().name)]",
                                              "properties": {
                                                "expressionEvaluationOptions": {
                                                  "scope": "inner"
                                                },
                                                "mode": "Incremental",
                                                "parameters": {
                                                  "name": {
                                                    "value": "[coalesce(tryGet(parameters('replicationContainerMappings')[copyIndex()], 'name'), '')]"
                                                  },
                                                  "policyId": {
                                                    "value": "[coalesce(tryGet(parameters('replicationContainerMappings')[copyIndex()], 'policyId'), '')]"
                                                  },
                                                  "policyName": {
                                                    "value": "[coalesce(tryGet(parameters('replicationContainerMappings')[copyIndex()], 'policyName'), '')]"
                                                  },
                                                  "recoveryVaultName": {
                                                    "value": "[parameters('recoveryVaultName')]"
                                                  },
                                                  "replicationFabricName": {
                                                    "value": "[parameters('replicationFabricName')]"
                                                  },
                                                  "sourceProtectionContainerName": {
                                                    "value": "[parameters('name')]"
                                                  },
                                                  "targetProtectionContainerId": {
                                                    "value": "[coalesce(tryGet(parameters('replicationContainerMappings')[copyIndex()], 'targetProtectionContainerId'), '')]"
                                                  },
                                                  "targetContainerFabricName": {
                                                    "value": "[coalesce(tryGet(parameters('replicationContainerMappings')[copyIndex()], 'targetContainerFabricName'), parameters('replicationFabricName'))]"
                                                  },
                                                  "targetContainerName": {
                                                    "value": "[coalesce(tryGet(parameters('replicationContainerMappings')[copyIndex()], 'targetContainerName'), '')]"
                                                  }
                                                },
                                                "template": {
                                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                                  "contentVersion": "1.0.0.0",
                                                  "metadata": {
                                                    "_generator": {
                                                      "name": "bicep",
                                                      "version": "0.36.1.42791",
                                                      "templateHash": "2616151194090009263"
                                                    },
                                                    "name": "Recovery Services Vault Replication Fabric Replication Protection Container Replication Protection Container Mappings",
                                                    "description": "This module deploys a Recovery Services Vault (RSV) Replication Protection Container Mapping.\r\n\r\n> **Note**: this version of the module only supports the `instanceType: 'A2A'` scenario.",
                                                    "owner": "Azure/module-maintainers"
                                                  },
                                                  "parameters": {
                                                    "recoveryVaultName": {
                                                      "type": "string",
                                                      "metadata": {
                                                        "description": "Conditional. The name of the parent Azure Recovery Service Vault. Required if the template is used in a standalone deployment."
                                                      }
                                                    },
                                                    "replicationFabricName": {
                                                      "type": "string",
                                                      "metadata": {
                                                        "description": "Conditional. The name of the parent Replication Fabric. Required if the template is used in a standalone deployment."
                                                      }
                                                    },
                                                    "sourceProtectionContainerName": {
                                                      "type": "string",
                                                      "metadata": {
                                                        "description": "Conditional. The name of the parent source Replication container. Required if the template is used in a standalone deployment."
                                                      }
                                                    },
                                                    "targetProtectionContainerId": {
                                                      "type": "string",
                                                      "defaultValue": "",
                                                      "metadata": {
                                                        "description": "Optional. Resource ID of the target Replication container. Must be specified if targetContainerName is not. If specified, targetContainerFabricName and targetContainerName will be ignored."
                                                      }
                                                    },
                                                    "targetContainerFabricName": {
                                                      "type": "string",
                                                      "defaultValue": "[parameters('replicationFabricName')]",
                                                      "metadata": {
                                                        "description": "Optional. Name of the fabric containing the target container. If targetProtectionContainerId is specified, this parameter will be ignored."
                                                      }
                                                    },
                                                    "targetContainerName": {
                                                      "type": "string",
                                                      "defaultValue": "",
                                                      "metadata": {
                                                        "description": "Optional. Name of the target container. Must be specified if targetProtectionContainerId is not. If targetProtectionContainerId is specified, this parameter will be ignored."
                                                      }
                                                    },
                                                    "policyId": {
                                                      "type": "string",
                                                      "defaultValue": "",
                                                      "metadata": {
                                                        "description": "Optional. Resource ID of the replication policy. If defined, policyName will be ignored."
                                                      }
                                                    },
                                                    "policyName": {
                                                      "type": "string",
                                                      "defaultValue": "",
                                                      "metadata": {
                                                        "description": "Optional. Name of the replication policy. Will be ignored if policyId is also specified."
                                                      }
                                                    },
                                                    "name": {
                                                      "type": "string",
                                                      "defaultValue": "",
                                                      "metadata": {
                                                        "description": "Optional. The name of the replication container mapping. If not provided, it will be automatically generated as `<source_container_name>-<target_container_name>`."
                                                      }
                                                    }
                                                  },
                                                  "variables": {
                                                    "policyResourceId": "[if(not(equals(parameters('policyId'), '')), parameters('policyId'), subscriptionResourceId('Microsoft.RecoveryServices/vaults/replicationPolicies', parameters('recoveryVaultName'), parameters('policyName')))]",
                                                    "targetProtectionContainerResourceId": "[if(not(equals(parameters('targetProtectionContainerId'), '')), parameters('targetProtectionContainerId'), subscriptionResourceId('Microsoft.RecoveryServices/vaults/replicationFabrics/replicationProtectionContainers', parameters('recoveryVaultName'), parameters('targetContainerFabricName'), parameters('targetContainerName')))]",
                                                    "mappingName": "[if(not(empty(parameters('name'))), parameters('name'), format('{0}-{1}', parameters('sourceProtectionContainerName'), split(variables('targetProtectionContainerResourceId'), '/')[10]))]"
                                                  },
                                                  "resources": [
                                                    {
                                                      "type": "Microsoft.RecoveryServices/vaults/replicationFabrics/replicationProtectionContainers/replicationProtectionContainerMappings",
                                                      "apiVersion": "2022-10-01",
                                                      "name": "[format('{0}/{1}/{2}/{3}', parameters('recoveryVaultName'), parameters('replicationFabricName'), parameters('sourceProtectionContainerName'), variables('mappingName'))]",
                                                      "properties": {
                                                        "targetProtectionContainerId": "[variables('targetProtectionContainerResourceId')]",
                                                        "policyId": "[variables('policyResourceId')]",
                                                        "providerSpecificInput": {
                                                          "instanceType": "A2A"
                                                        }
                                                      }
                                                    }
                                                  ],
                                                  "outputs": {
                                                    "name": {
                                                      "type": "string",
                                                      "metadata": {
                                                        "description": "The name of the replication container."
                                                      },
                                                      "value": "[format('{0}/{1}/{2}/{3}', parameters('recoveryVaultName'), parameters('replicationFabricName'), parameters('sourceProtectionContainerName'), variables('mappingName'))]"
                                                    },
                                                    "resourceId": {
                                                      "type": "string",
                                                      "metadata": {
                                                        "description": "The resource ID of the replication container."
                                                      },
                                                      "value": "[resourceId('Microsoft.RecoveryServices/vaults/replicationFabrics/replicationProtectionContainers/replicationProtectionContainerMappings', split(format('{0}/{1}/{2}/{3}', parameters('recoveryVaultName'), parameters('replicationFabricName'), parameters('sourceProtectionContainerName'), variables('mappingName')), '/')[0], split(format('{0}/{1}/{2}/{3}', parameters('recoveryVaultName'), parameters('replicationFabricName'), parameters('sourceProtectionContainerName'), variables('mappingName')), '/')[1], split(format('{0}/{1}/{2}/{3}', parameters('recoveryVaultName'), parameters('replicationFabricName'), parameters('sourceProtectionContainerName'), variables('mappingName')), '/')[2], split(format('{0}/{1}/{2}/{3}', parameters('recoveryVaultName'), parameters('replicationFabricName'), parameters('sourceProtectionContainerName'), variables('mappingName')), '/')[3])]"
                                                    },
                                                    "resourceGroupName": {
                                                      "type": "string",
                                                      "metadata": {
                                                        "description": "The name of the resource group the replication container was created in."
                                                      },
                                                      "value": "[resourceGroup().name]"
                                                    }
                                                  }
                                                }
                                              },
                                              "dependsOn": [
                                                "[resourceId('Microsoft.RecoveryServices/vaults/replicationFabrics/replicationProtectionContainers', split(format('{0}/{1}/{2}', parameters('recoveryVaultName'), parameters('replicationFabricName'), parameters('name')), '/')[0], split(format('{0}/{1}/{2}', parameters('recoveryVaultName'), parameters('replicationFabricName'), parameters('name')), '/')[1], split(format('{0}/{1}/{2}', parameters('recoveryVaultName'), parameters('replicationFabricName'), parameters('name')), '/')[2])]"
                                              ]
                                            }
                                          ],
                                          "outputs": {
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The name of the replication container."
                                              },
                                              "value": "[format('{0}/{1}/{2}', parameters('recoveryVaultName'), parameters('replicationFabricName'), parameters('name'))]"
                                            },
                                            "resourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource ID of the replication container."
                                              },
                                              "value": "[resourceId('Microsoft.RecoveryServices/vaults/replicationFabrics/replicationProtectionContainers', split(format('{0}/{1}/{2}', parameters('recoveryVaultName'), parameters('replicationFabricName'), parameters('name')), '/')[0], split(format('{0}/{1}/{2}', parameters('recoveryVaultName'), parameters('replicationFabricName'), parameters('name')), '/')[1], split(format('{0}/{1}/{2}', parameters('recoveryVaultName'), parameters('replicationFabricName'), parameters('name')), '/')[2])]"
                                            },
                                            "resourceGroupName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The name of the resource group the replication container was created in."
                                              },
                                              "value": "[resourceGroup().name]"
                                            }
                                          }
                                        }
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.RecoveryServices/vaults/replicationFabrics', split(format('{0}/{1}', parameters('recoveryVaultName'), parameters('name')), '/')[0], split(format('{0}/{1}', parameters('recoveryVaultName'), parameters('name')), '/')[1])]"
                                      ]
                                    }
                                  ],
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the replication fabric."
                                      },
                                      "value": "[format('{0}/{1}', parameters('recoveryVaultName'), parameters('name'))]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the replication fabric."
                                      },
                                      "value": "[resourceId('Microsoft.RecoveryServices/vaults/replicationFabrics', split(format('{0}/{1}', parameters('recoveryVaultName'), parameters('name')), '/')[0], split(format('{0}/{1}', parameters('recoveryVaultName'), parameters('name')), '/')[1])]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the resource group the replication fabric was created in."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.RecoveryServices/vaults', parameters('name'))]",
                                "rsv_replicationPolicies"
                              ]
                            },
                            {
                              "copy": {
                                "name": "rsv_replicationPolicies",
                                "count": "[length(parameters('replicationPolicies'))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-RSV-Policy-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "name": {
                                    "value": "[parameters('replicationPolicies')[copyIndex()].name]"
                                  },
                                  "recoveryVaultName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "appConsistentFrequencyInMinutes": {
                                    "value": "[coalesce(tryGet(parameters('replicationPolicies')[copyIndex()], 'appConsistentFrequencyInMinutes'), 60)]"
                                  },
                                  "crashConsistentFrequencyInMinutes": {
                                    "value": "[coalesce(tryGet(parameters('replicationPolicies')[copyIndex()], 'crashConsistentFrequencyInMinutes'), 5)]"
                                  },
                                  "multiVmSyncStatus": {
                                    "value": "[coalesce(tryGet(parameters('replicationPolicies')[copyIndex()], 'multiVmSyncStatus'), 'Enable')]"
                                  },
                                  "recoveryPointHistory": {
                                    "value": "[coalesce(tryGet(parameters('replicationPolicies')[copyIndex()], 'recoveryPointHistory'), 1440)]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.36.1.42791",
                                      "templateHash": "12780193304424574332"
                                    }
                                  },
                                  "parameters": {
                                    "recoveryVaultName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent Azure Recovery Service Vault. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the replication policy."
                                      }
                                    },
                                    "appConsistentFrequencyInMinutes": {
                                      "type": "int",
                                      "defaultValue": 60,
                                      "metadata": {
                                        "description": "Optional. The app consistent snapshot frequency (in minutes)."
                                      }
                                    },
                                    "crashConsistentFrequencyInMinutes": {
                                      "type": "int",
                                      "defaultValue": 5,
                                      "metadata": {
                                        "description": "Optional. The crash consistent snapshot frequency (in minutes)."
                                      }
                                    },
                                    "multiVmSyncStatus": {
                                      "type": "string",
                                      "defaultValue": "Enable",
                                      "allowedValues": [
                                        "Enable",
                                        "Disable"
                                      ],
                                      "metadata": {
                                        "description": "Optional. A value indicating whether multi-VM sync has to be enabled."
                                      }
                                    },
                                    "recoveryPointHistory": {
                                      "type": "int",
                                      "defaultValue": 1440,
                                      "metadata": {
                                        "description": "Optional. The duration in minutes until which the recovery points need to be stored."
                                      }
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.RecoveryServices/vaults/replicationPolicies",
                                      "apiVersion": "2022-10-01",
                                      "name": "[format('{0}/{1}', parameters('recoveryVaultName'), parameters('name'))]",
                                      "properties": {
                                        "providerSpecificInput": {
                                          "instanceType": "A2A",
                                          "appConsistentFrequencyInMinutes": "[parameters('appConsistentFrequencyInMinutes')]",
                                          "crashConsistentFrequencyInMinutes": "[parameters('crashConsistentFrequencyInMinutes')]",
                                          "multiVmSyncStatus": "[parameters('multiVmSyncStatus')]",
                                          "recoveryPointHistory": "[parameters('recoveryPointHistory')]"
                                        }
                                      }
                                    }
                                  ],
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the replication policy."
                                      },
                                      "value": "[format('{0}/{1}', parameters('recoveryVaultName'), parameters('name'))]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the replication policy."
                                      },
                                      "value": "[resourceId('Microsoft.RecoveryServices/vaults/replicationPolicies', split(format('{0}/{1}', parameters('recoveryVaultName'), parameters('name')), '/')[0], split(format('{0}/{1}', parameters('recoveryVaultName'), parameters('name')), '/')[1])]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the resource group the replication policy was created in."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.RecoveryServices/vaults', parameters('name'))]"
                              ]
                            },
                            {
                              "condition": "[not(empty(parameters('backupStorageConfig')))]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-RSV-BackupStorageConfig', uniqueString(deployment().name, parameters('location')))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "recoveryVaultName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "storageModelType": {
                                    "value": "[parameters('backupStorageConfig').storageModelType]"
                                  },
                                  "crossRegionRestoreFlag": {
                                    "value": "[parameters('backupStorageConfig').crossRegionRestoreFlag]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.36.1.42791",
                                      "templateHash": "2845849523132879809"
                                    }
                                  },
                                  "parameters": {
                                    "recoveryVaultName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent Azure Recovery Service Vault. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "defaultValue": "vaultstorageconfig",
                                      "metadata": {
                                        "description": "Optional. The name of the backup storage config."
                                      }
                                    },
                                    "storageModelType": {
                                      "type": "string",
                                      "defaultValue": "GeoRedundant",
                                      "allowedValues": [
                                        "GeoRedundant",
                                        "LocallyRedundant",
                                        "ReadAccessGeoZoneRedundant",
                                        "ZoneRedundant"
                                      ],
                                      "metadata": {
                                        "description": "Optional. Change Vault Storage Type (Works if vault has not registered any backup instance)."
                                      }
                                    },
                                    "crossRegionRestoreFlag": {
                                      "type": "bool",
                                      "defaultValue": true,
                                      "metadata": {
                                        "description": "Optional. Opt in details of Cross Region Restore feature."
                                      }
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.RecoveryServices/vaults/backupstorageconfig",
                                      "apiVersion": "2023-01-01",
                                      "name": "[format('{0}/{1}', parameters('recoveryVaultName'), parameters('name'))]",
                                      "properties": {
                                        "storageModelType": "[parameters('storageModelType')]",
                                        "crossRegionRestoreFlag": "[parameters('crossRegionRestoreFlag')]"
                                      }
                                    }
                                  ],
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the backup storage config."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the backup storage config."
                                      },
                                      "value": "[resourceId('Microsoft.RecoveryServices/vaults/backupstorageconfig', parameters('recoveryVaultName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the Resource Group the backup storage configuration was created in."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.RecoveryServices/vaults', parameters('name'))]"
                              ]
                            },
                            {
                              "copy": {
                                "name": "rsv_backupFabric_protectionContainers",
                                "count": "[length(parameters('protectionContainers'))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-RSV-ProtectionContainers-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "recoveryVaultName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "[parameters('protectionContainers')[copyIndex()].name]"
                                  },
                                  "sourceResourceId": {
                                    "value": "[parameters('protectionContainers')[copyIndex()].sourceResourceId]"
                                  },
                                  "friendlyName": {
                                    "value": "[parameters('protectionContainers')[copyIndex()].friendlyName]"
                                  },
                                  "backupManagementType": {
                                    "value": "[parameters('protectionContainers')[copyIndex()].backupManagementType]"
                                  },
                                  "containerType": {
                                    "value": "[parameters('protectionContainers')[copyIndex()].containerType]"
                                  },
                                  "protectedItems": {
                                    "value": "[coalesce(tryGet(parameters('protectionContainers')[copyIndex()], 'protectedItems'), createArray())]"
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.36.1.42791",
                                      "templateHash": "7255736543201115855"
                                    }
                                  },
                                  "parameters": {
                                    "recoveryVaultName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent Azure Recovery Service Vault. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Name of the Azure Recovery Service Vault Protection Container."
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "defaultValue": "[resourceGroup().location]",
                                      "metadata": {
                                        "description": "Optional. Location for all resources."
                                      }
                                    },
                                    "backupManagementType": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "allowedValues": [
                                        "AzureBackupServer",
                                        "AzureIaasVM",
                                        "AzureSql",
                                        "AzureStorage",
                                        "AzureWorkload",
                                        "DPM",
                                        "DefaultBackup",
                                        "Invalid",
                                        "MAB",
                                        ""
                                      ],
                                      "metadata": {
                                        "description": "Optional. Backup management type to execute the current Protection Container job."
                                      }
                                    },
                                    "sourceResourceId": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. Resource ID of the target resource for the Protection Container."
                                      }
                                    },
                                    "friendlyName": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. Friendly name of the Protection Container."
                                      }
                                    },
                                    "protectedItems": {
                                      "type": "array",
                                      "defaultValue": [],
                                      "metadata": {
                                        "description": "Optional. Protected items to register in the container."
                                      }
                                    },
                                    "containerType": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "allowedValues": [
                                        "AzureBackupServerContainer",
                                        "AzureSqlContainer",
                                        "GenericContainer",
                                        "Microsoft.ClassicCompute/virtualMachines",
                                        "Microsoft.Compute/virtualMachines",
                                        "SQLAGWorkLoadContainer",
                                        "StorageContainer",
                                        "VMAppContainer",
                                        "Windows",
                                        ""
                                      ],
                                      "metadata": {
                                        "description": "Optional. Type of the container."
                                      }
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.RecoveryServices/vaults/backupFabrics/protectionContainers",
                                      "apiVersion": "2023-01-01",
                                      "name": "[format('{0}/Azure/{1}', parameters('recoveryVaultName'), parameters('name'))]",
                                      "properties": {
                                        "sourceResourceId": "[if(not(empty(parameters('sourceResourceId'))), parameters('sourceResourceId'), null())]",
                                        "friendlyName": "[if(not(empty(parameters('friendlyName'))), parameters('friendlyName'), null())]",
                                        "backupManagementType": "[if(not(empty(parameters('backupManagementType'))), parameters('backupManagementType'), null())]",
                                        "containerType": "[if(not(empty(parameters('containerType'))), parameters('containerType'), null())]"
                                      }
                                    },
                                    {
                                      "copy": {
                                        "name": "protectionContainer_protectedItems",
                                        "count": "[length(parameters('protectedItems'))]"
                                      },
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('ProtectedItem-{0}-{1}', copyIndex(), uniqueString(deployment().name, parameters('location')))]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "policyId": {
                                            "value": "[parameters('protectedItems')[copyIndex()].policyId]"
                                          },
                                          "name": {
                                            "value": "[parameters('protectedItems')[copyIndex()].name]"
                                          },
                                          "protectedItemType": {
                                            "value": "[parameters('protectedItems')[copyIndex()].protectedItemType]"
                                          },
                                          "protectionContainerName": {
                                            "value": "[parameters('name')]"
                                          },
                                          "recoveryVaultName": {
                                            "value": "[parameters('recoveryVaultName')]"
                                          },
                                          "sourceResourceId": {
                                            "value": "[parameters('protectedItems')[copyIndex()].sourceResourceId]"
                                          },
                                          "location": {
                                            "value": "[parameters('location')]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.36.1.42791",
                                              "templateHash": "17302391377209657987"
                                            }
                                          },
                                          "parameters": {
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. Name of the resource."
                                              }
                                            },
                                            "protectionContainerName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Conditional. Name of the Azure Recovery Service Vault Protection Container. Required if the template is used in a standalone deployment."
                                              }
                                            },
                                            "recoveryVaultName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Conditional. The name of the parent Azure Recovery Service Vault. Required if the template is used in a standalone deployment."
                                              }
                                            },
                                            "location": {
                                              "type": "string",
                                              "defaultValue": "[resourceGroup().location]",
                                              "metadata": {
                                                "description": "Optional. Location for all resources."
                                              }
                                            },
                                            "protectedItemType": {
                                              "type": "string",
                                              "allowedValues": [
                                                "AzureFileShareProtectedItem",
                                                "AzureVmWorkloadSAPAseDatabase",
                                                "AzureVmWorkloadSAPHanaDatabase",
                                                "AzureVmWorkloadSQLDatabase",
                                                "DPMProtectedItem",
                                                "GenericProtectedItem",
                                                "MabFileFolderProtectedItem",
                                                "Microsoft.ClassicCompute/virtualMachines",
                                                "Microsoft.Compute/virtualMachines",
                                                "Microsoft.Sql/servers/databases"
                                              ],
                                              "metadata": {
                                                "description": "Required. The backup item type."
                                              }
                                            },
                                            "policyId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. ID of the backup policy with which this item is backed up."
                                              }
                                            },
                                            "sourceResourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. Resource ID of the resource to back up."
                                              }
                                            }
                                          },
                                          "resources": [
                                            {
                                              "type": "Microsoft.RecoveryServices/vaults/backupFabrics/protectionContainers/protectedItems",
                                              "apiVersion": "2023-01-01",
                                              "name": "[format('{0}/Azure/{1}/{2}', parameters('recoveryVaultName'), parameters('protectionContainerName'), parameters('name'))]",
                                              "location": "[parameters('location')]",
                                              "properties": {
                                                "protectedItemType": "[parameters('protectedItemType')]",
                                                "policyId": "[parameters('policyId')]",
                                                "sourceResourceId": "[parameters('sourceResourceId')]"
                                              }
                                            }
                                          ],
                                          "outputs": {
                                            "resourceGroupName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The name of the Resource Group the protected item was created in."
                                              },
                                              "value": "[resourceGroup().name]"
                                            },
                                            "resourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource ID of the protected item."
                                              },
                                              "value": "[resourceId('Microsoft.RecoveryServices/vaults/backupFabrics/protectionContainers/protectedItems', split(format('{0}/Azure/{1}/{2}', parameters('recoveryVaultName'), parameters('protectionContainerName'), parameters('name')), '/')[0], split(format('{0}/Azure/{1}/{2}', parameters('recoveryVaultName'), parameters('protectionContainerName'), parameters('name')), '/')[1], split(format('{0}/Azure/{1}/{2}', parameters('recoveryVaultName'), parameters('protectionContainerName'), parameters('name')), '/')[2], split(format('{0}/Azure/{1}/{2}', parameters('recoveryVaultName'), parameters('protectionContainerName'), parameters('name')), '/')[3])]"
                                            },
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The Name of the protected item."
                                              },
                                              "value": "[format('{0}/Azure/{1}/{2}', parameters('recoveryVaultName'), parameters('protectionContainerName'), parameters('name'))]"
                                            }
                                          }
                                        }
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.RecoveryServices/vaults/backupFabrics/protectionContainers', split(format('{0}/Azure/{1}', parameters('recoveryVaultName'), parameters('name')), '/')[0], split(format('{0}/Azure/{1}', parameters('recoveryVaultName'), parameters('name')), '/')[1], split(format('{0}/Azure/{1}', parameters('recoveryVaultName'), parameters('name')), '/')[2])]"
                                      ]
                                    }
                                  ],
                                  "outputs": {
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the Resource Group the Protection Container was created in."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the Protection Container."
                                      },
                                      "value": "[resourceId('Microsoft.RecoveryServices/vaults/backupFabrics/protectionContainers', split(format('{0}/Azure/{1}', parameters('recoveryVaultName'), parameters('name')), '/')[0], split(format('{0}/Azure/{1}', parameters('recoveryVaultName'), parameters('name')), '/')[1], split(format('{0}/Azure/{1}', parameters('recoveryVaultName'), parameters('name')), '/')[2])]"
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The Name of the Protection Container."
                                      },
                                      "value": "[format('{0}/Azure/{1}', parameters('recoveryVaultName'), parameters('name'))]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.RecoveryServices/vaults', parameters('name'))]"
                              ]
                            },
                            {
                              "copy": {
                                "name": "rsv_backupPolicies",
                                "count": "[length(parameters('backupPolicies'))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-RSV-BackupPolicy-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "recoveryVaultName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "[parameters('backupPolicies')[copyIndex()].name]"
                                  },
                                  "properties": {
                                    "value": "[parameters('backupPolicies')[copyIndex()].properties]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.36.1.42791",
                                      "templateHash": "14008828449057764101"
                                    }
                                  },
                                  "parameters": {
                                    "recoveryVaultName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent Azure Recovery Service Vault. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Name of the Azure Recovery Service Vault Backup Policy."
                                      }
                                    },
                                    "properties": {
                                      "type": "object",
                                      "metadata": {
                                        "description": "Required. Configuration of the Azure Recovery Service Vault Backup Policy."
                                      }
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.RecoveryServices/vaults/backupPolicies",
                                      "apiVersion": "2023-01-01",
                                      "name": "[format('{0}/{1}', parameters('recoveryVaultName'), parameters('name'))]",
                                      "properties": "[parameters('properties')]"
                                    }
                                  ],
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the backup policy."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the backup policy."
                                      },
                                      "value": "[resourceId('Microsoft.RecoveryServices/vaults/backupPolicies', parameters('recoveryVaultName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the resource group the backup policy was created in."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.RecoveryServices/vaults', parameters('name'))]"
                              ]
                            },
                            {
                              "condition": "[not(empty(parameters('backupConfig')))]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-RSV-BackupConfig', uniqueString(deployment().name, parameters('location')))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "recoveryVaultName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "[coalesce(tryGet(parameters('backupConfig'), 'name'), 'vaultconfig')]"
                                  },
                                  "enhancedSecurityState": {
                                    "value": "[coalesce(tryGet(parameters('backupConfig'), 'enhancedSecurityState'), 'Enabled')]"
                                  },
                                  "resourceGuardOperationRequests": {
                                    "value": "[coalesce(tryGet(parameters('backupConfig'), 'resourceGuardOperationRequests'), createArray())]"
                                  },
                                  "softDeleteFeatureState": {
                                    "value": "[coalesce(tryGet(parameters('backupConfig'), 'softDeleteFeatureState'), 'Enabled')]"
                                  },
                                  "storageModelType": {
                                    "value": "[coalesce(tryGet(parameters('backupConfig'), 'storageModelType'), 'GeoRedundant')]"
                                  },
                                  "storageType": {
                                    "value": "[coalesce(tryGet(parameters('backupConfig'), 'storageType'), 'GeoRedundant')]"
                                  },
                                  "storageTypeState": {
                                    "value": "[coalesce(tryGet(parameters('backupConfig'), 'storageTypeState'), 'Locked')]"
                                  },
                                  "isSoftDeleteFeatureStateEditable": {
                                    "value": "[coalesce(tryGet(parameters('backupConfig'), 'isSoftDeleteFeatureStateEditable'), true())]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.36.1.42791",
                                      "templateHash": "18208409867658713089"
                                    }
                                  },
                                  "parameters": {
                                    "recoveryVaultName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent Azure Recovery Service Vault. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "defaultValue": "vaultconfig",
                                      "metadata": {
                                        "description": "Optional. Name of the Azure Recovery Service Vault Backup Policy."
                                      }
                                    },
                                    "enhancedSecurityState": {
                                      "type": "string",
                                      "defaultValue": "Enabled",
                                      "allowedValues": [
                                        "Disabled",
                                        "Enabled"
                                      ],
                                      "metadata": {
                                        "description": "Optional. Enable this setting to protect hybrid backups against accidental deletes and add additional layer of authentication for critical operations."
                                      }
                                    },
                                    "resourceGuardOperationRequests": {
                                      "type": "array",
                                      "defaultValue": [],
                                      "metadata": {
                                        "description": "Optional. ResourceGuard Operation Requests."
                                      }
                                    },
                                    "softDeleteFeatureState": {
                                      "type": "string",
                                      "defaultValue": "Enabled",
                                      "allowedValues": [
                                        "Disabled",
                                        "Enabled"
                                      ],
                                      "metadata": {
                                        "description": "Optional. Enable this setting to protect backup data for Azure VM, SQL Server in Azure VM and SAP HANA in Azure VM from accidental deletes."
                                      }
                                    },
                                    "storageModelType": {
                                      "type": "string",
                                      "defaultValue": "GeoRedundant",
                                      "allowedValues": [
                                        "GeoRedundant",
                                        "LocallyRedundant",
                                        "ReadAccessGeoZoneRedundant",
                                        "ZoneRedundant"
                                      ],
                                      "metadata": {
                                        "description": "Optional. Storage type."
                                      }
                                    },
                                    "storageType": {
                                      "type": "string",
                                      "defaultValue": "GeoRedundant",
                                      "allowedValues": [
                                        "GeoRedundant",
                                        "LocallyRedundant",
                                        "ReadAccessGeoZoneRedundant",
                                        "ZoneRedundant"
                                      ],
                                      "metadata": {
                                        "description": "Optional. Storage type."
                                      }
                                    },
                                    "storageTypeState": {
                                      "type": "string",
                                      "defaultValue": "Locked",
                                      "allowedValues": [
                                        "Locked",
                                        "Unlocked"
                                      ],
                                      "metadata": {
                                        "description": "Optional. Once a machine is registered against a resource, the storageTypeState is always Locked."
                                      }
                                    },
                                    "isSoftDeleteFeatureStateEditable": {
                                      "type": "bool",
                                      "defaultValue": true,
                                      "metadata": {
                                        "description": "Optional. Is soft delete feature state editable."
                                      }
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.RecoveryServices/vaults/backupconfig",
                                      "apiVersion": "2023-01-01",
                                      "name": "[format('{0}/{1}', parameters('recoveryVaultName'), parameters('name'))]",
                                      "properties": {
                                        "enhancedSecurityState": "[parameters('enhancedSecurityState')]",
                                        "resourceGuardOperationRequests": "[parameters('resourceGuardOperationRequests')]",
                                        "softDeleteFeatureState": "[parameters('softDeleteFeatureState')]",
                                        "storageModelType": "[parameters('storageModelType')]",
                                        "storageType": "[parameters('storageType')]",
                                        "storageTypeState": "[parameters('storageTypeState')]",
                                        "isSoftDeleteFeatureStateEditable": "[parameters('isSoftDeleteFeatureStateEditable')]"
                                      }
                                    }
                                  ],
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the backup config."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the backup config."
                                      },
                                      "value": "[resourceId('Microsoft.RecoveryServices/vaults/backupconfig', parameters('recoveryVaultName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the resource group the backup config was created in."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.RecoveryServices/vaults', parameters('name'))]"
                              ]
                            },
                            {
                              "condition": "[not(empty(parameters('replicationAlertSettings')))]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('RSV-replicationAlertSettings-{0}', uniqueString(deployment().name, parameters('location')))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "name": {
                                    "value": "defaultAlertSetting"
                                  },
                                  "recoveryVaultName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "customEmailAddresses": {
                                    "value": "[coalesce(tryGet(parameters('replicationAlertSettings'), 'customEmailAddresses'), createArray())]"
                                  },
                                  "locale": {
                                    "value": "[coalesce(tryGet(parameters('replicationAlertSettings'), 'locale'), '')]"
                                  },
                                  "sendToOwners": {
                                    "value": "[coalesce(tryGet(parameters('replicationAlertSettings'), 'sendToOwners'), 'Send')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.36.1.42791",
                                      "templateHash": "10606653234924922666"
                                    }
                                  },
                                  "parameters": {
                                    "recoveryVaultName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent Azure Recovery Service Vault. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "defaultValue": "defaultAlertSetting",
                                      "metadata": {
                                        "description": "Optional. The name of the replication Alert Setting."
                                      }
                                    },
                                    "customEmailAddresses": {
                                      "type": "array",
                                      "defaultValue": [],
                                      "metadata": {
                                        "description": "Optional. Comma separated list of custom email address for sending alert emails."
                                      }
                                    },
                                    "locale": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. The locale for the email notification."
                                      }
                                    },
                                    "sendToOwners": {
                                      "type": "string",
                                      "defaultValue": "Send",
                                      "allowedValues": [
                                        "DoNotSend",
                                        "Send"
                                      ],
                                      "metadata": {
                                        "description": "Optional. The value indicating whether to send email to subscription administrator."
                                      }
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.RecoveryServices/vaults/replicationAlertSettings",
                                      "apiVersion": "2022-10-01",
                                      "name": "[format('{0}/{1}', parameters('recoveryVaultName'), parameters('name'))]",
                                      "properties": {
                                        "customEmailAddresses": "[if(not(empty(parameters('customEmailAddresses'))), parameters('customEmailAddresses'), null())]",
                                        "locale": "[parameters('locale')]",
                                        "sendToOwners": "[parameters('sendToOwners')]"
                                      }
                                    }
                                  ],
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the replication Alert Setting."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the resource group the replication alert setting was created."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the replication alert setting."
                                      },
                                      "value": "[resourceId('Microsoft.RecoveryServices/vaults/replicationAlertSettings', parameters('recoveryVaultName'), parameters('name'))]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.RecoveryServices/vaults', parameters('name'))]"
                              ]
                            },
                            {
                              "copy": {
                                "name": "rsv_privateEndpoints",
                                "count": "[length(parameters('privateEndpoints'))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('RSV-PrivateEndpoint-{0}-{1}', copyIndex(), uniqueString(deployment().name, parameters('location')))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "groupIds": {
                                    "value": [
                                      "[parameters('privateEndpoints')[copyIndex()].service]"
                                    ]
                                  },
                                  "name": {
                                    "value": "[coalesce(tryGet(parameters('privateEndpoints')[copyIndex()], 'name'), format('pe-{0}-{1}-{2}', last(split(resourceId('Microsoft.RecoveryServices/vaults', parameters('name')), '/')), parameters('privateEndpoints')[copyIndex()].service, copyIndex()))]"
                                  },
                                  "serviceResourceId": {
                                    "value": "[resourceId('Microsoft.RecoveryServices/vaults', parameters('name'))]"
                                  },
                                  "subnetResourceId": {
                                    "value": "[parameters('privateEndpoints')[copyIndex()].subnetResourceId]"
                                  },
                                  "location": {
                                    "value": "[coalesce(tryGet(parameters('privateEndpoints')[copyIndex()], 'location'), reference(split(parameters('privateEndpoints')[copyIndex()].subnetResourceId, '/subnets/')[0], '2020-06-01', 'Full').location)]"
                                  },
                                  "privateDnsZoneGroup": {
                                    "value": "[coalesce(tryGet(parameters('privateEndpoints')[copyIndex()], 'privateDnsZoneGroup'), createObject())]"
                                  },
                                  "tags": {
                                    "value": "[coalesce(tryGet(parameters('privateEndpoints')[copyIndex()], 'tags'), createObject())]"
                                  },
                                  "manualPrivateLinkServiceConnections": {
                                    "value": "[coalesce(tryGet(parameters('privateEndpoints')[copyIndex()], 'manualPrivateLinkServiceConnections'), createArray())]"
                                  },
                                  "customDnsConfigs": {
                                    "value": "[coalesce(tryGet(parameters('privateEndpoints')[copyIndex()], 'customDnsConfigs'), createArray())]"
                                  },
                                  "ipConfigurations": {
                                    "value": "[coalesce(tryGet(parameters('privateEndpoints')[copyIndex()], 'ipConfigurations'), createArray())]"
                                  },
                                  "applicationSecurityGroups": {
                                    "value": "[coalesce(tryGet(parameters('privateEndpoints')[copyIndex()], 'applicationSecurityGroups'), createArray())]"
                                  },
                                  "customNetworkInterfaceName": {
                                    "value": "[coalesce(tryGet(parameters('privateEndpoints')[copyIndex()], 'customNetworkInterfaceName'), '')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.36.1.42791",
                                      "templateHash": "5820984105601907039"
                                    },
                                    "name": "Private Endpoints"
                                  },
                                  "parameters": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Name of the private endpoint resource to create."
                                      }
                                    },
                                    "subnetResourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
                                      }
                                    },
                                    "serviceResourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Resource ID of the resource that needs to be connected to the network."
                                      }
                                    },
                                    "applicationSecurityGroups": {
                                      "type": "array",
                                      "defaultValue": [],
                                      "metadata": {
                                        "description": "Optional. Application security groups in which the private endpoint IP configuration is included."
                                      }
                                    },
                                    "customNetworkInterfaceName": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. The custom name of the network interface attached to the private endpoint."
                                      }
                                    },
                                    "ipConfigurations": {
                                      "type": "array",
                                      "defaultValue": [],
                                      "metadata": {
                                        "description": "Optional. A list of IP configurations of the private endpoint. This will be used to map to the First Party Service endpoints."
                                      }
                                    },
                                    "groupIds": {
                                      "type": "array",
                                      "metadata": {
                                        "description": "Required. Subtype(s) of the connection to be created. The allowed values depend on the type serviceResourceId refers to."
                                      }
                                    },
                                    "privateDnsZoneGroup": {
                                      "type": "object",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. The private DNS zone group configuration used to associate the private endpoint with one or multiple private DNS zones. A DNS zone group can support up to 5 DNS zones."
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "defaultValue": "[resourceGroup().location]",
                                      "metadata": {
                                        "description": "Optional. Location for all Resources."
                                      }
                                    },
                                    "tags": {
                                      "type": "object",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Tags to be applied on all resources/resource groups in this deployment."
                                      }
                                    },
                                    "customDnsConfigs": {
                                      "type": "array",
                                      "defaultValue": [],
                                      "metadata": {
                                        "description": "Optional. Custom DNS configurations."
                                      }
                                    },
                                    "manualPrivateLinkServiceConnections": {
                                      "type": "array",
                                      "defaultValue": [],
                                      "metadata": {
                                        "description": "Optional. Manual PrivateLink Service Connections."
                                      }
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Network/privateEndpoints",
                                      "apiVersion": "2023-04-01",
                                      "name": "[parameters('name')]",
                                      "location": "[parameters('location')]",
                                      "tags": "[parameters('tags')]",
                                      "properties": {
                                        "applicationSecurityGroups": "[parameters('applicationSecurityGroups')]",
                                        "customDnsConfigs": "[parameters('customDnsConfigs')]",
                                        "customNetworkInterfaceName": "[parameters('customNetworkInterfaceName')]",
                                        "ipConfigurations": "[parameters('ipConfigurations')]",
                                        "manualPrivateLinkServiceConnections": "[parameters('manualPrivateLinkServiceConnections')]",
                                        "privateLinkServiceConnections": [
                                          {
                                            "name": "[parameters('name')]",
                                            "properties": {
                                              "privateLinkServiceId": "[parameters('serviceResourceId')]",
                                              "groupIds": "[parameters('groupIds')]"
                                            }
                                          }
                                        ],
                                        "subnet": {
                                          "id": "[parameters('subnetResourceId')]"
                                        }
                                      }
                                    },
                                    {
                                      "condition": "[not(empty(parameters('privateDnsZoneGroup')))]",
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('PE-PrivateDnsZoneGroup-{0}', uniqueString(deployment().name))]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "privateDNSResourceIds": {
                                            "value": "[parameters('privateDnsZoneGroup').privateDNSResourceIds]"
                                          },
                                          "privateEndpointName": {
                                            "value": "[parameters('name')]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.36.1.42791",
                                              "templateHash": "7513849818521025348"
                                            }
                                          },
                                          "parameters": {
                                            "privateEndpointName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Conditional. The name of the parent private endpoint. Required if the template is used in a standalone deployment."
                                              }
                                            },
                                            "privateDNSResourceIds": {
                                              "type": "array",
                                              "minLength": 1,
                                              "maxLength": 5,
                                              "metadata": {
                                                "description": "Required. Array of private DNS zone resource IDs. A DNS zone group can support up to 5 DNS zones."
                                              }
                                            },
                                            "name": {
                                              "type": "string",
                                              "defaultValue": "default",
                                              "metadata": {
                                                "description": "Optional. The name of the private DNS zone group."
                                              }
                                            }
                                          },
                                          "variables": {
                                            "copy": [
                                              {
                                                "name": "privateDnsZoneConfigs",
                                                "count": "[length(parameters('privateDNSResourceIds'))]",
                                                "input": {
                                                  "name": "[last(split(parameters('privateDNSResourceIds')[copyIndex('privateDnsZoneConfigs')], '/'))]",
                                                  "properties": {
                                                    "privateDnsZoneId": "[parameters('privateDNSResourceIds')[copyIndex('privateDnsZoneConfigs')]]"
                                                  }
                                                }
                                              }
                                            ]
                                          },
                                          "resources": [
                                            {
                                              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                                              "apiVersion": "2023-04-01",
                                              "name": "[format('{0}/{1}', parameters('privateEndpointName'), parameters('name'))]",
                                              "properties": {
                                                "privateDnsZoneConfigs": "[variables('privateDnsZoneConfigs')]"
                                              }
                                            }
                                          ],
                                          "outputs": {
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The name of the private endpoint DNS zone group."
                                              },
                                              "value": "[parameters('name')]"
                                            },
                                            "resourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource ID of the private endpoint DNS zone group."
                                              },
                                              "value": "[resourceId('Microsoft.Network/privateEndpoints/privateDnsZoneGroups', parameters('privateEndpointName'), parameters('name'))]"
                                            }
                                          }
                                        }
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
                                      ]
                                    }
                                  ],
                                  "outputs": {
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group the private endpoint was deployed into."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the private endpoint."
                                      },
                                      "value": "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the private endpoint."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "location": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The location the resource was deployed into."
                                      },
                                      "value": "[reference(resourceId('Microsoft.Network/privateEndpoints', parameters('name')), '2023-04-01', 'full').location]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.RecoveryServices/vaults', parameters('name'))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the recovery services vault."
                              },
                              "value": "[resourceId('Microsoft.RecoveryServices/vaults', parameters('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the resource group the recovery services vault was created in."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The Name of the recovery services vault."
                              },
                              "value": "[parameters('name')]"
                            },
                            "systemAssignedPrincipalId": {
                              "type": "string",
                              "metadata": {
                                "description": "The principal ID of the system assigned identity."
                              },
                              "value": "[if(and(parameters('systemAssignedIdentity'), contains(reference(resourceId('Microsoft.RecoveryServices/vaults', parameters('name')), '2023-01-01', 'full').identity, 'principalId')), reference(resourceId('Microsoft.RecoveryServices/vaults', parameters('name')), '2023-01-01', 'full').identity.principalId, '')]"
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "The location the resource was deployed into."
                              },
                              "value": "[reference(resourceId('Microsoft.RecoveryServices/vaults', parameters('name')), '2023-01-01', 'full').location]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "storageAccounts"
                      ]
                    },
                    {
                      "condition": "[and(equals(parameters('storageSku'), 'Premium'), parameters('increaseQuota'))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('IncreaseQuotaFunctionApp_{0}', parameters('timeStamp'))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "applicationInsightsName": {
                            "value": "[parameters('increaseQuotaApplicationInsightsName')]"
                          },
                          "azureBlobPrivateDnsZoneResourceId": {
                            "value": "[parameters('azureBlobPrivateDnsZoneResourceId')]"
                          },
                          "azureFilePrivateDnsZoneResourceId": {
                            "value": "[parameters('azureFilePrivateDnsZoneResourceId')]"
                          },
                          "azureFunctionAppPrivateDnsZoneResourceId": {
                            "value": "[parameters('azureFunctionAppPrivateDnsZoneResourceId')]"
                          },
                          "azureQueuePrivateDnsZoneResourceId": {
                            "value": "[parameters('azureQueuePrivateDnsZoneResourceId')]"
                          },
                          "azureTablePrivateDnsZoneResourceId": {
                            "value": "[parameters('azureTablePrivateDnsZoneResourceId')]"
                          },
                          "enableApplicationInsights": {
                            "value": "[not(empty(parameters('logAnalyticsWorkspaceId')))]"
                          },
                          "functionAppDelegatedSubnetResourceId": {
                            "value": "[parameters('functionAppDelegatedSubnetResourceId')]"
                          },
                          "functionAppAppSettings": {
                            "value": [
                              {
                                "name": "FileShareNames",
                                "value": "[string(parameters('fileShares'))]"
                              },
                              {
                                "name": "ResourceGroupName",
                                "value": "[parameters('resourceGroupStorage')]"
                              }
                            ]
                          },
                          "encryptionUserAssignedIdentityResourceId": {
                            "value": "[parameters('encryptionUserAssignedIdentityResourceId')]"
                          },
                          "functionAppName": {
                            "value": "[parameters('increaseQuotaFunctionAppName')]"
                          },
                          "hostPoolResourceId": {
                            "value": "[parameters('hostPoolResourceId')]"
                          },
                          "keyManagementStorageAccounts": {
                            "value": "[parameters('keyManagementStorageAccounts')]"
                          },
                          "logAnalyticsWorkspaceResourceId": {
                            "value": "[parameters('logAnalyticsWorkspaceId')]"
                          },
                          "privateEndpoint": {
                            "value": "[parameters('privateEndpoint')]"
                          },
                          "privateEndpointNameConv": {
                            "value": "[parameters('privateEndpointNameConv')]"
                          },
                          "privateEndpointNICNameConv": {
                            "value": "[parameters('privateEndpointNICNameConv')]"
                          },
                          "privateEndpointSubnetResourceId": {
                            "value": "[parameters('privateEndpointSubnetResourceId')]"
                          },
                          "privateLinkScopeResourceId": {
                            "value": "[parameters('privateLinkScopeResourceId')]"
                          },
                          "resourceGroupRoleAssignments": {
                            "value": [
                              {
                                "roleDefinitionId": "17d1049b-9a84-46fb-8f53-869881c3d3ab",
                                "scope": "[parameters('resourceGroupStorage')]"
                              }
                            ]
                          },
                          "serverFarmId": {
                            "value": "[parameters('serverFarmId')]"
                          },
                          "storageAccountName": {
                            "value": "[parameters('increaseQuotaStorageAccountName')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "timeStamp": {
                            "value": "[parameters('timeStamp')]"
                          },
                          "encryptionKeyName": {
                            "value": "[parameters('increaseQuotaEncryptionKeyName')]"
                          },
                          "encryptionKeyVaultUri": {
                            "value": "[parameters('encryptionKeyVaultUri')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.36.1.42791",
                              "templateHash": "15898547442760750705"
                            }
                          },
                          "parameters": {
                            "applicationInsightsName": {
                              "type": "string"
                            },
                            "azureBlobPrivateDnsZoneResourceId": {
                              "type": "string"
                            },
                            "azureFilePrivateDnsZoneResourceId": {
                              "type": "string"
                            },
                            "azureFunctionAppPrivateDnsZoneResourceId": {
                              "type": "string"
                            },
                            "azureQueuePrivateDnsZoneResourceId": {
                              "type": "string"
                            },
                            "azureTablePrivateDnsZoneResourceId": {
                              "type": "string"
                            },
                            "functionAppDelegatedSubnetResourceId": {
                              "type": "string"
                            },
                            "enableApplicationInsights": {
                              "type": "bool"
                            },
                            "encryptionKeyName": {
                              "type": "string"
                            },
                            "encryptionKeyVaultUri": {
                              "type": "string"
                            },
                            "encryptionUserAssignedIdentityResourceId": {
                              "type": "string"
                            },
                            "functionAppName": {
                              "type": "string"
                            },
                            "functionAppAppSettings": {
                              "type": "array"
                            },
                            "hostPoolResourceId": {
                              "type": "string"
                            },
                            "keyManagementStorageAccounts": {
                              "type": "string"
                            },
                            "location": {
                              "type": "string"
                            },
                            "logAnalyticsWorkspaceResourceId": {
                              "type": "string"
                            },
                            "privateEndpoint": {
                              "type": "bool"
                            },
                            "privateEndpointNameConv": {
                              "type": "string"
                            },
                            "privateEndpointNICNameConv": {
                              "type": "string"
                            },
                            "privateEndpointSubnetResourceId": {
                              "type": "string"
                            },
                            "privateLinkScopeResourceId": {
                              "type": "string"
                            },
                            "resourceGroupRoleAssignments": {
                              "type": "array",
                              "defaultValue": []
                            },
                            "serverFarmId": {
                              "type": "string"
                            },
                            "storageAccountName": {
                              "type": "string"
                            },
                            "tags": {
                              "type": "object"
                            },
                            "timeStamp": {
                              "type": "string"
                            }
                          },
                          "variables": {
                            "cloudSuffix": "[replace(replace(environment().resourceManager, 'https://management.', ''), '/', '')]",
                            "privateEndpointVnetName": "[if(and(not(empty(parameters('privateEndpointSubnetResourceId'))), parameters('privateEndpoint')), split(parameters('privateEndpointSubnetResourceId'), '/')[8], '')]",
                            "azureStoragePrivateDnsZoneResourceIds": [
                              "[parameters('azureBlobPrivateDnsZoneResourceId')]",
                              "[parameters('azureFilePrivateDnsZoneResourceId')]",
                              "[parameters('azureQueuePrivateDnsZoneResourceId')]",
                              "[parameters('azureTablePrivateDnsZoneResourceId')]"
                            ],
                            "storageSubResources": [
                              "blob",
                              "file",
                              "queue",
                              "table"
                            ]
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Storage/storageAccounts",
                              "apiVersion": "2022-09-01",
                              "name": "[parameters('storageAccountName')]",
                              "location": "[parameters('location')]",
                              "tags": "[union(createObject('cm-resource-parent', parameters('hostPoolResourceId')), coalesce(tryGet(parameters('tags'), 'Microsoft.Storage/storageAccounts'), createObject()))]",
                              "sku": {
                                "name": "Standard_LRS"
                              },
                              "kind": "StorageV2",
                              "identity": "[if(not(equals(parameters('keyManagementStorageAccounts'), 'MicrosoftManaged')), createObject('type', 'UserAssigned', 'userAssignedIdentities', createObject(format('{0}', parameters('encryptionUserAssignedIdentityResourceId')), createObject())), null())]",
                              "properties": {
                                "accessTier": "Hot",
                                "allowBlobPublicAccess": false,
                                "allowCrossTenantReplication": false,
                                "allowedCopyScope": "[if(parameters('privateEndpoint'), 'PrivateLink', 'AAD')]",
                                "allowSharedKeyAccess": false,
                                "azureFilesIdentityBasedAuthentication": {
                                  "directoryServiceOptions": "None"
                                },
                                "defaultToOAuthAuthentication": false,
                                "dnsEndpointType": "Standard",
                                "encryption": {
                                  "identity": "[if(not(equals(parameters('keyManagementStorageAccounts'), 'MicrosoftManaged')), createObject('userAssignedIdentity', parameters('encryptionUserAssignedIdentityResourceId')), null())]",
                                  "keySource": "[if(not(equals(parameters('keyManagementStorageAccounts'), 'MicrosoftManaged')), 'Microsoft.KeyVault', 'Microsoft.Storage')]",
                                  "keyvaultproperties": "[if(not(equals(parameters('keyManagementStorageAccounts'), 'MicrosoftManaged')), createObject('keyvaulturi', parameters('encryptionKeyVaultUri'), 'keyname', parameters('encryptionKeyName')), null())]",
                                  "requireInfrastructureEncryption": true,
                                  "services": {
                                    "file": {
                                      "keyType": "Account",
                                      "enabled": true
                                    },
                                    "table": {
                                      "keyType": "Account",
                                      "enabled": true
                                    },
                                    "queue": {
                                      "keyType": "Account",
                                      "enabled": true
                                    },
                                    "blob": {
                                      "keyType": "Account",
                                      "enabled": true
                                    }
                                  }
                                },
                                "largeFileSharesState": "Disabled",
                                "minimumTlsVersion": "TLS1_2",
                                "networkAcls": {
                                  "bypass": "AzureServices",
                                  "virtualNetworkRules": [],
                                  "ipRules": [],
                                  "defaultAction": "[if(parameters('privateEndpoint'), 'Deny', 'Allow')]"
                                },
                                "publicNetworkAccess": "[if(parameters('privateEndpoint'), 'Disabled', 'Enabled')]",
                                "sasPolicy": {
                                  "expirationAction": "Log",
                                  "sasExpirationPeriod": "180.00:00:00"
                                },
                                "supportsHttpsTrafficOnly": true
                              }
                            },
                            {
                              "type": "Microsoft.Storage/storageAccounts/blobServices",
                              "apiVersion": "2021-09-01",
                              "name": "[format('{0}/{1}', parameters('storageAccountName'), 'default')]",
                              "dependsOn": [
                                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
                              ]
                            },
                            {
                              "copy": {
                                "name": "privateEndpoints_storage",
                                "count": "[length(variables('storageSubResources'))]"
                              },
                              "condition": "[parameters('privateEndpoint')]",
                              "type": "Microsoft.Network/privateEndpoints",
                              "apiVersion": "2023-04-01",
                              "name": "[replace(replace(replace(parameters('privateEndpointNameConv'), 'SUBRESOURCE', variables('storageSubResources')[copyIndex()]), 'RESOURCE', parameters('storageAccountName')), 'VNETID', variables('privateEndpointVnetName'))]",
                              "location": "[parameters('location')]",
                              "properties": {
                                "customNetworkInterfaceName": "[replace(replace(replace(parameters('privateEndpointNICNameConv'), 'SUBRESOURCE', variables('storageSubResources')[copyIndex()]), 'RESOURCE', parameters('storageAccountName')), 'VNETID', variables('privateEndpointVnetName'))]",
                                "privateLinkServiceConnections": [
                                  {
                                    "name": "[replace(replace(replace(parameters('privateEndpointNameConv'), 'SUBRESOURCE', variables('storageSubResources')[copyIndex()]), 'RESOURCE', parameters('storageAccountName')), 'VNETID', variables('privateEndpointVnetName'))]",
                                    "properties": {
                                      "privateLinkServiceId": "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]",
                                      "groupIds": [
                                        "[variables('storageSubResources')[copyIndex()]]"
                                      ]
                                    }
                                  }
                                ],
                                "subnet": {
                                  "id": "[parameters('privateEndpointSubnetResourceId')]"
                                }
                              },
                              "tags": "[union(createObject('cm-resource-parent', parameters('hostPoolResourceId')), coalesce(tryGet(parameters('tags'), 'Microsoft.Network/privateEndpoints'), createObject()))]",
                              "dependsOn": [
                                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
                              ]
                            },
                            {
                              "copy": {
                                "name": "privateDnsZoneGroups_storage",
                                "count": "[length(range(0, sub(length(variables('azureStoragePrivateDnsZoneResourceIds')), 1)))]"
                              },
                              "condition": "[and(parameters('privateEndpoint'), not(empty(variables('azureStoragePrivateDnsZoneResourceIds')[range(0, sub(length(variables('azureStoragePrivateDnsZoneResourceIds')), 1))[copyIndex()]])))]",
                              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                              "apiVersion": "2021-08-01",
                              "name": "[format('{0}/{1}', replace(replace(replace(parameters('privateEndpointNameConv'), 'SUBRESOURCE', variables('storageSubResources')[range(0, sub(length(variables('azureStoragePrivateDnsZoneResourceIds')), 1))[copyIndex()]]), 'RESOURCE', parameters('storageAccountName')), 'VNETID', variables('privateEndpointVnetName')), parameters('storageAccountName'))]",
                              "properties": {
                                "privateDnsZoneConfigs": [
                                  {
                                    "name": "ipconfig1",
                                    "properties": {
                                      "privateDnsZoneId": "[variables('azureStoragePrivateDnsZoneResourceIds')[range(0, sub(length(variables('azureStoragePrivateDnsZoneResourceIds')), 1))[copyIndex()]]]"
                                    }
                                  }
                                ]
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/privateEndpoints', replace(replace(replace(parameters('privateEndpointNameConv'), 'SUBRESOURCE', variables('storageSubResources')[range(0, sub(length(variables('azureStoragePrivateDnsZoneResourceIds')), 1))[copyIndex()]]), 'RESOURCE', parameters('storageAccountName')), 'VNETID', variables('privateEndpointVnetName')))]",
                                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
                              ]
                            },
                            {
                              "condition": "[parameters('enableApplicationInsights')]",
                              "type": "microsoft.insights/diagnosticSettings",
                              "apiVersion": "2017-05-01-preview",
                              "scope": "[format('Microsoft.Storage/storageAccounts/{0}/blobServices/{1}', parameters('storageAccountName'), 'default')]",
                              "name": "[format('{0}-blob-diagnosticSettings', parameters('storageAccountName'))]",
                              "properties": {
                                "logs": [
                                  {
                                    "category": "StorageWrite",
                                    "enabled": true
                                  }
                                ],
                                "metrics": [
                                  {
                                    "category": "Transaction",
                                    "enabled": true
                                  }
                                ],
                                "workspaceId": "[parameters('logAnalyticsWorkspaceResourceId')]"
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Storage/storageAccounts/blobServices', parameters('storageAccountName'), 'default')]"
                              ]
                            },
                            {
                              "condition": "[parameters('enableApplicationInsights')]",
                              "type": "Microsoft.Insights/components",
                              "apiVersion": "2020-02-02",
                              "name": "[parameters('applicationInsightsName')]",
                              "location": "[parameters('location')]",
                              "tags": "[union(createObject('cm-resource-parent', parameters('hostPoolResourceId')), coalesce(tryGet(parameters('tags'), 'Microsoft.Insights/components'), createObject()))]",
                              "properties": {
                                "Application_Type": "web",
                                "publicNetworkAccessForIngestion": "[if(parameters('privateEndpoint'), 'Disabled', null())]",
                                "publicNetworkAccessForQuery": "[if(parameters('privateEndpoint'), 'Disabled', null())]"
                              },
                              "kind": "web"
                            },
                            {
                              "type": "Microsoft.Web/sites",
                              "apiVersion": "2023-01-01",
                              "name": "[parameters('functionAppName')]",
                              "location": "[parameters('location')]",
                              "tags": "[union(createObject('cm-resource-parent', parameters('hostPoolResourceId')), coalesce(tryGet(parameters('tags'), 'Microsoft.Web/sites'), createObject()))]",
                              "kind": "functionapp",
                              "identity": {
                                "type": "SystemAssigned"
                              },
                              "properties": {
                                "clientAffinityEnabled": false,
                                "httpsOnly": true,
                                "publicNetworkAccess": "[if(parameters('privateEndpoint'), 'Disabled', null())]",
                                "serverFarmId": "[parameters('serverFarmId')]",
                                "siteConfig": {
                                  "alwaysOn": true,
                                  "appSettings": "[union(createArray(createObject('name', 'AzureWebJobsStorage__blobServiceUri', 'value', format('https://{0}.blob.{1}', parameters('storageAccountName'), environment().suffixes.storage)), createObject('name', 'AzureWebJobsStorage__credential', 'value', 'managedidentity'), createObject('name', 'AzureWebJobsStorage__queueServiceUri', 'value', format('https://{0}.queue.{1}', parameters('storageAccountName'), environment().suffixes.storage)), createObject('name', 'AzureWebJobsStorage__tableServiceUri', 'value', format('https://{0}.table.{1}', parameters('storageAccountName'), environment().suffixes.storage)), createObject('name', 'FUNCTIONS_EXTENSION_VERSION', 'value', '~4'), createObject('name', 'FUNCTIONS_WORKER_RUNTIME', 'value', 'powershell'), createObject('name', 'WEBSITE_LOAD_USER_PROFILE', 'value', '1'), createObject('name', 'EnvironmentName', 'value', environment().name), createObject('name', 'ResourceManagerUrl', 'value', if(endsWith(environment().resourceManager, '/'), environment().resourceManager, format('{0}/', environment().resourceManager))), createObject('name', 'StorageSuffix', 'value', environment().suffixes.storage), createObject('name', 'SubscriptionId', 'value', subscription().subscriptionId), createObject('name', 'TenantId', 'value', subscription().tenantId)), if(parameters('enableApplicationInsights'), createArray(createObject('name', 'APPLICATIONINSIGHTS_CONNECTION_STRING', 'value', reference(resourceId('Microsoft.Insights/components', parameters('applicationInsightsName')), '2020-02-02').ConnectionString)), createArray()), parameters('functionAppAppSettings'))]",
                                  "cors": {
                                    "allowedOrigins": [
                                      "[format('{0}', environment().portal)]",
                                      "[format('https://functions-next.{0}', variables('cloudSuffix'))]",
                                      "[format('https://functions-staging.{0}', variables('cloudSuffix'))]",
                                      "[format('https://functions.{0}', variables('cloudSuffix'))]"
                                    ]
                                  },
                                  "ftpsState": "Disabled",
                                  "netFrameworkVersion": "v6.0",
                                  "powerShellVersion": "7.2",
                                  "publicNetworkAccess": "[if(parameters('privateEndpoint'), 'Disabled', 'Enabled')]",
                                  "use32BitWorkerProcess": false
                                },
                                "virtualNetworkSubnetId": "[if(not(empty(parameters('functionAppDelegatedSubnetResourceId'))), parameters('functionAppDelegatedSubnetResourceId'), null())]",
                                "vnetContentShareEnabled": false,
                                "vnetRouteAllEnabled": "[if(not(empty(parameters('functionAppDelegatedSubnetResourceId'))), true(), false())]"
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Insights/components', parameters('applicationInsightsName'))]",
                                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
                              ]
                            },
                            {
                              "condition": "[parameters('privateEndpoint')]",
                              "type": "Microsoft.Network/privateEndpoints",
                              "apiVersion": "2023-04-01",
                              "name": "[replace(replace(replace(parameters('privateEndpointNameConv'), 'SUBRESOURCE', 'sites'), 'RESOURCE', parameters('functionAppName')), 'VNETID', variables('privateEndpointVnetName'))]",
                              "location": "[parameters('location')]",
                              "properties": {
                                "customNetworkInterfaceName": "[replace(replace(replace(parameters('privateEndpointNICNameConv'), 'SUBRESOURCE', 'sites'), 'RESOURCE', parameters('functionAppName')), 'VNETID', variables('privateEndpointVnetName'))]",
                                "privateLinkServiceConnections": [
                                  {
                                    "name": "[replace(replace(replace(parameters('privateEndpointNameConv'), 'SUBRESOURCE', 'sites'), 'RESOURCE', parameters('functionAppName')), 'VNETID', variables('privateEndpointVnetName'))]",
                                    "properties": {
                                      "privateLinkServiceId": "[resourceId('Microsoft.Web/sites', parameters('functionAppName'))]",
                                      "groupIds": [
                                        "sites"
                                      ]
                                    }
                                  }
                                ],
                                "subnet": {
                                  "id": "[parameters('privateEndpointSubnetResourceId')]"
                                }
                              },
                              "tags": "[union(createObject('cm-resource-parent', parameters('hostPoolResourceId')), coalesce(tryGet(parameters('tags'), 'Microsoft.Network/privateEndpoints'), createObject()))]",
                              "dependsOn": [
                                "[resourceId('Microsoft.Web/sites', parameters('functionAppName'))]"
                              ]
                            },
                            {
                              "condition": "[and(parameters('privateEndpoint'), not(empty(parameters('azureFunctionAppPrivateDnsZoneResourceId'))))]",
                              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                              "apiVersion": "2021-08-01",
                              "name": "[format('{0}/{1}', replace(replace(replace(parameters('privateEndpointNameConv'), 'SUBRESOURCE', 'sites'), 'RESOURCE', parameters('functionAppName')), 'VNETID', variables('privateEndpointVnetName')), 'default')]",
                              "properties": {
                                "privateDnsZoneConfigs": [
                                  {
                                    "name": "ipconfig1",
                                    "properties": {
                                      "privateDnsZoneId": "[parameters('azureFunctionAppPrivateDnsZoneResourceId')]"
                                    }
                                  }
                                ]
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/privateEndpoints', replace(replace(replace(parameters('privateEndpointNameConv'), 'SUBRESOURCE', 'sites'), 'RESOURCE', parameters('functionAppName')), 'VNETID', variables('privateEndpointVnetName')))]"
                              ]
                            },
                            {
                              "condition": "[and(parameters('enableApplicationInsights'), not(empty(parameters('privateLinkScopeResourceId'))))]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('PrivateLlinkScope-{0}', parameters('timeStamp'))]",
                              "subscriptionId": "[subscription().subscriptionId]",
                              "location": "[resourceGroup().location]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "privateLinkScopeResourceId": {
                                    "value": "[parameters('privateLinkScopeResourceId')]"
                                  },
                                  "scopedResourceIds": {
                                    "value": [
                                      "[resourceId('Microsoft.Insights/components', parameters('applicationInsightsName'))]"
                                    ]
                                  },
                                  "timeStamp": {
                                    "value": "[parameters('timeStamp')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.36.1.42791",
                                      "templateHash": "13149038920170790102"
                                    }
                                  },
                                  "parameters": {
                                    "privateLinkScopeResourceId": {
                                      "type": "string"
                                    },
                                    "scopedResourceIds": {
                                      "type": "array"
                                    },
                                    "timeStamp": {
                                      "type": "string"
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('addScopedResources-{0}', parameters('timeStamp'))]",
                                      "subscriptionId": "[split(parameters('privateLinkScopeResourceId'), '/')[2]]",
                                      "resourceGroup": "[split(parameters('privateLinkScopeResourceId'), '/')[4]]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "privateLinkScopeResourceId": {
                                            "value": "[parameters('privateLinkScopeResourceId')]"
                                          },
                                          "scopedResourceIds": {
                                            "value": "[parameters('scopedResourceIds')]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.36.1.42791",
                                              "templateHash": "17913142480251977729"
                                            }
                                          },
                                          "parameters": {
                                            "scopedResourceIds": {
                                              "type": "array"
                                            },
                                            "privateLinkScopeResourceId": {
                                              "type": "string"
                                            }
                                          },
                                          "resources": [
                                            {
                                              "copy": {
                                                "name": "scopedResources",
                                                "count": "[length(parameters('scopedResourceIds'))]"
                                              },
                                              "type": "Microsoft.Insights/privateLinkScopes/scopedResources",
                                              "apiVersion": "2021-07-01-preview",
                                              "name": "[format('{0}/{1}', last(split(parameters('privateLinkScopeResourceId'), '/')), last(split(parameters('scopedResourceIds')[copyIndex()], '/')))]",
                                              "properties": {
                                                "linkedResourceId": "[parameters('scopedResourceIds')[copyIndex()]]"
                                              }
                                            }
                                          ]
                                        }
                                      }
                                    }
                                  ]
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Insights/components', parameters('applicationInsightsName'))]"
                              ]
                            },
                            {
                              "copy": {
                                "name": "roleAssignments_resourceGroups",
                                "count": "[length(range(0, length(parameters('resourceGroupRoleAssignments'))))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('set-role-assignment-{0}-{1}', range(0, length(parameters('resourceGroupRoleAssignments')))[copyIndex()], parameters('timeStamp'))]",
                              "resourceGroup": "[parameters('resourceGroupRoleAssignments')[range(0, length(parameters('resourceGroupRoleAssignments')))[copyIndex()]].scope]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "principalId": {
                                    "value": "[reference(resourceId('Microsoft.Web/sites', parameters('functionAppName')), '2023-01-01', 'full').identity.principalId]"
                                  },
                                  "principalType": {
                                    "value": "ServicePrincipal"
                                  },
                                  "roleDefinitionId": {
                                    "value": "[parameters('resourceGroupRoleAssignments')[range(0, length(parameters('resourceGroupRoleAssignments')))[copyIndex()]].roleDefinitionId]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.36.1.42791",
                                      "templateHash": "7171613509360905345"
                                    }
                                  },
                                  "parameters": {
                                    "roleDefinitionId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. You can provide either the role definition GUID or its fully qualified ID in the following format: \\'/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11\\'.\nYou can find the GUIDs in the ID column on the table at https://learn.microsoft.com/en-us/azure/role-based-access-control/built-in-roles.\n"
                                      }
                                    },
                                    "principalId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The Principal or Object ID of the Security Principal (User, Group, Service Principal, Managed Identity)."
                                      }
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "defaultValue": "[resourceGroup().name]",
                                      "metadata": {
                                        "description": "Optional. Name of the Resource Group to assign the RBAC role to. If not provided, will use the current scope for deployment."
                                      }
                                    },
                                    "subscriptionId": {
                                      "type": "string",
                                      "defaultValue": "[subscription().subscriptionId]",
                                      "metadata": {
                                        "description": "Optional. Subscription ID of the subscription to assign the RBAC role to. If not provided, will use the current scope for deployment."
                                      }
                                    },
                                    "principalType": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "allowedValues": [
                                        "ServicePrincipal",
                                        "Group",
                                        "User",
                                        "ForeignGroup",
                                        "Device",
                                        ""
                                      ],
                                      "metadata": {
                                        "description": "Optional. The principal type of the assigned principal ID."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "roleDefinitionIdVar": "[if(contains(parameters('roleDefinitionId'), '/providers/Microsoft.Authorization/roleDefinitions/'), parameters('roleDefinitionId'), format('/providers/Microsoft.Authorization/roleDefinitions/{0}', parameters('roleDefinitionId')))]"
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Authorization/roleAssignments",
                                      "apiVersion": "2022-04-01",
                                      "name": "[guid(parameters('subscriptionId'), parameters('resourceGroupName'), variables('roleDefinitionIdVar'), parameters('principalId'))]",
                                      "properties": {
                                        "roleDefinitionId": "[variables('roleDefinitionIdVar')]",
                                        "principalId": "[parameters('principalId')]",
                                        "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]"
                                      }
                                    }
                                  ],
                                  "outputs": {
                                    "resourceId": {
                                      "type": "string",
                                      "value": "[resourceId('Microsoft.Authorization/roleAssignments', guid(parameters('subscriptionId'), parameters('resourceGroupName'), variables('roleDefinitionIdVar'), parameters('principalId')))]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Web/sites', parameters('functionAppName'))]"
                              ]
                            },
                            {
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('set-role-assignment-storage-{0}', parameters('timeStamp'))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "principalIds": {
                                    "value": [
                                      "[reference(resourceId('Microsoft.Web/sites', parameters('functionAppName')), '2023-01-01', 'full').identity.principalId]"
                                    ]
                                  },
                                  "principalType": {
                                    "value": "ServicePrincipal"
                                  },
                                  "roleDefinitionId": {
                                    "value": "b7e6dc6d-f1e8-4753-8033-0f276bb0955b"
                                  },
                                  "storageAccountResourceId": {
                                    "value": "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.36.1.42791",
                                      "templateHash": "5413482460947585295"
                                    }
                                  },
                                  "parameters": {
                                    "principalIds": {
                                      "type": "array"
                                    },
                                    "principalType": {
                                      "type": "string"
                                    },
                                    "storageAccountResourceId": {
                                      "type": "string"
                                    },
                                    "roleDefinitionId": {
                                      "type": "string"
                                    }
                                  },
                                  "resources": [
                                    {
                                      "copy": {
                                        "name": "roleAssignments",
                                        "count": "[length(range(0, length(parameters('principalIds'))))]"
                                      },
                                      "type": "Microsoft.Authorization/roleAssignments",
                                      "apiVersion": "2020-04-01-preview",
                                      "scope": "[format('Microsoft.Storage/storageAccounts/{0}', last(split(parameters('storageAccountResourceId'), '/')))]",
                                      "name": "[guid(parameters('principalIds')[range(0, length(parameters('principalIds')))[copyIndex()]], parameters('roleDefinitionId'), parameters('storageAccountResourceId'))]",
                                      "properties": {
                                        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', parameters('roleDefinitionId'))]",
                                        "principalId": "[parameters('principalIds')[range(0, length(parameters('principalIds')))[copyIndex()]]]",
                                        "principalType": "[parameters('principalType')]"
                                      }
                                    }
                                  ]
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Web/sites', parameters('functionAppName'))]",
                                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "functionAppName": {
                              "type": "string",
                              "value": "[parameters('functionAppName')]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "condition": "[and(and(equals(parameters('storageSku'), 'Premium'), parameters('increaseQuota')), greater(parameters('storageCount'), 0))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('IncreaseQuotaFunction_{0}', parameters('timeStamp'))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "files": {
                            "value": {
                              "requirements.psd1": "[variables('$fxv#0')]",
                              "run.ps1": "[variables('$fxv#1')]",
                              "../profile.ps1": "[variables('$fxv#2')]"
                            }
                          },
                          "functionAppName": {
                            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('IncreaseQuotaFunctionApp_{0}', parameters('timeStamp'))), '2022-09-01').outputs.functionAppName.value]"
                          },
                          "functionName": {
                            "value": "auto-increase-file-share-quota"
                          },
                          "schedule": {
                            "value": "0 */15 * * * *"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.36.1.42791",
                              "templateHash": "18041385061542092473"
                            }
                          },
                          "parameters": {
                            "files": {
                              "type": "object"
                            },
                            "functionAppName": {
                              "type": "string"
                            },
                            "functionName": {
                              "type": "string"
                            },
                            "schedule": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Web/sites/functions",
                              "apiVersion": "2020-12-01",
                              "name": "[format('{0}/{1}', parameters('functionAppName'), parameters('functionName'))]",
                              "properties": {
                                "config": {
                                  "disabled": false,
                                  "bindings": [
                                    {
                                      "name": "Timer",
                                      "type": "timerTrigger",
                                      "direction": "in",
                                      "schedule": "[parameters('schedule')]"
                                    }
                                  ]
                                },
                                "files": "[parameters('files')]"
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Resources/deployments', format('IncreaseQuotaFunctionApp_{0}', parameters('timeStamp')))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "storageAccountResourceIds": {
                      "type": "array",
                      "copy": {
                        "count": "[length(range(0, parameters('storageCount')))]",
                        "input": "[resourceId('Microsoft.Storage/storageAccounts', format('{0}{1}', parameters('storageAccountNamePrefix'), string(padLeft(add(range(0, parameters('storageCount'))[range(0, parameters('storageCount'))[copyIndex()]], parameters('storageIndex')), 2, '0'))))]"
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupStorage')), 'Microsoft.Resources/deployments', format('CustomerManagedKeys_{0}', parameters('timeStamp')))]"
              ]
            }
          ],
          "outputs": {
            "netAppVolumeResourceIds": {
              "type": "array",
              "value": "[if(equals(parameters('storageSolution'), 'AzureNetAppFiles'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupStorage')), 'Microsoft.Resources/deployments', format('AzureNetAppFiles_{0}', parameters('timeStamp'))), '2022-09-01').outputs.volumeResourceIds.value, createArray())]"
            },
            "storageAccountResourceIds": {
              "type": "array",
              "value": "[if(equals(parameters('storageSolution'), 'AzureFiles'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupStorage')), 'Microsoft.Resources/deployments', format('AzureFiles_{0}', parameters('timeStamp'))), '2022-09-01').outputs.storageAccountResourceIds.value, createArray())]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('ControlPlane_{0}', parameters('timeStamp')))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('Deployment_Prereqs_{0}', parameters('timeStamp')))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('Management_{0}', parameters('timeStamp')))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('ResourceNames_{0}', parameters('timeStamp')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('SessionHosts_{0}', parameters('timeStamp'))]",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "appGroupSecurityGroups": "[if(equals(parameters('deploymentType'), 'Complete'), createObject('value', map(parameters('appGroupSecurityGroups'), lambda('group', lambdaVariables('group').objectId))), createObject('value', createArray()))]",
          "artifactsContainerUri": {
            "value": "[parameters('artifactsContainerUri')]"
          },
          "artifactsUserAssignedIdentityResourceId": {
            "value": "[parameters('artifactsUserAssignedIdentityResourceId')]"
          },
          "avdInsightsDataCollectionRulesResourceId": "[if(parameters('enableMonitoring'), if(equals(parameters('deploymentType'), 'Complete'), createObject('value', reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Management_{0}', parameters('timeStamp'))), '2022-09-01').outputs.avdInsightsDataCollectionRulesResourceId.value), createObject('value', parameters('existingAVDInsightsDataCollectionRuleResourceId'))), createObject('value', ''))]",
          "availability": {
            "value": "[parameters('availability')]"
          },
          "availabilitySetNamePrefix": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('ResourceNames_{0}', parameters('timeStamp'))), '2022-09-01').outputs.availabilitySetNamePrefix.value]"
          },
          "availabilitySetsCount": {
            "value": "[variables('availabilitySetsCount')]"
          },
          "availabilitySetsIndex": {
            "value": "[variables('beginAvSetRange')]"
          },
          "availabilityZones": {
            "value": "[parameters('availabilityZones')]"
          },
          "azureBackupPrivateDnsZoneResourceId": {
            "value": "[parameters('azureBackupPrivateDnsZoneResourceId')]"
          },
          "azureBlobPrivateDnsZoneResourceId": {
            "value": "[parameters('azureBlobPrivateDnsZoneResourceId')]"
          },
          "azureQueuePrivateDnsZoneResourceId": {
            "value": "[parameters('azureQueuePrivateDnsZoneResourceId')]"
          },
          "confidentialVMOrchestratorObjectId": {
            "value": "[parameters('confidentialVMOrchestratorObjectId')]"
          },
          "confidentialVMOSDiskEncryption": {
            "value": "[parameters('confidentialVMOSDiskEncryption')]"
          },
          "customImageResourceId": {
            "value": "[parameters('customImageResourceId')]"
          },
          "dataCollectionEndpointResourceId": "[if(parameters('enableMonitoring'), if(equals(parameters('deploymentType'), 'Complete'), createObject('value', reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Management_{0}', parameters('timeStamp'))), '2022-09-01').outputs.dataCollectionEndpointResourceId.value), createObject('value', parameters('existingDataCollectionEndpointResourceId'))), createObject('value', ''))]",
          "dedicatedHostGroupResourceId": {
            "value": "[parameters('dedicatedHostGroupResourceId')]"
          },
          "dedicatedHostGroupZones": "[if(not(empty(variables('dedicatedHostGroupName'))), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('dedicatedHostRG')), 'Microsoft.Compute/hostGroups', variables('dedicatedHostGroupName')), '2024-11-01', 'full').zones), createObject('value', createArray()))]",
          "dedicatedHostResourceId": {
            "value": "[parameters('dedicatedHostResourceId')]"
          },
          "deployDiskAccessPolicy": {
            "value": "[parameters('deployDiskAccessPolicy')]"
          },
          "deployDiskAccessResource": {
            "value": "[variables('deployDiskAccessResource')]"
          },
          "deploymentType": {
            "value": "[parameters('deploymentType')]"
          },
          "deploymentUserAssignedIdentityClientId": "[if(and(equals(parameters('deploymentType'), 'Complete'), parameters('confidentialVMOSDiskEncryption')), createObject('value', reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Deployment_Prereqs_{0}', parameters('timeStamp'))), '2022-09-01').outputs.deploymentUserAssignedIdentityClientId.value), createObject('value', ''))]",
          "deploymentVirtualMachineName": "[if(and(equals(parameters('deploymentType'), 'Complete'), parameters('confidentialVMOSDiskEncryption')), createObject('value', reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Deployment_Prereqs_{0}', parameters('timeStamp'))), '2022-09-01').outputs.virtualMachineName.value), createObject('value', ''))]",
          "diskAccessName": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('ResourceNames_{0}', parameters('timeStamp'))), '2022-09-01').outputs.diskAccessName.value]"
          },
          "diskEncryptionSetNames": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('ResourceNames_{0}', parameters('timeStamp'))), '2022-09-01').outputs.diskEncryptionSetNames.value]"
          },
          "diskSizeGB": {
            "value": "[parameters('diskSizeGB')]"
          },
          "diskSku": {
            "value": "[parameters('diskSku')]"
          },
          "divisionRemainderValue": {
            "value": "[variables('divisionRemainderValue')]"
          },
          "domainJoinUserPassword": "[if(contains(parameters('identitySolution'), 'DomainServices'), if(not(empty(parameters('domainJoinUserPassword'))), createObject('value', parameters('domainJoinUserPassword')), if(not(empty(parameters('credentialsKeyVaultResourceId'))), createObject('reference', createObject('keyVault', createObject('id', extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('credentialsKeyVaultResourceId'), '/')[2], split(parameters('credentialsKeyVaultResourceId'), '/')[4]), 'Microsoft.KeyVault/vaults', last(split(parameters('credentialsKeyVaultResourceId'), '/')))), 'secretName', 'DomainJoinUserPassword')), createObject('value', ''))), createObject('value', ''))]",
          "domainJoinUserPrincipalName": "[if(contains(parameters('identitySolution'), 'DomainServices'), if(not(empty(parameters('domainJoinUserPrincipalName'))), createObject('value', parameters('domainJoinUserPrincipalName')), if(not(empty(parameters('credentialsKeyVaultResourceId'))), createObject('reference', createObject('keyVault', createObject('id', extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('credentialsKeyVaultResourceId'), '/')[2], split(parameters('credentialsKeyVaultResourceId'), '/')[4]), 'Microsoft.KeyVault/vaults', last(split(parameters('credentialsKeyVaultResourceId'), '/')))), 'secretName', 'DomainJoinUserPrincipalName')), createObject('value', ''))), createObject('value', ''))]",
          "domainName": {
            "value": "[parameters('domainName')]"
          },
          "enableAcceleratedNetworking": {
            "value": "[parameters('enableAcceleratedNetworking')]"
          },
          "enableMonitoring": {
            "value": "[parameters('enableMonitoring')]"
          },
          "encryptionAtHost": {
            "value": "[parameters('encryptionAtHost')]"
          },
          "encryptionKeyName": "[if(parameters('confidentialVMOSDiskEncryption'), createObject('value', reference(subscriptionResourceId('Microsoft.Resources/deployments', format('ResourceNames_{0}', parameters('timeStamp'))), '2022-09-01').outputs.encryptionKeyNames.value.confidentialVMs), createObject('value', reference(subscriptionResourceId('Microsoft.Resources/deployments', format('ResourceNames_{0}', parameters('timeStamp'))), '2022-09-01').outputs.encryptionKeyNames.value.virtualMachines))]",
          "encryptionKeyVaultResourceId": "[if(equals(parameters('deploymentType'), 'Complete'), createObject('value', reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Management_{0}', parameters('timeStamp'))), '2022-09-01').outputs.encryptionKeyVaultResourceId.value), createObject('value', ''))]",
          "encryptionKeyVaultUri": "[if(equals(parameters('deploymentType'), 'Complete'), createObject('value', reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Management_{0}', parameters('timeStamp'))), '2022-09-01').outputs.encryptionKeyVaultUri.value), createObject('value', ''))]",
          "existingDiskAccessResourceId": {
            "value": "[parameters('existingDiskAccessResourceId')]"
          },
          "existingDiskEncryptionSetResourceId": {
            "value": "[parameters('existingDiskEncryptionSetResourceId')]"
          },
          "existingRecoveryServicesVaultResourceId": {
            "value": "[parameters('existingRecoveryServicesVaultResourceId')]"
          },
          "fslogixConfigureSessionHosts": {
            "value": "[parameters('fslogixConfigureSessionHosts')]"
          },
          "fslogixContainerType": {
            "value": "[parameters('fslogixContainerType')]"
          },
          "fslogixFileShareNames": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('ResourceNames_{0}', parameters('timeStamp'))), '2022-09-01').outputs.fslogixFileShareNames.value[parameters('fslogixContainerType')]]"
          },
          "fslogixLocalStorageAccountResourceIds": "[if(and(equals(parameters('deploymentType'), 'Complete'), parameters('deployFSLogixStorage')), createObject('value', reference(subscriptionResourceId('Microsoft.Resources/deployments', format('FSLogix_{0}', parameters('timeStamp'))), '2022-09-01').outputs.storageAccountResourceIds.value), createObject('value', parameters('fslogixExistingLocalStorageAccountResourceIds')))]",
          "fslogixLocalNetAppVolumeResourceIds": "[if(and(equals(parameters('deploymentType'), 'Complete'), parameters('deployFSLogixStorage')), createObject('value', reference(subscriptionResourceId('Microsoft.Resources/deployments', format('FSLogix_{0}', parameters('timeStamp'))), '2022-09-01').outputs.netAppVolumeResourceIds.value), createObject('value', parameters('fslogixExistingLocalNetAppVolumeResourceIds')))]",
          "fslogixOSSGroups": "[if(equals(parameters('fslogixShardOptions'), 'ShardOSS'), createObject('value', map(parameters('fslogixUserGroups'), lambda('group', lambdaVariables('group').displayName))), createObject('value', createArray()))]",
          "fslogixRemoteNetAppVolumeResourceIds": {
            "value": "[parameters('fslogixExistingRemoteNetAppVolumeResourceIds')]"
          },
          "fslogixRemoteStorageAccountResourceIds": {
            "value": "[parameters('fslogixExistingRemoteStorageAccountResourceIds')]"
          },
          "fslogixStorageService": {
            "value": "[split(parameters('fslogixStorageService'), ' ')[0]]"
          },
          "hibernationEnabled": {
            "value": "[parameters('hibernationEnabled')]"
          },
          "hostPoolResourceId": "[if(equals(parameters('deploymentType'), 'Complete'), createObject('value', reference(subscriptionResourceId('Microsoft.Resources/deployments', format('ControlPlane_{0}', parameters('timeStamp'))), '2022-09-01').outputs.hostPoolResourceId.value), createObject('value', parameters('existingHostPoolResourceId')))]",
          "identitySolution": {
            "value": "[parameters('identitySolution')]"
          },
          "imageOffer": {
            "value": "[parameters('imageOffer')]"
          },
          "imagePublisher": {
            "value": "[parameters('imagePublisher')]"
          },
          "imageSku": {
            "value": "[parameters('imageSku')]"
          },
          "integrityMonitoring": {
            "value": "[parameters('integrityMonitoring')]"
          },
          "keyExpirationInDays": {
            "value": "[parameters('keyExpirationInDays')]"
          },
          "keyManagementDisks": {
            "value": "[parameters('keyManagementDisks')]"
          },
          "logAnalyticsWorkspaceResourceId": "[if(and(parameters('enableMonitoring'), equals(parameters('deploymentType'), 'Complete')), createObject('value', reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Management_{0}', parameters('timeStamp'))), '2022-09-01').outputs.logAnalyticsWorkspaceResourceId.value), createObject('value', ''))]",
          "location": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('virtualMachineSubnetResourceId'), '/')[2], split(parameters('virtualMachineSubnetResourceId'), '/')[4]), 'Microsoft.Network/virtualNetworks', split(parameters('virtualMachineSubnetResourceId'), '/')[8]), '2023-04-01', 'full').location]"
          },
          "maxResourcesPerTemplateDeployment": {
            "value": "[variables('maxResourcesPerTemplateDeployment')]"
          },
          "osDiskNameConv": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('ResourceNames_{0}', parameters('timeStamp'))), '2022-09-01').outputs.virtualMachineDiskNameConv.value]"
          },
          "ouPath": {
            "value": "[parameters('vmOUPath')]"
          },
          "pooledHostPool": "[if(equals(split(parameters('hostPoolType'), ' ')[0], 'Pooled'), createObject('value', true()), createObject('value', false()))]",
          "privateEndpoint": {
            "value": "[parameters('deployPrivateEndpoints')]"
          },
          "privateEndpointNameConv": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('ResourceNames_{0}', parameters('timeStamp'))), '2022-09-01').outputs.privateEndpointNameConv.value]"
          },
          "privateEndpointNICNameConv": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('ResourceNames_{0}', parameters('timeStamp'))), '2022-09-01').outputs.privateEndpointNICNameConv.value]"
          },
          "privateEndpointSubnetResourceId": {
            "value": "[parameters('hostPoolResourcesPrivateEndpointSubnetResourceId')]"
          },
          "networkInterfaceNameConv": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('ResourceNames_{0}', parameters('timeStamp'))), '2022-09-01').outputs.virtualMachineNicNameConv.value]"
          },
          "recoveryServices": "[if(equals(parameters('deploymentType'), 'Complete'), if(contains(parameters('hostPoolType'), 'Personal'), createObject('value', parameters('recoveryServices')), createObject('value', false())), createObject('value', parameters('recoveryServices')))]",
          "recoveryServicesVaultName": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('ResourceNames_{0}', parameters('timeStamp'))), '2022-09-01').outputs.recoveryServicesVaultNames.value.virtualMachines]"
          },
          "resourceGroupHosts": "[if(equals(parameters('deploymentType'), 'Complete'), createObject('value', reference(subscriptionResourceId('Microsoft.Resources/deployments', format('ResourceNames_{0}', parameters('timeStamp'))), '2022-09-01').outputs.resourceGroupHosts.value), createObject('value', parameters('existingHostsResourceGroupName')))]",
          "resourceGroupDeployment": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('ResourceNames_{0}', parameters('timeStamp'))), '2022-09-01').outputs.resourceGroupDeployment.value]"
          },
          "securityDataCollectionRulesResourceId": {
            "value": "[parameters('securityDataCollectionRulesResourceId')]"
          },
          "securityType": {
            "value": "[parameters('securityType')]"
          },
          "secureBootEnabled": {
            "value": "[parameters('secureBootEnabled')]"
          },
          "sessionHostBatchCount": {
            "value": "[variables('sessionHostBatchCount')]"
          },
          "sessionHostCustomizations": {
            "value": "[parameters('sessionHostCustomizations')]"
          },
          "sessionHostIndex": {
            "value": "[parameters('sessionHostIndex')]"
          },
          "sessionHostRegistrationDSCUrl": {
            "value": "[variables('sessionHostRegistrationDSCUrl')]"
          },
          "storageSuffix": {
            "value": "[environment().suffixes.storage]"
          },
          "subnetResourceId": {
            "value": "[parameters('virtualMachineSubnetResourceId')]"
          },
          "tags": {
            "value": "[variables('hostTags')]"
          },
          "timeStamp": {
            "value": "[parameters('timeStamp')]"
          },
          "timeZone": {
            "value": "[parameters('virtualMachinesTimeZone')]"
          },
          "useAgentDownloadEndpoint": {
            "value": "[parameters('useAgentDownloadEndpoint')]"
          },
          "virtualMachineAdminPassword": "[if(not(empty(parameters('credentialsKeyVaultResourceId'))), createObject('reference', createObject('keyVault', createObject('id', extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('credentialsKeyVaultResourceId'), '/')[2], split(parameters('credentialsKeyVaultResourceId'), '/')[4]), 'Microsoft.KeyVault/vaults', last(split(parameters('credentialsKeyVaultResourceId'), '/')))), 'secretName', 'VirtualMachineAdminPassword')), createObject('value', parameters('virtualMachineAdminPassword')))]",
          "virtualMachineAdminUserName": "[if(not(empty(parameters('credentialsKeyVaultResourceId'))), createObject('reference', createObject('keyVault', createObject('id', extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('credentialsKeyVaultResourceId'), '/')[2], split(parameters('credentialsKeyVaultResourceId'), '/')[4]), 'Microsoft.KeyVault/vaults', last(split(parameters('credentialsKeyVaultResourceId'), '/')))), 'secretName', 'VirtualMachineAdminUserName')), createObject('value', parameters('virtualMachineAdminUserName')))]",
          "virtualMachineNameConv": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('ResourceNames_{0}', parameters('timeStamp'))), '2022-09-01').outputs.virtualMachineNameConv.value]"
          },
          "virtualMachineNamePrefix": {
            "value": "[parameters('virtualMachineNamePrefix')]"
          },
          "virtualMachineSize": {
            "value": "[parameters('virtualMachineSize')]"
          },
          "vmInsightsDataCollectionRulesResourceId": "[if(parameters('enableMonitoring'), if(equals(parameters('deploymentType'), 'Complete'), createObject('value', reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Management_{0}', parameters('timeStamp'))), '2022-09-01').outputs.vmInsightsDataCollectionRulesResourceId.value), createObject('value', parameters('existingVMInsightsDataCollectionRuleResourceId'))), createObject('value', ''))]",
          "vTpmEnabled": {
            "value": "[parameters('vTpmEnabled')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.1.42791",
              "templateHash": "12273460025738825898"
            }
          },
          "parameters": {
            "deploymentType": {
              "type": "string"
            },
            "appGroupSecurityGroups": {
              "type": "array"
            },
            "artifactsContainerUri": {
              "type": "string"
            },
            "artifactsUserAssignedIdentityResourceId": {
              "type": "string"
            },
            "availability": {
              "type": "string"
            },
            "availabilitySetNamePrefix": {
              "type": "string"
            },
            "availabilitySetsCount": {
              "type": "int"
            },
            "availabilitySetsIndex": {
              "type": "int"
            },
            "availabilityZones": {
              "type": "array"
            },
            "avdInsightsDataCollectionRulesResourceId": {
              "type": "string"
            },
            "azureBackupPrivateDnsZoneResourceId": {
              "type": "string"
            },
            "azureBlobPrivateDnsZoneResourceId": {
              "type": "string"
            },
            "azureQueuePrivateDnsZoneResourceId": {
              "type": "string"
            },
            "confidentialVMOrchestratorObjectId": {
              "type": "string"
            },
            "confidentialVMOSDiskEncryption": {
              "type": "bool"
            },
            "customImageResourceId": {
              "type": "string"
            },
            "dataCollectionEndpointResourceId": {
              "type": "string"
            },
            "dedicatedHostGroupResourceId": {
              "type": "string"
            },
            "dedicatedHostGroupZones": {
              "type": "array"
            },
            "dedicatedHostResourceId": {
              "type": "string"
            },
            "deployDiskAccessPolicy": {
              "type": "bool"
            },
            "deployDiskAccessResource": {
              "type": "bool"
            },
            "deploymentUserAssignedIdentityClientId": {
              "type": "string"
            },
            "deploymentVirtualMachineName": {
              "type": "string"
            },
            "domainJoinUserPassword": {
              "type": "securestring"
            },
            "domainJoinUserPrincipalName": {
              "type": "securestring"
            },
            "diskEncryptionSetNames": {
              "type": "object"
            },
            "diskAccessName": {
              "type": "string"
            },
            "diskSizeGB": {
              "type": "int"
            },
            "diskSku": {
              "type": "string"
            },
            "divisionRemainderValue": {
              "type": "int"
            },
            "domainName": {
              "type": "string"
            },
            "enableAcceleratedNetworking": {
              "type": "bool"
            },
            "encryptionAtHost": {
              "type": "bool"
            },
            "encryptionKeyName": {
              "type": "string"
            },
            "encryptionKeyVaultResourceId": {
              "type": "string"
            },
            "encryptionKeyVaultUri": {
              "type": "string"
            },
            "existingDiskAccessResourceId": {
              "type": "string"
            },
            "existingDiskEncryptionSetResourceId": {
              "type": "string"
            },
            "existingRecoveryServicesVaultResourceId": {
              "type": "string"
            },
            "fslogixFileShareNames": {
              "type": "array"
            },
            "fslogixConfigureSessionHosts": {
              "type": "bool"
            },
            "fslogixContainerType": {
              "type": "string"
            },
            "fslogixLocalNetAppVolumeResourceIds": {
              "type": "array"
            },
            "fslogixLocalStorageAccountResourceIds": {
              "type": "array"
            },
            "fslogixOSSGroups": {
              "type": "array"
            },
            "fslogixRemoteNetAppVolumeResourceIds": {
              "type": "array"
            },
            "fslogixRemoteStorageAccountResourceIds": {
              "type": "array"
            },
            "fslogixStorageService": {
              "type": "string"
            },
            "hibernationEnabled": {
              "type": "bool"
            },
            "hostPoolResourceId": {
              "type": "string"
            },
            "identitySolution": {
              "type": "string"
            },
            "imageOffer": {
              "type": "string"
            },
            "imagePublisher": {
              "type": "string"
            },
            "imageSku": {
              "type": "string"
            },
            "integrityMonitoring": {
              "type": "bool"
            },
            "keyExpirationInDays": {
              "type": "int"
            },
            "keyManagementDisks": {
              "type": "string"
            },
            "location": {
              "type": "string"
            },
            "logAnalyticsWorkspaceResourceId": {
              "type": "string"
            },
            "maxResourcesPerTemplateDeployment": {
              "type": "int"
            },
            "privateEndpoint": {
              "type": "bool"
            },
            "privateEndpointNameConv": {
              "type": "string"
            },
            "privateEndpointNICNameConv": {
              "type": "string"
            },
            "privateEndpointSubnetResourceId": {
              "type": "string"
            },
            "enableMonitoring": {
              "type": "bool"
            },
            "networkInterfaceNameConv": {
              "type": "string"
            },
            "osDiskNameConv": {
              "type": "string"
            },
            "ouPath": {
              "type": "string"
            },
            "pooledHostPool": {
              "type": "bool"
            },
            "recoveryServices": {
              "type": "bool"
            },
            "recoveryServicesVaultName": {
              "type": "string"
            },
            "resourceGroupDeployment": {
              "type": "string"
            },
            "resourceGroupHosts": {
              "type": "string"
            },
            "secureBootEnabled": {
              "type": "bool"
            },
            "securityDataCollectionRulesResourceId": {
              "type": "string"
            },
            "securityType": {
              "type": "string"
            },
            "sessionHostBatchCount": {
              "type": "int"
            },
            "sessionHostCustomizations": {
              "type": "array"
            },
            "sessionHostRegistrationDSCUrl": {
              "type": "string"
            },
            "sessionHostIndex": {
              "type": "int"
            },
            "storageSuffix": {
              "type": "string"
            },
            "subnetResourceId": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            },
            "timeStamp": {
              "type": "string"
            },
            "timeZone": {
              "type": "string"
            },
            "useAgentDownloadEndpoint": {
              "type": "bool"
            },
            "virtualMachineNameConv": {
              "type": "string"
            },
            "virtualMachineNamePrefix": {
              "type": "string"
            },
            "virtualMachineSize": {
              "type": "string"
            },
            "virtualMachineAdminPassword": {
              "type": "securestring"
            },
            "virtualMachineAdminUserName": {
              "type": "securestring"
            },
            "vTpmEnabled": {
              "type": "bool"
            },
            "vmInsightsDataCollectionRulesResourceId": {
              "type": "string"
            }
          },
          "variables": {
            "backupPolicyName": "AvdPolicyVm",
            "confidentialVMOSDiskEncryptionType": "[if(parameters('confidentialVMOSDiskEncryption'), 'DiskWithVMGuestState', 'VMGuestStateOnly')]",
            "localNetAppProfileContainerVolumeResourceIds": "[if(not(empty(parameters('fslogixLocalNetAppVolumeResourceIds'))), filter(parameters('fslogixLocalNetAppVolumeResourceIds'), lambda('id', contains(lambdaVariables('id'), parameters('fslogixFileShareNames')[0]))), createArray())]",
            "localNetAppOfficeContainerVolumeResourceIds": "[if(and(not(empty(parameters('fslogixLocalNetAppVolumeResourceIds'))), greater(length(parameters('fslogixFileShareNames')), 1)), filter(parameters('fslogixLocalNetAppVolumeResourceIds'), lambda('id', contains(lambdaVariables('id'), parameters('fslogixFileShareNames')[1]))), createArray())]",
            "sortedLocalNetAppResourceIds": "[union(variables('localNetAppProfileContainerVolumeResourceIds'), variables('localNetAppOfficeContainerVolumeResourceIds'))]",
            "remoteNetAppProfileContainerVolumeResourceIds": "[if(not(empty(parameters('fslogixRemoteNetAppVolumeResourceIds'))), filter(parameters('fslogixRemoteNetAppVolumeResourceIds'), lambda('id', contains(lambdaVariables('id'), parameters('fslogixFileShareNames')[0]))), createArray())]",
            "remoteNetAppOfficeContainerVolumeResourceIds": "[if(and(not(empty(parameters('fslogixRemoteNetAppVolumeResourceIds'))), greater(length(parameters('fslogixFileShareNames')), 1)), filter(parameters('fslogixRemoteNetAppVolumeResourceIds'), lambda('id', not(contains(lambdaVariables('id'), parameters('fslogixFileShareNames')[0])))), createArray())]",
            "sortedRemoteNetAppResourceIds": "[union(variables('remoteNetAppProfileContainerVolumeResourceIds'), variables('remoteNetAppOfficeContainerVolumeResourceIds'))]",
            "backupPrivateDNSZoneResourceIds": [
              "[parameters('azureBackupPrivateDnsZoneResourceId')]",
              "[parameters('azureBlobPrivateDnsZoneResourceId')]",
              "[parameters('azureQueuePrivateDnsZoneResourceId')]"
            ],
            "nonEmptyBackupPrivateDNSZoneResourceIds": "[filter(variables('backupPrivateDNSZoneResourceIds'), lambda('zone', not(empty(lambdaVariables('zone')))))]"
          },
          "resources": [
            {
              "copy": {
                "name": "roleAssignment_VirtualMachineUserLogin",
                "count": "[length(range(0, length(parameters('appGroupSecurityGroups'))))]"
              },
              "condition": "[and(equals(parameters('deploymentType'), 'Complete'), not(contains(parameters('identitySolution'), 'DomainServices')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('RA-Hosts-VMLoginUser-{0}_{1}', range(0, length(parameters('appGroupSecurityGroups')))[copyIndex()], parameters('timeStamp'))]",
              "resourceGroup": "[parameters('resourceGroupHosts')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "principalId": {
                    "value": "[parameters('appGroupSecurityGroups')[range(0, length(parameters('appGroupSecurityGroups')))[copyIndex()]]]"
                  },
                  "principalType": {
                    "value": "Group"
                  },
                  "roleDefinitionId": {
                    "value": "fb879df8-f326-4884-b1cf-06f3ad86be52"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.36.1.42791",
                      "templateHash": "7171613509360905345"
                    }
                  },
                  "parameters": {
                    "roleDefinitionId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. You can provide either the role definition GUID or its fully qualified ID in the following format: \\'/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11\\'.\nYou can find the GUIDs in the ID column on the table at https://learn.microsoft.com/en-us/azure/role-based-access-control/built-in-roles.\n"
                      }
                    },
                    "principalId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The Principal or Object ID of the Security Principal (User, Group, Service Principal, Managed Identity)."
                      }
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().name]",
                      "metadata": {
                        "description": "Optional. Name of the Resource Group to assign the RBAC role to. If not provided, will use the current scope for deployment."
                      }
                    },
                    "subscriptionId": {
                      "type": "string",
                      "defaultValue": "[subscription().subscriptionId]",
                      "metadata": {
                        "description": "Optional. Subscription ID of the subscription to assign the RBAC role to. If not provided, will use the current scope for deployment."
                      }
                    },
                    "principalType": {
                      "type": "string",
                      "defaultValue": "",
                      "allowedValues": [
                        "ServicePrincipal",
                        "Group",
                        "User",
                        "ForeignGroup",
                        "Device",
                        ""
                      ],
                      "metadata": {
                        "description": "Optional. The principal type of the assigned principal ID."
                      }
                    }
                  },
                  "variables": {
                    "roleDefinitionIdVar": "[if(contains(parameters('roleDefinitionId'), '/providers/Microsoft.Authorization/roleDefinitions/'), parameters('roleDefinitionId'), format('/providers/Microsoft.Authorization/roleDefinitions/{0}', parameters('roleDefinitionId')))]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "name": "[guid(parameters('subscriptionId'), parameters('resourceGroupName'), variables('roleDefinitionIdVar'), parameters('principalId'))]",
                      "properties": {
                        "roleDefinitionId": "[variables('roleDefinitionIdVar')]",
                        "principalId": "[parameters('principalId')]",
                        "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]"
                      }
                    }
                  ],
                  "outputs": {
                    "resourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Authorization/roleAssignments', guid(parameters('subscriptionId'), parameters('resourceGroupName'), variables('roleDefinitionIdVar'), parameters('principalId')))]"
                    }
                  }
                }
              }
            },
            {
              "condition": "[not(equals(parameters('deploymentType'), 'Complete'))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('HostPoolRegistrationTokenUpdate_{0}', parameters('timeStamp'))]",
              "resourceGroup": "[split(parameters('hostPoolResourceId'), '/')[4]]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "hostPoolType": "[if(not(equals(parameters('deploymentType'), 'Complete')), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, split(parameters('hostPoolResourceId'), '/')[4]), 'Microsoft.DesktopVirtualization/hostPools', last(split(parameters('hostPoolResourceId'), '/'))), '2023-09-05').hostPoolType), createObject('value', ''))]",
                  "loadBalancerType": "[if(not(equals(parameters('deploymentType'), 'Complete')), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, split(parameters('hostPoolResourceId'), '/')[4]), 'Microsoft.DesktopVirtualization/hostPools', last(split(parameters('hostPoolResourceId'), '/'))), '2023-09-05').loadBalancerType), createObject('value', ''))]",
                  "location": "[if(not(equals(parameters('deploymentType'), 'Complete')), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, split(parameters('hostPoolResourceId'), '/')[4]), 'Microsoft.DesktopVirtualization/hostPools', last(split(parameters('hostPoolResourceId'), '/'))), '2023-09-05', 'full').location), createObject('value', parameters('location')))]",
                  "name": "[if(not(equals(parameters('deploymentType'), 'Complete')), createObject('value', last(split(parameters('hostPoolResourceId'), '/'))), createObject('value', ''))]",
                  "preferredAppGroupType": "[if(not(equals(parameters('deploymentType'), 'Complete')), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, split(parameters('hostPoolResourceId'), '/')[4]), 'Microsoft.DesktopVirtualization/hostPools', last(split(parameters('hostPoolResourceId'), '/'))), '2023-09-05').preferredAppGroupType), createObject('value', ''))]"
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.36.1.42791",
                      "templateHash": "5745815579004315288"
                    }
                  },
                  "parameters": {
                    "hostPoolType": {
                      "type": "string"
                    },
                    "loadBalancerType": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "preferredAppGroupType": {
                      "type": "string"
                    },
                    "time": {
                      "type": "string",
                      "defaultValue": "[utcNow()]"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.DesktopVirtualization/hostPools",
                      "apiVersion": "2024-04-03",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "hostPoolType": "[parameters('hostPoolType')]",
                        "loadBalancerType": "[parameters('loadBalancerType')]",
                        "preferredAppGroupType": "[parameters('preferredAppGroupType')]",
                        "registrationInfo": {
                          "expirationTime": "[dateTimeAdd(parameters('time'), 'PT2H')]",
                          "registrationTokenOperation": "Update"
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "resourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.DesktopVirtualization/hostPools', parameters('name'))]"
                    }
                  }
                }
              }
            },
            {
              "condition": "[and(parameters('deployDiskAccessResource'), equals(parameters('deploymentType'), 'Complete'))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('DiskAccess_{0}', parameters('timeStamp'))]",
              "resourceGroup": "[parameters('resourceGroupHosts')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[parameters('diskAccessName')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "privateEndpoints": {
                    "value": [
                      {
                        "customNetworkInterfaceName": "[replace(replace(replace(parameters('privateEndpointNICNameConv'), 'SUBRESOURCE', 'disks'), 'RESOURCE', parameters('diskAccessName')), 'VNETID', format('{0}', split(parameters('privateEndpointSubnetResourceId'), '/')[8]))]",
                        "name": "[replace(replace(replace(parameters('privateEndpointNameConv'), 'SUBRESOURCE', 'disks'), 'RESOURCE', parameters('diskAccessName')), 'VNETID', format('{0}', split(parameters('privateEndpointSubnetResourceId'), '/')[8]))]",
                        "privateDnsZoneGroup": "[if(empty(parameters('azureBlobPrivateDnsZoneResourceId')), null(), createObject('privateDNSResourceIds', createArray(parameters('azureBlobPrivateDnsZoneResourceId'))))]",
                        "service": "disks",
                        "subnetResourceId": "[parameters('privateEndpointSubnetResourceId')]",
                        "tags": "[coalesce(tryGet(parameters('tags'), 'Microsoft.Network/privateEndpoints'), createObject())]"
                      }
                    ]
                  },
                  "tags": {
                    "value": "[union(createObject('cm-resource-parent', parameters('hostPoolResourceId')), coalesce(tryGet(parameters('tags'), 'Microsoft.Compute/diskAccesses'), createObject()))]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.36.1.42791",
                      "templateHash": "17867368270106386096"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "privateEndpoints": {
                      "type": "array"
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {}
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Compute/diskAccesses",
                      "apiVersion": "2021-04-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {}
                    },
                    {
                      "copy": {
                        "name": "diskAccess_privateEndpoints",
                        "count": "[length(parameters('privateEndpoints'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('DiskAccess-PrivateEndpoint-{0}-{1}', copyIndex(), uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "groupIds": {
                            "value": [
                              "[parameters('privateEndpoints')[copyIndex()].service]"
                            ]
                          },
                          "name": {
                            "value": "[coalesce(tryGet(parameters('privateEndpoints')[copyIndex()], 'name'), format('pe-{0}-{1}-{2}', last(split(resourceId('Microsoft.Compute/diskAccesses', parameters('name')), '/')), parameters('privateEndpoints')[copyIndex()].service, copyIndex()))]"
                          },
                          "serviceResourceId": {
                            "value": "[resourceId('Microsoft.Compute/diskAccesses', parameters('name'))]"
                          },
                          "subnetResourceId": {
                            "value": "[parameters('privateEndpoints')[copyIndex()].subnetResourceId]"
                          },
                          "location": {
                            "value": "[coalesce(tryGet(parameters('privateEndpoints')[copyIndex()], 'location'), reference(split(parameters('privateEndpoints')[copyIndex()].subnetResourceId, '/subnets/')[0], '2020-06-01', 'Full').location)]"
                          },
                          "privateDnsZoneGroup": {
                            "value": "[coalesce(tryGet(parameters('privateEndpoints')[copyIndex()], 'privateDnsZoneGroup'), createObject())]"
                          },
                          "tags": {
                            "value": "[coalesce(tryGet(parameters('privateEndpoints')[copyIndex()], 'tags'), createObject())]"
                          },
                          "manualPrivateLinkServiceConnections": {
                            "value": "[coalesce(tryGet(parameters('privateEndpoints')[copyIndex()], 'manualPrivateLinkServiceConnections'), createArray())]"
                          },
                          "customDnsConfigs": {
                            "value": "[coalesce(tryGet(parameters('privateEndpoints')[copyIndex()], 'customDnsConfigs'), createArray())]"
                          },
                          "ipConfigurations": {
                            "value": "[coalesce(tryGet(parameters('privateEndpoints')[copyIndex()], 'ipConfigurations'), createArray())]"
                          },
                          "applicationSecurityGroups": {
                            "value": "[coalesce(tryGet(parameters('privateEndpoints')[copyIndex()], 'applicationSecurityGroups'), createArray())]"
                          },
                          "customNetworkInterfaceName": {
                            "value": "[coalesce(tryGet(parameters('privateEndpoints')[copyIndex()], 'customNetworkInterfaceName'), '')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.36.1.42791",
                              "templateHash": "5820984105601907039"
                            },
                            "name": "Private Endpoints"
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the private endpoint resource to create."
                              }
                            },
                            "subnetResourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
                              }
                            },
                            "serviceResourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Resource ID of the resource that needs to be connected to the network."
                              }
                            },
                            "applicationSecurityGroups": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Application security groups in which the private endpoint IP configuration is included."
                              }
                            },
                            "customNetworkInterfaceName": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The custom name of the network interface attached to the private endpoint."
                              }
                            },
                            "ipConfigurations": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. A list of IP configurations of the private endpoint. This will be used to map to the First Party Service endpoints."
                              }
                            },
                            "groupIds": {
                              "type": "array",
                              "metadata": {
                                "description": "Required. Subtype(s) of the connection to be created. The allowed values depend on the type serviceResourceId refers to."
                              }
                            },
                            "privateDnsZoneGroup": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. The private DNS zone group configuration used to associate the private endpoint with one or multiple private DNS zones. A DNS zone group can support up to 5 DNS zones."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. Location for all Resources."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Tags to be applied on all resources/resource groups in this deployment."
                              }
                            },
                            "customDnsConfigs": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Custom DNS configurations."
                              }
                            },
                            "manualPrivateLinkServiceConnections": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Manual PrivateLink Service Connections."
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/privateEndpoints",
                              "apiVersion": "2023-04-01",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "applicationSecurityGroups": "[parameters('applicationSecurityGroups')]",
                                "customDnsConfigs": "[parameters('customDnsConfigs')]",
                                "customNetworkInterfaceName": "[parameters('customNetworkInterfaceName')]",
                                "ipConfigurations": "[parameters('ipConfigurations')]",
                                "manualPrivateLinkServiceConnections": "[parameters('manualPrivateLinkServiceConnections')]",
                                "privateLinkServiceConnections": [
                                  {
                                    "name": "[parameters('name')]",
                                    "properties": {
                                      "privateLinkServiceId": "[parameters('serviceResourceId')]",
                                      "groupIds": "[parameters('groupIds')]"
                                    }
                                  }
                                ],
                                "subnet": {
                                  "id": "[parameters('subnetResourceId')]"
                                }
                              }
                            },
                            {
                              "condition": "[not(empty(parameters('privateDnsZoneGroup')))]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('PE-PrivateDnsZoneGroup-{0}', uniqueString(deployment().name))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "privateDNSResourceIds": {
                                    "value": "[parameters('privateDnsZoneGroup').privateDNSResourceIds]"
                                  },
                                  "privateEndpointName": {
                                    "value": "[parameters('name')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.36.1.42791",
                                      "templateHash": "7513849818521025348"
                                    }
                                  },
                                  "parameters": {
                                    "privateEndpointName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent private endpoint. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "privateDNSResourceIds": {
                                      "type": "array",
                                      "minLength": 1,
                                      "maxLength": 5,
                                      "metadata": {
                                        "description": "Required. Array of private DNS zone resource IDs. A DNS zone group can support up to 5 DNS zones."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "defaultValue": "default",
                                      "metadata": {
                                        "description": "Optional. The name of the private DNS zone group."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "copy": [
                                      {
                                        "name": "privateDnsZoneConfigs",
                                        "count": "[length(parameters('privateDNSResourceIds'))]",
                                        "input": {
                                          "name": "[last(split(parameters('privateDNSResourceIds')[copyIndex('privateDnsZoneConfigs')], '/'))]",
                                          "properties": {
                                            "privateDnsZoneId": "[parameters('privateDNSResourceIds')[copyIndex('privateDnsZoneConfigs')]]"
                                          }
                                        }
                                      }
                                    ]
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                                      "apiVersion": "2023-04-01",
                                      "name": "[format('{0}/{1}', parameters('privateEndpointName'), parameters('name'))]",
                                      "properties": {
                                        "privateDnsZoneConfigs": "[variables('privateDnsZoneConfigs')]"
                                      }
                                    }
                                  ],
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the private endpoint DNS zone group."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the private endpoint DNS zone group."
                                      },
                                      "value": "[resourceId('Microsoft.Network/privateEndpoints/privateDnsZoneGroups', parameters('privateEndpointName'), parameters('name'))]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group the private endpoint was deployed into."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the private endpoint."
                              },
                              "value": "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the private endpoint."
                              },
                              "value": "[parameters('name')]"
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "The location the resource was deployed into."
                              },
                              "value": "[reference(resourceId('Microsoft.Network/privateEndpoints', parameters('name')), '2023-04-01', 'full').location]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/diskAccesses', parameters('name'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "resourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Compute/diskAccesses', parameters('name'))]"
                    }
                  }
                }
              }
            },
            {
              "condition": "[parameters('deployDiskAccessPolicy')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('ManagedDisks_NetworkAccess_Policy_{0}', parameters('timeStamp'))]",
              "location": "[deployment().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "diskAccessId": "[if(parameters('deployDiskAccessResource'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupHosts')), 'Microsoft.Resources/deployments', format('DiskAccess_{0}', parameters('timeStamp'))), '2022-09-01').outputs.resourceId.value), createObject('value', ''))]",
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "resourceGroupName": {
                    "value": "[parameters('resourceGroupHosts')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.36.1.42791",
                      "templateHash": "17320165060796321031"
                    }
                  },
                  "parameters": {
                    "diskAccessId": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "resourceGroupName": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "parameters": "[if(not(empty(parameters('diskAccessId'))), createObject('diskAccessId', createObject('type', 'String', 'metadata', createObject('displayName', 'Disk Access Resource Id', 'description', 'The resource Id of the Disk Access to associate to the managed disks.'))), createObject())]",
                    "operations": "[if(not(empty(parameters('diskAccessId'))), createArray(createObject('operation', 'addOrReplace', 'field', 'Microsoft.Compute/disks/networkAccessPolicy', 'value', 'AllowPrivate'), createObject('operation', 'addOrReplace', 'field', 'Microsoft.Compute/disks/publicNetworkAccess', 'value', 'Disabled'), createObject('operation', 'addOrReplace', 'field', 'Microsoft.Compute/disks/diskAccessId', 'value', '[parameters(''diskAccessId'')]')), createArray(createObject('operation', 'addOrReplace', 'field', 'Microsoft.Compute/disks/networkAccessPolicy', 'value', 'DenyAll'), createObject('operation', 'addOrReplace', 'field', 'Microsoft.Compute/disks/publicNetworkAccess', 'value', 'Disabled')))]",
                    "policyName": "[if(not(empty(parameters('diskAccessId'))), 'DisableDisksPublicNetworkAccess', 'DisableDisksAllNetworkAccess')]",
                    "policyDescription": "[if(not(empty(parameters('diskAccessId'))), 'Disable public network access to managed disks', 'Disable public network access to managed disks, but allow private network access.')]",
                    "policyDisplayName": "[if(not(empty(parameters('diskAccessId'))), 'Disable public network access to managed disks', 'Disable all network access to managed disks')]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Authorization/policyDefinitions",
                      "apiVersion": "2021-06-01",
                      "name": "[variables('policyName')]",
                      "properties": {
                        "description": "[variables('policyDescription')]",
                        "displayName": "[variables('policyDisplayName')]",
                        "mode": "All",
                        "parameters": "[variables('parameters')]",
                        "policyRule": {
                          "if": {
                            "field": "type",
                            "equals": "Microsoft.Compute/disks"
                          },
                          "then": {
                            "effect": "modify",
                            "details": {
                              "roleDefinitionIds": [
                                "/providers/Microsoft.Authorization/roleDefinitions/60fc6e62-5479-42d4-8bf4-67625fcc2840"
                              ],
                              "operations": "[variables('operations')]"
                            }
                          }
                        },
                        "policyType": "Custom"
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "DiskNetworkAccess",
                      "resourceGroup": "[parameters('resourceGroupName')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "diskAccessId": {
                            "value": "[parameters('diskAccessId')]"
                          },
                          "policyDefinitionId": {
                            "value": "[subscriptionResourceId('Microsoft.Authorization/policyDefinitions', variables('policyName'))]"
                          },
                          "policyDisplayName": {
                            "value": "[reference(subscriptionResourceId('Microsoft.Authorization/policyDefinitions', variables('policyName')), '2021-06-01').displayName]"
                          },
                          "policyName": {
                            "value": "[reference(subscriptionResourceId('Microsoft.Authorization/policyDefinitions', variables('policyName')), '2021-06-01').displayName]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.36.1.42791",
                              "templateHash": "1438128517601037907"
                            }
                          },
                          "parameters": {
                            "location": {
                              "type": "string"
                            },
                            "diskAccessId": {
                              "type": "string"
                            },
                            "policyDefinitionId": {
                              "type": "string"
                            },
                            "policyDisplayName": {
                              "type": "string"
                            },
                            "policyName": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Authorization/policyAssignments",
                              "apiVersion": "2022-06-01",
                              "name": "[parameters('policyName')]",
                              "location": "[parameters('location')]",
                              "identity": {
                                "type": "SystemAssigned"
                              },
                              "properties": {
                                "displayName": "[parameters('policyDisplayName')]",
                                "policyDefinitionId": "[parameters('policyDefinitionId')]",
                                "parameters": "[if(not(empty(parameters('diskAccessId'))), createObject('diskAccessId', createObject('value', parameters('diskAccessId'))), createObject())]"
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[subscriptionResourceId('Microsoft.Authorization/policyDefinitions', variables('policyName'))]"
                      ]
                    }
                  ]
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupHosts')), 'Microsoft.Resources/deployments', format('DiskAccess_{0}', parameters('timeStamp')))]"
              ]
            },
            {
              "condition": "[and(equals(parameters('deploymentType'), 'Complete'), not(equals(parameters('keyManagementDisks'), 'PlatformManaged')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('Customer_Managed_Keys_{0}', parameters('timeStamp'))]",
              "resourceGroup": "[parameters('resourceGroupHosts')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "confidentialVMOrchestratorObjectId": {
                    "value": "[parameters('confidentialVMOrchestratorObjectId')]"
                  },
                  "confidentialVMOSDiskEncryption": {
                    "value": "[parameters('confidentialVMOSDiskEncryption')]"
                  },
                  "deploymentUserAssignedIdentityClientId": {
                    "value": "[parameters('deploymentUserAssignedIdentityClientId')]"
                  },
                  "deploymentVirtualMachineName": {
                    "value": "[parameters('deploymentVirtualMachineName')]"
                  },
                  "diskEncryptionSetNames": {
                    "value": "[parameters('diskEncryptionSetNames')]"
                  },
                  "hostPoolResourceId": {
                    "value": "[parameters('hostPoolResourceId')]"
                  },
                  "keyExpirationInDays": {
                    "value": "[parameters('keyExpirationInDays')]"
                  },
                  "keyManagementDisks": {
                    "value": "[parameters('keyManagementDisks')]"
                  },
                  "keyName": {
                    "value": "[parameters('encryptionKeyName')]"
                  },
                  "keyVaultResourceId": {
                    "value": "[parameters('encryptionKeyVaultResourceId')]"
                  },
                  "keyVaultUri": {
                    "value": "[parameters('encryptionKeyVaultUri')]"
                  },
                  "resourceGroupDeployment": {
                    "value": "[parameters('resourceGroupDeployment')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "timeStamp": {
                    "value": "[parameters('timeStamp')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.36.1.42791",
                      "templateHash": "7779559782004717402"
                    }
                  },
                  "parameters": {
                    "confidentialVMOSDiskEncryption": {
                      "type": "bool"
                    },
                    "confidentialVMOrchestratorObjectId": {
                      "type": "string"
                    },
                    "deploymentUserAssignedIdentityClientId": {
                      "type": "string"
                    },
                    "keyName": {
                      "type": "string"
                    },
                    "diskEncryptionSetNames": {
                      "type": "object"
                    },
                    "hostPoolResourceId": {
                      "type": "string"
                    },
                    "keyExpirationInDays": {
                      "type": "int",
                      "defaultValue": 180
                    },
                    "keyManagementDisks": {
                      "type": "string"
                    },
                    "keyVaultResourceId": {
                      "type": "string"
                    },
                    "keyVaultUri": {
                      "type": "string"
                    },
                    "deploymentVirtualMachineName": {
                      "type": "string"
                    },
                    "resourceGroupDeployment": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "timeStamp": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "$fxv#0": "[CmdletBinding()]\r\nparam (\r\n    [string]$KeyName,\r\n    [string]$Tags,\r\n    [string]$UserAssignedIdentityClientId,\r\n    [string]$VaultUri\r\n)\r\n\r\n$ErrorActionPreference = 'Stop'\r\n$WarningPreference = 'SilentlyContinue'\r\n\r\n# Fix the Vault URI since only AzureCloud contains a trailing slash\r\n$VaultUriFixed = if($VaultUri[-1] -eq '/'){$VaultUri.Substring(0,$VaultUri.Length - 1)} else {$VaultUri}\r\n\r\n$PolicyContentJson = @\"\r\n{\"version\":\"1.0.0\",\"anyOf\":[{\"authority\":\"https://sharedeus.eus.attest.azure.net/\",\"allOf\":[{\"claim\":\"x-ms-compliance-status\",\"equals\":\"azure-compliant-cvm\"},{\"anyOf\":[{\"claim\":\"x-ms-attestation-type\",\"equals\":\"tdxvm\"},{\"claim\":\"x-ms-attestation-type\",\"equals\":\"sevsnpvm\"}]}]},{\"authority\":\"https://sharedwus.wus.attest.azure.net/\",\"allOf\":[{\"claim\":\"x-ms-compliance-status\",\"equals\":\"azure-compliant-cvm\"},{\"anyOf\":[{\"claim\":\"x-ms-attestation-type\",\"equals\":\"tdxvm\"},{\"claim\":\"x-ms-attestation-type\",\"equals\":\"sevsnpvm\"}]}]},{\"authority\":\"https://sharedneu.neu.attest.azure.net/\",\"allOf\":[{\"claim\":\"x-ms-compliance-status\",\"equals\":\"azure-compliant-cvm\"},{\"anyOf\":[{\"claim\":\"x-ms-attestation-type\",\"equals\":\"tdxvm\"},{\"claim\":\"x-ms-attestation-type\",\"equals\":\"sevsnpvm\"}]}]},{\"authority\":\"https://sharedweu.weu.attest.azure.net/\",\"allOf\":[{\"claim\":\"x-ms-compliance-status\",\"equals\":\"azure-compliant-cvm\"},{\"anyOf\":[{\"claim\":\"x-ms-attestation-type\",\"equals\":\"tdxvm\"},{\"claim\":\"x-ms-attestation-type\",\"equals\":\"sevsnpvm\"}]}]},{\"authority\":\"https://sharedsasia.sasia.attest.azure.net/\",\"allOf\":[{\"claim\":\"x-ms-compliance-status\",\"equals\":\"azure-compliant-cvm\"},{\"anyOf\":[{\"claim\":\"x-ms-attestation-type\",\"equals\":\"tdxvm\"},{\"claim\":\"x-ms-attestation-type\",\"equals\":\"sevsnpvm\"}]}]},{\"authority\":\"https://sharedeasia.easia.attest.azure.net/\",\"allOf\":[{\"claim\":\"x-ms-compliance-status\",\"equals\":\"azure-compliant-cvm\"},{\"anyOf\":[{\"claim\":\"x-ms-attestation-type\",\"equals\":\"tdxvm\"},{\"claim\":\"x-ms-attestation-type\",\"equals\":\"sevsnpvm\"}]}]},{\"authority\":\"https://sharedjpe.jpe.attest.azure.net/\",\"allOf\":[{\"claim\":\"x-ms-compliance-status\",\"equals\":\"azure-compliant-cvm\"},{\"anyOf\":[{\"claim\":\"x-ms-attestation-type\",\"equals\":\"tdxvm\"},{\"claim\":\"x-ms-attestation-type\",\"equals\":\"sevsnpvm\"}]}]},{\"authority\":\"https://sharedswn.swn.attest.azure.net/\",\"allOf\":[{\"claim\":\"x-ms-compliance-status\",\"equals\":\"azure-compliant-cvm\"},{\"anyOf\":[{\"claim\":\"x-ms-attestation-type\",\"equals\":\"tdxvm\"},{\"claim\":\"x-ms-attestation-type\",\"equals\":\"sevsnpvm\"}]}]},{\"authority\":\"https://shareditn.itn.attest.azure.net/\",\"allOf\":[{\"claim\":\"x-ms-compliance-status\",\"equals\":\"azure-compliant-cvm\"},{\"anyOf\":[{\"claim\":\"x-ms-attestation-type\",\"equals\":\"tdxvm\"},{\"claim\":\"x-ms-attestation-type\",\"equals\":\"sevsnpvm\"}]}]},{\"authority\":\"https://sharedeus2.eus2.attest.azure.net/\",\"allOf\":[{\"claim\":\"x-ms-compliance-status\",\"equals\":\"azure-compliant-cvm\"},{\"anyOf\":[{\"claim\":\"x-ms-attestation-type\",\"equals\":\"tdxvm\"},{\"claim\":\"x-ms-attestation-type\",\"equals\":\"sevsnpvm\"}]}]},{\"authority\":\"https://sharedeus2e.eus2e.attest.azure.net/\",\"allOf\":[{\"claim\":\"x-ms-compliance-status\",\"equals\":\"azure-compliant-cvm\"},{\"anyOf\":[{\"claim\":\"x-ms-attestation-type\",\"equals\":\"tdxvm\"},{\"claim\":\"x-ms-attestation-type\",\"equals\":\"sevsnpvm\"}]}]},{\"authority\":\"https://sharedscus.scus.attest.azure.net/\",\"allOf\":[{\"claim\":\"x-ms-compliance-status\",\"equals\":\"azure-compliant-cvm\"},{\"anyOf\":[{\"claim\":\"x-ms-attestation-type\",\"equals\":\"sevsnpvm\"}]}]},{\"authority\":\"https://sharedcuse.cuse.attest.azure.net/\",\"allOf\":[{\"claim\":\"x-ms-compliance-status\",\"equals\":\"azure-compliant-cvm\"},{\"anyOf\":[{\"claim\":\"x-ms-attestation-type\",\"equals\":\"sevsnpvm\"}]}]},{\"authority\":\"https://sharedcus.cus.attest.azure.net/\",\"allOf\":[{\"claim\":\"x-ms-compliance-status\",\"equals\":\"azure-compliant-cvm\"},{\"anyOf\":[{\"claim\":\"x-ms-attestation-type\",\"equals\":\"tdxvm\"},{\"claim\":\"x-ms-attestation-type\",\"equals\":\"sevsnpvm\"}]}]},{\"authority\":\"https://sharedeau.eau.attest.azure.net/\",\"allOf\":[{\"claim\":\"x-ms-compliance-status\",\"equals\":\"azure-compliant-cvm\"},{\"anyOf\":[{\"claim\":\"x-ms-attestation-type\",\"equals\":\"tdxvm\"},{\"claim\":\"x-ms-attestation-type\",\"equals\":\"sevsnpvm\"}]}]},{\"authority\":\"https://sharedsau.sau.attest.azure.net/\",\"allOf\":[{\"claim\":\"x-ms-compliance-status\",\"equals\":\"azure-compliant-cvm\"},{\"anyOf\":[{\"claim\":\"x-ms-attestation-type\",\"equals\":\"tdxvm\"},{\"claim\":\"x-ms-attestation-type\",\"equals\":\"sevsnpvm\"}]}]},{\"authority\":\"https://sharedcin.cin.attest.azure.net/\",\"allOf\":[{\"claim\":\"x-ms-compliance-status\",\"equals\":\"azure-compliant-cvm\"},{\"anyOf\":[{\"claim\":\"x-ms-attestation-type\",\"equals\":\"sevsnpvm\"}]}]},{\"authority\":\"https://shareduaen.uaen.attest.azure.net/\",\"allOf\":[{\"claim\":\"x-ms-compliance-status\",\"equals\":\"azure-compliant-cvm\"},{\"anyOf\":[{\"claim\":\"x-ms-attestation-type\",\"equals\":\"sevsnpvm\"}]}]},{\"authority\":\"https://shareddewc.dewc.attest.azure.net/\",\"allOf\":[{\"claim\":\"x-ms-compliance-status\",\"equals\":\"azure-compliant-cvm\"},{\"anyOf\":[{\"claim\":\"x-ms-attestation-type\",\"equals\":\"sevsnpvm\"}]}]},{\"authority\":\"https://sharedwus3.wus3.attest.azure.net/\",\"allOf\":[{\"claim\":\"x-ms-compliance-status\",\"equals\":\"azure-compliant-cvm\"},{\"anyOf\":[{\"claim\":\"x-ms-attestation-type\",\"equals\":\"tdxvm\"},{\"claim\":\"x-ms-attestation-type\",\"equals\":\"sevsnpvm\"}]}]}]}\r\n\"@\r\nIf ($Tags -ne '{}') {\r\n    [PSCustomObject]$TagsObject = $Tags | ConvertFrom-Json\r\n}\r\ntry \r\n{\r\n    # Get an access token for Azure resources\r\n    $AzureKeyVaultAccessToken = (Invoke-RestMethod `\r\n        -Headers @{Metadata=\"true\"} `\r\n        -Uri $('http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01&resource=' + $VaultUriFixed + '&client_id=' + $UserAssignedIdentityClientId)).access_token\r\n\r\n    # Set header for Azure Management API\r\n    $AzureKeyVaultHeader = @{\r\n        'Content-Type'='application/json'\r\n        'Authorization'='Bearer ' + $AzureKeyVaultAccessToken\r\n    }\r\n\r\n    $Key = (Invoke-RestMethod `\r\n        -Headers $AzureKeyVaultHeader `\r\n        -Method 'GET' `\r\n        -Uri $($VaultUriFixed + '/keys?api-version=7.4')).value | Where-Object { $_.kid -eq \"$VaultUriFixed/keys/$KeyName\" }\r\n        \r\n    If (!$Key) {\r\n        #$PolicyContentJson | ConvertFrom-Json | ConvertTo-Json -Depth 100\r\n        $Release_Policy_Data = [Convert]::ToBase64String([char[]]$PolicyContentJson)\r\n        $Body = (@{\r\n            attributes = @{\r\n                enabled = $true\r\n                exportable = $true\r\n            }\r\n            kty='RSA-HSM'\r\n            key_size=4096\r\n            key_ops=@('encrypt', 'decrypt', 'sign', 'verify', 'wrapKey', 'unwrapKey')\r\n            release_policy=@{\r\n                data=$Release_Policy_Data\r\n            }\r\n        })\r\n        If($TagsObject) {\r\n            $Body.tags = $TagsObject\r\n        }\r\n        $Body = $Body | ConvertTo-Json -Depth 100 -Compress\r\n\r\n        Invoke-RestMethod `\r\n            -Headers $AzureKeyVaultHeader `\r\n            -Method 'POST' `\r\n            -Uri $($VaultUriFixed + '/keys/' + $KeyName + '/create?api-version=7.4') `\r\n            -Body $Body\r\n    }\r\n}\r\ncatch \r\n{\r\n    Write-Error -Message \"Failed to create or retrieve the key from the Key Vault. $_\"\r\n    throw\r\n}",
                    "keyVaultName": "[last(split(parameters('keyVaultResourceId'), '/'))]",
                    "keyVaultResourceGroup": "[split(parameters('keyVaultResourceId'), '/')[4]]",
                    "diskEncryptionSetEncryptionType": "[if(parameters('confidentialVMOSDiskEncryption'), 'ConfidentialVmEncryptedWithCustomerKey', if(not(contains(parameters('keyManagementDisks'), 'Platform')), 'EncryptionAtRestWithCustomerKey', 'EncryptionAtRestWithPlatformAndCustomerKeys'))]"
                  },
                  "resources": [
                    {
                      "condition": "[not(parameters('confidentialVMOSDiskEncryption'))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('Encryption_Key_{0}', parameters('timeStamp'))]",
                      "resourceGroup": "[variables('keyVaultResourceGroup')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "attributesEnabled": {
                            "value": true
                          },
                          "attributesExportable": {
                            "value": false
                          },
                          "keySize": {
                            "value": 4096
                          },
                          "keyVaultName": {
                            "value": "[variables('keyVaultName')]"
                          },
                          "kty": "[if(contains(parameters('keyManagementDisks'), 'HSM'), createObject('value', 'RSA-HSM'), createObject('value', 'RSA'))]",
                          "name": {
                            "value": "[parameters('keyName')]"
                          },
                          "rotationPolicy": {
                            "value": {
                              "attributes": {
                                "expiryTime": "[format('P{0}D', string(parameters('keyExpirationInDays')))]"
                              },
                              "lifetimeActions": [
                                {
                                  "action": {
                                    "type": "Notify"
                                  },
                                  "trigger": {
                                    "timeBeforeExpiry": "P10D"
                                  }
                                },
                                {
                                  "action": {
                                    "type": "Rotate"
                                  },
                                  "trigger": {
                                    "timeAfterCreate": "[format('P{0}D', string(sub(parameters('keyExpirationInDays'), 7)))]"
                                  }
                                }
                              ]
                            }
                          },
                          "tags": {
                            "value": {
                              "cm-resource-parent": "[parameters('hostPoolResourceId')]"
                            }
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.36.1.42791",
                              "templateHash": "1654904861852809717"
                            }
                          },
                          "parameters": {
                            "keyVaultName": {
                              "type": "string"
                            },
                            "name": {
                              "type": "string"
                            },
                            "tags": {
                              "type": "object",
                              "defaultValue": {}
                            },
                            "attributesEnabled": {
                              "type": "bool",
                              "defaultValue": true
                            },
                            "attributesExp": {
                              "type": "int",
                              "defaultValue": -1
                            },
                            "attributesNbf": {
                              "type": "int",
                              "defaultValue": -1
                            },
                            "curveName": {
                              "type": "string",
                              "defaultValue": "P-256"
                            },
                            "attributesExportable": {
                              "type": "bool",
                              "defaultValue": false
                            },
                            "keyOps": {
                              "type": "array",
                              "defaultValue": []
                            },
                            "keySize": {
                              "type": "int",
                              "defaultValue": -1
                            },
                            "kty": {
                              "type": "string",
                              "defaultValue": "EC"
                            },
                            "release_policy": {
                              "type": "object",
                              "defaultValue": {}
                            },
                            "rotationPolicy": {
                              "type": "object",
                              "defaultValue": {}
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.KeyVault/vaults/keys",
                              "apiVersion": "2022-07-01",
                              "name": "[format('{0}/{1}', parameters('keyVaultName'), parameters('name'))]",
                              "tags": "[if(empty(parameters('tags')), null(), parameters('tags'))]",
                              "properties": {
                                "attributes": {
                                  "enabled": "[parameters('attributesEnabled')]",
                                  "exportable": "[parameters('attributesExportable')]",
                                  "exp": "[if(not(equals(parameters('attributesExp'), -1)), parameters('attributesExp'), null())]",
                                  "nbf": "[if(not(equals(parameters('attributesNbf'), -1)), parameters('attributesNbf'), null())]"
                                },
                                "curveName": "[parameters('curveName')]",
                                "keyOps": "[parameters('keyOps')]",
                                "keySize": "[if(not(equals(parameters('keySize'), -1)), parameters('keySize'), null())]",
                                "kty": "[parameters('kty')]",
                                "release_policy": "[if(empty(parameters('release_policy')), null(), parameters('release_policy'))]",
                                "rotationPolicy": "[if(empty(parameters('rotationPolicy')), null(), parameters('rotationPolicy'))]"
                              }
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.KeyVault/vaults/keys', parameters('keyVaultName'), parameters('name'))]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "condition": "[parameters('confidentialVMOSDiskEncryption')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('Set_EncryptionKey_ConfidentialVMOSDisk_{0}', parameters('timeStamp'))]",
                      "resourceGroup": "[parameters('resourceGroupDeployment')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "Set_ConfidentialVM_Key_Disks"
                          },
                          "parameters": {
                            "value": [
                              {
                                "name": "KeyName",
                                "value": "[parameters('keyName')]"
                              },
                              {
                                "name": "Tags",
                                "value": "[string(createObject('cm-resource-parent', parameters('hostPoolResourceId')))]"
                              },
                              {
                                "name": "UserAssignedIdentityClientId",
                                "value": "[parameters('deploymentUserAssignedIdentityClientId')]"
                              },
                              {
                                "name": "VaultUri",
                                "value": "[parameters('keyVaultUri')]"
                              }
                            ]
                          },
                          "script": {
                            "value": "[variables('$fxv#0')]"
                          },
                          "treatFailureAsDeploymentFailure": {
                            "value": true
                          },
                          "virtualMachineName": {
                            "value": "[parameters('deploymentVirtualMachineName')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.36.1.42791",
                              "templateHash": "13086719251832534400"
                            },
                            "name": "Virtual Machine RunCommand",
                            "description": "This module deploys a Virtual Machine Run Command.",
                            "owner": "shawn.meyer@microsoft.com"
                          },
                          "parameters": {
                            "virtualMachineName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
                              }
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the virtual machine extension."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. The location the extension is deployed to."
                              }
                            },
                            "asyncExecution": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional.  If set to true, provisioning will complete as soon as the script starts and will not wait for script to complete."
                              }
                            },
                            "errorBlobManagedIdentity": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. User-assigned managed identity that has access to errorBlobContainerUri storage blob container.\nUse an empty object in case of system-assigned identity. Make sure managed identity has been given access to blob\\'s container with \\'Storage Blob Data Contributor\\' role assignment.\nIn case of user-assigned identity, make sure you add it under VM's identity.\nFor more info on managed identity and Run Command, refer https://aka.ms/ManagedIdentity and https://aka.ms/RunCommandManaged"
                              }
                            },
                            "errorBlobContainerUri": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. \tSpecifies the Azure storage blob where script error stream will be uploaded.\nUse a SAS URI with read, append, create, write access OR use managed identity to provide the VM access to the blob.\nRefer errorBlobManagedIdentity parameter."
                              }
                            },
                            "outputBlobManagedIdentity": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. User-assigned managed identity that has access to outputBlobContainerUri storage blob container.\nUse an empty object in case of system-assigned identity. Make sure managed identity has been given access to blob\\'s container with \\'Storage Blob Data Contributor\\' role assignment.\nIn case of user-assigned identity, make sure you add it under VM's identity.\nFor more info on managed identity and Run Command, refer https://aka.ms/ManagedIdentity and https://aka.ms/RunCommandManaged"
                              }
                            },
                            "outputBlobContainerUri": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. \tSpecifies the Azure storage blob where script error stream will be uploaded.\nUse a SAS URI with read, append, create, write access OR use managed identity to provide the VM access to the blob.\nRefer errorBlobManagedIdentity parameter."
                              }
                            },
                            "parameters": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Parameters used by the script."
                              }
                            },
                            "protectedParameters": {
                              "type": "secureObject",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Protected parameters used by the script. These parameters will not show up in deployment data.\nFormat the object as follows:\n{\n  SecureParameterName1: { value: 'secureParameterValue1'}\n  SecureParameterName2: { value: 'secureParameterValue2'}\n}    \n"
                              }
                            },
                            "runAsPassword": {
                              "type": "securestring",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Specifies the user account password on the VM when executing the run command."
                              }
                            },
                            "runAsUser": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Specifies the user account on the VM when executing the run command."
                              }
                            },
                            "commandId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Conditional. Specifies a commandId of predefined built-in script. Do not use with [script] or [scriptUri] parameters."
                              }
                            },
                            "script": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Specifies the script content to be executed on the VM. Do not use with [commandId] or [scriptUri] parameters."
                              }
                            },
                            "scriptUri": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Specifies the script download location. It can be either SAS URI of an Azure storage blob with read access or public URI.\nDo not use with [commandId] or [script] parameters."
                              }
                            },
                            "scriptUriManagedIdentity": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. User-assigned managed identity that has access to scriptUri in case of Azure storage blob.\nUse an empty object in case of system-assigned identity.\nMake sure the Azure storage blob exists, and managed identity has been given access to blob's container with 'Storage Blob Data Reader' role assignment.\nIn case of user-assigned identity, make sure you add it under VM's identity.\nFor more info on managed identity and Run Command, refer https://aka.ms/ManagedIdentity and https://aka.ms/RunCommandManaged."
                              }
                            },
                            "timeoutInSeconds": {
                              "type": "int",
                              "defaultValue": -1,
                              "metadata": {
                                "description": "Optional. The timeout in seconds to execute the run command."
                              }
                            },
                            "treatFailureAsDeploymentFailure": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Optional. If set to true, any failure in the script will fail the deployment and ProvisioningState will be marked as Failed.\nIf set to false, ProvisioningState would only reflect whether the run command was run or not by the extensions platform, it would not indicate whether script failed in case of script failures.\nSee instance view of run command in case of script failures to see executionMessage, output, error: https://aka.ms/runcommandmanaged#get-execution-status-and-results"
                              }
                            },
                            "tags": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Tags of the resource."
                              }
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "protectedParametersArray",
                                "count": "[length(items(parameters('protectedParameters')))]",
                                "input": {
                                  "name": "[items(parameters('protectedParameters'))[copyIndex('protectedParametersArray')].key]",
                                  "value": "[items(parameters('protectedParameters'))[copyIndex('protectedParametersArray')].value.value]"
                                }
                              }
                            ]
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Compute/virtualMachines/runCommands",
                              "apiVersion": "2023-03-01",
                              "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "asyncExecution": "[parameters('asyncExecution')]",
                                "errorBlobManagedIdentity": "[if(not(empty(parameters('errorBlobManagedIdentity'))), parameters('errorBlobManagedIdentity'), null())]",
                                "errorBlobUri": "[if(not(empty(parameters('errorBlobContainerUri'))), format('{0}{1}-error.log', toLower(parameters('errorBlobContainerUri')), parameters('name')), null())]",
                                "outputBlobManagedIdentity": "[if(not(empty(parameters('outputBlobManagedIdentity'))), parameters('outputBlobManagedIdentity'), null())]",
                                "outputBlobUri": "[if(not(empty(parameters('outputBlobContainerUri'))), format('{0}{1}-output.log', toLower(parameters('outputBlobContainerUri')), parameters('name')), null())]",
                                "parameters": "[if(not(empty(parameters('parameters'))), parameters('parameters'), null())]",
                                "protectedParameters": "[variables('protectedParametersArray')]",
                                "runAsPassword": "[if(not(empty(parameters('runAsPassword'))), parameters('runAsPassword'), null())]",
                                "runAsUser": "[if(not(empty(parameters('runAsUser'))), parameters('runAsUser'), null())]",
                                "source": {
                                  "commandId": "[if(not(empty(parameters('commandId'))), parameters('commandId'), null())]",
                                  "script": "[if(not(empty(parameters('script'))), parameters('script'), null())]",
                                  "scriptUri": "[if(not(empty(parameters('scriptUri'))), parameters('scriptUri'), null())]",
                                  "scriptUriManagedIdentity": "[if(not(empty(parameters('scriptUriManagedIdentity'))), parameters('scriptUriManagedIdentity'), null())]"
                                },
                                "timeoutInSeconds": "[if(not(equals(parameters('timeoutInSeconds'), -1)), parameters('timeoutInSeconds'), null())]",
                                "treatFailureAsDeploymentFailure": "[parameters('treatFailureAsDeploymentFailure')]"
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "condition": "[parameters('confidentialVMOSDiskEncryption')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('RoleAssignment_ConfVMOrchestrator_ReleaseUser_{0}', parameters('timeStamp'))]",
                      "resourceGroup": "[variables('keyVaultResourceGroup')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "keyName": {
                            "value": "[parameters('keyName')]"
                          },
                          "keyVaultName": {
                            "value": "[variables('keyVaultName')]"
                          },
                          "principalId": {
                            "value": "[parameters('confidentialVMOrchestratorObjectId')]"
                          },
                          "principalType": {
                            "value": "ServicePrincipal"
                          },
                          "roleDefinitionId": {
                            "value": "08bbd89e-9f13-488c-ac41-acfcb10c90ab"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.36.1.42791",
                              "templateHash": "2517269434095045270"
                            }
                          },
                          "parameters": {
                            "keyVaultName": {
                              "type": "string"
                            },
                            "principalId": {
                              "type": "string"
                            },
                            "principalType": {
                              "type": "string"
                            },
                            "keyName": {
                              "type": "string"
                            },
                            "roleDefinitionId": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.KeyVault/vaults/{0}/keys/{1}', parameters('keyVaultName'), parameters('keyName'))]",
                              "name": "[guid(resourceId('Microsoft.KeyVault/vaults/keys', parameters('keyVaultName'), parameters('keyName')), parameters('principalId'), parameters('roleDefinitionId'))]",
                              "properties": {
                                "principalId": "[parameters('principalId')]",
                                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', parameters('roleDefinitionId'))]",
                                "principalType": "[parameters('principalType')]"
                              }
                            }
                          ],
                          "outputs": {
                            "roleAssignmentId": {
                              "type": "string",
                              "value": "[extensionResourceId(resourceId('Microsoft.KeyVault/vaults/keys', parameters('keyVaultName'), parameters('keyName')), 'Microsoft.Authorization/roleAssignments', guid(resourceId('Microsoft.KeyVault/vaults/keys', parameters('keyVaultName'), parameters('keyName')), parameters('principalId'), parameters('roleDefinitionId')))]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupDeployment')), 'Microsoft.Resources/deployments', format('Set_EncryptionKey_ConfidentialVMOSDisk_{0}', parameters('timeStamp')))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('DiskEncryptionSet_{0}', parameters('timeStamp'))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "rotationToLatestKeyVersionEnabled": "[if(parameters('confidentialVMOSDiskEncryption'), createObject('value', false()), createObject('value', true()))]",
                          "name": "[if(parameters('confidentialVMOSDiskEncryption'), createObject('value', parameters('diskEncryptionSetNames').confidentialVMs), if(equals(variables('diskEncryptionSetEncryptionType'), 'EncryptionAtRestWithCustomerKey'), createObject('value', parameters('diskEncryptionSetNames').customerManaged), createObject('value', parameters('diskEncryptionSetNames').platformAndCustomerManaged)))]",
                          "encryptionType": {
                            "value": "[variables('diskEncryptionSetEncryptionType')]"
                          },
                          "keyName": {
                            "value": "[parameters('keyName')]"
                          },
                          "keyVaultResourceId": {
                            "value": "[parameters('keyVaultResourceId')]"
                          },
                          "systemAssignedIdentity": {
                            "value": true
                          },
                          "tags": {
                            "value": "[union(createObject('cm-resource-parent', parameters('hostPoolResourceId')), coalesce(tryGet(parameters('tags'), 'Microsoft.Compute/diskEncryptionSets'), createObject()))]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.36.1.42791",
                              "templateHash": "10177185361784512052"
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the disk encryption set that is being created."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. Resource location."
                              }
                            },
                            "keyVaultResourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Resource ID of the KeyVault containing the key or secret."
                              }
                            },
                            "keyName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Key URL (with version) pointing to a key or secret in KeyVault."
                              }
                            },
                            "keyVersion": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The version of the customer managed key to reference for encryption. If not provided, the latest key version is used."
                              }
                            },
                            "encryptionType": {
                              "type": "string",
                              "defaultValue": "EncryptionAtRestWithPlatformAndCustomerKeys",
                              "allowedValues": [
                                "ConfidentialVmEncryptedWithCustomerKey",
                                "EncryptionAtRestWithCustomerKey",
                                "EncryptionAtRestWithPlatformAndCustomerKeys"
                              ],
                              "metadata": {
                                "description": "Optional. The type of key used to encrypt the data of the disk. For security reasons, it is recommended to set encryptionType to EncryptionAtRestWithPlatformAndCustomerKeys."
                              }
                            },
                            "federatedClientId": {
                              "type": "string",
                              "defaultValue": "None",
                              "metadata": {
                                "description": "Optional. Multi-tenant application client ID to access key vault in a different tenant. Setting the value to \"None\" will clear the property."
                              }
                            },
                            "rotationToLatestKeyVersionEnabled": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Set this flag to true to enable auto-updating of this disk encryption set to the latest key version."
                              }
                            },
                            "systemAssignedIdentity": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Conditional. Enables system assigned managed identity on the resource. Required if userAssignedIdentities is empty."
                              }
                            },
                            "userAssignedIdentities": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Conditional. The ID(s) to assign to the resource. Required if systemAssignedIdentity is set to \"false\"."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Tags of the disk encryption resource."
                              }
                            }
                          },
                          "variables": {
                            "identityType": "[if(parameters('systemAssignedIdentity'), if(not(empty(parameters('userAssignedIdentities'))), 'SystemAssigned,UserAssigned', 'SystemAssigned'), 'UserAssigned')]",
                            "identity": {
                              "type": "[variables('identityType')]",
                              "userAssignedIdentities": "[if(not(empty(parameters('userAssignedIdentities'))), parameters('userAssignedIdentities'), null())]"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Compute/diskEncryptionSets",
                              "apiVersion": "2023-10-02",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "identity": "[variables('identity')]",
                              "properties": {
                                "activeKey": {
                                  "sourceVault": {
                                    "id": "[parameters('keyVaultResourceId')]"
                                  },
                                  "keyUrl": "[if(not(empty(parameters('keyVersion'))), format('{0}/{1}', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('keyVaultResourceId'), '/')[2], split(parameters('keyVaultResourceId'), '/')[4]), 'Microsoft.KeyVault/vaults/keys', last(split(parameters('keyVaultResourceId'), '/')), parameters('keyName')), '2023-07-01').keyUri, parameters('keyVersion')), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('keyVaultResourceId'), '/')[2], split(parameters('keyVaultResourceId'), '/')[4]), 'Microsoft.KeyVault/vaults/keys', last(split(parameters('keyVaultResourceId'), '/')), parameters('keyName')), '2023-07-01').keyUriWithVersion)]"
                                },
                                "encryptionType": "[parameters('encryptionType')]",
                                "federatedClientId": "[parameters('federatedClientId')]",
                                "rotationToLatestKeyVersionEnabled": "[parameters('rotationToLatestKeyVersionEnabled')]"
                              },
                              "dependsOn": [
                                "keyVaultPermissions"
                              ]
                            },
                            {
                              "copy": {
                                "name": "keyVaultPermissions",
                                "count": "[length(items(parameters('userAssignedIdentities')))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('DiskEncrSet-KVPermissions-{0}-{1}', copyIndex(), uniqueString(deployment().name, parameters('location')))]",
                              "subscriptionId": "[split(parameters('keyVaultResourceId'), '/')[2]]",
                              "resourceGroup": "[split(parameters('keyVaultResourceId'), '/')[4]]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "keyName": {
                                    "value": "[parameters('keyName')]"
                                  },
                                  "keyVaultResourceId": {
                                    "value": "[parameters('keyVaultResourceId')]"
                                  },
                                  "userAssignedIdentityResourceId": {
                                    "value": "[items(parameters('userAssignedIdentities'))[copyIndex()].key]"
                                  },
                                  "rbacAuthorizationEnabled": {
                                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('keyVaultResourceId'), '/')[2], split(parameters('keyVaultResourceId'), '/')[4]), 'Microsoft.KeyVault/vaults', last(split(parameters('keyVaultResourceId'), '/'))), '2023-07-01').enableRbacAuthorization]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.36.1.42791",
                                      "templateHash": "736829340543047952"
                                    }
                                  },
                                  "parameters": {
                                    "rbacAuthorizationEnabled": {
                                      "type": "bool",
                                      "defaultValue": true,
                                      "metadata": {
                                        "description": "Required. A boolean to specify whether or not the used Key Vault has RBAC authentication enabled or not."
                                      }
                                    },
                                    "userAssignedIdentityResourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The resourceID of the User Assigned Identity to assign permissions to."
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "defaultValue": "[resourceGroup().location]",
                                      "metadata": {
                                        "description": "Optional. Resource location."
                                      }
                                    },
                                    "keyVaultResourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Resource ID of the KeyVault containing the key or secret."
                                      }
                                    },
                                    "keyName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Key URL (with version) pointing to a key or secret in KeyVault."
                                      }
                                    }
                                  },
                                  "resources": [
                                    {
                                      "condition": "[equals(parameters('rbacAuthorizationEnabled'), true())]",
                                      "type": "Microsoft.Authorization/roleAssignments",
                                      "apiVersion": "2022-04-01",
                                      "scope": "[format('Microsoft.KeyVault/vaults/{0}/keys/{1}', last(split(parameters('keyVaultResourceId'), '/')), parameters('keyName'))]",
                                      "name": "[guid(format('msi-{0}-{1}-{2}-Key-Reader-RoleAssignment', resourceId('Microsoft.KeyVault/vaults/keys', last(split(parameters('keyVaultResourceId'), '/')), parameters('keyName')), parameters('location'), parameters('userAssignedIdentityResourceId')))]",
                                      "properties": {
                                        "principalId": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('userAssignedIdentityResourceId'), '/')[2], split(parameters('userAssignedIdentityResourceId'), '/')[4]), 'Microsoft.Resources/deployments', format('UAI-Reference-{0}', uniqueString(deployment().name, parameters('location')))), '2022-09-01').outputs.principalId.value]",
                                        "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '12338af0-0e69-4776-bea7-57ae8d297424')]",
                                        "principalType": "ServicePrincipal"
                                      },
                                      "dependsOn": [
                                        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('userAssignedIdentityResourceId'), '/')[2], split(parameters('userAssignedIdentityResourceId'), '/')[4]), 'Microsoft.Resources/deployments', format('UAI-Reference-{0}', uniqueString(deployment().name, parameters('location'))))]"
                                      ]
                                    },
                                    {
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('UAI-Reference-{0}', uniqueString(deployment().name, parameters('location')))]",
                                      "subscriptionId": "[split(parameters('userAssignedIdentityResourceId'), '/')[2]]",
                                      "resourceGroup": "[split(parameters('userAssignedIdentityResourceId'), '/')[4]]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "location": {
                                            "value": "[parameters('location')]"
                                          },
                                          "userAssignedIdentityName": {
                                            "value": "[last(split(parameters('userAssignedIdentityResourceId'), '/'))]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.36.1.42791",
                                              "templateHash": "8313192541438132137"
                                            }
                                          },
                                          "parameters": {
                                            "userAssignedIdentityName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The name of the User Assigned Identity to fetch the principal ID from."
                                              }
                                            },
                                            "location": {
                                              "type": "string",
                                              "defaultValue": "[resourceGroup().location]",
                                              "metadata": {
                                                "description": "Optional. Resource location."
                                              }
                                            }
                                          },
                                          "resources": [
                                            {
                                              "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
                                              "apiVersion": "2018-11-30",
                                              "name": "[parameters('userAssignedIdentityName')]",
                                              "location": "[parameters('location')]"
                                            }
                                          ],
                                          "outputs": {
                                            "principalId": {
                                              "type": "string",
                                              "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('userAssignedIdentityName')), '2018-11-30').principalId]"
                                            }
                                          }
                                        }
                                      }
                                    }
                                  ]
                                }
                              }
                            }
                          ],
                          "outputs": {
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the disk encryption set."
                              },
                              "value": "[resourceId('Microsoft.Compute/diskEncryptionSets', parameters('name'))]"
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the disk encryption set."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group the disk encryption set was deployed into."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "principalId": {
                              "type": "string",
                              "metadata": {
                                "description": "The principal ID of the disk encryption set."
                              },
                              "value": "[if(equals(parameters('systemAssignedIdentity'), true()), reference(resourceId('Microsoft.Compute/diskEncryptionSets', parameters('name')), '2023-10-02', 'full').identity.principalId, '')]"
                            },
                            "identities": {
                              "type": "object",
                              "metadata": {
                                "description": "The idenities of the disk encryption set."
                              },
                              "value": "[reference(resourceId('Microsoft.Compute/diskEncryptionSets', parameters('name')), '2023-10-02', 'full').identity]"
                            },
                            "keyVaultName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the key vault with the disk encryption key."
                              },
                              "value": "[last(split(parameters('keyVaultResourceId'), '/'))]"
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "The location the resource was deployed into."
                              },
                              "value": "[reference(resourceId('Microsoft.Compute/diskEncryptionSets', parameters('name')), '2023-10-02', 'full').location]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupDeployment')), 'Microsoft.Resources/deployments', format('Set_EncryptionKey_ConfidentialVMOSDisk_{0}', parameters('timeStamp')))]",
                        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('keyVaultResourceGroup')), 'Microsoft.Resources/deployments', format('Encryption_Key_{0}', parameters('timeStamp')))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('RA_DiskEncryptionSet_CryptoServiceEncryptionUser_{0}', parameters('timeStamp'))]",
                      "resourceGroup": "[variables('keyVaultResourceGroup')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "keyName": {
                            "value": "[parameters('keyName')]"
                          },
                          "keyVaultName": {
                            "value": "[variables('keyVaultName')]"
                          },
                          "principalId": {
                            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('DiskEncryptionSet_{0}', parameters('timeStamp'))), '2022-09-01').outputs.principalId.value]"
                          },
                          "principalType": {
                            "value": "ServicePrincipal"
                          },
                          "roleDefinitionId": {
                            "value": "e147488a-f6f5-4113-8e2d-b22465e65bf6"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.36.1.42791",
                              "templateHash": "2517269434095045270"
                            }
                          },
                          "parameters": {
                            "keyVaultName": {
                              "type": "string"
                            },
                            "principalId": {
                              "type": "string"
                            },
                            "principalType": {
                              "type": "string"
                            },
                            "keyName": {
                              "type": "string"
                            },
                            "roleDefinitionId": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.KeyVault/vaults/{0}/keys/{1}', parameters('keyVaultName'), parameters('keyName'))]",
                              "name": "[guid(resourceId('Microsoft.KeyVault/vaults/keys', parameters('keyVaultName'), parameters('keyName')), parameters('principalId'), parameters('roleDefinitionId'))]",
                              "properties": {
                                "principalId": "[parameters('principalId')]",
                                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', parameters('roleDefinitionId'))]",
                                "principalType": "[parameters('principalType')]"
                              }
                            }
                          ],
                          "outputs": {
                            "roleAssignmentId": {
                              "type": "string",
                              "value": "[extensionResourceId(resourceId('Microsoft.KeyVault/vaults/keys', parameters('keyVaultName'), parameters('keyName')), 'Microsoft.Authorization/roleAssignments', guid(resourceId('Microsoft.KeyVault/vaults/keys', parameters('keyVaultName'), parameters('keyName')), parameters('principalId'), parameters('roleDefinitionId')))]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Resources/deployments', format('DiskEncryptionSet_{0}', parameters('timeStamp')))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "diskEncryptionSetResourceId": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', format('DiskEncryptionSet_{0}', parameters('timeStamp'))), '2022-09-01').outputs.resourceId.value]"
                    },
                    "diskEncryptionSetRoleAssignmentId": {
                      "type": "string",
                      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('keyVaultResourceGroup')), 'Microsoft.Resources/deployments', format('RA_DiskEncryptionSet_CryptoServiceEncryptionUser_{0}', parameters('timeStamp'))), '2022-09-01').outputs.roleAssignmentId.value]"
                    },
                    "confidentialVMOrchestratorRoleAssignmentId": {
                      "type": "string",
                      "value": "[if(parameters('confidentialVMOSDiskEncryption'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('keyVaultResourceGroup')), 'Microsoft.Resources/deployments', format('RoleAssignment_ConfVMOrchestrator_ReleaseUser_{0}', parameters('timeStamp'))), '2022-09-01').outputs.roleAssignmentId.value, '')]"
                    }
                  }
                }
              }
            },
            {
              "condition": "[not(empty(parameters('artifactsUserAssignedIdentityResourceId')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('ArtifactsUserAssignedIdentity_{0}', parameters('timeStamp'))]",
              "location": "[deployment().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "userAssignedIdentityResourceId": {
                    "value": "[parameters('artifactsUserAssignedIdentityResourceId')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.36.1.42791",
                      "templateHash": "15896884510278718321"
                    }
                  },
                  "parameters": {
                    "userAssignedIdentityResourceId": {
                      "type": "string"
                    }
                  },
                  "resources": [],
                  "outputs": {
                    "clientId": {
                      "type": "string",
                      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('userAssignedIdentityResourceId'), '/')[2], split(parameters('userAssignedIdentityResourceId'), '/')[4]), 'Microsoft.ManagedIdentity/userAssignedIdentities', last(split(parameters('userAssignedIdentityResourceId'), '/'))), '2018-11-30').clientId]"
                    },
                    "principalId": {
                      "type": "string",
                      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('userAssignedIdentityResourceId'), '/')[2], split(parameters('userAssignedIdentityResourceId'), '/')[4]), 'Microsoft.ManagedIdentity/userAssignedIdentities', last(split(parameters('userAssignedIdentityResourceId'), '/'))), '2018-11-30').principalId]"
                    }
                  }
                }
              }
            },
            {
              "copy": {
                "name": "availabilitySets",
                "count": "[length(range(0, parameters('availabilitySetsCount')))]"
              },
              "condition": "[and(parameters('pooledHostPool'), equals(parameters('availability'), 'AvailabilitySets'))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}{1}_{2}', parameters('availabilitySetNamePrefix'), padLeft(add(range(0, parameters('availabilitySetsCount'))[copyIndex()], parameters('availabilitySetsIndex')), 2, '0'), parameters('timeStamp'))]",
              "resourceGroup": "[parameters('resourceGroupHosts')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[format('{0}{1}', parameters('availabilitySetNamePrefix'), padLeft(add(range(0, parameters('availabilitySetsCount'))[copyIndex()], parameters('availabilitySetsIndex')), 2, '0'))]"
                  },
                  "platformFaultDomainCount": {
                    "value": 2
                  },
                  "platformUpdateDomainCount": {
                    "value": 5
                  },
                  "proximityPlacementGroupResourceId": {
                    "value": ""
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "skuName": {
                    "value": "Aligned"
                  },
                  "tags": {
                    "value": "[union(createObject('cm-resource-parent', parameters('hostPoolResourceId')), coalesce(tryGet(parameters('tags'), 'Microsoft.Compute/availabilitySets'), createObject()))]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.36.1.42791",
                      "templateHash": "8187910592870737013"
                    },
                    "name": "Availability Sets",
                    "description": "This module deploys an Availability Set.",
                    "owner": "Azure/module-maintainers"
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the availability set that is being created."
                      }
                    },
                    "platformFaultDomainCount": {
                      "type": "int",
                      "defaultValue": 2,
                      "metadata": {
                        "description": "Optional. The number of fault domains to use."
                      }
                    },
                    "platformUpdateDomainCount": {
                      "type": "int",
                      "defaultValue": 5,
                      "metadata": {
                        "description": "Optional. The number of update domains to use."
                      }
                    },
                    "skuName": {
                      "type": "string",
                      "defaultValue": "Aligned",
                      "metadata": {
                        "description": "Optional. SKU of the availability set.</p>- Use 'Aligned' for virtual machines with managed disks.</p>- Use 'Classic' for virtual machines with unmanaged disks."
                      }
                    },
                    "proximityPlacementGroupResourceId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of a proximity placement group."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Resource location."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags of the availability set resource."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Compute/availabilitySets",
                      "apiVersion": "2022-11-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "platformFaultDomainCount": "[parameters('platformFaultDomainCount')]",
                        "platformUpdateDomainCount": "[parameters('platformUpdateDomainCount')]",
                        "proximityPlacementGroup": "[if(not(empty(parameters('proximityPlacementGroupResourceId'))), createObject('id', parameters('proximityPlacementGroupResourceId')), null())]"
                      },
                      "sku": {
                        "name": "[parameters('skuName')]"
                      }
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the availability set."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the availability set."
                      },
                      "value": "[resourceId('Microsoft.Compute/availabilitySets', parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group the availability set was deployed into."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference(resourceId('Microsoft.Compute/availabilitySets', parameters('name')), '2022-11-01', 'full').location]"
                    }
                  }
                }
              }
            },
            {
              "copy": {
                "name": "localNetAppVolumes",
                "count": "[length(range(0, length(variables('sortedLocalNetAppResourceIds'))))]"
              },
              "condition": "[not(empty(variables('sortedLocalNetAppResourceIds')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('LocalNetAppVolumes-{0}-{1}', range(0, length(variables('sortedLocalNetAppResourceIds')))[copyIndex()], parameters('timeStamp'))]",
              "location": "[deployment().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "netAppVolumeResourceId": {
                    "value": "[variables('sortedLocalNetAppResourceIds')[range(0, length(variables('sortedLocalNetAppResourceIds')))[copyIndex()]]]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.36.1.42791",
                      "templateHash": "16588737236221441349"
                    }
                  },
                  "parameters": {
                    "netAppVolumeResourceId": {
                      "type": "string"
                    }
                  },
                  "resources": [],
                  "outputs": {
                    "smbServerFqdn": {
                      "type": "string",
                      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('netAppVolumeResourceId'), '/')[2], split(parameters('netAppVolumeResourceId'), '/')[4]), 'Microsoft.NetApp/netAppAccounts/capacityPools/volumes', split(parameters('netAppVolumeResourceId'), '/')[8], split(parameters('netAppVolumeResourceId'), '/')[10], last(split(parameters('netAppVolumeResourceId'), '/'))), '2023-11-01').mountTargets[0].smbServerFqdn]"
                    }
                  }
                }
              }
            },
            {
              "copy": {
                "name": "remoteNetAppVolumes",
                "count": "[length(range(0, length(variables('sortedRemoteNetAppResourceIds'))))]"
              },
              "condition": "[not(empty(variables('sortedRemoteNetAppResourceIds')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('RemoteNetAppVolumes-{0}-{1}', range(0, length(variables('sortedRemoteNetAppResourceIds')))[copyIndex()], parameters('timeStamp'))]",
              "location": "[deployment().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "netAppVolumeResourceId": {
                    "value": "[variables('sortedRemoteNetAppResourceIds')[range(0, length(variables('sortedRemoteNetAppResourceIds')))[copyIndex()]]]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.36.1.42791",
                      "templateHash": "16588737236221441349"
                    }
                  },
                  "parameters": {
                    "netAppVolumeResourceId": {
                      "type": "string"
                    }
                  },
                  "resources": [],
                  "outputs": {
                    "smbServerFqdn": {
                      "type": "string",
                      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('netAppVolumeResourceId'), '/')[2], split(parameters('netAppVolumeResourceId'), '/')[4]), 'Microsoft.NetApp/netAppAccounts/capacityPools/volumes', split(parameters('netAppVolumeResourceId'), '/')[8], split(parameters('netAppVolumeResourceId'), '/')[10], last(split(parameters('netAppVolumeResourceId'), '/'))), '2023-11-01').mountTargets[0].smbServerFqdn]"
                    }
                  }
                }
              }
            },
            {
              "copy": {
                "name": "virtualMachines",
                "count": "[length(range(1, parameters('sessionHostBatchCount')))]",
                "mode": "serial",
                "batchSize": 5
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('VirtualMachines_Batch_{0}_{1}', sub(range(1, parameters('sessionHostBatchCount'))[copyIndex()], 1), parameters('timeStamp'))]",
              "resourceGroup": "[parameters('resourceGroupHosts')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "artifactsContainerUri": {
                    "value": "[parameters('artifactsContainerUri')]"
                  },
                  "artifactsUserAssignedIdentityResourceId": {
                    "value": "[parameters('artifactsUserAssignedIdentityResourceId')]"
                  },
                  "artifactsUserAssignedIdentityClientId": "[if(empty(parameters('artifactsUserAssignedIdentityResourceId')), createObject('value', ''), createObject('value', reference(subscriptionResourceId('Microsoft.Resources/deployments', format('ArtifactsUserAssignedIdentity_{0}', parameters('timeStamp'))), '2022-09-01').outputs.clientId.value))]",
                  "availability": {
                    "value": "[parameters('availability')]"
                  },
                  "availabilityZones": {
                    "value": "[parameters('availabilityZones')]"
                  },
                  "availabilitySetNamePrefix": {
                    "value": "[parameters('availabilitySetNamePrefix')]"
                  },
                  "avdInsightsDataCollectionRulesResourceId": {
                    "value": "[parameters('avdInsightsDataCollectionRulesResourceId')]"
                  },
                  "confidentialVMOSDiskEncryptionType": {
                    "value": "[variables('confidentialVMOSDiskEncryptionType')]"
                  },
                  "customImageResourceId": {
                    "value": "[parameters('customImageResourceId')]"
                  },
                  "dataCollectionEndpointResourceId": {
                    "value": "[parameters('dataCollectionEndpointResourceId')]"
                  },
                  "dedicatedHostGroupResourceId": {
                    "value": "[parameters('dedicatedHostGroupResourceId')]"
                  },
                  "dedicatedHostGroupZones": {
                    "value": "[parameters('dedicatedHostGroupZones')]"
                  },
                  "dedicatedHostResourceId": {
                    "value": "[parameters('dedicatedHostResourceId')]"
                  },
                  "diskAccessId": "[if(equals(parameters('deploymentType'), 'Complete'), if(parameters('deployDiskAccessResource'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupHosts')), 'Microsoft.Resources/deployments', format('DiskAccess_{0}', parameters('timeStamp'))), '2022-09-01').outputs.resourceId.value), createObject('value', '')), createObject('value', parameters('existingDiskAccessResourceId')))]",
                  "diskEncryptionSetResourceId": "[if(and(equals(parameters('deploymentType'), 'Complete'), not(equals(parameters('keyManagementDisks'), 'PlatformManaged'))), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupHosts')), 'Microsoft.Resources/deployments', format('Customer_Managed_Keys_{0}', parameters('timeStamp'))), '2022-09-01').outputs.diskEncryptionSetResourceId.value), if(not(empty(parameters('existingDiskEncryptionSetResourceId'))), createObject('value', parameters('existingDiskEncryptionSetResourceId')), createObject('value', '')))]",
                  "diskSizeGB": {
                    "value": "[parameters('diskSizeGB')]"
                  },
                  "diskSku": {
                    "value": "[parameters('diskSku')]"
                  },
                  "domainJoinUserPassword": {
                    "value": "[parameters('domainJoinUserPassword')]"
                  },
                  "domainJoinUserPrincipalName": {
                    "value": "[parameters('domainJoinUserPrincipalName')]"
                  },
                  "domainName": {
                    "value": "[parameters('domainName')]"
                  },
                  "enableAcceleratedNetworking": {
                    "value": "[parameters('enableAcceleratedNetworking')]"
                  },
                  "enableMonitoring": {
                    "value": "[parameters('enableMonitoring')]"
                  },
                  "encryptionAtHost": {
                    "value": "[parameters('encryptionAtHost')]"
                  },
                  "fslogixConfigureSessionHosts": {
                    "value": "[parameters('fslogixConfigureSessionHosts')]"
                  },
                  "fslogixContainerType": {
                    "value": "[parameters('fslogixContainerType')]"
                  },
                  "fslogixFileShareNames": {
                    "value": "[parameters('fslogixFileShareNames')]"
                  },
                  "fslogixOSSGroups": {
                    "value": "[parameters('fslogixOSSGroups')]"
                  },
                  "fslogixLocalNetAppServerFqdns": {
                    "copy": [
                      {
                        "name": "value",
                        "count": "[length(range(0, length(variables('sortedLocalNetAppResourceIds'))))]",
                        "input": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('LocalNetAppVolumes-{0}-{1}', range(0, length(variables('sortedLocalNetAppResourceIds')))[range(0, length(variables('sortedLocalNetAppResourceIds')))[copyIndex('value')]], parameters('timeStamp'))), '2022-09-01').outputs.smbServerFqdn.value]"
                      }
                    ]
                  },
                  "fslogixLocalStorageAccountResourceIds": {
                    "value": "[parameters('fslogixLocalStorageAccountResourceIds')]"
                  },
                  "fslogixRemoteNetAppServerFqdns": {
                    "copy": [
                      {
                        "name": "value",
                        "count": "[length(range(0, length(variables('sortedRemoteNetAppResourceIds'))))]",
                        "input": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('RemoteNetAppVolumes-{0}-{1}', range(0, length(variables('sortedRemoteNetAppResourceIds')))[range(0, length(variables('sortedRemoteNetAppResourceIds')))[copyIndex('value')]], parameters('timeStamp'))), '2022-09-01').outputs.smbServerFqdn.value]"
                      }
                    ]
                  },
                  "fslogixRemoteStorageAccountResourceIds": {
                    "value": "[parameters('fslogixRemoteStorageAccountResourceIds')]"
                  },
                  "fslogixStorageService": {
                    "value": "[parameters('fslogixStorageService')]"
                  },
                  "hibernationEnabled": {
                    "value": "[parameters('hibernationEnabled')]"
                  },
                  "hostPoolResourceId": "[if(equals(parameters('deploymentType'), 'Complete'), createObject('value', parameters('hostPoolResourceId')), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, split(parameters('hostPoolResourceId'), '/')[4]), 'Microsoft.Resources/deployments', format('HostPoolRegistrationTokenUpdate_{0}', parameters('timeStamp'))), '2022-09-01').outputs.resourceId.value))]",
                  "identitySolution": {
                    "value": "[parameters('identitySolution')]"
                  },
                  "imageOffer": {
                    "value": "[parameters('imageOffer')]"
                  },
                  "imagePublisher": {
                    "value": "[parameters('imagePublisher')]"
                  },
                  "imageSku": {
                    "value": "[parameters('imageSku')]"
                  },
                  "integrityMonitoring": {
                    "value": "[parameters('integrityMonitoring')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "networkInterfaceNameConv": {
                    "value": "[parameters('networkInterfaceNameConv')]"
                  },
                  "osDiskNameConv": {
                    "value": "[parameters('osDiskNameConv')]"
                  },
                  "ouPath": {
                    "value": "[parameters('ouPath')]"
                  },
                  "sessionHostCustomizations": {
                    "value": "[parameters('sessionHostCustomizations')]"
                  },
                  "securityDataCollectionRulesResourceId": {
                    "value": "[parameters('securityDataCollectionRulesResourceId')]"
                  },
                  "secureBootEnabled": {
                    "value": "[parameters('secureBootEnabled')]"
                  },
                  "securityType": {
                    "value": "[parameters('securityType')]"
                  },
                  "sessionHostCount": "[if(and(equals(range(1, parameters('sessionHostBatchCount'))[copyIndex()], parameters('sessionHostBatchCount')), greater(parameters('divisionRemainderValue'), 0)), createObject('value', parameters('divisionRemainderValue')), createObject('value', parameters('maxResourcesPerTemplateDeployment')))]",
                  "sessionHostIndex": "[if(equals(range(1, parameters('sessionHostBatchCount'))[copyIndex()], 1), createObject('value', parameters('sessionHostIndex')), createObject('value', add(mul(sub(range(1, parameters('sessionHostBatchCount'))[copyIndex()], 1), parameters('maxResourcesPerTemplateDeployment')), parameters('sessionHostIndex'))))]",
                  "sessionHostRegistrationDSCUrl": {
                    "value": "[parameters('sessionHostRegistrationDSCUrl')]"
                  },
                  "storageSuffix": {
                    "value": "[parameters('storageSuffix')]"
                  },
                  "subnetResourceId": {
                    "value": "[parameters('subnetResourceId')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "timeStamp": {
                    "value": "[parameters('timeStamp')]"
                  },
                  "useAgentDownloadEndpoint": {
                    "value": "[parameters('useAgentDownloadEndpoint')]"
                  },
                  "virtualMachineAdminPassword": {
                    "value": "[parameters('virtualMachineAdminPassword')]"
                  },
                  "virtualMachineAdminUserName": {
                    "value": "[parameters('virtualMachineAdminUserName')]"
                  },
                  "virtualMachineNameConv": {
                    "value": "[parameters('virtualMachineNameConv')]"
                  },
                  "virtualMachineNamePrefix": {
                    "value": "[parameters('virtualMachineNamePrefix')]"
                  },
                  "virtualMachineSize": {
                    "value": "[parameters('virtualMachineSize')]"
                  },
                  "vmInsightsDataCollectionRulesResourceId": {
                    "value": "[parameters('vmInsightsDataCollectionRulesResourceId')]"
                  },
                  "vTpmEnabled": {
                    "value": "[parameters('vTpmEnabled')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.36.1.42791",
                      "templateHash": "6779029165700395956"
                    }
                  },
                  "parameters": {
                    "artifactsContainerUri": {
                      "type": "string"
                    },
                    "artifactsUserAssignedIdentityClientId": {
                      "type": "string"
                    },
                    "artifactsUserAssignedIdentityResourceId": {
                      "type": "string"
                    },
                    "availability": {
                      "type": "string"
                    },
                    "availabilitySetNamePrefix": {
                      "type": "string"
                    },
                    "availabilityZones": {
                      "type": "array"
                    },
                    "avdInsightsDataCollectionRulesResourceId": {
                      "type": "string"
                    },
                    "confidentialVMOSDiskEncryptionType": {
                      "type": "string"
                    },
                    "customImageResourceId": {
                      "type": "string"
                    },
                    "dataCollectionEndpointResourceId": {
                      "type": "string"
                    },
                    "dedicatedHostGroupResourceId": {
                      "type": "string"
                    },
                    "dedicatedHostGroupZones": {
                      "type": "array"
                    },
                    "dedicatedHostResourceId": {
                      "type": "string"
                    },
                    "diskAccessId": {
                      "type": "string"
                    },
                    "diskEncryptionSetResourceId": {
                      "type": "string"
                    },
                    "diskSizeGB": {
                      "type": "int"
                    },
                    "diskSku": {
                      "type": "string"
                    },
                    "domainJoinUserPassword": {
                      "type": "securestring"
                    },
                    "domainJoinUserPrincipalName": {
                      "type": "securestring"
                    },
                    "domainName": {
                      "type": "string"
                    },
                    "enableAcceleratedNetworking": {
                      "type": "bool"
                    },
                    "enableMonitoring": {
                      "type": "bool"
                    },
                    "encryptionAtHost": {
                      "type": "bool"
                    },
                    "fslogixConfigureSessionHosts": {
                      "type": "bool"
                    },
                    "fslogixContainerType": {
                      "type": "string"
                    },
                    "fslogixFileShareNames": {
                      "type": "array"
                    },
                    "fslogixLocalNetAppServerFqdns": {
                      "type": "array"
                    },
                    "fslogixLocalStorageAccountResourceIds": {
                      "type": "array"
                    },
                    "fslogixOSSGroups": {
                      "type": "array"
                    },
                    "fslogixRemoteNetAppServerFqdns": {
                      "type": "array"
                    },
                    "fslogixRemoteStorageAccountResourceIds": {
                      "type": "array"
                    },
                    "fslogixStorageService": {
                      "type": "string"
                    },
                    "hibernationEnabled": {
                      "type": "bool"
                    },
                    "hostPoolResourceId": {
                      "type": "string"
                    },
                    "identitySolution": {
                      "type": "string"
                    },
                    "imageOffer": {
                      "type": "string"
                    },
                    "imagePublisher": {
                      "type": "string"
                    },
                    "imageSku": {
                      "type": "string"
                    },
                    "integrityMonitoring": {
                      "type": "bool"
                    },
                    "location": {
                      "type": "string"
                    },
                    "networkInterfaceNameConv": {
                      "type": "string"
                    },
                    "osDiskNameConv": {
                      "type": "string"
                    },
                    "ouPath": {
                      "type": "string"
                    },
                    "sessionHostCustomizations": {
                      "type": "array"
                    },
                    "sessionHostCount": {
                      "type": "int"
                    },
                    "sessionHostIndex": {
                      "type": "int"
                    },
                    "sessionHostRegistrationDSCUrl": {
                      "type": "string"
                    },
                    "securityDataCollectionRulesResourceId": {
                      "type": "string"
                    },
                    "securityType": {
                      "type": "string"
                    },
                    "secureBootEnabled": {
                      "type": "bool"
                    },
                    "storageSuffix": {
                      "type": "string"
                    },
                    "subnetResourceId": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "timeStamp": {
                      "type": "string"
                    },
                    "useAgentDownloadEndpoint": {
                      "type": "bool"
                    },
                    "virtualMachineAdminPassword": {
                      "type": "securestring"
                    },
                    "virtualMachineAdminUserName": {
                      "type": "securestring"
                    },
                    "virtualMachineNameConv": {
                      "type": "string"
                    },
                    "virtualMachineNamePrefix": {
                      "type": "string"
                    },
                    "virtualMachineSize": {
                      "type": "string"
                    },
                    "vmInsightsDataCollectionRulesResourceId": {
                      "type": "string"
                    },
                    "vTpmEnabled": {
                      "type": "bool"
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "fslogixLocalStorageAccountNames",
                        "count": "[length(parameters('fslogixLocalStorageAccountResourceIds'))]",
                        "input": "[last(split(parameters('fslogixLocalStorageAccountResourceIds')[copyIndex('fslogixLocalStorageAccountNames')], '/'))]"
                      },
                      {
                        "name": "fslogixRemoteStorageAccountNames",
                        "count": "[length(parameters('fslogixRemoteStorageAccountResourceIds'))]",
                        "input": "[last(split(parameters('fslogixRemoteStorageAccountResourceIds')[copyIndex('fslogixRemoteStorageAccountNames')], '/'))]"
                      },
                      {
                        "name": "fslogixLocalSANameMinus2",
                        "count": "[length(variables('fslogixLocalStorageAccountNames'))]",
                        "input": "[take(variables('fslogixLocalStorageAccountNames')[copyIndex('fslogixLocalSANameMinus2')], sub(length(variables('fslogixLocalStorageAccountNames')[copyIndex('fslogixLocalSANameMinus2')]), 2))]"
                      },
                      {
                        "name": "fslogixRemoteSANameMinus2",
                        "count": "[length(variables('fslogixRemoteStorageAccountNames'))]",
                        "input": "[take(variables('fslogixRemoteStorageAccountNames')[copyIndex('fslogixRemoteSANameMinus2')], sub(length(variables('fslogixRemoteStorageAccountNames')[copyIndex('fslogixRemoteSANameMinus2')]), 2))]"
                      },
                      {
                        "name": "fslogixExclusionsOfficeArray",
                        "count": "[length(variables('fslogixOfficeVHDXs'))]",
                        "input": "[format('{0};{1}.lock;{2}.meta;{3}.metadata', variables('fslogixOfficeVHDXs')[copyIndex('fslogixExclusionsOfficeArray')], variables('fslogixOfficeVHDXs')[copyIndex('fslogixExclusionsOfficeArray')], variables('fslogixOfficeVHDXs')[copyIndex('fslogixExclusionsOfficeArray')], variables('fslogixOfficeVHDXs')[copyIndex('fslogixExclusionsOfficeArray')])]"
                      },
                      {
                        "name": "fslogixExclusionProfileArray",
                        "count": "[length(variables('fslogixProfileVHDXs'))]",
                        "input": "[format('{0};{1}.lock;{2}.meta;{3}.metadata', variables('fslogixProfileVHDXs')[copyIndex('fslogixExclusionProfileArray')], variables('fslogixProfileVHDXs')[copyIndex('fslogixExclusionProfileArray')], variables('fslogixProfileVHDXs')[copyIndex('fslogixExclusionProfileArray')], variables('fslogixProfileVHDXs')[copyIndex('fslogixExclusionProfileArray')])]"
                      }
                    ],
                    "$fxv#0": "[CmdletBinding(SupportsShouldProcess = $true)]\r\nparam (\r\n    [string]$AmdVmSize,\r\n    [string]$NvidiaVmSize,\r\n    [string]$DisableUpdates,\r\n    [string]$ConfigureFSLogix,\r\n    [string]$CloudCache = 'false',\r\n    [string]$LocalNetAppServers,\r\n    [string]$LocalStorageAccountNames,\r\n    [string]$LocalStorageAccountKeys,\r\n    [string]$OSSGroups,\r\n    [string]$RemoteNetAppServers,\r\n    [string]$RemoteStorageAccountNames,\r\n    [string]$RemoteStorageAccountKeys,\r\n    [string]$Shares,\r\n    [string]$StorageAccountDNSSuffix,\r\n    [string]$StorageService\r\n)\r\n\r\n\r\n#region Functions\r\n\r\nfunction New-Log {\r\n    Param (\r\n        [Parameter(Mandatory = $true, Position = 0)]\r\n        [string] $Path\r\n    )\r\n\r\n    $date = Get-Date -UFormat \"%Y-%m-%d %H-%M-%S\"\r\n    Set-Variable logFile -Scope Script\r\n    $script:logFile = \"$Script:Name-$date.log\"\r\n\r\n    if ((Test-Path $path ) -eq $false) {\r\n        $null = New-Item -Path $path -type directory\r\n    }\r\n\r\n    $script:Log = Join-Path $path $logfile\r\n\r\n    Add-Content $script:Log \"Date`t`t`tCategory`t`tDetails\"\r\n}\r\n\r\nfunction Write-Log {\r\n    Param (\r\n        [Parameter(Mandatory=$false, Position=0)]\r\n        [ValidateSet(\"Info\",\"Warning\",\"Error\")]\r\n        $Category = 'Info',\r\n        [Parameter(Mandatory=$true, Position=1)]\r\n        $Message\r\n    )\r\n\r\n    $Date = get-date\r\n    $Content = \"[$Date]`t$Category`t`t$Message`n\" \r\n    Add-Content $Script:Log $content -ErrorAction Stop\r\n    If ($Verbose) {\r\n        Write-Verbose $Content\r\n    } Else {\r\n        Switch ($Category) {\r\n            'Info' {Write-Host $content}\r\n            'Error' {Write-Error $Content}\r\n            'Warning' {Write-Warning $Content}\r\n        }\r\n    }\r\n}\r\n\r\nFunction ConvertFrom-JsonString {\r\n    [CmdletBinding()]\r\n    param (\r\n        [string]$JsonString,\r\n        [string]$Name,\r\n        [switch]$SensitiveValues      \r\n    )\r\n    If ($JsonString -ne '[]' -and $JsonString -ne $null) {\r\n        [array]$Array = $JsonString.replace('\\', '') | ConvertFrom-Json\r\n        If ($Array.Length -gt 0) {\r\n            If ($SensitiveValues) {Write-Log -message \"Array '$Name' has $($Array.Length) members\"} Else {Write-Log -message \"$($Name): '$($Array -join \"', '\")'\"}\r\n            Return $Array\r\n        } Else {\r\n            Return $null\r\n        }            \r\n    } Else {\r\n        Return $null\r\n    }    \r\n}\r\n\r\nFunction Convert-GroupToSID {\r\n    [CmdletBinding()]\r\n    Param (\r\n        [Parameter(Mandatory = $true)]\r\n        [string]$DomainName,\r\n\r\n        [Parameter(Mandatory = $true)]\r\n        [string]$GroupName\r\n    )\r\n    Begin {\r\n        [string]$groupSID = ''\r\n    }\r\n    Process {\r\n        Try {\r\n            $groupSID = (New-Object System.Security.Principal.NTAccount(\"$GroupName\")).Translate([System.Security.Principal.SecurityIdentifier]).Value\r\n        }\r\n        Catch {\r\n            Try {\r\n                $groupSID = (New-Object System.Security.Principal.NTAccount($DomainName,\"$GroupName\")).Translate([System.Security.Principal.SecurityIdentifier]).Value\r\n            }\r\n            Catch {\r\n                Write-Error -Message \"Failed to convert group name '$GroupName' to SID.\"\r\n            }\r\n        }\r\n        Write-Output -InputObject $groupSID\r\n    }\r\n}\r\n\r\nFunction Get-InstalledApplication {\r\n    [CmdletBinding()]\r\n    Param (\r\n        [Parameter(Mandatory = $false)]\r\n        [ValidateNotNullorEmpty()]\r\n        [string[]]$Name,\r\n        [Parameter(Mandatory = $false)]\r\n        [ValidateNotNullorEmpty()]\r\n        [string]$ProductCode\r\n    )\r\n\r\n    Begin {\r\n        [string[]]$regKeyApplications = 'Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall', 'Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Wow6432Node\\Microsoft\\Windows\\CurrentVersion\\Uninstall'\r\n    }\r\n    Process { \r\n        ## Enumerate the installed applications from the registry for applications that have the \"DisplayName\" property\r\n        [psobject[]]$regKeyApplication = @()\r\n        ForEach ($regKey in $regKeyApplications) {\r\n            If (Test-Path -LiteralPath $regKey -ErrorAction 'SilentlyContinue' -ErrorVariable '+ErrorUninstallKeyPath') {\r\n                [psobject[]]$UninstallKeyApps = Get-ChildItem -LiteralPath $regKey -ErrorAction 'SilentlyContinue' -ErrorVariable '+ErrorUninstallKeyPath'\r\n                ForEach ($UninstallKeyApp in $UninstallKeyApps) {\r\n                    Try {\r\n                        [psobject]$regKeyApplicationProps = Get-ItemProperty -LiteralPath $UninstallKeyApp.PSPath -ErrorAction 'Stop'\r\n                        If ($regKeyApplicationProps.DisplayName) { [psobject[]]$regKeyApplication += $regKeyApplicationProps }\r\n                    }\r\n                    Catch {\r\n                        Continue\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        ## Create a custom object with the desired properties for the installed applications and sanitize property details\r\n        [psobject[]]$installedApplication = @()\r\n        ForEach ($regKeyApp in $regKeyApplication) {\r\n            Try {\r\n                [string]$appDisplayName = ''\r\n                [string]$appDisplayVersion = ''\r\n                [string]$appPublisher = ''\r\n\r\n                ## Bypass any updates or hotfixes\r\n                If (($regKeyApp.DisplayName -match '(?i)kb\\d+') -or ($regKeyApp.DisplayName -match 'Cumulative Update') -or ($regKeyApp.DisplayName -match 'Security Update') -or ($regKeyApp.DisplayName -match 'Hotfix')) {\r\n                    Continue\r\n                }\r\n\r\n                ## Remove any control characters which may interfere with logging and creating file path names from these variables\r\n                $appDisplayName = $regKeyApp.DisplayName -replace '[^\\u001F-\\u007F]', ''\r\n                $appDisplayVersion = $regKeyApp.DisplayVersion -replace '[^\\u001F-\\u007F]', ''\r\n                $appPublisher = $regKeyApp.Publisher -replace '[^\\u001F-\\u007F]', ''\r\n\r\n                ## Determine if application is a 64-bit application\r\n                [boolean]$Is64BitApp = If (($is64Bit) -and ($regKeyApp.PSPath -notmatch '^Microsoft\\.PowerShell\\.Core\\\\Registry::HKEY_LOCAL_MACHINE\\\\SOFTWARE\\\\Wow6432Node')) { $true } Else { $false }\r\n\r\n                If ($ProductCode) {\r\n                    ## Verify if there is a match with the product code passed to the script\r\n                    If ($regKeyApp.PSChildName -match [regex]::Escape($productCode)) {\r\n                        $installedApplication += New-Object -TypeName 'PSObject' -Property @{\r\n                            UninstallSubkey    = $regKeyApp.PSChildName\r\n                            ProductCode        = If ($regKeyApp.PSChildName -match $MSIProductCodeRegExPattern) { $regKeyApp.PSChildName } Else { [string]::Empty }\r\n                            DisplayName        = $appDisplayName\r\n                            DisplayVersion     = $appDisplayVersion\r\n                            UninstallString    = $regKeyApp.UninstallString\r\n                            InstallSource      = $regKeyApp.InstallSource\r\n                            InstallLocation    = $regKeyApp.InstallLocation\r\n                            InstallDate        = $regKeyApp.InstallDate\r\n                            Publisher          = $appPublisher\r\n                            Is64BitApplication = $Is64BitApp\r\n                        }\r\n                    }\r\n                }\r\n\r\n                If ($name) {\r\n                    ## Verify if there is a match with the application name(s) passed to the script\r\n                    ForEach ($application in $Name) {\r\n                        $applicationMatched = $false\r\n                        #  Check for a contains application name match\r\n                        If ($regKeyApp.DisplayName -match [regex]::Escape($application)) {\r\n                            $applicationMatched = $true\r\n                        }\r\n\r\n                        If ($applicationMatched) {\r\n                            $installedApplication += New-Object -TypeName 'PSObject' -Property @{\r\n                                UninstallSubkey    = $regKeyApp.PSChildName\r\n                                ProductCode        = If ($regKeyApp.PSChildName -match $MSIProductCodeRegExPattern) { $regKeyApp.PSChildName } Else { [string]::Empty }\r\n                                DisplayName        = $appDisplayName\r\n                                DisplayVersion     = $appDisplayVersion\r\n                                UninstallString    = $regKeyApp.UninstallString\r\n                                InstallSource      = $regKeyApp.InstallSource\r\n                                InstallLocation    = $regKeyApp.InstallLocation\r\n                                InstallDate        = $regKeyApp.InstallDate\r\n                                Publisher          = $appPublisher\r\n                                Is64BitApplication = $Is64BitApp\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            Catch {\r\n                Continue\r\n            }\r\n        }\r\n        Write-Output -InputObject $installedApplication\r\n    }\r\n}\r\n\r\nFunction Set-RegistryValue {\r\n    [CmdletBinding()]\r\n    param (\r\n        [Parameter()]\r\n        [string]\r\n        $Name,\r\n        [Parameter()]\r\n        [string]\r\n        $Path,\r\n        [Parameter()]\r\n        [string]$PropertyType,\r\n        [Parameter()]\r\n        $Value\r\n    )\r\n    Begin {\r\n        Write-Log -message \"[Set-RegistryValue]: Setting Registry Value: $Name\"\r\n    }\r\n    Process {\r\n        # Create the registry Key(s) if necessary.\r\n        If (!(Test-Path -Path $Path)) {\r\n            Write-Log -message \"[Set-RegistryValue]: Creating Registry Key: $Path\"\r\n            New-Item -Path $Path -Force | Out-Null\r\n        }\r\n        # Check for existing registry setting\r\n        $RemoteValue = Get-ItemProperty -Path $Path -Name $Name -ErrorAction SilentlyContinue\r\n        If ($RemoteValue) {\r\n            # Get current Value\r\n            $CurrentValue = Get-ItemPropertyValue -Path $Path -Name $Name\r\n            Write-Log -message \"[Set-RegistryValue]: Current Value of $($Path)\\$($Name) : $CurrentValue\"\r\n            If ($Value -ne $CurrentValue) {\r\n                Write-Log -message \"[Set-RegistryValue]: Setting Value of $($Path)\\$($Name) : $Value\"\r\n                Set-ItemProperty -Path $Path -Name $Name -Value $Value -Force | Out-Null\r\n            } Else {\r\n                Write-Log -message \"[Set-RegistryValue]: Value of $($Path)\\$($Name) is already set to $Value\"\r\n            }           \r\n        }\r\n        Else {\r\n            Write-Log -message \"[Set-RegistryValue]: Setting Value of $($Path)\\$($Name) : $Value\"\r\n            New-ItemProperty -Path $Path -Name $Name -PropertyType $PropertyType -Value $Value -Force | Out-Null\r\n        }\r\n        Start-Sleep -Milliseconds 500\r\n    }\r\n    End {\r\n    }\r\n}\r\n\r\n#endregion Functions\r\n$Script:Name = 'Set-SessionHostConfiguration'\r\n# from https://learn.microsoft.com/en-us/microsoftteams/new-teams-vdi-requirements-deploy#recommended-for-exclusion\r\n# only specifying the folders that do not affect performance per article\r\n$redirectionsXMLContent = @'\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<FrxProfileFolderRedirection ExcludeCommonFolders=\"0\">\r\n<Excludes>\r\n<Exclude Copy=\"0\">AppData\\Local\\Packages\\MSTeams_8wekyb3d8bbwe\\LocalCache\\Microsoft\\MSTeams\\Logs</Exclude>\r\n<Exclude Copy=\"0\">AppData\\Local\\Packages\\MSTeams_8wekyb3d8bbwe\\LocalCache\\Microsoft\\MSTeams\\PerfLog</Exclude>\r\n<Exclude Copy=\"0\">AppData\\Local\\Packages\\MSTeams_8wekyb3d8bbwe\\LocalCache\\Microsoft\\MSTeams\\EBWebView\\WV2Profile_tfw\\GPUCache</Exclude>\r\n<Exclude Copy=\"0\">AppData\\Local\\Packages\\Microsoft.Windows.StartMenuExperienceHost_cw5n1h2txyewy\\TempState</Exclude>\r\n</Excludes>\r\n<Includes>\r\n</Includes>\r\n</FrxProfileFolderRedirection>\r\n'@\r\n\r\nNew-Log -Path (Join-Path -Path $env:SystemRoot -ChildPath 'Logs')\r\nwrite-log -message \"*** Parameter Values ***\"\r\nWrite-Log -message \"AmdVmSize: $AmdVmSize\"\r\nWrite-Log -message \"NvidiaVmSize: $NvidiaVmSize\"\r\nWrite-Log -message \"DisableUpdates: $DisableUpdates\"\r\n[bool]$ConfigureFSLogix = [System.Convert]::ToBoolean($ConfigureFSLogix)\r\nWrite-Log -message \"ConfigureFSLogix: $ConfigureFSLogix\"\r\n\r\n#Convert CloudCache to Boolean\r\n$CloudCache = [System.Convert]::ToBoolean($CloudCache)\r\nWrite-Log -message \"CloudCache: $CloudCache\"\r\n#Convert Shares to Array\r\n[array]$Shares = ConvertFrom-JsonString -JsonString $Shares -Name 'Shares'\r\n$ProfileShareName = $Shares[0]\r\nif ($Shares.Count -gt 1) {\r\n    $OfficeShareName = $Shares[1]\r\n} Else {\r\n    $OfficeShareName = $null\r\n}\r\n\r\nWrite-Log -message \"ProfileShareName: $ProfileShareName\"\r\nWrite-Log -message \"OfficeShareName: $OfficeShareName\"\r\nWrite-Log -message \"StorageService: $StorageService\"\r\n\r\n$TeamsInstalled = Get-AppxProvisionedPackage -Online | Where-Object {$_.DisplayName -eq 'MSTeams'}\r\n$M365AppsInstalled = Get-InstalledApplication -Name 'Microsoft 365 Apps'\r\n\r\nif ($M365AppsInstalled) {\r\n    Write-Log -message 'New Microsoft 365 Apps are installed on this image.'\r\n}\r\n\r\nif ($TeamsInstalled) {\r\n    Write-Log -message 'New Teams Client is installed on this image.'\r\n}\r\n\r\nWrite-Log -message \"*** Building Array of Registry Settings ***\"\r\n$RegSettings = New-Object System.Collections.ArrayList\r\nIf ($DisableUpdates -eq 'true') {\r\n    # Disable Automatic Updates: https://learn.microsoft.com/azure/virtual-desktop/set-up-customize-master-image#disable-automatic-updates\r\n    $RegSettings.Add(@{Path = 'HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\WindowsUpdate\\AU'; Name = 'NoAutoUpdate'; PropertyType = 'DWORD'; Value = 1})\r\n    # Disable Edge Updates : https://learn.microsoft.com/en-us/deployedge/microsoft-edge-update-policies#updatedefault\r\n    $RegSettings.Add(@{Path = 'HKLM:\\SOFTWARE\\Policies\\Microsoft\\EdgeUpdate'; Name = 'UpdateDefault'; PropertyType = 'DWORD'; Value = 0})\r\n    # Set the OneDrive Update Ring to Deferred: https://learn.microsoft.com/en-us/sharepoint/use-group-policy#set-the-sync-app-update-ring\r\n    $RegSettings.Add(@{Path = 'HKLM:\\SOFTWARE\\Policies\\Microsoft\\OneDrive'; Name = 'GPOSetUpdateRing'; PropertyType = 'DWORD'; Value = 0})\r\n    If ($M365AppsInstalled) {\r\n        # Disable Office Automatic Updates: https://learn.microsoft.com/azure/virtual-desktop/set-up-customize-master-image#disable-office-automatic-updates\r\n        $RegSettings.Add(@{Path = 'HKLM:\\SOFTWARE\\Policies\\Microsoft\\office\\16.0\\common\\officeupdate'; Name = 'hideupdatenotifications'; PropertyType = 'DWORD'; Value = 1})\r\n        $RegSettings.Add(@{Path = 'HKLM:\\SOFTWARE\\Policies\\Microsoft\\office\\16.0\\common\\officeupdate'; Name = 'hideenabledisableupdates'; PropertyType = 'DWORD'; Value = 1})\r\n    }\r\n    If ($TeamsInstalled) {\r\n        # Disable Teams Auto-Update: https://learn.microsoft.com/en-us/microsoftteams/new-teams-vdi-requirements-deploy#disable-new-teams-autoupdate-in-non-persistent-vdi\r\n        $RegSettings.Add(@{Path = 'HKLM:\\SOFTWARE\\Microsoft\\Teams'; Name = 'disableAutoUpdate'; PropertyType = 'DWORD'; Value = 1})\r\n    }\r\n}\r\n# Enable Time Zone Redirection: https://learn.microsoft.com/azure/virtual-desktop/set-up-customize-master-image#set-up-time-zone-redirection\r\n$RegSettings.Add(@{Path = 'HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows NT\\Terminal Services'; Name = 'fEnableTimeZoneRedirection'; PropertyType = 'DWORD'; Value = 1})\r\n\r\n##############################################################\r\n#  Add GPU Settings\r\n##############################################################\r\n# This setting applies to the VM Size's recommended for AVD with a GPU\r\nif ($AmdVmSize -eq 'true' -or $NvidiaVmSize -eq 'true') {\r\n    Write-Log -message \"Adding GPU Settings\"\r\n    # Configure GPU-accelerated app rendering: https://learn.microsoft.com/azure/virtual-desktop/configure-vm-gpu#configure-gpu-accelerated-app-rendering\r\n    $RegSettings.Add(@{Path = 'HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows NT\\Terminal Services'; Name = 'bEnumerateHWBeforeSW'; PropertyType = 'DWORD'; Value = 1})\r\n    # Configure fullscreen video encoding: https://learn.microsoft.com/azure/virtual-desktop/configure-vm-gpu#configure-fullscreen-video-encoding\r\n    $RegSettings.Add(@{Path = 'HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows NT\\Terminal Services'; Name = 'AVC444ModePreferred'; PropertyType = 'DWORD'; Value = 1})\r\n}\r\n\r\n# This setting applies only to VM Size's recommended for AVD with a Nvidia GPU\r\nif($NvidiaVmSize -eq 'true') {\r\n    Write-Log -message \"Adding Nvidia GPU Settings\"\r\n    # Configure GPU-accelerated frame encoding: https://learn.microsoft.com/azure/virtual-desktop/configure-vm-gpu#configure-gpu-accelerated-frame-encoding\r\n    $RegSettings.Add(@{Path = 'HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows NT\\Terminal Services'; Name = 'AVChardwareEncodePreferred'; PropertyType = 'DWORD'; Value = 1})\r\n}\r\n\r\nIf ($ConfigureFSLogix) {\r\n    # Create Array Lists so it is easy to add them\r\n    [System.Collections.ArrayList]$LocalProfileContainerPaths = @()\r\n    [System.Collections.ArrayList]$LocalCloudCacheProfileContainerPaths = @()\r\n    [System.Collections.ArrayList]$LocalOfficeContainerPaths = @()\r\n    [System.Collections.ArrayList]$LocalCloudCacheOfficeContainerPaths = @()\r\n    [System.Collections.ArrayList]$RemoteProfileContainerPaths = @()\r\n    [System.Collections.ArrayList]$RemoteCloudCacheProfileContainerPaths = @()\r\n    [System.Collections.ArrayList]$RemoteOfficeContainerPaths = @()\r\n    [System.Collections.ArrayList]$RemoteCloudCacheOfficeContainerPaths = @()\r\n\r\n    switch($StorageService) {\r\n        'AzureFiles' {\r\n            Write-Log -message \"Gathering Azure Files Storage Account Parameters\"\r\n            # Convert escaped JSON strings to arrays\r\n            [array]$OSSGroups = ConvertFrom-JsonString -JsonString $OSSGroups -Name 'OSSGroups'\r\n            [array]$LocalStorageAccountNames = ConvertFrom-JsonString -JsonString $LocalStorageAccountNames -Name 'LocalStorageAccountNames'\r\n            [array]$LocalStorageAccountKeys = ConvertFrom-JsonString -JsonString $LocalStorageAccountKeys -Name 'LocalStorageAccountKeys' -SensitiveValues\r\n            [array]$RemoteStorageAccountNames = ConvertFrom-JsonString -JsonString $RemoteStorageAccountNames -Name 'RemoteStorageAccountNames'\r\n            [array]$RemoteStorageAccountKeys = ConvertFrom-JsonString -JsonString $RemoteStorageAccountKeys -Name 'RemoteStorageAccountKeys' -SensitiveValues\r\n            \r\n            Write-Log -message \"*** Begin Processing Storage Accounts ***\"\r\n            # Local Storage Accounts\r\n            Write-Log -message \"Processing Local Storage Accounts\"\r\n            For ($i = 0; $i -lt $LocalStorageAccountNames.Count; $i++) {\r\n                $SAFQDN = \"$($LocalStorageAccountNames[$i]).file.$StorageAccountDNSSuffix\"\r\n                Write-Log -message \"LocalStorageAccountFQDN: '$SAFQDN'\"\r\n                If ($LocalStorageAccountKeys.Count -gt 0) {\r\n                    If ($LocalStorageAccountKeys[$i]) {\r\n                        Write-Log -message \"Adding Local Storage Account Key for '$SAFQDN' to Credential Manager\"\r\n                        Start-Process -FilePath 'cmdkey.exe' -ArgumentList \"/add:$SAFQDN /user:localhost\\$($LocalStorageAccountNames[$i]) /pass:$($LocalStorageAccountKeys[$i])\" -NoNewWindow -Wait\r\n                    }\r\n                }\r\n                If ($OfficeShareName) {\r\n                    $LocalOfficeContainerPaths.Add(\"\\\\$SAFQDN\\$OfficeShareName\")\r\n                    Write-Log -message \"LocalOfficeContainerPath: '\\\\$($SAFQDN)\\$($OfficeShareName)'\"                \r\n                    $LocalCloudCacheOfficeContainerPaths.Add(\"type=smb,connectionString=\\\\$($SAFQDN)\\$($OfficeShareName)\")\r\n                    Write-Log -message \"LocalCloudCacheOfficeContainerPath: 'type=smb,connectionString=\\\\$($SAFQDN)\\$($OfficeShareName)'\"\r\n                }\r\n                $LocalProfileContainerPaths.Add(\"\\\\$($SAFQDN)\\$($ProfileShareName)\")\r\n                Write-Log -message \"LocalProfileContainerPath: \\\\$($SAFQDN)\\$($ProfileShareName)\"\r\n                $LocalCloudCacheProfileContainerPaths.Add(\"type=smb,connectionString=\\\\$($SAFQDN)\\$($ProfileShareName)\")\r\n                Write-Log -message \"LocalCloudCacheProfileContainerPath: 'type=smb,connectionString=\\\\$($SAFQDN)\\$($ProfileShareName)'\"\r\n            }\r\n            # Remote / Existing Storage Accounts\r\n            If ($RemoteStorageAccountNames.Count -gt 0) {\r\n                Write-Log Info \"Processing Remote Storage Accounts\"\r\n                For ($i = 0; $i -lt $RemoteStorageAccountNames.Count; $i++) {\r\n                    $SAFQDN = \"$($RemoteStorageAccountNames[$i]).file.$StorageAccountDNSSuffix\"\r\n                    Write-Log -message \"RemoteStorageAccountFQDN: '$SAFQDN'\"\r\n                    If ($RemoteStorageAccountKeys.Count -gt 0) {\r\n                        If ($RemoteStorageAccountKeys[$i]) {\r\n                            Write-Log -message \"Adding Remote Storage Account Key for '$SAFQDN' to Credential Manager\"\r\n                            Start-Process -FilePath 'cmdkey.exe' -ArgumentList \"/add:$($SAFQDN) /user:localhost\\$($RemoteStorageAccountNames[$i]) /pass:$($RemoteStorageAccountKeys[$i])\" -NoNewWindow -Wait\r\n                        }\r\n                    }\r\n                    If ($OfficeShareName) {\r\n                        $RemoteOfficeContainerPaths.Add(\"\\\\$($SAFQDN)\\$($OfficeShareName)\")\r\n                        Write-Log -message \"RemoteOfficeContainerPath: '\\\\$($SAFQDN)\\$($OfficeShareName)'\"\r\n                        $RemoteCloudCacheOfficeContainerPaths.Add(\"type=smb,connectionString=\\\\$($SAFQDN)\\$($OfficeShareName)\")\r\n                        Write-Log -message \"RemoteCloudCacheOfficeContainerPath: 'type=smb,connectionString=\\\\$($SAFQDN)\\$($OfficeShareName)\"\r\n                    }\r\n                    $RemoteProfileContainerPaths.Add(\"\\\\$(SAFQDN)\\$(ProfileShareName)\")\r\n                    Write-Log -message \"RemoteProfileContainerPath: '\\\\$($SAFQDN)\\$(ProfileShareName)'\"\r\n                    $RemoteCloudCacheProfileContainerPaths.Add(\"type=smb,connectionString=\\\\$($SAFQDN)\\$($ProfileShareName)\")\r\n                    Write-Log -message \"RemoteCloudCacheProfileContainerPath: 'type=smb,connectionString=\\\\$($SAFQDN)\\$($ProfileShareName)'\"\r\n                }\r\n            }\r\n            Write-Log -message \"Done Adding UNC Paths to arrays.\"\r\n        }\r\n        'AzureNetAppFiles' {\r\n            Write-Log -message \"Gathering Azure NetApp Files Storage Account Parameters\"\r\n            # Convert escaped JSON strings to arrays\r\n            [array]$LocalNetAppServers = ConvertFrom-JsonString -JsonString $LocalNetAppServers -Name 'LocalNetAppServers'\r\n            [array]$RemoteNetAppServers = ConvertFrom-JsonString -JsonString $RemoteNetAppServers -Name 'RemoteNetAppServers' \r\n            Write-Log -message \"Processing Local Azure NetApp Servers\"        \r\n            $LocalProfileContainerPaths.Add(\"\\\\$($LocalNetAppServers[0])\\$($ProfileShareName)\")\r\n            Write-Log -message \"LocalProfileContainerPath: '\\\\$($LocalNetAppServers[0])\\$($ProfileShareName)'\"\r\n            $LocalCloudCacheProfileContainerPaths.Add(\"type=smb,connectionString=\\\\$($LocalNetAppServers[0])\\$($ProfileShareName)\")\r\n            Write-Log -message \"LocalCloudCacheProfileContainerPath: 'type=smb,connectionString=\\\\$($LocalNetAppServers[0])\\$($ProfileShareName)'\"\r\n            If($LocalNetAppServers.Length -gt 1 -and $OfficeShareName) {            \r\n                $LocalOfficeContainerPaths.Add(\"\\\\$($LocalNetAppServers[1])\\$($OfficeShareName)\")\r\n                Write-Log -message \"LocalOfficeContainerPath: \\\\$($LocalNetAppServers[1])\\$($OfficeShareName)\"\r\n                $LocalCloudCacheOfficeContainerPaths.Add(\"type=smb,connectionString=\\\\$($LocalNetAppServers[1])\\$($OfficeShareName)\")\r\n                Write-Log -message \"LocalCloudCacheOfficeContainerPath: 'type=smb,connectionString=\\\\$($LocalNetAppServers[1])\\$($OfficeShareName)'\"\r\n            }\r\n            \r\n            If ($RemoteNetAppServers.Count -gt 0) {\r\n                Write-Log -message \"Processing Remote Azure NetApp Servers\"\r\n                $RemoteProfileContainerPaths.Add(\"\\\\$($RemoteNetAppServers[0])\\$($ProfileShareName)\")\r\n                Write-Log -message \"RemoteProfileContainerPath: '\\\\$($RemoteNetAppServers[0])\\$($ProfileShareName)'\"\r\n                $RemoteCloudCacheProfileContainerPaths.Add(\"type=smb,connectionString=\\\\$($RemoteNetAppServers[0])\\$($ProfileShareName)\")\r\n                Write-Log -message \"RemoteCloudCacheProfileContainerPath: 'type=smb,connectionString=\\\\$($RemoteNetAppServers[0])\\$($ProfileShareName)\"\r\n                If ($RemoteNetAppShares.Length -gt 1 -and $OfficeShareName) {\r\n                    $RemoteOfficeContainerPaths.Add(\"\\\\$($RemoteNetAppServers[1])\\$($OfficeShareName)\")\r\n                    Write-Log -message \"RemoteOfficeContainerPath: '\\\\$($RemoteNetAppServers[1])\\$($OfficeShareName)'\"\r\n                    $RemoteCloudCacheOfficeContainers.Add(\"type=smb,connectionString=\\\\$($RemoteNetAppServers[1])\\$($OfficeShareName)\")\r\n                    Write-Log -message \"RemoteCloudCacheOfficeContainerPath: 'type=smb,connectionString=\\\\$($RemoteNetAppServers[1])\\$($OfficeShareName)'\"\r\n                }        \r\n            }\r\n        }\r\n    }\r\n\r\n    Write-Log -message \"Adding Common FSLogix Settings\"\r\n    # Cleans up an invalid sessions to enable a successful sign-in: https://learn.microsoft.com/en-us/fslogix/reference-configuration-settings?tabs=profiles#cleanupinvalidsessions\r\n    $RegSettings.Add([PSCustomObject]@{ Name = 'CleanupInvalidSessions'; Path = 'HKLM:\\SOFTWARE\\FSLogix\\Apps'; PropertyType = 'DWord'; Value = 1 })\r\n    # Enables Fslogix profile containers: https://learn.microsoft.com/fslogix/profile-container-configuration-reference#enabled\r\n    $RegSettings.Add([PSCustomObject]@{ Name = 'Enabled'; Path = 'HKLM:\\SOFTWARE\\Fslogix\\Profiles'; PropertyType = 'DWord'; Value = 1 })\r\n    # Deletes a local profile if it exists and matches the profile being loaded from VHD: https://learn.microsoft.com/fslogix/profile-container-configuration-reference#deletelocalprofilewhenvhdshouldapply\r\n    $RegSettings.Add([PSCustomObject]@{ Name = 'DeleteLocalProfileWhenVHDShouldApply'; Path = 'HKLM:\\SOFTWARE\\FSLogix\\Profiles'; PropertyType = 'DWord'; Value = 1 })\r\n    # The folder created in the Fslogix fileshare will begin with the username instead of the SID: https://learn.microsoft.com/fslogix/profile-container-configuration-reference#flipflopprofiledirectoryname\r\n    $RegSettings.Add([PSCustomObject]@{ Name = 'FlipFlopProfileDirectoryName'; Path = 'HKLM:\\SOFTWARE\\FSLogix\\Profiles'; PropertyType = 'DWord'; Value = 1 })\r\n    # Prevent Login with a failure: https://learn.microsoft.com/en-us/fslogix/reference-configuration-settings?tabs=profiles#preventloginwithfailure\r\n    $RegSettings.Add([PSCustomObject]@{ Name = 'PreventLoginWithFailure'; Path = 'HKLM:\\SOFTWARE\\FSLogix\\Profiles'; PropertyType = 'DWord'; Value = 1 })\r\n    # Prevent Login with a temporary profile: https://learn.microsoft.com/en-us/fslogix/reference-configuration-settings?tabs=profiles#preventloginwithtempprofile\r\n    $RegSettings.Add([PSCustomObject]@{ Name = 'PreventLoginWithTempProfile'; Path = 'HKLM:\\SOFTWARE\\FSLogix\\Profiles'; PropertyType = 'DWord'; Value = 1 })\r\n    # Specifies the number of seconds to wait between retries when attempting to reattach the VHD(x) container if it's disconnected unexpectedly: https://learn.microsoft.com/fslogix/reference-configuration-settings?tabs=profiles#reattachintervalseconds\r\n    $RegSettings.Add([PSCustomObject]@{ Name = 'ReAttachIntervalSeconds'; Path = 'HKLM:\\SOFTWARE\\FSLogix\\Profiles'; PropertyType = 'DWord'; Value = 15 })\r\n    # Specifies the number of times the system should attempt to reattach the VHD(x) container if it's disconnected unexpectedly: https://learn.microsoft.com/fslogix/reference-configuration-settings?tabs=profiles#reattachretrycount\r\n    $RegSettings.Add([PSCustomObject]@{ Name = 'ReAttachRetryCount'; Path = 'HKLM:\\SOFTWARE\\FSLogix\\Profiles'; PropertyType = 'DWord'; Value = 3 })\r\n    # Specifies the maximum size of the user's container in megabytes. Newly created VHD(x) containers are of this size: https://learn.microsoft.com/fslogix/reference-configuration-settings?tabs=profiles#sizeinmbs\r\n    $RegSettings.Add([PSCustomObject]@{ Name = 'SizeInMBs'; Path = 'HKLM:\\SOFTWARE\\FSLogix\\Profiles'; PropertyType = 'DWord'; Value = 30000 })\r\n    # Specifies the file extension for the profile containers: https://learn.microsoft.com/fslogix/reference-configuration-settings?tabs=profiles#volumetype\r\n    $RegSettings.Add([PSCustomObject]@{ Name = 'VolumeType'; Path = 'HKLM:\\SOFTWARE\\FSLogix\\Profiles'; PropertyType = 'String'; Value = 'VHDX' })\r\n\r\n    If ($LocalStorageAccountKeys.Count -gt 0) {\r\n        Write-Log -message \"Adding AccessNetworkAsComputerObject for cloud only identities.\"\r\n        # Attach the users VHD(x) as the computer: https://learn.microsoft.com/en-us/fslogix/reference-configuration-settings?tabs=profiles#accessnetworkascomputerobject\r\n        $RegSettings.Add([PSCustomObject]@{Name = 'AccessNetworkAsComputerObject'; Path = 'HKLM:\\SOFTWARE\\FSLogix\\Profiles'; PropertyType = 'DWord'; Value = 1 })\r\n    }\r\n\r\n    if ($CloudCache -eq $True) {\r\n        Write-Log -message \"Adding Cloud Cache Settings\"\r\n        # Clear the cloud cache on logoff: https://learn.microsoft.com/en-us/fslogix/reference-configuration-settings?tabs=ccd#clearcacheonlogoff\r\n        $RegSettings.Add([PSCustomObject]@{ Name = 'ClearCacheOnLogoff'; Path = 'HKLM:\\SOFTWARE\\FSLogix\\Profiles'; PropertyType = 'DWord'; Value = 1 })\r\n    }\r\n\r\n    If ($LocalOfficeContainerPaths.Count -gt 0) {\r\n        Write-Log -message \"Adding Office Container Settings\"    \r\n        # Enables Fslogix office containers: https://learn.microsoft.com/en-us/fslogix/reference-configuration-settings?tabs=odfc#enabled-1   \r\n        $RegSettings.Add([PSCustomObject]@{ Name = 'Enabled'; Path = 'HKLM:\\SOFTWARE\\Policies\\FSLogix\\ODFC'; PropertyType = 'DWord'; Value = 1 })   \r\n        # The folder created in the Fslogix fileshare will begin with the username instead of the SID: https://learn.microsoft.com/en-us/fslogix/reference-configuration-settings?tabs=odfc#flipflopprofiledirectoryname-1\r\n        $RegSettings.Add([PSCustomObject]@{ Name = 'FlipFlopProfileDirectoryName'; Path = 'HKLM:\\SOFTWARE\\Policies\\FSLogix\\ODFC'; PropertyType = 'DWord'; Value = 1 })\r\n        # Specifies the number of retries attempted when a VHD(x) file is locked: https://learn.microsoft.com/fslogix/reference-configuration-settings?tabs=odfc#lockedretrycount\r\n        $RegSettings.Add([PSCustomObject]@{ Name = 'LockedRetryCount'; Path = 'HKLM:\\SOFTWARE\\Policies\\FSLogix\\ODFC'; PropertyType = 'DWord'; Value = 3 })\r\n        # Specifies the number of seconds to wait between retries: https://learn.microsoft.com/fslogix/reference-configuration-settings?tabs=odfc#lockedretryinterval\r\n        $RegSettings.Add([PSCustomObject]@{ Name = 'LockedRetryInterval'; Path = 'HKLM:\\SOFTWARE\\Policies\\FSLogix\\ODFC'; PropertyType = 'DWord'; Value = 15 })\r\n        # Prevent Login with a failure: https://learn.microsoft.com/en-us/fslogix/reference-configuration-settings?tabs=odfc#preventloginwithfailure-1\r\n        $RegSettings.Add([PSCustomObject]@{ Name = 'PreventLoginWithFailure'; Path = 'HKLM:\\SOFTWARE\\Policies\\FSLogix\\ODFC'; PropertyType = 'DWord'; Value = 1 })\r\n        # Prevent Login with Temporary Profile: https://learn.microsoft.com/en-us/fslogix/reference-configuration-settings?tabs=odfc#preventloginwithtempprofile-1\r\n        $RegSettings.Add([PSCustomObject]@{ Name = 'PreventLoginWithTempProfile'; Path = 'HKLM:\\SOFTWARE\\Policies\\FSLogix\\ODFC'; PropertyType = 'DWord'; Value = 1 })    \r\n        # Specifies the number of seconds to wait between retries when attempting to reattach the VHD(x) container if it's disconnected unexpectedly: https://learn.microsoft.com/fslogix/reference-configuration-settings?tabs=odfc#reattachintervalseconds\r\n        $RegSettings.Add([PSCustomObject]@{ Name = 'ReAttachIntervalSeconds'; Path = 'HKLM:\\SOFTWARE\\Policies\\FSLogix\\ODFC'; PropertyType = 'DWord'; Value = 15 })\r\n        # Specifies the number of times the system should attempt to reattach the VHD(x) container if it's disconnected unexpectedly: https://learn.microsoft.com/fslogix/reference-configuration-settings?tabs=odfc#reattachretrycount\r\n        $RegSettings.Add([PSCustomObject]@{ Name = 'ReAttachRetryCount'; Path = 'HKLM:\\SOFTWARE\\Policies\\FSLogix\\ODFC'; PropertyType = 'DWord'; Value = 3 })\r\n        # Specifies the maximum size of the user's container in megabytes: https://learn.microsoft.com/fslogix/reference-configuration-settings?tabs=odfc#sizeinmbs\r\n        $RegSettings.Add([PSCustomObject]@{ Name = 'SizeInMBs'; Path = 'HKLM:\\SOFTWARE\\Policies\\FSLogix\\ODFC'; PropertyType = 'DWord'; Value = 30000 })\r\n        # Specifies the type of container: https://learn.microsoft.com/fslogix/reference-configuration-settings?tabs=odfc#volumetype\r\n        $RegSettings.Add([PSCustomObject]@{ Name = 'VolumeType'; Path = 'HKLM:\\SOFTWARE\\Policies\\FSLogix\\ODFC'; PropertyType = 'String'; Value = 'VHDX' })\r\n        If ($LocalStorageAccountKeys.Count -gt 0) {\r\n            Write-Log -message \"Adding AccessNetworkAsComputerObject for cloud only identities.\"\r\n            # Attach the users VHD(x) as the computer: https://learn.microsoft.com/en-us/fslogix/reference-configuration-settings?tabs=odfc#accessnetworkascomputerobject-1\r\n            $RegSettings.Add([PSCustomObject]@{ Name = 'AccessNetworkAsComputerObject'; Path = 'HKLM:\\SOFTWARE\\Policies\\FSLogix\\ODFC'; PropertyType = 'DWord'; Value = 1 })\r\n        }\r\n        If ($CloudCache -eq $True) {\r\n            Write-Log -message \"Adding Cloud Cache Settings\"\r\n            # Clear the cloud cache on logoff: https://learn.microsoft.com/en-us/fslogix/reference-configuration-settings?tabs=ccd#clearcacheonlogoff\r\n            $RegSettings.Add([PSCustomObject]@{ Name = 'ClearCacheOnLogoff'; Path = 'HKLM:\\SOFTWARE\\Policies\\FSLogix\\ODFC'; PropertyType = 'DWord'; Value = 1 })\r\n        }   \r\n    }\r\n\r\n    If ($OSSGroups.Count -gt 0) {\r\n        Write-Log -message \"Adding Object Specific Settings\"\r\n        # Object Specific Settings\r\n        $DomainName = Get-CimInstance -ClassName Win32_ComputerSystem | Select-Object -ExpandProperty Domain\r\n        Write-Log -message \"DomainName: $DomainName\"\r\n        For ($i = 0; $i -lt $OSSGroups.Count; $i++) {\r\n            # Get Domain information\r\n            Write-Log -message \"Getting SID for $($OSSGroups[$i])\"        \r\n            $OSSGroupSID = Convert-GroupToSID -DomainName $DomainName -GroupName $OSSGroups[$i]\r\n            [string]$LocalProfileContainerPath = $LocalProfileContainerPaths[$i]\r\n            Write-Log -message \"LocalProfileContainerPath: '$LocalProfileContainerPath'\"\r\n            [string]$LocalCloudCacheProfileContainerPath = $LocalCloudCacheProfileContainerPaths[$i]\r\n            Write-Log -message \"LocalCloudCacheProfileContainerPath: '$LocalCloudCacheProfileContainerPath'\"\r\n\r\n            If ($RemoteStorageAccountNames) {\r\n                [string]$RemoteProfileContainerPath = $RemoteProfileContainerPaths[$i]\r\n                Write-Log -message \"RemoteProfileContainerPath: '$RemoteProfileContainerPath'\"\r\n                [string]$RemoteCloudCacheProfileContainerPath = $RemoteCloudCacheProfilePaths[$i]\r\n                Write-Log -message \"RemoteCloudCacheProfileContainerPath: '$RemoteCloudCacheProfileContainerPath'\"\r\n                [array]$ProfileContainerPaths = @($LocalProfileContainerPath + $RemoteProfileContainerPath)\r\n                [array]$CloudCacheProfileContainerPaths = @($LocalCloudCacheProfileContainerPath + $RemoteCloudCacheProfileContainerPath)\r\n            } Else {\r\n                [array]$ProfileContainerPaths = @($LocalProfileContainerPath)\r\n                [array]$CloudCacheProfileContainerPaths = @($LocalCloudCacheProfileContainerPath)\r\n            }\r\n\r\n            If ($CloudCache -eq $True) {\r\n                Write-Log -message \"Adding Cloud Cache Profile Container Settings: $OSSGroupSID : '$($CloudCacheProfileContainerPaths -join \"', '\")'\"\r\n                # List of file system locations to search for the user's profile VHD(X) file: https://learn.microsoft.com/en-us/fslogix/reference-configuration-settings?tabs=ccd#ccdlocations\r\n                $RegSettings.Add([PSCustomObject]@{ Name = 'CCDLocations'; Path = \"HKLM:\\SOFTWARE\\FSLogix\\Profiles\\ObjectSpecific\\$OSSGroupSID\"; PropertyType = 'MultiString'; Value = $CloudCacheProfileContainerPaths })\r\n            } Else {\r\n                Write-Log -message \"Adding Profile Container Settings: $OSSGroupSID : '$($ProfileContainerPaths -join \"', '\")'\"\r\n                # List of file system locations to search for the user's profile VHD(X) file: https://learn.microsoft.com/fslogix/profile-container-configuration-reference#vhdlocations\r\n                $RegSettings.Add([PSCustomObject]@{ Name = 'VHDLocations'; Path = \"HKLM:\\SOFTWARE\\FSLogix\\Profiles\\ObjectSpecific\\$OSSGroupSID\"; PropertyType = 'MultiString'; Value = $ProfileContainerPaths })\r\n            }   \r\n\r\n            If ($LocalOfficeContainerPaths.Count -gt 0) {\r\n                [string]$LocalOfficeContainerPath = $LocalOfficeContainerPaths[$i]\r\n                Write-Log -message \"LocalOfficeContainerPath: '$LocalOfficeContainerPath'\"\r\n                [string]$LocalCloudCacheOfficeContainerPath = $LocalCloudCacheOfficeContainerPaths[$i]\r\n                Write-Log -message \"LocalCloudCacheOfficeContainerPath: '$LocalCloudCacheOfficeContainerPath'\"\r\n                If ($RemoteStorageAccountNames) {\r\n                    [string]$RemoteOfficeContainerPath = $RemoteOfficeContainerPaths[$i]\r\n                    Write-Log -message \"RemoteOfficeContainerPath: '$RemoteOfficeContainerPath'\"\r\n                    [string]$RemoteCloudCacheOfficeContainerPath = $RemoteCloudCacheOfficePaths[$i]\r\n                    Write-Log -message \"RemoteCloudCacheOfficeContainerPath: '$RemoteCloudCacheOfficeContainerPath'\"\r\n                    [array]$OfficeContainerPaths = @($LocalOfficeContainerPath + $RemoteOfficeContainerPath)\r\n                    [array]$CloudCacheOfficeContainerPaths = @($LocalCloudCacheOfficeContainerPath + $RemoteCloudCacheOfficeContainerPath)\r\n                } Else {\r\n                    [array]$OfficeContainerPaths = @($LocalOfficeContainerPath)\r\n                    [array]$CloudCacheOfficeContainerPaths = @($LocalCloudCacheOfficeContainerPath)\r\n                }\r\n                If ($CloudCache -eq $True) {\r\n                    Write-Log -message \"Adding Cloud Cache Office Container Settings: $OSSGroupSID : '$($CloudCacheOfficeContainerPaths -join \"', '\")'\"\r\n                    # List of file system locations to search for the user's profile VHD(X) file: https://learn.microsoft.com/en-us/fslogix/reference-configuration-settings?tabs=ccd#ccdlocations\r\n                    $RegSettings.Add([PSCustomObject]@{ Name = 'CCDLocations'; Path = \"HKLM:\\SOFTWARE\\Policies\\FSLogix\\ODFC\\ObjectSpecific\\$OSSGroupSID\"; PropertyType = 'MultiString'; Value = $CloudCacheOfficeContainerPaths })\r\n                } Else {\r\n                    Write-Log -message \"Adding Office Container Settings: $OSSGroupSID : '$($OfficeContainerPaths -join \"', '\")'\"\r\n                    # List of file system locations to search for the user's profile VHD(X) file: https://learn.microsoft.com/en-us/fslogix/reference-configuration-settings?tabs=odfc#vhdlocations-1\r\n                    $RegSettings.Add([PSCustomObject]@{ Name = 'VHDLocations'; Path = \"HKLM:\\SOFTWARE\\Policies\\FSLogix\\ODFC\\ObjectSpecific\\$OSSGroupSID\"; PropertyType = 'MultiString'; Value = $OfficeContainerPaths })\r\n                }\r\n            }  \r\n        }          \r\n    } Else {\r\n        If ($RemoteStorageAccountNames.Count -gt 0) {\r\n            $ProfileContainerPaths = $LocalProfileContainerPaths + $RemoteProfileContainerPaths\r\n            $CloudCacheProfileContainerPaths = $LocalCloudCacheProfileContainerPaths + $RemoteCloudCacheProfileContainerPaths\r\n        } Else {\r\n            $ProfileContainerPaths = $LocalProfileContainerPaths\r\n            $CloudCacheProfileContainerPaths = $LocalCloudCacheProfileContainerPaths\r\n        }\r\n        If ($CloudCache -eq $True) {\r\n            Write-Log -message \"Adding Cloud Cache Profile Container Settings: '$($CloudCacheProfileContainerPaths -join \"', '\")'\"   \r\n            # List of file system locations to search for the user's profile VHD(X) file: https://learn.microsoft.com/en-us/fslogix/reference-configuration-settings?tabs=ccd#ccdlocations \r\n            $RegSettings.Add([PSCustomObject]@{ Name = 'CCDLocations'; Path = 'HKLM:\\SOFTWARE\\FSLogix\\Profiles'; PropertyType = 'MultiString'; Value = $CloudCacheProfileContainerPaths })             \r\n        } Else {\r\n            Write-Log -message \"Adding Profile Container Settings: '$($ProfileContainerPaths -join \"', '\")'\"\r\n            # List of file system locations to search for the user's profile VHD(X) file: https://learn.microsoft.com/fslogix/profile-container-configuration-reference#vhdlocations\r\n            $RegSettings.Add([PSCustomObject]@{ Name = 'VHDLocations'; Path = 'HKLM:\\SOFTWARE\\FSLogix\\Profiles'; PropertyType = 'MultiString'; Value = $ProfileContainerPaths })\r\n        }\r\n        If ($LocalOfficeContainerPaths.Count -gt 0) {\r\n            If ($RemoteStorageAccountNames.Count -gt 0) {\r\n                $OfficeContainerPaths = $LocalOfficeContainerPaths + $RemoteOfficeContainerPaths\r\n                $CloudCacheOfficeContainerPaths = $LocalCloudCacheOfficeContainerPaths + $RemoteCloudCacheOfficeContainerPaths\r\n            } Else {\r\n                $OfficeContainerPaths = $LocalOfficeContainerPaths\r\n                $CloudCacheOfficeContainerPaths = $LocalCloudCacheOfficeContainerPaths\r\n            }\r\n            If ($CloudCache -eq $True) {\r\n                Write-Log -message \"Adding Cloud Cache Office Container Settings: '$($CloudCacheOfficeContainerPaths -join \"', '\")'\"\r\n                # List of file system locations to search for the user's profile VHD(X) file: https://learn.microsoft.com/en-us/fslogix/reference-configuration-settings?tabs=ccd#ccdlocations\r\n                $RegSettings.Add([PSCustomObject]@{ Name = 'CCDLocations'; Path = 'HKLM:\\SOFTWARE\\Policies\\FSLogix\\ODFC'; PropertyType = 'MultiString'; Value = $CloudCacheOfficeContainerPaths })\r\n            } Else {\r\n                Write-Log -message \"Adding Office Container Settings: '$($OfficeContainerPaths -join \"', '\")'\"\r\n                # List of file system locations to search for the user's profile VHD(X) file: https://learn.microsoft.com/en-us/fslogix/reference-configuration-settings?tabs=odfc#vhdlocations-1\r\n                $RegSettings.Add([PSCustomObject]@{ Name = 'VHDLocations'; Path = 'HKLM:\\SOFTWARE\\Policies\\FSLogix\\ODFC'; PropertyType = 'MultiString'; Value = $OfficeContainerPaths })\r\n            }\r\n        }    \r\n    }\r\n    Write-Log -message \"Checking for Teams\"\r\n    If ($TeamsInstalled) {\r\n        Write-Log -message \"Teams is installed\"\r\n        $customRedirFolder = \"$env:ProgramData\\FSLogix_CustomRedirections\"\r\n        Write-Log -message \"Creating custom redirections.xml file in $customRedirFolder\"\r\n        If (-not (Test-Path $customRedirFolder )) {\r\n            New-Item -Path $customRedirFolder -ItemType Directory -Force\r\n        }\r\n        $customRedirFilePath = \"$customRedirFolder\\redirections.xml\"\r\n        $redirectionsXMLContent | Out-File -FilePath $customRedirFilePath -Encoding unicode\r\n        # Path where FSLogix looks for the redirections.xml file to copy from and into the user's profile: https://learn.microsoft.com/en-us/fslogix/reference-configuration-settings?tabs=profiles#redirxmlsourcefolder\r\n        \r\n        $RegSettings.Add(\r\n            [PSCustomObject]@{\r\n                Name         = 'RedirXMLSourceFolder'\r\n                Path         = 'HKLM:\\SOFTWARE\\FSLogix\\Profiles'\r\n                PropertyType = 'String'\r\n                Value        = $customRedirFolder\r\n            }\r\n        )\r\n    }\r\n\r\n    $LocalAdministrator = (Get-LocalUser | Where-Object { $_.SID -like '*-500' }).Name\r\n    $LocalGroups = 'FSLogix Profile Exclude List', 'FSLogix ODFC Exclude List'\r\n    ForEach ($Group in $LocalGroups) {\r\n        If (-not (Get-LocalGroupMember -Group $Group | Where-Object { $_.Name -like \"*$LocalAdministrator\" })) {\r\n            Add-LocalGroupMember -Group $Group -Member $LocalAdministrator\r\n        }\r\n    }\r\n}\r\n\r\nWrite-Log -message \"*** Setting Registry Values ***\"\r\nForEach ($Setting in $RegSettings) {\r\n    Set-RegistryValue -Name $Setting.Name -Path $Setting.Path -PropertyType $Setting.PropertyType -Value $Setting.Value -Verbose\r\n}\r\n\r\n# Resize OS Disk\r\nWrite-Log -message \"Resizing OS Disk\"\r\n$driveLetter = $env:SystemDrive.Substring(0,1)\r\n$size = Get-PartitionSupportedSize -DriveLetter $driveLetter\r\nResize-Partition -DriveLetter $driveLetter -Size $size.SizeMax\r\nWrite-Log -message \"OS Disk Resized\"\r\nClear-EventLog \"Windows PowerShell\" -ErrorAction SilentlyContinue\r\nWrite-Log -message \"Done\"",
                    "amdVmSize": "[and(contains(parameters('virtualMachineSize'), 'Standard_NV'), or(endsWith(parameters('virtualMachineSize'), 'as_v4'), endsWith(parameters('virtualMachineSize'), '_V710_v5')))]",
                    "nvidiaVmSize": "[and(contains(parameters('virtualMachineSize'), 'Standard_NV'), or(endsWith(parameters('virtualMachineSize'), '_v3'), endsWith(parameters('virtualMachineSize'), '_A10_v5')))]",
                    "profileShareName": "[parameters('fslogixFileShareNames')[0]]",
                    "officeShareName": "[if(greater(length(parameters('fslogixFileShareNames')), 1), parameters('fslogixFileShareNames')[1], '')]",
                    "fslogixLocalNetAppProfileShare": "[if(not(empty(parameters('fslogixLocalNetAppServerFqdns'))), format('\\\\{0}\\{1}', parameters('fslogixLocalNetAppServerFqdns')[0], variables('profileShareName')), '')]",
                    "fslogixLocalNetAppOfficeShare": "[if(greater(length(parameters('fslogixLocalNetAppServerFqdns')), 1), format('\\\\{0}\\{1}', parameters('fslogixLocalNetAppServerFqdns')[1], variables('officeShareName')), '')]",
                    "fslogixRemoteNetAppProfileShare": "[if(not(empty(parameters('fslogixRemoteNetAppServerFqdns'))), format('\\\\{0}\\{1}', parameters('fslogixRemoteNetAppServerFqdns')[0], variables('profileShareName')), '')]",
                    "fslogixRemoteNetAppOfficeShare": "[if(greater(length(parameters('fslogixRemoteNetAppServerFqdns')), 1), format('\\\\{0}\\{1}', parameters('fslogixRemoteNetAppServerFqdns')[1], variables('officeShareName')), '')]",
                    "vhdxPath": "\\*\\*.VHDX",
                    "fslogixExclusionsCloudCache": "[if(contains(parameters('fslogixContainerType'), 'CloudCache'), '%ProgramData%\\FSLogix\\Cache\\*;%ProgramData%\\FSLogix\\Proxy\\*', '')]",
                    "fslogixLocalDedupedSANames": "[union(variables('fslogixLocalSANameMinus2'), variables('fslogixLocalSANameMinus2'))]",
                    "fslogixLocalMatchPrefix": "[if(equals(length(variables('fslogixLocalDedupedSANames')), 1), true(), false())]",
                    "fslogixLocalOfficeSharesPrefixMatch": "[if(and(not(empty(variables('fslogixLocalDedupedSANames'))), not(empty(variables('officeShareName')))), createArray(format('\\\\{0}??.file.{1}\\{2}{3}', variables('fslogixLocalDedupedSANames')[0], parameters('storageSuffix'), variables('officeShareName'), variables('vhdxPath'))), createArray())]",
                    "fslogixLocalProfileSharesPrefixMatch": "[if(not(empty(variables('fslogixLocalDedupedSANames'))), createArray(format('\\\\{0}??.file.{1}\\{2}{3}', variables('fslogixLocalDedupedSANames')[0], parameters('storageSuffix'), variables('profileShareName'), variables('vhdxPath'))), createArray())]",
                    "fslogixLocalOfficeSharesNoMatch": "[if(not(empty(variables('officeShareName'))), map(variables('fslogixLocalStorageAccountNames'), lambda('name', createArray(format('\\\\{0}??.file.{1}\\{2}{3}', lambdaVariables('name'), parameters('storageSuffix'), variables('officeShareName'), variables('vhdxPath'))))), createArray())]",
                    "fslogixLocalProfileSharesNoMatch": "[map(variables('fslogixLocalStorageAccountNames'), lambda('name', createArray(format('\\\\{0}.file.{1}}}\\{2}{3}', lambdaVariables('name'), parameters('storageSuffix'), variables('profileShareName'), variables('vhdxPath')))))]",
                    "fslogixLocalOfficeVHDXs": "[if(variables('fslogixLocalMatchPrefix'), variables('fslogixLocalOfficeSharesPrefixMatch'), variables('fslogixLocalOfficeSharesNoMatch'))]",
                    "fslogixLocalProfileVHDXs": "[if(variables('fslogixLocalMatchPrefix'), variables('fslogixLocalProfileSharesPrefixMatch'), variables('fslogixLocalProfileSharesNoMatch'))]",
                    "fslogixRemoteDedupedSANames": "[union(variables('fslogixRemoteSANameMinus2'), variables('fslogixRemoteSANameMinus2'))]",
                    "fslogixRemoteMatchPrefix": "[if(equals(length(variables('fslogixRemoteDedupedSANames')), 1), true(), false())]",
                    "fslogixRemoteOfficeSharesPrefixMatch": "[if(and(not(empty(variables('fslogixRemoteDedupedSANames'))), not(empty(variables('officeShareName')))), createArray(format('\\\\{0}??.file.{1}\\{2}{3}', variables('fslogixRemoteDedupedSANames')[0], parameters('storageSuffix'), variables('officeShareName'), variables('vhdxPath'))), createArray())]",
                    "fslogixRemoteProfileSharesPrefixMatch": "[if(not(empty(variables('fslogixRemoteDedupedSANames'))), createArray(format('\\\\{0}??.file.{1}\\{2}{3}', variables('fslogixRemoteDedupedSANames')[0], parameters('storageSuffix'), variables('profileShareName'), variables('vhdxPath'))), createArray())]",
                    "fslogixRemoteOfficeSharesNoMatch": "[if(and(not(empty(variables('fslogixRemoteStorageAccountNames'))), not(empty(variables('officeShareName')))), map(variables('fslogixRemoteStorageAccountNames'), lambda('name', createArray(format('\\\\{0}??.file.{1}\\{2}{3}', lambdaVariables('name'), parameters('storageSuffix'), variables('officeShareName'), variables('vhdxPath'))))), createArray())]",
                    "fslogixRemoteProfileSharesNoMatch": "[if(not(empty(variables('fslogixRemoteStorageAccountNames'))), map(variables('fslogixRemoteStorageAccountNames'), lambda('name', createArray(format('\\\\{0}.file.{1}}}\\{2}{3}', lambdaVariables('name'), parameters('storageSuffix'), variables('profileShareName'), variables('vhdxPath'))))), createArray())]",
                    "fslogixRemoteOfficeVHDXs": "[if(variables('fslogixRemoteMatchPrefix'), variables('fslogixRemoteOfficeSharesPrefixMatch'), variables('fslogixRemoteOfficeSharesNoMatch'))]",
                    "fslogixRemoteProfileVHDXs": "[if(variables('fslogixRemoteMatchPrefix'), variables('fslogixRemoteProfileSharesPrefixMatch'), variables('fslogixRemoteProfileSharesNoMatch'))]",
                    "fslogixOfficeVHDXs": "[if(equals(parameters('fslogixStorageService'), 'AzureFiles'), union(variables('fslogixLocalOfficeVHDXs'), variables('fslogixRemoteOfficeVHDXs')), if(empty(variables('fslogixLocalNetAppOfficeShare')), createArray(), if(empty(variables('fslogixRemoteNetAppOfficeShare')), createArray(format('{0}{1}', variables('fslogixLocalNetAppOfficeShare'), variables('vhdxPath'))), createArray(format('{0}{1}', variables('fslogixLocalNetAppOfficeShare'), variables('vhdxPath')), format('{0}{1}', variables('fslogixRemoteNetAppOfficeShare'), variables('vhdxPath'))))))]",
                    "fslogixProfileVHDXs": "[if(equals(parameters('fslogixStorageService'), 'AzureFiles'), union(variables('fslogixLocalProfileVHDXs'), variables('fslogixRemoteProfileVHDXs')), if(empty(variables('fslogixLocalNetAppProfileShare')), createArray(), if(empty(variables('fslogixRemoteNetAppProfileShare')), createArray(format('{0}{1}', variables('fslogixRemoteNetAppProfileShare'), variables('vhdxPath'))), createArray(format('{0}{1}', variables('fslogixLocalNetAppProfileShare'), variables('vhdxPath')), format('{0}{1}', variables('fslogixRemoteNetAppProfileShare'), variables('vhdxPath'))))))]",
                    "fslogixExclusionsOfficeString": "[if(contains(parameters('fslogixContainerType'), 'Office'), join(variables('fslogixExclusionsOfficeArray'), ';'), '')]",
                    "fslogixExclusionsProfileString": "[join(variables('fslogixExclusionProfileArray'), ';')]",
                    "fslogixExclusionsArray": [
                      "[format('$TEMP%{0}', variables('vhdxPath'))]",
                      "[format('%WinDir%\\TEMP{0}', variables('vhdxPath'))]",
                      "[variables('fslogixExclusionsCloudCache')]",
                      "[variables('fslogixExclusionsProfileString')]",
                      "[variables('fslogixExclusionsOfficeString')]"
                    ],
                    "fslogixPathExclusions": "[join(filter(variables('fslogixExclusionsArray'), lambda('exclusion', not(empty(lambdaVariables('exclusion'))))), ';')]",
                    "identityType": "[if(if(or(not(contains(parameters('identitySolution'), 'DomainServices')), parameters('enableMonitoring')), true(), false()), if(not(empty(parameters('artifactsUserAssignedIdentityResourceId'))), 'SystemAssigned, UserAssigned', 'SystemAssigned'), if(not(empty(parameters('artifactsUserAssignedIdentityResourceId'))), 'UserAssigned', 'None'))]",
                    "userAssignedIdentities": "[if(not(empty(parameters('artifactsUserAssignedIdentityResourceId'))), createObject(format('{0}', parameters('artifactsUserAssignedIdentityResourceId')), createObject()), createObject())]",
                    "identity": "[if(not(equals(variables('identityType'), 'None')), createObject('type', variables('identityType'), 'userAssignedIdentities', if(not(empty(variables('userAssignedIdentities'))), variables('userAssignedIdentities'), null())), null())]",
                    "ImageReference": "[if(empty(parameters('customImageResourceId')), createObject('publisher', parameters('imagePublisher'), 'offer', parameters('imageOffer'), 'sku', parameters('imageSku'), 'version', 'latest'), createObject('id', parameters('customImageResourceId')))]",
                    "intune": "[contains(parameters('identitySolution'), 'IntuneEnrollment')]"
                  },
                  "resources": [
                    {
                      "copy": {
                        "name": "networkInterface",
                        "count": "[length(range(0, parameters('sessionHostCount')))]"
                      },
                      "type": "Microsoft.Network/networkInterfaces",
                      "apiVersion": "2020-05-01",
                      "name": "[replace(parameters('networkInterfaceNameConv'), '###', padLeft(add(range(0, parameters('sessionHostCount'))[copyIndex()], parameters('sessionHostIndex')), 3, '0'))]",
                      "location": "[parameters('location')]",
                      "tags": "[union(createObject('cm-resource-parent', parameters('hostPoolResourceId')), coalesce(tryGet(parameters('tags'), 'Microsoft.Network/networkInterfaces'), createObject()))]",
                      "properties": {
                        "ipConfigurations": [
                          {
                            "name": "ipconfig",
                            "properties": {
                              "privateIPAllocationMethod": "Dynamic",
                              "subnet": {
                                "id": "[parameters('subnetResourceId')]"
                              },
                              "primary": true,
                              "privateIPAddressVersion": "IPv4"
                            }
                          }
                        ],
                        "enableAcceleratedNetworking": "[parameters('enableAcceleratedNetworking')]",
                        "enableIPForwarding": false
                      }
                    },
                    {
                      "copy": {
                        "name": "virtualMachine",
                        "count": "[length(range(0, parameters('sessionHostCount')))]"
                      },
                      "type": "Microsoft.Compute/virtualMachines",
                      "apiVersion": "2022-11-01",
                      "name": "[replace(parameters('virtualMachineNameConv'), '###', padLeft(add(range(0, parameters('sessionHostCount'))[copyIndex()], parameters('sessionHostIndex')), 3, '0'))]",
                      "location": "[parameters('location')]",
                      "tags": "[union(createObject('cm-resource-parent', parameters('hostPoolResourceId')), coalesce(tryGet(parameters('tags'), 'Microsoft.Compute/virtualMachines'), createObject()))]",
                      "zones": "[if(or(not(empty(parameters('dedicatedHostResourceId'))), not(empty(parameters('dedicatedHostGroupResourceId')))), parameters('dedicatedHostGroupZones'), if(and(equals(parameters('availability'), 'availabilityZones'), not(empty(parameters('availabilityZones')))), createArray(parameters('availabilityZones')[mod(range(0, parameters('sessionHostCount'))[copyIndex()], length(parameters('availabilityZones')))]), null()))]",
                      "identity": "[variables('identity')]",
                      "properties": {
                        "additionalCapabilities": {
                          "hibernationEnabled": "[parameters('hibernationEnabled')]"
                        },
                        "availabilitySet": "[if(equals(parameters('availability'), 'AvailabilitySets'), createObject('id', resourceId('Microsoft.Compute/availabilitySets', format('{0}-{1}', parameters('availabilitySetNamePrefix'), div(add(range(0, parameters('sessionHostCount'))[copyIndex()], parameters('sessionHostIndex')), 200)))), null())]",
                        "hardwareProfile": {
                          "vmSize": "[parameters('virtualMachineSize')]"
                        },
                        "host": "[if(not(empty(parameters('dedicatedHostResourceId'))), createObject('id', parameters('dedicatedHostResourceId')), null())]",
                        "hostGroup": "[if(and(not(empty(parameters('dedicatedHostGroupResourceId'))), empty(parameters('dedicatedHostResourceId'))), createObject('id', parameters('dedicatedHostGroupResourceId')), null())]",
                        "storageProfile": {
                          "imageReference": "[variables('ImageReference')]",
                          "osDisk": {
                            "diskSizeGB": "[if(not(equals(parameters('diskSizeGB'), 0)), parameters('diskSizeGB'), null())]",
                            "name": "[replace(parameters('osDiskNameConv'), '###', padLeft(add(range(0, parameters('sessionHostCount'))[copyIndex()], parameters('sessionHostIndex')), 3, '0'))]",
                            "osType": "Windows",
                            "createOption": "FromImage",
                            "caching": "ReadWrite",
                            "deleteOption": "Delete",
                            "managedDisk": {
                              "diskEncryptionSet": "[if(and(not(equals(parameters('securityType'), 'ConfidentialVM')), not(empty(parameters('diskEncryptionSetResourceId')))), createObject('id', parameters('diskEncryptionSetResourceId')), null())]",
                              "securityProfile": "[if(equals(parameters('securityType'), 'ConfidentialVM'), createObject('diskEncryptionSet', if(not(empty(parameters('diskEncryptionSetResourceId'))), createObject('id', parameters('diskEncryptionSetResourceId')), null()), 'securityEncryptionType', parameters('confidentialVMOSDiskEncryptionType')), null())]",
                              "storageAccountType": "[parameters('diskSku')]"
                            }
                          },
                          "dataDisks": []
                        },
                        "osProfile": {
                          "computerName": "[format('{0}{1}', parameters('virtualMachineNamePrefix'), padLeft(add(range(0, parameters('sessionHostCount'))[copyIndex()], parameters('sessionHostIndex')), 3, '0'))]",
                          "adminUsername": "[parameters('virtualMachineAdminUserName')]",
                          "adminPassword": "[parameters('virtualMachineAdminPassword')]",
                          "windowsConfiguration": {
                            "provisionVMAgent": true,
                            "enableAutomaticUpdates": false
                          },
                          "secrets": [],
                          "allowExtensionOperations": true
                        },
                        "networkProfile": {
                          "networkInterfaces": [
                            {
                              "id": "[resourceId('Microsoft.Network/networkInterfaces', replace(parameters('networkInterfaceNameConv'), '###', padLeft(add(range(0, parameters('sessionHostCount'))[range(0, parameters('sessionHostCount'))[copyIndex()]], parameters('sessionHostIndex')), 3, '0')))]",
                              "properties": {
                                "deleteOption": "Delete"
                              }
                            }
                          ]
                        },
                        "securityProfile": {
                          "encryptionAtHost": "[parameters('encryptionAtHost')]",
                          "securityType": "[if(not(equals(parameters('securityType'), 'Standard')), parameters('securityType'), null())]",
                          "uefiSettings": "[if(not(equals(parameters('securityType'), 'Standard')), createObject('secureBootEnabled', parameters('secureBootEnabled'), 'vTpmEnabled', parameters('vTpmEnabled')), null())]"
                        },
                        "diagnosticsProfile": {
                          "bootDiagnostics": {
                            "enabled": false
                          }
                        },
                        "licenseType": "[if(or(equals(parameters('imagePublisher'), 'MicrosoftWindowsDesktop'), not(empty(parameters('customImageResourceId')))), 'Windows_Client', 'Windows_Server')]"
                      },
                      "dependsOn": [
                        "networkInterface"
                      ]
                    },
                    {
                      "copy": {
                        "name": "extension_JsonADDomainExtension",
                        "count": "[length(range(0, parameters('sessionHostCount')))]"
                      },
                      "condition": "[contains(parameters('identitySolution'), 'DomainServices')]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-03-01",
                      "name": "[format('{0}/{1}', replace(parameters('virtualMachineNameConv'), '###', padLeft(add(range(0, parameters('sessionHostCount'))[range(0, parameters('sessionHostCount'))[copyIndex()]], parameters('sessionHostIndex')), 3, '0')), 'JsonADDomainExtension')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "forceUpdateTag": "[parameters('timeStamp')]",
                        "publisher": "Microsoft.Compute",
                        "type": "JsonADDomainExtension",
                        "typeHandlerVersion": "1.3",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                          "Name": "[parameters('domainName')]",
                          "User": "[parameters('domainJoinUserPrincipalName')]",
                          "Restart": "true",
                          "Options": "3",
                          "OUPath": "[parameters('ouPath')]"
                        },
                        "protectedSettings": {
                          "Password": "[parameters('domainJoinUserPassword')]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', replace(parameters('virtualMachineNameConv'), '###', padLeft(add(range(0, parameters('sessionHostCount'))[range(0, parameters('sessionHostCount'))[copyIndex()]], parameters('sessionHostIndex')), 3, '0')))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "extension_AADLoginForWindows",
                        "count": "[length(range(0, parameters('sessionHostCount')))]"
                      },
                      "condition": "[contains(parameters('identitySolution'), 'EntraId')]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-03-01",
                      "name": "[format('{0}/{1}', replace(parameters('virtualMachineNameConv'), '###', padLeft(add(range(0, parameters('sessionHostCount'))[range(0, parameters('sessionHostCount'))[copyIndex()]], parameters('sessionHostIndex')), 3, '0')), 'AADLoginForWindows')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "publisher": "Microsoft.Azure.ActiveDirectory",
                        "type": "AADLoginForWindows",
                        "typeHandlerVersion": "1.0",
                        "autoUpgradeMinorVersion": true,
                        "settings": "[if(variables('intune'), createObject('mdmId', '0000000a-0000-0000-c000-000000000000'), null())]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', replace(parameters('virtualMachineNameConv'), '###', padLeft(add(range(0, parameters('sessionHostCount'))[range(0, parameters('sessionHostCount'))[copyIndex()]], parameters('sessionHostIndex')), 3, '0')))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "extension_IaasAntimalware",
                        "count": "[length(range(0, parameters('sessionHostCount')))]"
                      },
                      "condition": "[not(startsWith(environment().name, 'USN'))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-03-01",
                      "name": "[format('{0}/{1}', replace(parameters('virtualMachineNameConv'), '###', padLeft(add(range(0, parameters('sessionHostCount'))[range(0, parameters('sessionHostCount'))[copyIndex()]], parameters('sessionHostIndex')), 3, '0')), 'IaaSAntimalware')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "publisher": "Microsoft.Azure.Security",
                        "type": "IaaSAntimalware",
                        "typeHandlerVersion": "1.3",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                          "AntimalwareEnabled": true,
                          "RealtimeProtectionEnabled": "true",
                          "ScheduledScanSettings": {
                            "isEnabled": "true",
                            "day": "7",
                            "time": "120",
                            "scanType": "Quick"
                          },
                          "Exclusions": {
                            "Paths": "[variables('fslogixPathExclusions')]"
                          }
                        }
                      },
                      "dependsOn": [
                        "extension_AADLoginForWindows",
                        "extension_JsonADDomainExtension",
                        "[resourceId('Microsoft.Compute/virtualMachines', replace(parameters('virtualMachineNameConv'), '###', padLeft(add(range(0, parameters('sessionHostCount'))[range(0, parameters('sessionHostCount'))[copyIndex()]], parameters('sessionHostIndex')), 3, '0')))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "extension_AzureMonitorWindowsAgent",
                        "count": "[length(range(0, parameters('sessionHostCount')))]"
                      },
                      "condition": "[parameters('enableMonitoring')]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2023-03-01",
                      "name": "[format('{0}/{1}', replace(parameters('virtualMachineNameConv'), '###', padLeft(add(range(0, parameters('sessionHostCount'))[range(0, parameters('sessionHostCount'))[copyIndex()]], parameters('sessionHostIndex')), 3, '0')), 'AzureMonitorAgent')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "publisher": "Microsoft.Azure.Monitor",
                        "type": "AzureMonitorWindowsAgent",
                        "typeHandlerVersion": "1.0",
                        "autoUpgradeMinorVersion": true,
                        "enableAutomaticUpgrade": true
                      },
                      "dependsOn": [
                        "extension_AADLoginForWindows",
                        "extension_IaasAntimalware",
                        "extension_JsonADDomainExtension",
                        "[resourceId('Microsoft.Compute/virtualMachines', replace(parameters('virtualMachineNameConv'), '###', padLeft(add(range(0, parameters('sessionHostCount'))[range(0, parameters('sessionHostCount'))[copyIndex()]], parameters('sessionHostIndex')), 3, '0')))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "dataCollectionEndpointAssociation",
                        "count": "[length(range(0, parameters('sessionHostCount')))]"
                      },
                      "condition": "[and(parameters('enableMonitoring'), not(empty(parameters('dataCollectionEndpointResourceId'))))]",
                      "type": "Microsoft.Insights/dataCollectionRuleAssociations",
                      "apiVersion": "2022-06-01",
                      "scope": "[format('Microsoft.Compute/virtualMachines/{0}', replace(parameters('virtualMachineNameConv'), '###', padLeft(add(range(0, parameters('sessionHostCount'))[range(0, parameters('sessionHostCount'))[copyIndex()]], parameters('sessionHostIndex')), 3, '0')))]",
                      "name": "configurationAccessEndpoint",
                      "properties": {
                        "dataCollectionEndpointId": "[parameters('dataCollectionEndpointResourceId')]",
                        "description": "Data Collection Endpoint Association"
                      },
                      "dependsOn": [
                        "extension_AzureMonitorWindowsAgent",
                        "[resourceId('Microsoft.Compute/virtualMachines', replace(parameters('virtualMachineNameConv'), '###', padLeft(add(range(0, parameters('sessionHostCount'))[range(0, parameters('sessionHostCount'))[copyIndex()]], parameters('sessionHostIndex')), 3, '0')))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "avdInsightsDataCollectionRuleAssociation",
                        "count": "[length(range(0, parameters('sessionHostCount')))]"
                      },
                      "condition": "[and(parameters('enableMonitoring'), not(empty(parameters('avdInsightsDataCollectionRulesResourceId'))))]",
                      "type": "Microsoft.Insights/dataCollectionRuleAssociations",
                      "apiVersion": "2022-06-01",
                      "scope": "[format('Microsoft.Compute/virtualMachines/{0}', replace(parameters('virtualMachineNameConv'), '###', padLeft(add(range(0, parameters('sessionHostCount'))[range(0, parameters('sessionHostCount'))[copyIndex()]], parameters('sessionHostIndex')), 3, '0')))]",
                      "name": "[format('{0}-avdInsights-data-coll-rule-assoc', replace(parameters('virtualMachineNameConv'), '###', padLeft(add(range(0, parameters('sessionHostCount'))[range(0, parameters('sessionHostCount'))[copyIndex()]], parameters('sessionHostIndex')), 3, '0')))]",
                      "properties": {
                        "dataCollectionRuleId": "[parameters('avdInsightsDataCollectionRulesResourceId')]",
                        "description": "AVD Insights data collection rule association"
                      },
                      "dependsOn": [
                        "extension_AzureMonitorWindowsAgent",
                        "[resourceId('Microsoft.Compute/virtualMachines', replace(parameters('virtualMachineNameConv'), '###', padLeft(add(range(0, parameters('sessionHostCount'))[range(0, parameters('sessionHostCount'))[copyIndex()]], parameters('sessionHostIndex')), 3, '0')))]",
                        "[resourceId('Microsoft.Compute/virtualMachines', replace(parameters('virtualMachineNameConv'), '###', padLeft(add(range(0, parameters('sessionHostCount'))[range(0, parameters('sessionHostCount'))[copyIndex()]], parameters('sessionHostIndex')), 3, '0')))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "vmInsightsDataCollectionRuleAssociation",
                        "count": "[length(range(0, parameters('sessionHostCount')))]"
                      },
                      "condition": "[and(parameters('enableMonitoring'), not(empty(parameters('vmInsightsDataCollectionRulesResourceId'))))]",
                      "type": "Microsoft.Insights/dataCollectionRuleAssociations",
                      "apiVersion": "2022-06-01",
                      "scope": "[format('Microsoft.Compute/virtualMachines/{0}', replace(parameters('virtualMachineNameConv'), '###', padLeft(add(range(0, parameters('sessionHostCount'))[range(0, parameters('sessionHostCount'))[copyIndex()]], parameters('sessionHostIndex')), 3, '0')))]",
                      "name": "[format('{0}-vmInsights-data-coll-rule-assoc', replace(parameters('virtualMachineNameConv'), '###', padLeft(add(range(0, parameters('sessionHostCount'))[range(0, parameters('sessionHostCount'))[copyIndex()]], parameters('sessionHostIndex')), 3, '0')))]",
                      "properties": {
                        "dataCollectionRuleId": "[parameters('vmInsightsDataCollectionRulesResourceId')]",
                        "description": "VM Insights data collection rule association"
                      },
                      "dependsOn": [
                        "extension_AzureMonitorWindowsAgent",
                        "[resourceId('Microsoft.Compute/virtualMachines', replace(parameters('virtualMachineNameConv'), '###', padLeft(add(range(0, parameters('sessionHostCount'))[range(0, parameters('sessionHostCount'))[copyIndex()]], parameters('sessionHostIndex')), 3, '0')))]",
                        "[resourceId('Microsoft.Compute/virtualMachines', replace(parameters('virtualMachineNameConv'), '###', padLeft(add(range(0, parameters('sessionHostCount'))[range(0, parameters('sessionHostCount'))[copyIndex()]], parameters('sessionHostIndex')), 3, '0')))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "securityDataCollectionRuleAssociation",
                        "count": "[length(range(0, parameters('sessionHostCount')))]"
                      },
                      "condition": "[not(empty(parameters('securityDataCollectionRulesResourceId')))]",
                      "type": "Microsoft.Insights/dataCollectionRuleAssociations",
                      "apiVersion": "2022-06-01",
                      "scope": "[format('Microsoft.Compute/virtualMachines/{0}', replace(parameters('virtualMachineNameConv'), '###', padLeft(add(range(0, parameters('sessionHostCount'))[range(0, parameters('sessionHostCount'))[copyIndex()]], parameters('sessionHostIndex')), 3, '0')))]",
                      "name": "[format('{0}-security-data-coll-rule-assoc', replace(parameters('virtualMachineNameConv'), '###', padLeft(add(range(0, parameters('sessionHostCount'))[range(0, parameters('sessionHostCount'))[copyIndex()]], parameters('sessionHostIndex')), 3, '0')))]",
                      "properties": {
                        "dataCollectionRuleId": "[parameters('securityDataCollectionRulesResourceId')]",
                        "description": "Security Events data collection rule association"
                      },
                      "dependsOn": [
                        "extension_AzureMonitorWindowsAgent",
                        "[resourceId('Microsoft.Compute/virtualMachines', replace(parameters('virtualMachineNameConv'), '###', padLeft(add(range(0, parameters('sessionHostCount'))[range(0, parameters('sessionHostCount'))[copyIndex()]], parameters('sessionHostIndex')), 3, '0')))]",
                        "[resourceId('Microsoft.Compute/virtualMachines', replace(parameters('virtualMachineNameConv'), '###', padLeft(add(range(0, parameters('sessionHostCount'))[range(0, parameters('sessionHostCount'))[copyIndex()]], parameters('sessionHostIndex')), 3, '0')))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "extension_GuestAttestation",
                        "count": "[length(range(0, parameters('sessionHostCount')))]"
                      },
                      "condition": "[parameters('integrityMonitoring')]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2023-09-01",
                      "name": "[format('{0}/{1}', replace(parameters('virtualMachineNameConv'), '###', padLeft(add(range(0, parameters('sessionHostCount'))[range(0, parameters('sessionHostCount'))[copyIndex()]], parameters('sessionHostIndex')), 3, '0')), 'GuestAttestation')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "publisher": "Microsoft.Azure.Security.WindowsAttestation",
                        "type": "GuestAttestation",
                        "typeHandlerVersion": "1.0",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                          "AttestationConfig": {
                            "MaaSettings": {
                              "maaEndpoint": "",
                              "maaTenantName": "GuestAttestation"
                            },
                            "AscSettings": {
                              "ascReportingEndpoint": "",
                              "ascReportingFrequency": ""
                            },
                            "useCustomToken": "false",
                            "disableAlerts": "false"
                          }
                        }
                      },
                      "dependsOn": [
                        "extension_AADLoginForWindows",
                        "extension_AzureMonitorWindowsAgent",
                        "extension_IaasAntimalware",
                        "extension_JsonADDomainExtension",
                        "[resourceId('Microsoft.Compute/virtualMachines', replace(parameters('virtualMachineNameConv'), '###', padLeft(add(range(0, parameters('sessionHostCount'))[range(0, parameters('sessionHostCount'))[copyIndex()]], parameters('sessionHostIndex')), 3, '0')))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "extension_AmdGpuDriverWindows",
                        "count": "[length(range(0, parameters('sessionHostCount')))]"
                      },
                      "condition": "[variables('amdVmSize')]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-03-01",
                      "name": "[format('{0}/{1}', replace(parameters('virtualMachineNameConv'), '###', padLeft(add(range(0, parameters('sessionHostCount'))[range(0, parameters('sessionHostCount'))[copyIndex()]], parameters('sessionHostIndex')), 3, '0')), 'AmdGpuDriverWindows')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "publisher": "Microsoft.HpcCompute",
                        "type": "AmdGpuDriverWindows",
                        "typeHandlerVersion": "1.0",
                        "autoUpgradeMinorVersion": true,
                        "settings": {}
                      },
                      "dependsOn": [
                        "extension_AADLoginForWindows",
                        "extension_AzureMonitorWindowsAgent",
                        "extension_IaasAntimalware",
                        "extension_JsonADDomainExtension",
                        "[resourceId('Microsoft.Compute/virtualMachines', replace(parameters('virtualMachineNameConv'), '###', padLeft(add(range(0, parameters('sessionHostCount'))[range(0, parameters('sessionHostCount'))[copyIndex()]], parameters('sessionHostIndex')), 3, '0')))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "extension_NvidiaGpuDriverWindows",
                        "count": "[length(range(0, parameters('sessionHostCount')))]"
                      },
                      "condition": "[variables('nvidiaVmSize')]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-03-01",
                      "name": "[format('{0}/{1}', replace(parameters('virtualMachineNameConv'), '###', padLeft(add(range(0, parameters('sessionHostCount'))[range(0, parameters('sessionHostCount'))[copyIndex()]], parameters('sessionHostIndex')), 3, '0')), 'NvidiaGpuDriverWindows')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "publisher": "Microsoft.HpcCompute",
                        "type": "NvidiaGpuDriverWindows",
                        "typeHandlerVersion": "1.2",
                        "autoUpgradeMinorVersion": true,
                        "settings": {}
                      },
                      "dependsOn": [
                        "extension_AADLoginForWindows",
                        "extension_AzureMonitorWindowsAgent",
                        "extension_JsonADDomainExtension",
                        "[resourceId('Microsoft.Compute/virtualMachines', replace(parameters('virtualMachineNameConv'), '###', padLeft(add(range(0, parameters('sessionHostCount'))[range(0, parameters('sessionHostCount'))[copyIndex()]], parameters('sessionHostIndex')), 3, '0')))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "runCommand_ConfigureSessionHost",
                        "count": "[length(range(0, parameters('sessionHostCount')))]"
                      },
                      "type": "Microsoft.Compute/virtualMachines/runCommands",
                      "apiVersion": "2023-09-01",
                      "name": "[format('{0}/{1}', replace(parameters('virtualMachineNameConv'), '###', padLeft(add(range(0, parameters('sessionHostCount'))[range(0, parameters('sessionHostCount'))[copyIndex()]], parameters('sessionHostIndex')), 3, '0')), 'configureSessionHost')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "parameters": [
                          {
                            "name": "AmdVmSize",
                            "value": "[if(variables('amdVmSize'), 'true', 'false')]"
                          },
                          {
                            "name": "NvidiaVmSize",
                            "value": "[if(variables('nvidiaVmSize'), 'true', 'false')]"
                          },
                          {
                            "name": "DisableUpdates",
                            "value": "false"
                          },
                          {
                            "name": "ConfigureFSLogix",
                            "value": "[if(parameters('fslogixConfigureSessionHosts'), 'true', 'false')]"
                          },
                          {
                            "name": "CloudCache",
                            "value": "[if(contains(parameters('fslogixContainerType'), 'CloudCache'), 'true', 'false')]"
                          },
                          {
                            "name": "LocalNetAppServers",
                            "value": "[string(parameters('fslogixLocalNetAppServerFqdns'))]"
                          },
                          {
                            "name": "LocalStorageAccountNames",
                            "value": "[string(variables('fslogixLocalStorageAccountNames'))]"
                          },
                          {
                            "name": "OSSGroups",
                            "value": "[string(parameters('fslogixOSSGroups'))]"
                          },
                          {
                            "name": "RemoteNetAppServers",
                            "value": "[string(parameters('fslogixRemoteNetAppServerFqdns'))]"
                          },
                          {
                            "name": "RemoteStorageAccountNames",
                            "value": "[string(variables('fslogixRemoteStorageAccountNames'))]"
                          },
                          {
                            "name": "Shares",
                            "value": "[string(parameters('fslogixFileShareNames'))]"
                          },
                          {
                            "name": "StorageAccountDNSSuffix",
                            "value": "[parameters('storageSuffix')]"
                          },
                          {
                            "name": "StorageService",
                            "value": "[parameters('fslogixStorageService')]"
                          }
                        ],
                        "protectedParameters": "[if(parameters('fslogixConfigureSessionHosts'), createArray(createObject('name', 'LocalStorageAccountKeys', 'value', string(union(if(and(contains(parameters('identitySolution'), 'EntraId'), not(empty(parameters('fslogixLocalStorageAccountResourceIds')))), createArray(listkeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('fslogixLocalStorageAccountResourceIds')[0], '/')[2], split(parameters('fslogixLocalStorageAccountResourceIds')[0], '/')[4]), 'Microsoft.Storage/storageAccounts', last(split(parameters('fslogixLocalStorageAccountResourceIds')[0], '/'))), '2023-01-01').keys[0].value), createArray()), if(and(contains(parameters('identitySolution'), 'EntraId'), greater(length(parameters('fslogixLocalStorageAccountResourceIds')), 1)), createArray(listkeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('fslogixLocalStorageAccountResourceIds')[1], '/')[2], split(parameters('fslogixLocalStorageAccountResourceIds')[1], '/')[4]), 'Microsoft.Storage/storageAccounts', last(split(parameters('fslogixLocalStorageAccountResourceIds')[1], '/'))), '2023-01-01').keys[0].value), createArray())))), createObject('name', 'RemoteStorageAccountKeys', 'value', string(union(if(and(contains(parameters('identitySolution'), 'EntraId'), not(empty(parameters('fslogixRemoteStorageAccountResourceIds')))), createArray(listkeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('fslogixRemoteStorageAccountResourceIds')[0], '/')[2], split(parameters('fslogixRemoteStorageAccountResourceIds')[0], '/')[4]), 'Microsoft.Storage/storageAccounts', last(split(parameters('fslogixRemoteStorageAccountResourceIds')[0], '/'))), '2023-01-01').keys[0].value), createArray()), if(and(contains(parameters('identitySolution'), 'EntraId'), greater(length(parameters('fslogixRemoteStorageAccountResourceIds')), 1)), createArray(listkeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('fslogixRemoteStorageAccountResourceIds')[1], '/')[2], split(parameters('fslogixRemoteStorageAccountResourceIds')[1], '/')[4]), 'Microsoft.Storage/storageAccounts', last(split(parameters('fslogixRemoteStorageAccountResourceIds')[1], '/'))), '2023-01-01').keys[0].value), createArray()))))), null())]",
                        "source": {
                          "script": "[variables('$fxv#0')]"
                        },
                        "treatFailureAsDeploymentFailure": true,
                        "timeoutInSeconds": 600
                      },
                      "dependsOn": [
                        "extension_AADLoginForWindows",
                        "extension_AmdGpuDriverWindows",
                        "extension_AzureMonitorWindowsAgent",
                        "extension_GuestAttestation",
                        "extension_IaasAntimalware",
                        "extension_JsonADDomainExtension",
                        "extension_NvidiaGpuDriverWindows",
                        "[resourceId('Microsoft.Compute/virtualMachines', replace(parameters('virtualMachineNameConv'), '###', padLeft(add(range(0, parameters('sessionHostCount'))[range(0, parameters('sessionHostCount'))[copyIndex()]], parameters('sessionHostIndex')), 3, '0')))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "extension_DSC_installAvdAgents",
                        "count": "[length(range(0, parameters('sessionHostCount')))]"
                      },
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-03-01",
                      "name": "[format('{0}/{1}', replace(parameters('virtualMachineNameConv'), '###', padLeft(add(range(0, parameters('sessionHostCount'))[range(0, parameters('sessionHostCount'))[copyIndex()]], parameters('sessionHostIndex')), 3, '0')), 'AVDAgentInstallandConfig')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "publisher": "Microsoft.Powershell",
                        "type": "DSC",
                        "typeHandlerVersion": "2.73",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                          "modulesUrl": "[parameters('sessionHostRegistrationDSCUrl')]",
                          "configurationFunction": "Configuration.ps1\\AddSessionHost",
                          "properties": {
                            "hostPoolName": "[last(split(parameters('hostPoolResourceId'), '/'))]",
                            "registrationInfoTokenCredential": {
                              "UserName": "PLACEHOLDER_DO_NOT_USE",
                              "Password": "PrivateSettingsRef:RegistrationInfoToken"
                            },
                            "aadJoin": "[not(contains(parameters('identitySolution'), 'DomainServices'))]",
                            "UseAgentDownloadEndpoint": "[parameters('useAgentDownloadEndpoint')]",
                            "mdmId": "[if(variables('intune'), '0000000a-0000-0000-c000-000000000000', '')]"
                          }
                        },
                        "protectedSettings": {
                          "Items": {
                            "RegistrationInfoToken": "[listRegistrationTokens(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('hostPoolResourceId'), '/')[2], split(parameters('hostPoolResourceId'), '/')[4]), 'Microsoft.DesktopVirtualization/hostPools', last(split(parameters('hostPoolResourceId'), '/'))), '2023-09-05').value[0].token]"
                          }
                        }
                      },
                      "dependsOn": [
                        "postDeploymentScripts",
                        "runCommand_ConfigureSessionHost",
                        "[resourceId('Microsoft.Compute/virtualMachines', replace(parameters('virtualMachineNameConv'), '###', padLeft(add(range(0, parameters('sessionHostCount'))[range(0, parameters('sessionHostCount'))[copyIndex()]], parameters('sessionHostIndex')), 3, '0')))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "postDeploymentScripts",
                        "count": "[length(range(0, parameters('sessionHostCount')))]"
                      },
                      "condition": "[not(empty(parameters('sessionHostCustomizations')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-Customizations-{1}', replace(parameters('virtualMachineNameConv'), '###', padLeft(add(range(0, parameters('sessionHostCount'))[range(0, parameters('sessionHostCount'))[copyIndex()]], parameters('sessionHostIndex')), 3, '0')), parameters('timeStamp'))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "artifactsContainerUri": {
                            "value": "[parameters('artifactsContainerUri')]"
                          },
                          "customizations": {
                            "value": "[parameters('sessionHostCustomizations')]"
                          },
                          "userAssignedIdentityClientId": {
                            "value": "[parameters('artifactsUserAssignedIdentityClientId')]"
                          },
                          "virtualMachineName": {
                            "value": "[replace(parameters('virtualMachineNameConv'), '###', padLeft(add(range(0, parameters('sessionHostCount'))[range(0, parameters('sessionHostCount'))[copyIndex()]], parameters('sessionHostIndex')), 3, '0'))]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.36.1.42791",
                              "templateHash": "18264397612576826701"
                            }
                          },
                          "parameters": {
                            "artifactsContainerUri": {
                              "type": "string"
                            },
                            "customizations": {
                              "type": "array"
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]"
                            },
                            "userAssignedIdentityClientId": {
                              "type": "string"
                            },
                            "virtualMachineName": {
                              "type": "string"
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "customizers",
                                "count": "[length(parameters('customizations'))]",
                                "input": {
                                  "name": "[replace(parameters('customizations')[copyIndex('customizers')].name, ' ', '-')]",
                                  "uri": "[if(or(startsWith(parameters('customizations')[copyIndex('customizers')].blobNameOrUri, 'https://'), startsWith(parameters('customizations')[copyIndex('customizers')].blobNameorUri, 'http://')), parameters('customizations')[copyIndex('customizers')].blobNameOrUri, format('{0}/{1}', parameters('artifactsContainerUri'), parameters('customizations')[copyIndex('customizers')].blobNameOrUri))]",
                                  "arguments": "[coalesce(tryGet(parameters('customizations')[copyIndex('customizers')], 'arguments'), '')]"
                                }
                              }
                            ],
                            "$fxv#0": "param(\r\n  [string]$APIVersion,\r\n  [string]$Arguments='',\r\n  [string]$BlobStorageSuffix,\r\n  [string]$BuildDir='',\r\n  [string]$Name,\r\n  [string]$Uri,\r\n  [string]$UserAssignedIdentityClientId\r\n)\r\n\r\nfunction Write-OutputWithTimeStamp {\r\n  param(\r\n      [string]$Message\r\n  )    \r\n  $Timestamp = Get-Date -Format 'MM/dd/yyyy HH:mm:ss'\r\n  $Entry = '[' + $Timestamp + '] ' + $Message\r\n  Write-Output $Entry\r\n}\r\n\r\nStart-Transcript -Path \"$env:SystemRoot\\Logs\\$Name.log\" -Force\r\nWrite-OutputWithTimeStamp \"Starting '$Name' script with the following parameters.\"\r\nWrite-Output ( $PSBoundParameters | Format-Table -AutoSize )\r\nIf ($Arguments -eq '') { $Arguments = $null }\r\nIf ($BuildDir -ne '') {\r\n  $TempDir = Join-Path $BuildDir -ChildPath $Name\r\n} Else {\r\n  $TempDir = Join-Path $Env:TEMP -ChildPath $Name\r\n}\r\nNew-Item -Path $TempDir -ItemType Directory -Force | Out-Null\r\n$WebClient = New-Object System.Net.WebClient\r\nIf ($Uri -match $BlobStorageSuffix -and $UserAssignedIdentityClientId -ne '') {\r\n  Write-OutputWithTimeStamp \"Getting access token for '$Uri' using User Assigned Identity.\"\r\n  $StorageEndpoint = ($Uri -split \"://\")[0] + \"://\" + ($Uri -split \"/\")[2] + \"/\"\r\n  $TokenUri = \"http://169.254.169.254/metadata/identity/oauth2/token?api-version=$APIVersion&resource=$StorageEndpoint&client_id=$UserAssignedIdentityClientId\"\r\n  $AccessToken = ((Invoke-WebRequest -Headers @{Metadata = $true } -Uri $TokenUri -UseBasicParsing).Content | ConvertFrom-Json).access_token\r\n  $WebClient.Headers.Add('x-ms-version', '2017-11-09')\r\n  $webClient.Headers.Add(\"Authorization\", \"Bearer $AccessToken\")\r\n}\r\n$SourceFileName = ($Uri -Split \"/\")[-1]\r\nWrite-OutputWithTimeStamp \"Downloading '$Uri' to '$TempDir'.\"\r\n$DestFile = Join-Path -Path $TempDir -ChildPath $SourceFileName\r\n$webClient.DownloadFile(\"$Uri\", \"$DestFile\")\r\nStart-Sleep -Seconds 10\r\nIf (!(Test-Path -Path $DestFile)) { Write-Error \"Failed to download $SourceFileName\"; Exit 1 }\r\nWrite-OutputWithTimeStamp 'Finished downloading'\r\nSet-Location -Path $TempDir\r\n$Ext = [System.IO.Path]::GetExtension($DestFile).ToLower().Replace('.','')\r\nswitch ($Ext) {\r\n  'exe' {\r\n      If ($Arguments) {\r\n        Write-OutputWithTimeStamp \"Executing '`\"$DestFile`\" $Arguments'\"\r\n        $Install = Start-Process -FilePath \"$DestFile\" -ArgumentList $Arguments -NoNewWindow -Wait -PassThru\r\n        Write-OutputWithTimeStamp \"Installation ended with exit code $($Install.ExitCode).\"\r\n      }\r\n      Else {\r\n        Write-OutputWithTimeStamp \"Executing `\"$DestFile`\"\"\r\n        $Install = Start-Process -FilePath \"$DestFile\" -NoNewWindow -Wait -PassThru\r\n        Write-OutputWithTimeStamp \"Installation ended with exit code $($Install.ExitCode).\"\r\n      }      \r\n    }\r\n  'msi' {\r\n    If ($Arguments) {\r\n      If ($Arguments -notcontains $SourceFileName) {\r\n        $Arguments = \"/i $DestFile $Arguments\"\r\n      }\r\n      Write-OutputWithTimeStamp \"Executing 'msiexec.exe $Arguments'\"\r\n      $MsiExec = Start-Process -FilePath msiexec.exe -ArgumentList $Arguments -Wait -PassThru\r\n      Write-OutputWithTimeStamp \"Installation ended with exit code $($MsiExec.ExitCode).\"\r\n\r\n    }\r\n    Else {\r\n      Write-OutputWithTimeStamp \"Executing 'msiexec.exe /i $DestFile /qn'\"\r\n      $MsiExec = Start-Process -FilePath msiexec.exe -ArgumentList \"/i $DestFile /qn\" -Wait -PassThru\r\n      Write-OutputWithTimeStamp \"Installation ended with exit code $($MsiExec.ExitCode).\"\r\n    }    \r\n  }\r\n  'bat' {\r\n    If ($Arguments) {\r\n      Write-OutputWithTimeStamp \"Executing 'cmd.exe `\"$DestFile`\" $Arguments'\"\r\n      Start-Process -FilePath cmd.exe -ArgumentList \"`\"$DestFile`\" $Arguments\" -Wait\r\n    }\r\n    Else {\r\n      Write-OutputWithTimeStamp \"Executing 'cmd.exe `\"$DestFile`\"'\"\r\n      Start-Process -FilePath cmd.exe -ArgumentList \"`\"$DestFile`\"\" -Wait\r\n    }\r\n  }\r\n  'ps1' {\r\n    If ($Arguments) {\r\n      Write-OutputWithTimeStamp \"Calling PowerShell Script '$DestFile' with arguments '$Arguments'\"\r\n      & $DestFile $Arguments\r\n    }\r\n    Else {\r\n      Write-OutputWithTimeStamp \"Calling PowerShell Script '$DestFile'\"\r\n      & $DestFile\r\n    }\r\n  }\r\n  'zip' {\r\n    $DestinationPath = Join-Path -Path \"$TempDir\" -ChildPath $([System.IO.Path]::GetFileNameWithoutExtension($SourceFileName))\r\n    Write-OutputWithTimeStamp \"Extracting '$DestFile' to '$DestinationPath'.\"\r\n    Expand-Archive -Path $DestFile -DestinationPath $DestinationPath -Force\r\n    Write-OutputWithTimeStamp \"Finding PowerShell script in root of '$DestinationPath'.\"\r\n    $PSScript = (Get-ChildItem -Path $DestinationPath -filter '*.ps1').FullName\r\n    If ($PSScript.count -gt 1) { $PSScript = $PSScript[0] }\r\n    If ($Arguments) {\r\n      Write-OutputWithTimeStamp \"Calling PowerShell Script '$PSScript' with arguments '$Arguments'\"\r\n      & $PSScript $Arguments\r\n    }\r\n    Else {\r\n      Write-OutputWithTimeStamp \"Calling PowerShell Script '$PSScript'\"         \r\n      & $PSScript\r\n    }\r\n  }\r\n}\r\nIf ((Split-Path $TempDir -Parent) -eq $Env:Temp) {Remove-Item -Path $TempDir -Recurse -Force -ErrorAction SilentlyContinue}\r\nStop-Transcript",
                            "apiVersion": "[if(startsWith(environment().name, 'USN'), '2017-08-01', '2018-02-01')]"
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "runCommands",
                                "count": "[length(variables('customizers'))]",
                                "mode": "serial",
                                "batchSize": 1
                              },
                              "type": "Microsoft.Compute/virtualMachines/runCommands",
                              "apiVersion": "2023-03-01",
                              "name": "[format('{0}/{1}', parameters('virtualMachineName'), variables('customizers')[copyIndex()].name)]",
                              "location": "[parameters('location')]",
                              "properties": {
                                "parameters": [
                                  {
                                    "name": "APIVersion",
                                    "value": "[variables('apiVersion')]"
                                  },
                                  {
                                    "name": "BlobStorageSuffix",
                                    "value": "[format('blob.{0}', environment().suffixes.storage)]"
                                  },
                                  {
                                    "name": "UserAssignedIdentityClientId",
                                    "value": "[parameters('userAssignedIdentityClientId')]"
                                  },
                                  {
                                    "name": "Name",
                                    "value": "[variables('customizers')[copyIndex()].name]"
                                  },
                                  {
                                    "name": "Uri",
                                    "value": "[variables('customizers')[copyIndex()].uri]"
                                  },
                                  {
                                    "name": "Arguments",
                                    "value": "[variables('customizers')[copyIndex()].arguments]"
                                  }
                                ],
                                "source": {
                                  "script": "[variables('$fxv#0')]"
                                },
                                "treatFailureAsDeploymentFailure": true
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "runCommand_ConfigureSessionHost",
                        "[resourceId('Microsoft.Compute/virtualMachines', replace(parameters('virtualMachineNameConv'), '###', padLeft(add(range(0, parameters('sessionHostCount'))[range(0, parameters('sessionHostCount'))[copyIndex()]], parameters('sessionHostIndex')), 3, '0')))]",
                        "[resourceId('Microsoft.Compute/virtualMachines', replace(parameters('virtualMachineNameConv'), '###', padLeft(add(range(0, parameters('sessionHostCount'))[range(0, parameters('sessionHostCount'))[copyIndex()]], parameters('sessionHostIndex')), 3, '0')))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "updateOSDiskNetworkAccess",
                        "count": "[length(range(0, parameters('sessionHostCount')))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-disable-osDisk-PublicAccess_{1}', replace(parameters('virtualMachineNameConv'), '###', padLeft(add(range(0, parameters('sessionHostCount'))[range(0, parameters('sessionHostCount'))[copyIndex()]], parameters('sessionHostIndex')), 3, '0')), parameters('timeStamp'))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "diskAccessId": {
                            "value": "[parameters('diskAccessId')]"
                          },
                          "diskName": {
                            "value": "[reference(resourceId('Microsoft.Compute/virtualMachines', replace(parameters('virtualMachineNameConv'), '###', padLeft(add(range(0, parameters('sessionHostCount'))[range(0, parameters('sessionHostCount'))[copyIndex()]], parameters('sessionHostIndex')), 3, '0'))), '2022-11-01').storageProfile.osDisk.name]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "timeStamp": {
                            "value": "[parameters('timeStamp')]"
                          },
                          "vmName": {
                            "value": "[replace(parameters('virtualMachineNameConv'), '###', padLeft(add(range(0, parameters('sessionHostCount'))[range(0, parameters('sessionHostCount'))[copyIndex()]], parameters('sessionHostIndex')), 3, '0'))]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.36.1.42791",
                              "templateHash": "9625061886750393799"
                            }
                          },
                          "parameters": {
                            "diskAccessId": {
                              "type": "string"
                            },
                            "diskName": {
                              "type": "string"
                            },
                            "location": {
                              "type": "string"
                            },
                            "timeStamp": {
                              "type": "string"
                            },
                            "vmName": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('Update_OSDisk_{0}_Stage2_{1}', parameters('vmName'), parameters('timeStamp'))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "diskName": {
                                    "value": "[parameters('diskName')]"
                                  },
                                  "creationData": {
                                    "value": "[reference(resourceId('Microsoft.Compute/disks', parameters('diskName')), '2023-10-02').creationData]"
                                  },
                                  "diskAccessId": {
                                    "value": "[parameters('diskAccessId')]"
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.36.1.42791",
                                      "templateHash": "5791502768181803786"
                                    }
                                  },
                                  "parameters": {
                                    "creationData": {
                                      "type": "object"
                                    },
                                    "diskName": {
                                      "type": "string"
                                    },
                                    "diskAccessId": {
                                      "type": "string"
                                    },
                                    "location": {
                                      "type": "string"
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Compute/disks",
                                      "apiVersion": "2023-10-02",
                                      "name": "[parameters('diskName')]",
                                      "location": "[parameters('location')]",
                                      "properties": {
                                        "diskAccessId": "[if(empty(parameters('diskAccessId')), null(), parameters('diskAccessId'))]",
                                        "creationData": "[parameters('creationData')]",
                                        "networkAccessPolicy": "[if(empty(parameters('diskAccessId')), 'DenyAll', 'AllowPrivate')]",
                                        "publicNetworkAccess": "Disabled"
                                      }
                                    }
                                  ]
                                }
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', replace(parameters('virtualMachineNameConv'), '###', padLeft(add(range(0, parameters('sessionHostCount'))[range(0, parameters('sessionHostCount'))[copyIndex()]], parameters('sessionHostIndex')), 3, '0')))]",
                        "[resourceId('Microsoft.Compute/virtualMachines', replace(parameters('virtualMachineNameConv'), '###', padLeft(add(range(0, parameters('sessionHostCount'))[range(0, parameters('sessionHostCount'))[copyIndex()]], parameters('sessionHostIndex')), 3, '0')))]",
                        "[resourceId('Microsoft.Compute/virtualMachines', replace(parameters('virtualMachineNameConv'), '###', padLeft(add(range(0, parameters('sessionHostCount'))[range(0, parameters('sessionHostCount'))[copyIndex()]], parameters('sessionHostIndex')), 3, '0')))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "virtualMachineNames": {
                      "type": "array",
                      "copy": {
                        "count": "[length(range(0, parameters('sessionHostCount')))]",
                        "input": "[replace(parameters('virtualMachineNameConv'), '###', padLeft(add(range(0, parameters('sessionHostCount'))[range(0, parameters('sessionHostCount'))[copyIndex()]], parameters('sessionHostIndex')), 3, '0'))]"
                      }
                    },
                    "fslogixPathExclusions": {
                      "type": "string",
                      "value": "[variables('fslogixPathExclusions')]"
                    },
                    "fslogixStorageAccounts": {
                      "type": "array",
                      "value": "[union(variables('fslogixLocalStorageAccountNames'), variables('fslogixRemoteStorageAccountNames'))]"
                    },
                    "fslogixNetAppServers": {
                      "type": "array",
                      "value": "[union(parameters('fslogixLocalNetAppServerFqdns'), parameters('fslogixRemoteNetAppServerFqdns'))]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('ArtifactsUserAssignedIdentity_{0}', parameters('timeStamp')))]",
                "availabilitySets",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupHosts')), 'Microsoft.Resources/deployments', format('Customer_Managed_Keys_{0}', parameters('timeStamp')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupHosts')), 'Microsoft.Resources/deployments', format('DiskAccess_{0}', parameters('timeStamp')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, split(parameters('hostPoolResourceId'), '/')[4]), 'Microsoft.Resources/deployments', format('HostPoolRegistrationTokenUpdate_{0}', parameters('timeStamp')))]",
                "localNetAppVolumes",
                "remoteNetAppVolumes"
              ]
            },
            {
              "condition": "[and(equals(parameters('deploymentType'), 'Complete'), parameters('recoveryServices'))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('RecoveryServicesVault_VirtualMachines_{0}', parameters('timeStamp'))]",
              "resourceGroup": "[parameters('resourceGroupHosts')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "name": {
                    "value": "[parameters('recoveryServicesVaultName')]"
                  },
                  "backupPolicies": {
                    "value": [
                      {
                        "name": "[variables('backupPolicyName')]",
                        "properties": {
                          "backupManagementType": "AzureIaasVM",
                          "instantRpRetentionRangeInDays": 2,
                          "policyType": "V2",
                          "retentionPolicy": {
                            "retentionPolicyType": "LongTermRetentionPolicy",
                            "dailySchedule": {
                              "retentionDuration": {
                                "count": 30,
                                "durationType": "Days"
                              },
                              "retentionTimes": [
                                "23:00"
                              ]
                            }
                          },
                          "schedulePolicy": {
                            "schedulePolicyType": "SimpleSchedulePolicyV2",
                            "scheduleRunFrequency": "Daily",
                            "dailySchedule": {
                              "scheduleRunTimes": [
                                "23:00"
                              ]
                            }
                          },
                          "timeZone": "[parameters('timeZone')]"
                        }
                      }
                    ]
                  },
                  "privateEndpoints": "[if(and(and(and(and(parameters('privateEndpoint'), not(empty(parameters('privateEndpointSubnetResourceId')))), not(empty(parameters('azureBackupPrivateDnsZoneResourceId')))), not(empty(parameters('azureBlobPrivateDnsZoneResourceId')))), not(empty(parameters('azureQueuePrivateDnsZoneResourceId')))), createObject('value', createArray(createObject('customNetworkInterfaceName', replace(replace(replace(parameters('privateEndpointNICNameConv'), 'SUBRESOURCE', 'AzureBackup'), 'RESOURCE', parameters('recoveryServicesVaultName')), 'VNETID', format('{0}', split(parameters('privateEndpointSubnetResourceId'), '/')[8])), 'name', replace(replace(replace(parameters('privateEndpointNameConv'), 'SUBRESOURCE', 'AzureBackup'), 'RESOURCE', parameters('recoveryServicesVaultName')), 'VNETID', format('{0}', split(parameters('privateEndpointSubnetResourceId'), '/')[8])), 'privateDnsZoneGroup', if(empty(variables('nonEmptyBackupPrivateDNSZoneResourceIds')), null(), createObject('privateDNSResourceIds', variables('nonEmptyBackupPrivateDNSZoneResourceIds'))), 'service', 'AzureBackup', 'subnetResourceId', parameters('privateEndpointSubnetResourceId'), 'tags', union(createObject('cm-resource-parent', parameters('hostPoolResourceId')), coalesce(tryGet(parameters('tags'), 'Microsoft.Network/privateEndpoints'), createObject()))))), createObject('value', null()))]",
                  "diagnosticWorkspaceId": {
                    "value": "[parameters('logAnalyticsWorkspaceResourceId')]"
                  },
                  "tags": {
                    "value": "[union(createObject('cm-resource-parent', parameters('hostPoolResourceId')), coalesce(tryGet(parameters('tags'), 'Microsoft.recoveryServices/vaults'), createObject()))]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.36.1.42791",
                      "templateHash": "9789350740357542243"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the Azure Recovery Service Vault."
                      }
                    },
                    "backupStorageConfig": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. The storage configuration for the Azure Recovery Service Vault."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all resources."
                      }
                    },
                    "backupPolicies": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. List of all backup policies."
                      }
                    },
                    "backupConfig": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. The backup configuration."
                      }
                    },
                    "protectionContainers": {
                      "type": "array",
                      "defaultValue": [],
                      "minLength": 0,
                      "metadata": {
                        "description": "Optional. List of all protection containers."
                      }
                    },
                    "replicationFabrics": {
                      "type": "array",
                      "defaultValue": [],
                      "minLength": 0,
                      "metadata": {
                        "description": "Optional. List of all replication fabrics."
                      }
                    },
                    "replicationPolicies": {
                      "type": "array",
                      "defaultValue": [],
                      "minLength": 0,
                      "metadata": {
                        "description": "Optional. List of all replication policies."
                      }
                    },
                    "replicationAlertSettings": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Replication alert settings."
                      }
                    },
                    "diagnosticStorageAccountId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic storage account."
                      }
                    },
                    "diagnosticWorkspaceId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic log analytics workspace."
                      }
                    },
                    "diagnosticEventHubAuthorizationRuleId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                      }
                    },
                    "diagnosticEventHubName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
                      }
                    },
                    "systemAssignedIdentity": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Enables system assigned managed identity on the resource."
                      }
                    },
                    "userAssignedIdentities": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. The ID(s) to assign to the resource."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags of the Recovery Service Vault resource."
                      }
                    },
                    "diagnosticLogCategoriesToEnable": {
                      "type": "array",
                      "defaultValue": [
                        "allLogs"
                      ],
                      "allowedValues": [
                        "",
                        "allLogs",
                        "AzureBackupReport",
                        "CoreAzureBackup",
                        "AddonAzureBackupJobs",
                        "AddonAzureBackupAlerts",
                        "AddonAzureBackupPolicy",
                        "AddonAzureBackupStorage",
                        "AddonAzureBackupProtectedInstance",
                        "AzureSiteRecoveryJobs",
                        "AzureSiteRecoveryEvents",
                        "AzureSiteRecoveryReplicatedItems",
                        "AzureSiteRecoveryReplicationStats",
                        "AzureSiteRecoveryRecoveryPoints",
                        "AzureSiteRecoveryReplicationDataUploadRate",
                        "AzureSiteRecoveryProtectedDiskDataChurn"
                      ],
                      "metadata": {
                        "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to '' to disable log collection."
                      }
                    },
                    "diagnosticMetricsToEnable": {
                      "type": "array",
                      "defaultValue": [
                        "AllMetrics"
                      ],
                      "allowedValues": [
                        "AllMetrics"
                      ],
                      "metadata": {
                        "description": "Optional. The name of metrics that will be streamed."
                      }
                    },
                    "diagnosticSettingsName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The name of the diagnostic setting, if deployed. If left empty, it defaults to \"<resourceName>-diagnosticSettings\"."
                      }
                    },
                    "privateEndpoints": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Configuration details for private endpoints. For security reasons, it is recommended to use private endpoints whenever possible."
                      }
                    },
                    "monitoringSettings": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Monitoring Settings of the vault."
                      }
                    },
                    "securitySettings": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Security Settings of the vault."
                      }
                    },
                    "publicNetworkAccess": {
                      "type": "string",
                      "defaultValue": "Disabled",
                      "allowedValues": [
                        "Enabled",
                        "Disabled"
                      ],
                      "metadata": {
                        "description": "Optional. Whether or not public network access is allowed for this resource. For security reasons it should be disabled."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "diagnosticsLogsSpecified",
                        "count": "[length(filter(parameters('diagnosticLogCategoriesToEnable'), lambda('item', and(not(equals(lambdaVariables('item'), 'allLogs')), not(equals(lambdaVariables('item'), ''))))))]",
                        "input": {
                          "category": "[filter(parameters('diagnosticLogCategoriesToEnable'), lambda('item', and(not(equals(lambdaVariables('item'), 'allLogs')), not(equals(lambdaVariables('item'), '')))))[copyIndex('diagnosticsLogsSpecified')]]",
                          "enabled": true
                        }
                      },
                      {
                        "name": "diagnosticsMetrics",
                        "count": "[length(parameters('diagnosticMetricsToEnable'))]",
                        "input": {
                          "category": "[parameters('diagnosticMetricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                          "timeGrain": null,
                          "enabled": true
                        }
                      }
                    ],
                    "diagnosticsLogs": "[if(contains(parameters('diagnosticLogCategoriesToEnable'), 'allLogs'), createArray(createObject('categoryGroup', 'allLogs', 'enabled', true())), if(contains(parameters('diagnosticLogCategoriesToEnable'), ''), createArray(), variables('diagnosticsLogsSpecified')))]",
                    "identityType": "[if(parameters('systemAssignedIdentity'), if(not(empty(parameters('userAssignedIdentities'))), 'SystemAssigned,UserAssigned', 'SystemAssigned'), if(not(empty(parameters('userAssignedIdentities'))), 'UserAssigned', 'None'))]",
                    "identity": "[if(not(equals(variables('identityType'), 'None')), createObject('type', variables('identityType'), 'userAssignedIdentities', if(not(empty(parameters('userAssignedIdentities'))), parameters('userAssignedIdentities'), null())), null())]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.RecoveryServices/vaults",
                      "apiVersion": "2023-01-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "identity": "[variables('identity')]",
                      "sku": {
                        "name": "RS0",
                        "tier": "Standard"
                      },
                      "properties": {
                        "monitoringSettings": "[if(not(empty(parameters('monitoringSettings'))), parameters('monitoringSettings'), null())]",
                        "securitySettings": "[if(not(empty(parameters('securitySettings'))), parameters('securitySettings'), null())]",
                        "publicNetworkAccess": "[parameters('publicNetworkAccess')]"
                      }
                    },
                    {
                      "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('diagnosticWorkspaceId')))), not(empty(parameters('diagnosticEventHubAuthorizationRuleId')))), not(empty(parameters('diagnosticEventHubName'))))]",
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.RecoveryServices/vaults/{0}', parameters('name'))]",
                      "name": "[if(not(empty(parameters('diagnosticSettingsName'))), parameters('diagnosticSettingsName'), format('{0}-diagnosticSettings', parameters('name')))]",
                      "properties": {
                        "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                        "workspaceId": "[if(not(empty(parameters('diagnosticWorkspaceId'))), parameters('diagnosticWorkspaceId'), null())]",
                        "eventHubAuthorizationRuleId": "[if(not(empty(parameters('diagnosticEventHubAuthorizationRuleId'))), parameters('diagnosticEventHubAuthorizationRuleId'), null())]",
                        "eventHubName": "[if(not(empty(parameters('diagnosticEventHubName'))), parameters('diagnosticEventHubName'), null())]",
                        "metrics": "[if(equals(environment().name, 'AzureCloud'), variables('diagnosticsMetrics'), null())]",
                        "logs": "[variables('diagnosticsLogs')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.RecoveryServices/vaults', parameters('name'))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "rsv_replicationFabrics",
                        "count": "[length(parameters('replicationFabrics'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-RSV-Fabric-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "recoveryVaultName": {
                            "value": "[parameters('name')]"
                          },
                          "name": {
                            "value": "[coalesce(tryGet(parameters('replicationFabrics')[copyIndex()], 'name'), parameters('replicationFabrics')[copyIndex()].location)]"
                          },
                          "location": {
                            "value": "[parameters('replicationFabrics')[copyIndex()].location]"
                          },
                          "replicationContainers": {
                            "value": "[coalesce(tryGet(parameters('replicationFabrics')[copyIndex()], 'replicationContainers'), createArray())]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.36.1.42791",
                              "templateHash": "5746092174466361067"
                            }
                          },
                          "parameters": {
                            "recoveryVaultName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent Azure Recovery Service Vault. Required if the template is used in a standalone deployment."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Required. The recovery location the fabric represents."
                              }
                            },
                            "name": {
                              "type": "string",
                              "defaultValue": "[parameters('location')]",
                              "metadata": {
                                "description": "Optional. The name of the fabric."
                              }
                            },
                            "replicationContainers": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Replication containers to create."
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.RecoveryServices/vaults/replicationFabrics",
                              "apiVersion": "2022-10-01",
                              "name": "[format('{0}/{1}', parameters('recoveryVaultName'), parameters('name'))]",
                              "properties": {
                                "customDetails": {
                                  "instanceType": "Azure",
                                  "location": "[parameters('location')]"
                                }
                              }
                            },
                            {
                              "copy": {
                                "name": "fabric_replicationContainers",
                                "count": "[length(parameters('replicationContainers'))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('RCont-{0}-{1}', copyIndex(), deployment().name)]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "name": {
                                    "value": "[parameters('replicationContainers')[copyIndex()].name]"
                                  },
                                  "recoveryVaultName": {
                                    "value": "[parameters('recoveryVaultName')]"
                                  },
                                  "replicationFabricName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "replicationContainerMappings": {
                                    "value": "[coalesce(tryGet(parameters('replicationContainers')[copyIndex()], 'replicationContainerMappings'), createArray())]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.36.1.42791",
                                      "templateHash": "16786731585366035523"
                                    },
                                    "name": "Recovery Services Vault Replication Fabric Replication Protection Containers",
                                    "description": "This module deploys a Recovery Services Vault Replication Protection Container.\r\n\r\n> **Note**: this version of the module only supports the `instanceType: 'A2A'` scenario.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "parameters": {
                                    "recoveryVaultName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent Azure Recovery Service Vault. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "replicationFabricName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent Replication Fabric. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the replication container."
                                      }
                                    },
                                    "replicationContainerMappings": {
                                      "type": "array",
                                      "defaultValue": [],
                                      "metadata": {
                                        "description": "Optional. Replication containers mappings to create."
                                      }
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.RecoveryServices/vaults/replicationFabrics/replicationProtectionContainers",
                                      "apiVersion": "2022-10-01",
                                      "name": "[format('{0}/{1}/{2}', parameters('recoveryVaultName'), parameters('replicationFabricName'), parameters('name'))]",
                                      "properties": {
                                        "providerSpecificInput": [
                                          {
                                            "instanceType": "A2A"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "copy": {
                                        "name": "fabric_container_containerMappings",
                                        "count": "[length(parameters('replicationContainerMappings'))]"
                                      },
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('Map-{0}-{1}', copyIndex(), deployment().name)]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "name": {
                                            "value": "[coalesce(tryGet(parameters('replicationContainerMappings')[copyIndex()], 'name'), '')]"
                                          },
                                          "policyId": {
                                            "value": "[coalesce(tryGet(parameters('replicationContainerMappings')[copyIndex()], 'policyId'), '')]"
                                          },
                                          "policyName": {
                                            "value": "[coalesce(tryGet(parameters('replicationContainerMappings')[copyIndex()], 'policyName'), '')]"
                                          },
                                          "recoveryVaultName": {
                                            "value": "[parameters('recoveryVaultName')]"
                                          },
                                          "replicationFabricName": {
                                            "value": "[parameters('replicationFabricName')]"
                                          },
                                          "sourceProtectionContainerName": {
                                            "value": "[parameters('name')]"
                                          },
                                          "targetProtectionContainerId": {
                                            "value": "[coalesce(tryGet(parameters('replicationContainerMappings')[copyIndex()], 'targetProtectionContainerId'), '')]"
                                          },
                                          "targetContainerFabricName": {
                                            "value": "[coalesce(tryGet(parameters('replicationContainerMappings')[copyIndex()], 'targetContainerFabricName'), parameters('replicationFabricName'))]"
                                          },
                                          "targetContainerName": {
                                            "value": "[coalesce(tryGet(parameters('replicationContainerMappings')[copyIndex()], 'targetContainerName'), '')]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.36.1.42791",
                                              "templateHash": "2616151194090009263"
                                            },
                                            "name": "Recovery Services Vault Replication Fabric Replication Protection Container Replication Protection Container Mappings",
                                            "description": "This module deploys a Recovery Services Vault (RSV) Replication Protection Container Mapping.\r\n\r\n> **Note**: this version of the module only supports the `instanceType: 'A2A'` scenario.",
                                            "owner": "Azure/module-maintainers"
                                          },
                                          "parameters": {
                                            "recoveryVaultName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Conditional. The name of the parent Azure Recovery Service Vault. Required if the template is used in a standalone deployment."
                                              }
                                            },
                                            "replicationFabricName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Conditional. The name of the parent Replication Fabric. Required if the template is used in a standalone deployment."
                                              }
                                            },
                                            "sourceProtectionContainerName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Conditional. The name of the parent source Replication container. Required if the template is used in a standalone deployment."
                                              }
                                            },
                                            "targetProtectionContainerId": {
                                              "type": "string",
                                              "defaultValue": "",
                                              "metadata": {
                                                "description": "Optional. Resource ID of the target Replication container. Must be specified if targetContainerName is not. If specified, targetContainerFabricName and targetContainerName will be ignored."
                                              }
                                            },
                                            "targetContainerFabricName": {
                                              "type": "string",
                                              "defaultValue": "[parameters('replicationFabricName')]",
                                              "metadata": {
                                                "description": "Optional. Name of the fabric containing the target container. If targetProtectionContainerId is specified, this parameter will be ignored."
                                              }
                                            },
                                            "targetContainerName": {
                                              "type": "string",
                                              "defaultValue": "",
                                              "metadata": {
                                                "description": "Optional. Name of the target container. Must be specified if targetProtectionContainerId is not. If targetProtectionContainerId is specified, this parameter will be ignored."
                                              }
                                            },
                                            "policyId": {
                                              "type": "string",
                                              "defaultValue": "",
                                              "metadata": {
                                                "description": "Optional. Resource ID of the replication policy. If defined, policyName will be ignored."
                                              }
                                            },
                                            "policyName": {
                                              "type": "string",
                                              "defaultValue": "",
                                              "metadata": {
                                                "description": "Optional. Name of the replication policy. Will be ignored if policyId is also specified."
                                              }
                                            },
                                            "name": {
                                              "type": "string",
                                              "defaultValue": "",
                                              "metadata": {
                                                "description": "Optional. The name of the replication container mapping. If not provided, it will be automatically generated as `<source_container_name>-<target_container_name>`."
                                              }
                                            }
                                          },
                                          "variables": {
                                            "policyResourceId": "[if(not(equals(parameters('policyId'), '')), parameters('policyId'), subscriptionResourceId('Microsoft.RecoveryServices/vaults/replicationPolicies', parameters('recoveryVaultName'), parameters('policyName')))]",
                                            "targetProtectionContainerResourceId": "[if(not(equals(parameters('targetProtectionContainerId'), '')), parameters('targetProtectionContainerId'), subscriptionResourceId('Microsoft.RecoveryServices/vaults/replicationFabrics/replicationProtectionContainers', parameters('recoveryVaultName'), parameters('targetContainerFabricName'), parameters('targetContainerName')))]",
                                            "mappingName": "[if(not(empty(parameters('name'))), parameters('name'), format('{0}-{1}', parameters('sourceProtectionContainerName'), split(variables('targetProtectionContainerResourceId'), '/')[10]))]"
                                          },
                                          "resources": [
                                            {
                                              "type": "Microsoft.RecoveryServices/vaults/replicationFabrics/replicationProtectionContainers/replicationProtectionContainerMappings",
                                              "apiVersion": "2022-10-01",
                                              "name": "[format('{0}/{1}/{2}/{3}', parameters('recoveryVaultName'), parameters('replicationFabricName'), parameters('sourceProtectionContainerName'), variables('mappingName'))]",
                                              "properties": {
                                                "targetProtectionContainerId": "[variables('targetProtectionContainerResourceId')]",
                                                "policyId": "[variables('policyResourceId')]",
                                                "providerSpecificInput": {
                                                  "instanceType": "A2A"
                                                }
                                              }
                                            }
                                          ],
                                          "outputs": {
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The name of the replication container."
                                              },
                                              "value": "[format('{0}/{1}/{2}/{3}', parameters('recoveryVaultName'), parameters('replicationFabricName'), parameters('sourceProtectionContainerName'), variables('mappingName'))]"
                                            },
                                            "resourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource ID of the replication container."
                                              },
                                              "value": "[resourceId('Microsoft.RecoveryServices/vaults/replicationFabrics/replicationProtectionContainers/replicationProtectionContainerMappings', split(format('{0}/{1}/{2}/{3}', parameters('recoveryVaultName'), parameters('replicationFabricName'), parameters('sourceProtectionContainerName'), variables('mappingName')), '/')[0], split(format('{0}/{1}/{2}/{3}', parameters('recoveryVaultName'), parameters('replicationFabricName'), parameters('sourceProtectionContainerName'), variables('mappingName')), '/')[1], split(format('{0}/{1}/{2}/{3}', parameters('recoveryVaultName'), parameters('replicationFabricName'), parameters('sourceProtectionContainerName'), variables('mappingName')), '/')[2], split(format('{0}/{1}/{2}/{3}', parameters('recoveryVaultName'), parameters('replicationFabricName'), parameters('sourceProtectionContainerName'), variables('mappingName')), '/')[3])]"
                                            },
                                            "resourceGroupName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The name of the resource group the replication container was created in."
                                              },
                                              "value": "[resourceGroup().name]"
                                            }
                                          }
                                        }
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.RecoveryServices/vaults/replicationFabrics/replicationProtectionContainers', split(format('{0}/{1}/{2}', parameters('recoveryVaultName'), parameters('replicationFabricName'), parameters('name')), '/')[0], split(format('{0}/{1}/{2}', parameters('recoveryVaultName'), parameters('replicationFabricName'), parameters('name')), '/')[1], split(format('{0}/{1}/{2}', parameters('recoveryVaultName'), parameters('replicationFabricName'), parameters('name')), '/')[2])]"
                                      ]
                                    }
                                  ],
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the replication container."
                                      },
                                      "value": "[format('{0}/{1}/{2}', parameters('recoveryVaultName'), parameters('replicationFabricName'), parameters('name'))]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the replication container."
                                      },
                                      "value": "[resourceId('Microsoft.RecoveryServices/vaults/replicationFabrics/replicationProtectionContainers', split(format('{0}/{1}/{2}', parameters('recoveryVaultName'), parameters('replicationFabricName'), parameters('name')), '/')[0], split(format('{0}/{1}/{2}', parameters('recoveryVaultName'), parameters('replicationFabricName'), parameters('name')), '/')[1], split(format('{0}/{1}/{2}', parameters('recoveryVaultName'), parameters('replicationFabricName'), parameters('name')), '/')[2])]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the resource group the replication container was created in."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.RecoveryServices/vaults/replicationFabrics', split(format('{0}/{1}', parameters('recoveryVaultName'), parameters('name')), '/')[0], split(format('{0}/{1}', parameters('recoveryVaultName'), parameters('name')), '/')[1])]"
                              ]
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the replication fabric."
                              },
                              "value": "[format('{0}/{1}', parameters('recoveryVaultName'), parameters('name'))]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the replication fabric."
                              },
                              "value": "[resourceId('Microsoft.RecoveryServices/vaults/replicationFabrics', split(format('{0}/{1}', parameters('recoveryVaultName'), parameters('name')), '/')[0], split(format('{0}/{1}', parameters('recoveryVaultName'), parameters('name')), '/')[1])]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the resource group the replication fabric was created in."
                              },
                              "value": "[resourceGroup().name]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.RecoveryServices/vaults', parameters('name'))]",
                        "rsv_replicationPolicies"
                      ]
                    },
                    {
                      "copy": {
                        "name": "rsv_replicationPolicies",
                        "count": "[length(parameters('replicationPolicies'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-RSV-Policy-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[parameters('replicationPolicies')[copyIndex()].name]"
                          },
                          "recoveryVaultName": {
                            "value": "[parameters('name')]"
                          },
                          "appConsistentFrequencyInMinutes": {
                            "value": "[coalesce(tryGet(parameters('replicationPolicies')[copyIndex()], 'appConsistentFrequencyInMinutes'), 60)]"
                          },
                          "crashConsistentFrequencyInMinutes": {
                            "value": "[coalesce(tryGet(parameters('replicationPolicies')[copyIndex()], 'crashConsistentFrequencyInMinutes'), 5)]"
                          },
                          "multiVmSyncStatus": {
                            "value": "[coalesce(tryGet(parameters('replicationPolicies')[copyIndex()], 'multiVmSyncStatus'), 'Enable')]"
                          },
                          "recoveryPointHistory": {
                            "value": "[coalesce(tryGet(parameters('replicationPolicies')[copyIndex()], 'recoveryPointHistory'), 1440)]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.36.1.42791",
                              "templateHash": "12780193304424574332"
                            }
                          },
                          "parameters": {
                            "recoveryVaultName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent Azure Recovery Service Vault. Required if the template is used in a standalone deployment."
                              }
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the replication policy."
                              }
                            },
                            "appConsistentFrequencyInMinutes": {
                              "type": "int",
                              "defaultValue": 60,
                              "metadata": {
                                "description": "Optional. The app consistent snapshot frequency (in minutes)."
                              }
                            },
                            "crashConsistentFrequencyInMinutes": {
                              "type": "int",
                              "defaultValue": 5,
                              "metadata": {
                                "description": "Optional. The crash consistent snapshot frequency (in minutes)."
                              }
                            },
                            "multiVmSyncStatus": {
                              "type": "string",
                              "defaultValue": "Enable",
                              "allowedValues": [
                                "Enable",
                                "Disable"
                              ],
                              "metadata": {
                                "description": "Optional. A value indicating whether multi-VM sync has to be enabled."
                              }
                            },
                            "recoveryPointHistory": {
                              "type": "int",
                              "defaultValue": 1440,
                              "metadata": {
                                "description": "Optional. The duration in minutes until which the recovery points need to be stored."
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.RecoveryServices/vaults/replicationPolicies",
                              "apiVersion": "2022-10-01",
                              "name": "[format('{0}/{1}', parameters('recoveryVaultName'), parameters('name'))]",
                              "properties": {
                                "providerSpecificInput": {
                                  "instanceType": "A2A",
                                  "appConsistentFrequencyInMinutes": "[parameters('appConsistentFrequencyInMinutes')]",
                                  "crashConsistentFrequencyInMinutes": "[parameters('crashConsistentFrequencyInMinutes')]",
                                  "multiVmSyncStatus": "[parameters('multiVmSyncStatus')]",
                                  "recoveryPointHistory": "[parameters('recoveryPointHistory')]"
                                }
                              }
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the replication policy."
                              },
                              "value": "[format('{0}/{1}', parameters('recoveryVaultName'), parameters('name'))]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the replication policy."
                              },
                              "value": "[resourceId('Microsoft.RecoveryServices/vaults/replicationPolicies', split(format('{0}/{1}', parameters('recoveryVaultName'), parameters('name')), '/')[0], split(format('{0}/{1}', parameters('recoveryVaultName'), parameters('name')), '/')[1])]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the resource group the replication policy was created in."
                              },
                              "value": "[resourceGroup().name]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.RecoveryServices/vaults', parameters('name'))]"
                      ]
                    },
                    {
                      "condition": "[not(empty(parameters('backupStorageConfig')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-RSV-BackupStorageConfig', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "recoveryVaultName": {
                            "value": "[parameters('name')]"
                          },
                          "storageModelType": {
                            "value": "[parameters('backupStorageConfig').storageModelType]"
                          },
                          "crossRegionRestoreFlag": {
                            "value": "[parameters('backupStorageConfig').crossRegionRestoreFlag]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.36.1.42791",
                              "templateHash": "2845849523132879809"
                            }
                          },
                          "parameters": {
                            "recoveryVaultName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent Azure Recovery Service Vault. Required if the template is used in a standalone deployment."
                              }
                            },
                            "name": {
                              "type": "string",
                              "defaultValue": "vaultstorageconfig",
                              "metadata": {
                                "description": "Optional. The name of the backup storage config."
                              }
                            },
                            "storageModelType": {
                              "type": "string",
                              "defaultValue": "GeoRedundant",
                              "allowedValues": [
                                "GeoRedundant",
                                "LocallyRedundant",
                                "ReadAccessGeoZoneRedundant",
                                "ZoneRedundant"
                              ],
                              "metadata": {
                                "description": "Optional. Change Vault Storage Type (Works if vault has not registered any backup instance)."
                              }
                            },
                            "crossRegionRestoreFlag": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Opt in details of Cross Region Restore feature."
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.RecoveryServices/vaults/backupstorageconfig",
                              "apiVersion": "2023-01-01",
                              "name": "[format('{0}/{1}', parameters('recoveryVaultName'), parameters('name'))]",
                              "properties": {
                                "storageModelType": "[parameters('storageModelType')]",
                                "crossRegionRestoreFlag": "[parameters('crossRegionRestoreFlag')]"
                              }
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the backup storage config."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the backup storage config."
                              },
                              "value": "[resourceId('Microsoft.RecoveryServices/vaults/backupstorageconfig', parameters('recoveryVaultName'), parameters('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the Resource Group the backup storage configuration was created in."
                              },
                              "value": "[resourceGroup().name]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.RecoveryServices/vaults', parameters('name'))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "rsv_backupFabric_protectionContainers",
                        "count": "[length(parameters('protectionContainers'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-RSV-ProtectionContainers-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "recoveryVaultName": {
                            "value": "[parameters('name')]"
                          },
                          "name": {
                            "value": "[parameters('protectionContainers')[copyIndex()].name]"
                          },
                          "sourceResourceId": {
                            "value": "[parameters('protectionContainers')[copyIndex()].sourceResourceId]"
                          },
                          "friendlyName": {
                            "value": "[parameters('protectionContainers')[copyIndex()].friendlyName]"
                          },
                          "backupManagementType": {
                            "value": "[parameters('protectionContainers')[copyIndex()].backupManagementType]"
                          },
                          "containerType": {
                            "value": "[parameters('protectionContainers')[copyIndex()].containerType]"
                          },
                          "protectedItems": {
                            "value": "[coalesce(tryGet(parameters('protectionContainers')[copyIndex()], 'protectedItems'), createArray())]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.36.1.42791",
                              "templateHash": "7255736543201115855"
                            }
                          },
                          "parameters": {
                            "recoveryVaultName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent Azure Recovery Service Vault. Required if the template is used in a standalone deployment."
                              }
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the Azure Recovery Service Vault Protection Container."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. Location for all resources."
                              }
                            },
                            "backupManagementType": {
                              "type": "string",
                              "defaultValue": "",
                              "allowedValues": [
                                "AzureBackupServer",
                                "AzureIaasVM",
                                "AzureSql",
                                "AzureStorage",
                                "AzureWorkload",
                                "DPM",
                                "DefaultBackup",
                                "Invalid",
                                "MAB",
                                ""
                              ],
                              "metadata": {
                                "description": "Optional. Backup management type to execute the current Protection Container job."
                              }
                            },
                            "sourceResourceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of the target resource for the Protection Container."
                              }
                            },
                            "friendlyName": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Friendly name of the Protection Container."
                              }
                            },
                            "protectedItems": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Protected items to register in the container."
                              }
                            },
                            "containerType": {
                              "type": "string",
                              "defaultValue": "",
                              "allowedValues": [
                                "AzureBackupServerContainer",
                                "AzureSqlContainer",
                                "GenericContainer",
                                "Microsoft.ClassicCompute/virtualMachines",
                                "Microsoft.Compute/virtualMachines",
                                "SQLAGWorkLoadContainer",
                                "StorageContainer",
                                "VMAppContainer",
                                "Windows",
                                ""
                              ],
                              "metadata": {
                                "description": "Optional. Type of the container."
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.RecoveryServices/vaults/backupFabrics/protectionContainers",
                              "apiVersion": "2023-01-01",
                              "name": "[format('{0}/Azure/{1}', parameters('recoveryVaultName'), parameters('name'))]",
                              "properties": {
                                "sourceResourceId": "[if(not(empty(parameters('sourceResourceId'))), parameters('sourceResourceId'), null())]",
                                "friendlyName": "[if(not(empty(parameters('friendlyName'))), parameters('friendlyName'), null())]",
                                "backupManagementType": "[if(not(empty(parameters('backupManagementType'))), parameters('backupManagementType'), null())]",
                                "containerType": "[if(not(empty(parameters('containerType'))), parameters('containerType'), null())]"
                              }
                            },
                            {
                              "copy": {
                                "name": "protectionContainer_protectedItems",
                                "count": "[length(parameters('protectedItems'))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('ProtectedItem-{0}-{1}', copyIndex(), uniqueString(deployment().name, parameters('location')))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "policyId": {
                                    "value": "[parameters('protectedItems')[copyIndex()].policyId]"
                                  },
                                  "name": {
                                    "value": "[parameters('protectedItems')[copyIndex()].name]"
                                  },
                                  "protectedItemType": {
                                    "value": "[parameters('protectedItems')[copyIndex()].protectedItemType]"
                                  },
                                  "protectionContainerName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "recoveryVaultName": {
                                    "value": "[parameters('recoveryVaultName')]"
                                  },
                                  "sourceResourceId": {
                                    "value": "[parameters('protectedItems')[copyIndex()].sourceResourceId]"
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.36.1.42791",
                                      "templateHash": "17302391377209657987"
                                    }
                                  },
                                  "parameters": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Name of the resource."
                                      }
                                    },
                                    "protectionContainerName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. Name of the Azure Recovery Service Vault Protection Container. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "recoveryVaultName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent Azure Recovery Service Vault. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "defaultValue": "[resourceGroup().location]",
                                      "metadata": {
                                        "description": "Optional. Location for all resources."
                                      }
                                    },
                                    "protectedItemType": {
                                      "type": "string",
                                      "allowedValues": [
                                        "AzureFileShareProtectedItem",
                                        "AzureVmWorkloadSAPAseDatabase",
                                        "AzureVmWorkloadSAPHanaDatabase",
                                        "AzureVmWorkloadSQLDatabase",
                                        "DPMProtectedItem",
                                        "GenericProtectedItem",
                                        "MabFileFolderProtectedItem",
                                        "Microsoft.ClassicCompute/virtualMachines",
                                        "Microsoft.Compute/virtualMachines",
                                        "Microsoft.Sql/servers/databases"
                                      ],
                                      "metadata": {
                                        "description": "Required. The backup item type."
                                      }
                                    },
                                    "policyId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. ID of the backup policy with which this item is backed up."
                                      }
                                    },
                                    "sourceResourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Resource ID of the resource to back up."
                                      }
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.RecoveryServices/vaults/backupFabrics/protectionContainers/protectedItems",
                                      "apiVersion": "2023-01-01",
                                      "name": "[format('{0}/Azure/{1}/{2}', parameters('recoveryVaultName'), parameters('protectionContainerName'), parameters('name'))]",
                                      "location": "[parameters('location')]",
                                      "properties": {
                                        "protectedItemType": "[parameters('protectedItemType')]",
                                        "policyId": "[parameters('policyId')]",
                                        "sourceResourceId": "[parameters('sourceResourceId')]"
                                      }
                                    }
                                  ],
                                  "outputs": {
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the Resource Group the protected item was created in."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the protected item."
                                      },
                                      "value": "[resourceId('Microsoft.RecoveryServices/vaults/backupFabrics/protectionContainers/protectedItems', split(format('{0}/Azure/{1}/{2}', parameters('recoveryVaultName'), parameters('protectionContainerName'), parameters('name')), '/')[0], split(format('{0}/Azure/{1}/{2}', parameters('recoveryVaultName'), parameters('protectionContainerName'), parameters('name')), '/')[1], split(format('{0}/Azure/{1}/{2}', parameters('recoveryVaultName'), parameters('protectionContainerName'), parameters('name')), '/')[2], split(format('{0}/Azure/{1}/{2}', parameters('recoveryVaultName'), parameters('protectionContainerName'), parameters('name')), '/')[3])]"
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The Name of the protected item."
                                      },
                                      "value": "[format('{0}/Azure/{1}/{2}', parameters('recoveryVaultName'), parameters('protectionContainerName'), parameters('name'))]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.RecoveryServices/vaults/backupFabrics/protectionContainers', split(format('{0}/Azure/{1}', parameters('recoveryVaultName'), parameters('name')), '/')[0], split(format('{0}/Azure/{1}', parameters('recoveryVaultName'), parameters('name')), '/')[1], split(format('{0}/Azure/{1}', parameters('recoveryVaultName'), parameters('name')), '/')[2])]"
                              ]
                            }
                          ],
                          "outputs": {
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the Resource Group the Protection Container was created in."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the Protection Container."
                              },
                              "value": "[resourceId('Microsoft.RecoveryServices/vaults/backupFabrics/protectionContainers', split(format('{0}/Azure/{1}', parameters('recoveryVaultName'), parameters('name')), '/')[0], split(format('{0}/Azure/{1}', parameters('recoveryVaultName'), parameters('name')), '/')[1], split(format('{0}/Azure/{1}', parameters('recoveryVaultName'), parameters('name')), '/')[2])]"
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The Name of the Protection Container."
                              },
                              "value": "[format('{0}/Azure/{1}', parameters('recoveryVaultName'), parameters('name'))]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.RecoveryServices/vaults', parameters('name'))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "rsv_backupPolicies",
                        "count": "[length(parameters('backupPolicies'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-RSV-BackupPolicy-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "recoveryVaultName": {
                            "value": "[parameters('name')]"
                          },
                          "name": {
                            "value": "[parameters('backupPolicies')[copyIndex()].name]"
                          },
                          "properties": {
                            "value": "[parameters('backupPolicies')[copyIndex()].properties]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.36.1.42791",
                              "templateHash": "14008828449057764101"
                            }
                          },
                          "parameters": {
                            "recoveryVaultName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent Azure Recovery Service Vault. Required if the template is used in a standalone deployment."
                              }
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the Azure Recovery Service Vault Backup Policy."
                              }
                            },
                            "properties": {
                              "type": "object",
                              "metadata": {
                                "description": "Required. Configuration of the Azure Recovery Service Vault Backup Policy."
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.RecoveryServices/vaults/backupPolicies",
                              "apiVersion": "2023-01-01",
                              "name": "[format('{0}/{1}', parameters('recoveryVaultName'), parameters('name'))]",
                              "properties": "[parameters('properties')]"
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the backup policy."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the backup policy."
                              },
                              "value": "[resourceId('Microsoft.RecoveryServices/vaults/backupPolicies', parameters('recoveryVaultName'), parameters('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the resource group the backup policy was created in."
                              },
                              "value": "[resourceGroup().name]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.RecoveryServices/vaults', parameters('name'))]"
                      ]
                    },
                    {
                      "condition": "[not(empty(parameters('backupConfig')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-RSV-BackupConfig', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "recoveryVaultName": {
                            "value": "[parameters('name')]"
                          },
                          "name": {
                            "value": "[coalesce(tryGet(parameters('backupConfig'), 'name'), 'vaultconfig')]"
                          },
                          "enhancedSecurityState": {
                            "value": "[coalesce(tryGet(parameters('backupConfig'), 'enhancedSecurityState'), 'Enabled')]"
                          },
                          "resourceGuardOperationRequests": {
                            "value": "[coalesce(tryGet(parameters('backupConfig'), 'resourceGuardOperationRequests'), createArray())]"
                          },
                          "softDeleteFeatureState": {
                            "value": "[coalesce(tryGet(parameters('backupConfig'), 'softDeleteFeatureState'), 'Enabled')]"
                          },
                          "storageModelType": {
                            "value": "[coalesce(tryGet(parameters('backupConfig'), 'storageModelType'), 'GeoRedundant')]"
                          },
                          "storageType": {
                            "value": "[coalesce(tryGet(parameters('backupConfig'), 'storageType'), 'GeoRedundant')]"
                          },
                          "storageTypeState": {
                            "value": "[coalesce(tryGet(parameters('backupConfig'), 'storageTypeState'), 'Locked')]"
                          },
                          "isSoftDeleteFeatureStateEditable": {
                            "value": "[coalesce(tryGet(parameters('backupConfig'), 'isSoftDeleteFeatureStateEditable'), true())]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.36.1.42791",
                              "templateHash": "18208409867658713089"
                            }
                          },
                          "parameters": {
                            "recoveryVaultName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent Azure Recovery Service Vault. Required if the template is used in a standalone deployment."
                              }
                            },
                            "name": {
                              "type": "string",
                              "defaultValue": "vaultconfig",
                              "metadata": {
                                "description": "Optional. Name of the Azure Recovery Service Vault Backup Policy."
                              }
                            },
                            "enhancedSecurityState": {
                              "type": "string",
                              "defaultValue": "Enabled",
                              "allowedValues": [
                                "Disabled",
                                "Enabled"
                              ],
                              "metadata": {
                                "description": "Optional. Enable this setting to protect hybrid backups against accidental deletes and add additional layer of authentication for critical operations."
                              }
                            },
                            "resourceGuardOperationRequests": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. ResourceGuard Operation Requests."
                              }
                            },
                            "softDeleteFeatureState": {
                              "type": "string",
                              "defaultValue": "Enabled",
                              "allowedValues": [
                                "Disabled",
                                "Enabled"
                              ],
                              "metadata": {
                                "description": "Optional. Enable this setting to protect backup data for Azure VM, SQL Server in Azure VM and SAP HANA in Azure VM from accidental deletes."
                              }
                            },
                            "storageModelType": {
                              "type": "string",
                              "defaultValue": "GeoRedundant",
                              "allowedValues": [
                                "GeoRedundant",
                                "LocallyRedundant",
                                "ReadAccessGeoZoneRedundant",
                                "ZoneRedundant"
                              ],
                              "metadata": {
                                "description": "Optional. Storage type."
                              }
                            },
                            "storageType": {
                              "type": "string",
                              "defaultValue": "GeoRedundant",
                              "allowedValues": [
                                "GeoRedundant",
                                "LocallyRedundant",
                                "ReadAccessGeoZoneRedundant",
                                "ZoneRedundant"
                              ],
                              "metadata": {
                                "description": "Optional. Storage type."
                              }
                            },
                            "storageTypeState": {
                              "type": "string",
                              "defaultValue": "Locked",
                              "allowedValues": [
                                "Locked",
                                "Unlocked"
                              ],
                              "metadata": {
                                "description": "Optional. Once a machine is registered against a resource, the storageTypeState is always Locked."
                              }
                            },
                            "isSoftDeleteFeatureStateEditable": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Is soft delete feature state editable."
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.RecoveryServices/vaults/backupconfig",
                              "apiVersion": "2023-01-01",
                              "name": "[format('{0}/{1}', parameters('recoveryVaultName'), parameters('name'))]",
                              "properties": {
                                "enhancedSecurityState": "[parameters('enhancedSecurityState')]",
                                "resourceGuardOperationRequests": "[parameters('resourceGuardOperationRequests')]",
                                "softDeleteFeatureState": "[parameters('softDeleteFeatureState')]",
                                "storageModelType": "[parameters('storageModelType')]",
                                "storageType": "[parameters('storageType')]",
                                "storageTypeState": "[parameters('storageTypeState')]",
                                "isSoftDeleteFeatureStateEditable": "[parameters('isSoftDeleteFeatureStateEditable')]"
                              }
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the backup config."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the backup config."
                              },
                              "value": "[resourceId('Microsoft.RecoveryServices/vaults/backupconfig', parameters('recoveryVaultName'), parameters('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the resource group the backup config was created in."
                              },
                              "value": "[resourceGroup().name]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.RecoveryServices/vaults', parameters('name'))]"
                      ]
                    },
                    {
                      "condition": "[not(empty(parameters('replicationAlertSettings')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('RSV-replicationAlertSettings-{0}', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "defaultAlertSetting"
                          },
                          "recoveryVaultName": {
                            "value": "[parameters('name')]"
                          },
                          "customEmailAddresses": {
                            "value": "[coalesce(tryGet(parameters('replicationAlertSettings'), 'customEmailAddresses'), createArray())]"
                          },
                          "locale": {
                            "value": "[coalesce(tryGet(parameters('replicationAlertSettings'), 'locale'), '')]"
                          },
                          "sendToOwners": {
                            "value": "[coalesce(tryGet(parameters('replicationAlertSettings'), 'sendToOwners'), 'Send')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.36.1.42791",
                              "templateHash": "10606653234924922666"
                            }
                          },
                          "parameters": {
                            "recoveryVaultName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent Azure Recovery Service Vault. Required if the template is used in a standalone deployment."
                              }
                            },
                            "name": {
                              "type": "string",
                              "defaultValue": "defaultAlertSetting",
                              "metadata": {
                                "description": "Optional. The name of the replication Alert Setting."
                              }
                            },
                            "customEmailAddresses": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Comma separated list of custom email address for sending alert emails."
                              }
                            },
                            "locale": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The locale for the email notification."
                              }
                            },
                            "sendToOwners": {
                              "type": "string",
                              "defaultValue": "Send",
                              "allowedValues": [
                                "DoNotSend",
                                "Send"
                              ],
                              "metadata": {
                                "description": "Optional. The value indicating whether to send email to subscription administrator."
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.RecoveryServices/vaults/replicationAlertSettings",
                              "apiVersion": "2022-10-01",
                              "name": "[format('{0}/{1}', parameters('recoveryVaultName'), parameters('name'))]",
                              "properties": {
                                "customEmailAddresses": "[if(not(empty(parameters('customEmailAddresses'))), parameters('customEmailAddresses'), null())]",
                                "locale": "[parameters('locale')]",
                                "sendToOwners": "[parameters('sendToOwners')]"
                              }
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the replication Alert Setting."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the resource group the replication alert setting was created."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the replication alert setting."
                              },
                              "value": "[resourceId('Microsoft.RecoveryServices/vaults/replicationAlertSettings', parameters('recoveryVaultName'), parameters('name'))]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.RecoveryServices/vaults', parameters('name'))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "rsv_privateEndpoints",
                        "count": "[length(parameters('privateEndpoints'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('RSV-PrivateEndpoint-{0}-{1}', copyIndex(), uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "groupIds": {
                            "value": [
                              "[parameters('privateEndpoints')[copyIndex()].service]"
                            ]
                          },
                          "name": {
                            "value": "[coalesce(tryGet(parameters('privateEndpoints')[copyIndex()], 'name'), format('pe-{0}-{1}-{2}', last(split(resourceId('Microsoft.RecoveryServices/vaults', parameters('name')), '/')), parameters('privateEndpoints')[copyIndex()].service, copyIndex()))]"
                          },
                          "serviceResourceId": {
                            "value": "[resourceId('Microsoft.RecoveryServices/vaults', parameters('name'))]"
                          },
                          "subnetResourceId": {
                            "value": "[parameters('privateEndpoints')[copyIndex()].subnetResourceId]"
                          },
                          "location": {
                            "value": "[coalesce(tryGet(parameters('privateEndpoints')[copyIndex()], 'location'), reference(split(parameters('privateEndpoints')[copyIndex()].subnetResourceId, '/subnets/')[0], '2020-06-01', 'Full').location)]"
                          },
                          "privateDnsZoneGroup": {
                            "value": "[coalesce(tryGet(parameters('privateEndpoints')[copyIndex()], 'privateDnsZoneGroup'), createObject())]"
                          },
                          "tags": {
                            "value": "[coalesce(tryGet(parameters('privateEndpoints')[copyIndex()], 'tags'), createObject())]"
                          },
                          "manualPrivateLinkServiceConnections": {
                            "value": "[coalesce(tryGet(parameters('privateEndpoints')[copyIndex()], 'manualPrivateLinkServiceConnections'), createArray())]"
                          },
                          "customDnsConfigs": {
                            "value": "[coalesce(tryGet(parameters('privateEndpoints')[copyIndex()], 'customDnsConfigs'), createArray())]"
                          },
                          "ipConfigurations": {
                            "value": "[coalesce(tryGet(parameters('privateEndpoints')[copyIndex()], 'ipConfigurations'), createArray())]"
                          },
                          "applicationSecurityGroups": {
                            "value": "[coalesce(tryGet(parameters('privateEndpoints')[copyIndex()], 'applicationSecurityGroups'), createArray())]"
                          },
                          "customNetworkInterfaceName": {
                            "value": "[coalesce(tryGet(parameters('privateEndpoints')[copyIndex()], 'customNetworkInterfaceName'), '')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.36.1.42791",
                              "templateHash": "5820984105601907039"
                            },
                            "name": "Private Endpoints"
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the private endpoint resource to create."
                              }
                            },
                            "subnetResourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
                              }
                            },
                            "serviceResourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Resource ID of the resource that needs to be connected to the network."
                              }
                            },
                            "applicationSecurityGroups": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Application security groups in which the private endpoint IP configuration is included."
                              }
                            },
                            "customNetworkInterfaceName": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The custom name of the network interface attached to the private endpoint."
                              }
                            },
                            "ipConfigurations": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. A list of IP configurations of the private endpoint. This will be used to map to the First Party Service endpoints."
                              }
                            },
                            "groupIds": {
                              "type": "array",
                              "metadata": {
                                "description": "Required. Subtype(s) of the connection to be created. The allowed values depend on the type serviceResourceId refers to."
                              }
                            },
                            "privateDnsZoneGroup": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. The private DNS zone group configuration used to associate the private endpoint with one or multiple private DNS zones. A DNS zone group can support up to 5 DNS zones."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. Location for all Resources."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Tags to be applied on all resources/resource groups in this deployment."
                              }
                            },
                            "customDnsConfigs": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Custom DNS configurations."
                              }
                            },
                            "manualPrivateLinkServiceConnections": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Manual PrivateLink Service Connections."
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/privateEndpoints",
                              "apiVersion": "2023-04-01",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "applicationSecurityGroups": "[parameters('applicationSecurityGroups')]",
                                "customDnsConfigs": "[parameters('customDnsConfigs')]",
                                "customNetworkInterfaceName": "[parameters('customNetworkInterfaceName')]",
                                "ipConfigurations": "[parameters('ipConfigurations')]",
                                "manualPrivateLinkServiceConnections": "[parameters('manualPrivateLinkServiceConnections')]",
                                "privateLinkServiceConnections": [
                                  {
                                    "name": "[parameters('name')]",
                                    "properties": {
                                      "privateLinkServiceId": "[parameters('serviceResourceId')]",
                                      "groupIds": "[parameters('groupIds')]"
                                    }
                                  }
                                ],
                                "subnet": {
                                  "id": "[parameters('subnetResourceId')]"
                                }
                              }
                            },
                            {
                              "condition": "[not(empty(parameters('privateDnsZoneGroup')))]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('PE-PrivateDnsZoneGroup-{0}', uniqueString(deployment().name))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "privateDNSResourceIds": {
                                    "value": "[parameters('privateDnsZoneGroup').privateDNSResourceIds]"
                                  },
                                  "privateEndpointName": {
                                    "value": "[parameters('name')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.36.1.42791",
                                      "templateHash": "7513849818521025348"
                                    }
                                  },
                                  "parameters": {
                                    "privateEndpointName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent private endpoint. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "privateDNSResourceIds": {
                                      "type": "array",
                                      "minLength": 1,
                                      "maxLength": 5,
                                      "metadata": {
                                        "description": "Required. Array of private DNS zone resource IDs. A DNS zone group can support up to 5 DNS zones."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "defaultValue": "default",
                                      "metadata": {
                                        "description": "Optional. The name of the private DNS zone group."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "copy": [
                                      {
                                        "name": "privateDnsZoneConfigs",
                                        "count": "[length(parameters('privateDNSResourceIds'))]",
                                        "input": {
                                          "name": "[last(split(parameters('privateDNSResourceIds')[copyIndex('privateDnsZoneConfigs')], '/'))]",
                                          "properties": {
                                            "privateDnsZoneId": "[parameters('privateDNSResourceIds')[copyIndex('privateDnsZoneConfigs')]]"
                                          }
                                        }
                                      }
                                    ]
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                                      "apiVersion": "2023-04-01",
                                      "name": "[format('{0}/{1}', parameters('privateEndpointName'), parameters('name'))]",
                                      "properties": {
                                        "privateDnsZoneConfigs": "[variables('privateDnsZoneConfigs')]"
                                      }
                                    }
                                  ],
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the private endpoint DNS zone group."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the private endpoint DNS zone group."
                                      },
                                      "value": "[resourceId('Microsoft.Network/privateEndpoints/privateDnsZoneGroups', parameters('privateEndpointName'), parameters('name'))]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group the private endpoint was deployed into."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the private endpoint."
                              },
                              "value": "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the private endpoint."
                              },
                              "value": "[parameters('name')]"
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "The location the resource was deployed into."
                              },
                              "value": "[reference(resourceId('Microsoft.Network/privateEndpoints', parameters('name')), '2023-04-01', 'full').location]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.RecoveryServices/vaults', parameters('name'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the recovery services vault."
                      },
                      "value": "[resourceId('Microsoft.RecoveryServices/vaults', parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the resource group the recovery services vault was created in."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The Name of the recovery services vault."
                      },
                      "value": "[parameters('name')]"
                    },
                    "systemAssignedPrincipalId": {
                      "type": "string",
                      "metadata": {
                        "description": "The principal ID of the system assigned identity."
                      },
                      "value": "[if(and(parameters('systemAssignedIdentity'), contains(reference(resourceId('Microsoft.RecoveryServices/vaults', parameters('name')), '2023-01-01', 'full').identity, 'principalId')), reference(resourceId('Microsoft.RecoveryServices/vaults', parameters('name')), '2023-01-01', 'full').identity.principalId, '')]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference(resourceId('Microsoft.RecoveryServices/vaults', parameters('name')), '2023-01-01', 'full').location]"
                    }
                  }
                }
              }
            },
            {
              "copy": {
                "name": "protectedItems_Vm",
                "count": "[length(range(1, parameters('sessionHostBatchCount')))]"
              },
              "condition": "[and(parameters('recoveryServices'), or(equals(parameters('deploymentType'), 'Complete'), not(empty(parameters('existingRecoveryServicesVaultResourceId')))))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('BackupProtectedItems_VirtualMachines_{0}_{1}', sub(range(1, parameters('sessionHostBatchCount'))[copyIndex()], 1), parameters('timeStamp'))]",
              "resourceGroup": "[parameters('resourceGroupHosts')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "PolicyId": "[if(equals(parameters('deploymentType'), 'Complete'), createObject('value', format('{0}/backupPolicies/{1}', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupHosts')), 'Microsoft.Resources/deployments', format('RecoveryServicesVault_VirtualMachines_{0}', parameters('timeStamp'))), '2022-09-01').outputs.resourceId.value, variables('backupPolicyName'))), createObject('value', format('{0}/backupPolicies/{1}', parameters('existingRecoveryServicesVaultResourceId'), variables('backupPolicyName'))))]",
                  "recoveryServicesVaultName": "[if(equals(parameters('deploymentType'), 'Complete'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupHosts')), 'Microsoft.Resources/deployments', format('RecoveryServicesVault_VirtualMachines_{0}', parameters('timeStamp'))), '2022-09-01').outputs.name.value), createObject('value', last(split(parameters('existingRecoveryServicesVaultResourceId'), '/'))))]",
                  "sessionHostCount": "[if(and(equals(range(1, parameters('sessionHostBatchCount'))[copyIndex()], parameters('sessionHostBatchCount')), greater(parameters('divisionRemainderValue'), 0)), createObject('value', parameters('divisionRemainderValue')), createObject('value', parameters('maxResourcesPerTemplateDeployment')))]",
                  "sessionHostIndex": "[if(equals(range(1, parameters('sessionHostBatchCount'))[copyIndex()], 1), createObject('value', parameters('sessionHostIndex')), createObject('value', add(mul(sub(range(1, parameters('sessionHostBatchCount'))[copyIndex()], 1), parameters('maxResourcesPerTemplateDeployment')), parameters('sessionHostIndex'))))]",
                  "tags": {
                    "value": "[union(createObject('cm-resource-parent', parameters('hostPoolResourceId')), coalesce(tryGet(parameters('tags'), 'Microsoft.recoveryServices/vaults'), createObject()))]"
                  },
                  "virtualMachineNamePrefix": {
                    "value": "[parameters('virtualMachineNamePrefix')]"
                  },
                  "VirtualMachineResourceGroupName": {
                    "value": "[parameters('resourceGroupHosts')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.36.1.42791",
                      "templateHash": "7718546855753450741"
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string"
                    },
                    "PolicyId": {
                      "type": "string"
                    },
                    "recoveryServicesVaultName": {
                      "type": "string"
                    },
                    "sessionHostCount": {
                      "type": "int"
                    },
                    "sessionHostIndex": {
                      "type": "int"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "virtualMachineNamePrefix": {
                      "type": "string"
                    },
                    "VirtualMachineResourceGroupName": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "v2VmContainer": "iaasvmcontainer;iaasvmcontainerv2;",
                    "v2Vm": "vm;iaasvmcontainerv2;"
                  },
                  "resources": [
                    {
                      "copy": {
                        "name": "protectedItems_Vm",
                        "count": "[length(range(0, parameters('sessionHostCount')))]"
                      },
                      "type": "Microsoft.RecoveryServices/vaults/backupFabrics/protectionContainers/protectedItems",
                      "apiVersion": "2021-08-01",
                      "name": "[format('{0}/Azure/{1}{2};{3}{4}/{5}{6};{7}{8}', parameters('recoveryServicesVaultName'), variables('v2VmContainer'), parameters('VirtualMachineResourceGroupName'), parameters('virtualMachineNamePrefix'), padLeft(add(range(0, parameters('sessionHostCount'))[copyIndex()], parameters('sessionHostIndex')), 3, '0'), variables('v2Vm'), parameters('VirtualMachineResourceGroupName'), parameters('virtualMachineNamePrefix'), padLeft(add(range(0, parameters('sessionHostCount'))[copyIndex()], parameters('sessionHostIndex')), 3, '0'))]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "protectedItemType": "Microsoft.Compute/virtualMachines",
                        "policyId": "[parameters('PolicyId')]",
                        "sourceResourceId": "[resourceId(parameters('VirtualMachineResourceGroupName'), 'Microsoft.Compute/virtualMachines', format('{0}{1}', parameters('virtualMachineNamePrefix'), padLeft(add(range(0, parameters('sessionHostCount'))[copyIndex()], parameters('sessionHostIndex')), 3, '0')))]"
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupHosts')), 'Microsoft.Resources/deployments', format('RecoveryServicesVault_VirtualMachines_{0}', parameters('timeStamp')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupHosts')), 'Microsoft.Resources/deployments', format('VirtualMachines_Batch_{0}_{1}', sub(range(1, parameters('sessionHostBatchCount'))[sub(range(1, parameters('sessionHostBatchCount'))[copyIndex()], 1)], 1), parameters('timeStamp')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('FlattenVirtualMachineNames_{0}', parameters('timeStamp'))]",
              "resourceGroup": "[parameters('resourceGroupHosts')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "virtualMachineNamesPerBatch": {
                    "copy": [
                      {
                        "name": "value",
                        "count": "[length(range(1, parameters('sessionHostBatchCount')))]",
                        "input": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupHosts')), 'Microsoft.Resources/deployments', format('VirtualMachines_Batch_{0}_{1}', sub(range(1, parameters('sessionHostBatchCount'))[sub(range(1, parameters('sessionHostBatchCount'))[copyIndex('value')], 1)], 1), parameters('timeStamp'))), '2022-09-01').outputs.virtualMachineNames.value]"
                      }
                    ]
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.36.1.42791",
                      "templateHash": "1896795110724455135"
                    }
                  },
                  "parameters": {
                    "virtualMachineNamesPerBatch": {
                      "type": "array"
                    }
                  },
                  "resources": [],
                  "outputs": {
                    "virtualMachineNames": {
                      "type": "array",
                      "value": "[flatten(parameters('virtualMachineNamesPerBatch'))]"
                    }
                  }
                }
              },
              "dependsOn": [
                "virtualMachines"
              ]
            }
          ],
          "outputs": {
            "virtualMachineNames": {
              "type": "array",
              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupHosts')), 'Microsoft.Resources/deployments', format('FlattenVirtualMachineNames_{0}', parameters('timeStamp'))), '2022-09-01').outputs.virtualMachineNames.value]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('ControlPlane_{0}', parameters('timeStamp')))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('Deployment_Prereqs_{0}', parameters('timeStamp')))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('FSLogix_{0}', parameters('timeStamp')))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('Management_{0}', parameters('timeStamp')))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('ResourceNames_{0}', parameters('timeStamp')))]",
        "rgs"
      ]
    },
    {
      "condition": "[variables('createDeploymentVm')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('CleanUp_{0}', parameters('timeStamp'))]",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('virtualMachineSubnetResourceId'), '/')[2], split(parameters('virtualMachineSubnetResourceId'), '/')[4]), 'Microsoft.Network/virtualNetworks', split(parameters('virtualMachineSubnetResourceId'), '/')[8]), '2023-04-01', 'full').location]"
          },
          "deploymentVirtualMachineName": "[if(variables('createDeploymentVm'), createObject('value', reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Deployment_Prereqs_{0}', parameters('timeStamp'))), '2022-09-01').outputs.virtualMachineName.value), createObject('value', ''))]",
          "resourceGroupDeployment": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('ResourceNames_{0}', parameters('timeStamp'))), '2022-09-01').outputs.resourceGroupDeployment.value]"
          },
          "resourceGroupHosts": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('ResourceNames_{0}', parameters('timeStamp'))), '2022-09-01').outputs.resourceGroupHosts.value]"
          },
          "roleAssignmentIds": "[if(variables('createDeploymentVm'), createObject('value', reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Deployment_Prereqs_{0}', parameters('timeStamp'))), '2022-09-01').outputs.deploymentUserAssignedIdentityRoleAssignmentIds.value), createObject('value', createArray()))]",
          "timeStamp": {
            "value": "[parameters('timeStamp')]"
          },
          "userAssignedIdentityClientId": "[if(variables('createDeploymentVm'), createObject('value', reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Deployment_Prereqs_{0}', parameters('timeStamp'))), '2022-09-01').outputs.deploymentUserAssignedIdentityClientId.value), createObject('value', ''))]",
          "virtualMachineNames": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('SessionHosts_{0}', parameters('timeStamp'))), '2022-09-01').outputs.virtualMachineNames.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.1.42791",
              "templateHash": "6860122097817309977"
            }
          },
          "parameters": {
            "location": {
              "type": "string"
            },
            "resourceGroupHosts": {
              "type": "string"
            },
            "resourceGroupDeployment": {
              "type": "string"
            },
            "timeStamp": {
              "type": "string"
            },
            "userAssignedIdentityClientId": {
              "type": "string"
            },
            "deploymentVirtualMachineName": {
              "type": "string"
            },
            "roleAssignmentIds": {
              "type": "array"
            },
            "virtualMachineNames": {
              "type": "array"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('Remove_RunCommands_{0}', parameters('timeStamp'))]",
              "resourceGroup": "[parameters('resourceGroupDeployment')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "deploymentVmName": {
                    "value": "[parameters('deploymentVirtualMachineName')]"
                  },
                  "timeStamp": {
                    "value": "[parameters('timeStamp')]"
                  },
                  "userAssignedIdentityClientId": {
                    "value": "[parameters('userAssignedIdentityClientId')]"
                  },
                  "virtualMachineNames": {
                    "value": "[parameters('virtualMachineNames')]"
                  },
                  "virtualMachinesResourceGroup": {
                    "value": "[parameters('resourceGroupHosts')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.36.1.42791",
                      "templateHash": "5553050258527083167"
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string"
                    },
                    "deploymentVmName": {
                      "type": "string"
                    },
                    "timeStamp": {
                      "type": "string"
                    },
                    "userAssignedIdentityClientId": {
                      "type": "string"
                    },
                    "virtualMachinesResourceGroup": {
                      "type": "string"
                    },
                    "virtualMachineNames": {
                      "type": "array"
                    }
                  },
                  "variables": {
                    "$fxv#0": "Param(    \r\n    [string]$ResourceManagerUri,\r\n    [string]$SubscriptionId,\r\n    [string]$UserAssignedIdentityClientId,\r\n    [string]$VirtualMachineNames,\r\n    [string]$VirtualMachinesResourceGroup\r\n)\r\n\r\n$ErrorActionPreference = 'Stop'\r\n$WarningPreference = 'SilentlyContinue'\r\n\r\n[array]$VirtualMachineNames = $VirtualMachineNames.replace('\\\"', '\"') | ConvertFrom-Json\r\n\r\n# Fix the resource manager URI since only AzureCloud contains a trailing slash\r\n$ResourceManagerUriFixed = if($ResourceManagerUri[-1] -eq '/'){$ResourceManagerUri.Substring(0,$ResourceManagerUri.Length - 1)} else {$ResourceManagerUri}\r\n\r\n# Get an access token for Azure resources\r\n$AzureManagementAccessToken = (Invoke-RestMethod `\r\n    -Headers @{Metadata=\"true\"} `\r\n    -Uri $('http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01&resource=' + $ResourceManagerUriFixed + '&client_id=' + $UserAssignedIdentityClientId)).access_token\r\n\r\n# Set header for Azure Management API\r\n$AzureManagementHeader = @{\r\n    'Content-Type'='application/json'\r\n    'Authorization'='Bearer ' + $AzureManagementAccessToken\r\n}\r\n\r\n$ResourceGroupId = '/subscriptions/' + $SubscriptionId + '/resourceGroups/' + $VirtualMachinesResourceGroup\r\n\r\nForEach ($VMName in $VirtualMachineNames) {\r\n    $RunCommands = (Invoke-RestMethod `\r\n                        -Headers $AzureManagementHeader `\r\n                        -Method 'GET' `\r\n                        -Uri $($ResourceManagerUriFixed + $ResourceGroupId + '/providers/Microsoft.Compute/virtualMachines/' + $VMName + '/runCommands?api-version=2024-03-01')).value.name\r\n    ForEach ($RunCommand in $RunCommands) {\r\n        Invoke-RestMethod `\r\n            -Headers $AzureManagementHeader `\r\n            -Method 'DELETE' `\r\n            -Uri $($ResourceManagerUriFixed + $ResourceGroupId + '/providers/Microsoft.Compute/virtualMachines/' + $VmName + '/runCommands/' + $RunCommand + '?api-version=2024-03-01') | Out-Null\r\n    }\r\n}"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Compute/virtualMachines/runCommands",
                      "apiVersion": "2023-09-01",
                      "name": "[format('{0}/{1}', parameters('deploymentVmName'), format('Remove_RunCommands_{0}', parameters('timeStamp')))]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "asyncExecution": true,
                        "parameters": [
                          {
                            "name": "ResourceManagerUri",
                            "value": "[environment().resourceManager]"
                          },
                          {
                            "name": "SubscriptionId",
                            "value": "[subscription().subscriptionId]"
                          },
                          {
                            "name": "UserAssignedIdentityClientId",
                            "value": "[parameters('userAssignedIdentityClientId')]"
                          },
                          {
                            "name": "VirtualMachineNames",
                            "value": "[string(parameters('virtualMachineNames'))]"
                          },
                          {
                            "name": "virtualMachinesResourceGroup",
                            "value": "[parameters('virtualMachinesResourceGroup')]"
                          }
                        ],
                        "source": {
                          "script": "[variables('$fxv#0')]"
                        },
                        "treatFailureAsDeploymentFailure": true
                      }
                    }
                  ]
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('Remove_RoleAssignments_{0}', parameters('timeStamp'))]",
              "resourceGroup": "[parameters('resourceGroupDeployment')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "managementVmName": {
                    "value": "[parameters('deploymentVirtualMachineName')]"
                  },
                  "roleAssignmentIds": {
                    "value": "[filter(parameters('roleAssignmentIds'), lambda('roleAssignmentId', not(equals(split(lambdaVariables('roleAssignmentId'), '/')[4], parameters('resourceGroupDeployment')))))]"
                  },
                  "timeStamp": {
                    "value": "[parameters('timeStamp')]"
                  },
                  "userAssignedIdentityClientId": {
                    "value": "[parameters('userAssignedIdentityClientId')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.36.1.42791",
                      "templateHash": "16036380685659374692"
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string"
                    },
                    "roleAssignmentIds": {
                      "type": "array"
                    },
                    "timeStamp": {
                      "type": "string"
                    },
                    "userAssignedIdentityClientId": {
                      "type": "string"
                    },
                    "managementVmName": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "$fxv#0": "param(\r\n    [Parameter(Mandatory=$true)]\r\n    [string]$ResourceManagerUri,\r\n\r\n    [Parameter(Mandatory=$true)]\r\n    [string]$RoleAssignmentIds,\r\n\r\n    [Parameter(Mandatory=$true)]\r\n    [string]$UserAssignedIdentityClientId\r\n)\r\n\r\n$ErrorActionPreference = 'Stop'\r\n$WarningPreference = 'SilentlyContinue'\r\n\r\nTry {\r\n    # Fix the resource manager URI since only AzureCloud contains a trailing slash\r\n    $ResourceManagerUriFixed = if($ResourceManagerUri[-1] -eq '/'){$ResourceManagerUri.Substring(0,$ResourceManagerUri.Length - 1)} else {$ResourceManagerUri}\r\n\r\n    # Get an access token for Azure resources\r\n    $AzureManagementAccessToken = (Invoke-RestMethod -Headers @{Metadata=\"true\"} -Uri $('http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01&resource=' + $ResourceManagerUriFixed + '&client_id=' + $UserAssignedIdentityClientId)).access_token\r\n\r\n    # Set header for Azure Management API\r\n    $AzureManagementHeader = @{\r\n        'Content-Type'='application/json'\r\n        'Authorization'='Bearer ' + $AzureManagementAccessToken\r\n    }\r\n\r\n    # Delete Role Assignments\r\n\r\n    [array]$RoleAssignmentIds = $RoleAssignmentIds.replace('\\\"', '\"') | ConvertFrom-Json\r\n\r\n    ForEach ($RoleAssignmentId in $RoleAssignmentIds) {\r\n        Start-Sleep -Seconds 1\r\n        Invoke-RestMethod -Headers $AzureManagementHeader -Method 'DELETE' -Uri $($ResourceManagerUriFixed + $RoleAssignmentId + '?api-version=2022-04-01')\r\n    }\r\n}\r\ncatch {\r\n    throw\r\n}"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Compute/virtualMachines/runCommands",
                      "apiVersion": "2023-09-01",
                      "name": "[format('{0}/{1}', parameters('managementVmName'), format('Remove_RoleAssignments_{0}', parameters('timeStamp')))]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "asyncExecution": true,
                        "parameters": [
                          {
                            "name": "ResourceManagerUri",
                            "value": "[environment().resourceManager]"
                          },
                          {
                            "name": "RoleAssignmentIds",
                            "value": "[string(parameters('roleAssignmentIds'))]"
                          },
                          {
                            "name": "UserAssignedIdentityClientId",
                            "value": "[parameters('userAssignedIdentityClientId')]"
                          }
                        ],
                        "source": {
                          "script": "[variables('$fxv#0')]"
                        },
                        "treatFailureAsDeploymentFailure": true
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupDeployment')), 'Microsoft.Resources/deployments', format('Remove_RunCommands_{0}', parameters('timeStamp')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('Delete_DeploymentResourceGroup_{0}', parameters('timeStamp'))]",
              "resourceGroup": "[parameters('resourceGroupDeployment')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "deploymentVmName": {
                    "value": "[parameters('deploymentVirtualMachineName')]"
                  },
                  "timeStamp": {
                    "value": "[parameters('timeStamp')]"
                  },
                  "userAssignedIdentityClientId": {
                    "value": "[parameters('userAssignedIdentityClientId')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.36.1.42791",
                      "templateHash": "15051781706719689986"
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string"
                    },
                    "timeStamp": {
                      "type": "string"
                    },
                    "userAssignedIdentityClientId": {
                      "type": "string"
                    },
                    "deploymentVmName": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "$fxv#0": "param(\r\n    [Parameter(Mandatory=$true)]\r\n    [string]$ResourceManagerUri,\r\n\r\n    [Parameter(Mandatory=$true)]\r\n    [string]$UserAssignedIdentityClientId,\r\n\r\n    [Parameter(Mandatory=$true)]\r\n    [string]$ResourceGroupResourceId\r\n)\r\n\r\n$ErrorActionPreference = 'Stop'\r\n$WarningPreference = 'SilentlyContinue'\r\n\r\nTry {\r\n    $StopWatch = [Diagnostics.Stopwatch]::StartNew()\r\n\r\n    # Fix the resource manager URI since only AzureCloud contains a trailing slash\r\n    $ResourceManagerUriFixed = if($ResourceManagerUri[-1] -eq '/'){$ResourceManagerUri.Substring(0,$ResourceManagerUri.Length - 1)} else {$ResourceManagerUri}\r\n\r\n    # Get an access token for Azure resources\r\n    $AzureManagementAccessToken = (Invoke-RestMethod -Headers @{Metadata=\"true\"} -Uri $('http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01&resource=' + $ResourceManagerUriFixed + '&client_id=' + $UserAssignedIdentityClientId)).access_token\r\n\r\n    # Set header for Azure Management API\r\n    $AzureManagementHeader = @{\r\n        'Content-Type'='application/json'\r\n        'Authorization'='Bearer ' + $AzureManagementAccessToken\r\n    }\r\n\r\n    # Wait for at least 30 seconds to allow the Run Command to report status to ARM to avoid deployment failed error when VM is deleted before status is returned.\r\n    # Run commands have a minimum of 20 seconds to report status to ARM. This gives an additional 10 seconds buffer.\r\n    $StopWatch.Stop()\r\n    $StopWatch.Elapsed.TotalSeconds\r\n    If ($StopWatch.Elapsed.TotalSeconds -lt 30) {\r\n        Start-Sleep -Seconds (30 - $StopWatch.Elapsed.TotalSeconds)\r\n    }\r\n    Invoke-RestMethod -Headers $AzureManagementHeader -Method 'DELETE' -Uri $($ResourceManagerUriFixed + $ResourceGroupResourceId + '?forceDeletionTypes=Microsoft.Compute/virtualMachines&api-version=2021-04-01')\r\n}\r\ncatch {\r\n    throw\r\n}"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Compute/virtualMachines/runCommands",
                      "apiVersion": "2023-09-01",
                      "name": "[format('{0}/{1}', parameters('deploymentVmName'), format('Delete_DeploymentResourceGroup_{0}', parameters('timeStamp')))]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "asyncExecution": true,
                        "parameters": [
                          {
                            "name": "ResourceGroupResourceId",
                            "value": "[resourceGroup().id]"
                          },
                          {
                            "name": "ResourceManagerUri",
                            "value": "[environment().resourceManager]"
                          },
                          {
                            "name": "UserAssignedIdentityClientId",
                            "value": "[parameters('userAssignedIdentityClientId')]"
                          }
                        ],
                        "source": {
                          "script": "[variables('$fxv#0')]"
                        },
                        "treatFailureAsDeploymentFailure": true
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupDeployment')), 'Microsoft.Resources/deployments', format('Remove_RoleAssignments_{0}', parameters('timeStamp')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupDeployment')), 'Microsoft.Resources/deployments', format('Remove_RunCommands_{0}', parameters('timeStamp')))]"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('Deployment_Prereqs_{0}', parameters('timeStamp')))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('ResourceNames_{0}', parameters('timeStamp')))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('SessionHosts_{0}', parameters('timeStamp')))]"
      ]
    }
  ]
}