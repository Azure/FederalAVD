{
  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.33.93.31351",
      "templateHash": "4447052587721633190"
    },
    "name": "Zero Trust Architecture Custom Windows Image Builder",
    "description": "This solution allows you to create a custom image much like Azure VM Image Builder, but utilizes zero trust architecture and does not require that service.",
    "author": "shawn.meyer@microsoft.com"
  },
  "parameters": {
    "timeStamp": {
      "type": "string",
      "defaultValue": "[utcNow()]",
      "metadata": {
        "description": "Value appended to the deployment names."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[deployment().location]",
      "metadata": {
        "description": "Deployment location. Note that the compute resources will be deployed to the region where the subnet is located."
      }
    },
    "deploymentPrefix": {
      "type": "string",
      "defaultValue": "",
      "maxLength": 6,
      "metadata": {
        "description": "Value to prepend to the deployment names."
      }
    },
    "computeGalleryResourceId": {
      "type": "string",
      "metadata": {
        "description": "Azure Compute Gallery Resource Id."
      }
    },
    "artifactsContainerUri": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. The full Uri of the artifacts storage container which contains (scripts, installers, etc) used during the image build."
      }
    },
    "userAssignedIdentityResourceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. The resource Id of the user assigned managed identity used to access the artifacts storage account."
      }
    },
    "subnetResourceId": {
      "type": "string",
      "metadata": {
        "description": "The resource Id of the subnet to which the image build VM will be attached."
      }
    },
    "imageBuildResourceGroupId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The resource Id of an existing resource group in which to create the vms to build the image. Leave blank to create a new resource group."
      }
    },
    "customBuildResourceGroupName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The custom name of the resource group where the image build vm and orchestration vm will be created. Leave blank to create a new resource group based on Cloud Adoption Framework naming principals."
      }
    },
    "customSourceImageResourceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. The resource Id of the source image to use for the image build. If not provided, the latest image from the specified publisher, offer, and sku will be used."
      }
    },
    "publisher": {
      "type": "string",
      "metadata": {
        "description": "The Marketplace Image publisher"
      }
    },
    "offer": {
      "type": "string",
      "metadata": {
        "description": "The Marketplace Image offer"
      }
    },
    "sku": {
      "type": "string",
      "metadata": {
        "description": "The Marketplace Image sku"
      }
    },
    "encryptionAtHost": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional. Determines if \"EncryptionAtHost\" is enabled on the VMs."
      }
    },
    "vmSize": {
      "type": "string",
      "metadata": {
        "description": "The size of the Image build and Orchestration VMs."
      }
    },
    "appsToRemove": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Optional. List of Appx Apps to Remove. Default is []."
      }
    },
    "installFsLogix": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Install FSLogix Agent."
      }
    },
    "fslogixSetupBlobName": {
      "type": "string",
      "defaultValue": "FSLogix.zip",
      "metadata": {
        "description": "Conditional. The name of the blob (or Full URI) of FSLogix.zip. Required when \"InstallFSLogix\" is true and \"DownloadLatestCustomizationSources\" is false."
      }
    },
    "office365AppsToInstall": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Optional. List of Office 365 ProPlus Apps to Install. Default is []."
      }
    },
    "officeDeploymentToolBlobName": {
      "type": "string",
      "defaultValue": "Office365DeploymentTool.exe",
      "metadata": {
        "description": "Conditional. The name of the blob (or full URI) of the Office Deployment Tool. Required when \"Office365AppsToInstall\" is not empty and \"DownloadLatestCustomizationSources\" is false."
      }
    },
    "installOneDrive": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Install OneDrive Per Machine."
      }
    },
    "onedriveSetupBlobName": {
      "type": "string",
      "defaultValue": "OneDriveSetup.exe",
      "metadata": {
        "description": "Conditional. The name of the blob (or full URI) of OneDriveSetup.exe. Required when \"InstallOneDrive\" is true and \"DownloadLatestCustomizationSources\" is false."
      }
    },
    "installTeams": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Install Microsoft Teams."
      }
    },
    "teamsCloudType": {
      "type": "string",
      "defaultValue": "Commercial",
      "allowedValues": [
        "Commercial",
        "GCC",
        "GCCH",
        "DoD",
        "USSec",
        "USNat",
        "Gallatin"
      ],
      "metadata": {
        "description": "Optional. The Teams Governmant Cloud type."
      }
    },
    "teamsInstallerBlobName": {
      "type": "string",
      "defaultValue": "Microsoft-Teams.zip",
      "metadata": {
        "description": "Conditional. The name of the blob (or full Uri) of the Teams installer. Required when \"InstallTeams\" is true and \"DownloadLatestCustomizationSources\" is false."
      }
    },
    "installVirtualDesktopOptimizationTool": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Apply the Virtual Desktop Optimization Tool customizations."
      }
    },
    "vDotBlobName": {
      "type": "string",
      "defaultValue": "VDOT.zip",
      "metadata": {
        "description": "Conditional. The name of the zip blob containing the Virtual Desktop Optimization Tool Script and files. Required when \"InstallVirtualDesktopOptimizationTool\" is true and \"DownloadLatestCustomizationSources\" is false."
      }
    },
    "customizations": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "An array of image customization objects that are executed first before any restarts or updates.\nEach object contains the following properties:\n-name: Required. The name of the script or application that is running minus extension\n-blobNameOrUri: Required. The blob name when used with the artifactsContainerUri or the full URI of the file to download.\n-arguments: Optional. Arguments required by the installer or script being ran.\n\nJSON example:\n[\n  {\n    \"name\": \"FSLogix\",\n    \"blobNameOrUri\": \"https://aka.ms/fslogix_download\"\n  },\n  {\n    \"name\": \"VSCode\",\n    \"blobNameOrUri\": \"VSCode.zip\",\n    \"arguments\": \"/verysilent /mergetasks=!runcode\"\n  }\n]\n"
      }
    },
    "vdiCustomizations": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "An array of image customization objects that are executed just before sysprep. These customizations are applications that\ngenerate unique identifiers that should be removed before the image is generalized. Therefore, these customizations are executed without\nrestart switches to prevent the generation of these unique identifiers.\nEach object contains the following properties:\n-name: Required. The name of the script or application that is running minus extension\n-blobNameOrUri: Required. The blob name when used with the artifactsContainerUri or the full URI of the file to download.\n-arguments: Optional. Arguments required by the installer or script being ran.\n\n\nJSON example:\n[\n  {\n    \"name\": \"ThirdPartyApp\",\n    \"blobNameOrUri\": \"ThirdPartyApp.zip\",\n    \"arguments\": \"MODE=VDI /norestart\"\n  }\n]\n"
      }
    },
    "collectCustomizationLogs": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Collect image customization logs."
      }
    },
    "logStorageAccountNetworkAccess": {
      "type": "string",
      "defaultValue": "PublicEndpoint",
      "allowedValues": [
        "PrivateEndpoint",
        "PublicEndpoint",
        "ServiceEndpoint"
      ],
      "metadata": {
        "description": "Optional. Log Storage Account Network Access Configuration."
      }
    },
    "installUpdates": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional. Determines if the latest updates from the specified update service will be installed."
      }
    },
    "updateService": {
      "type": "string",
      "defaultValue": "MU",
      "allowedValues": [
        "WU",
        "MU",
        "WSUS",
        "DCAT",
        "STORE",
        "OTHER"
      ],
      "metadata": {
        "description": "Optional. The update service."
      }
    },
    "wsusServer": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Conditional. The WSUS Server Url if WSUS is specified. (i.e., https://wsus.corp.contoso.com:8531)"
      }
    },
    "blobPrivateDnsZoneResourceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. The resource id of the existing Azure storage account blob service private dns zone.\nUsed for the Customization Logs Storage Account.\nThis zone must be linked to or resolvable from the vnet referenced in the [privateEndpointSubnetResourceId] parameter."
      }
    },
    "privateEndpointSubnetResourceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. The resource id of the private endpoint subnet. Used for the Customization Logs Storage Account."
      }
    },
    "imageDefinitionResourceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. The resource id of an existing Image Definition in the Compute gallery."
      }
    },
    "customImageDefinitionName": {
      "type": "string",
      "defaultValue": "",
      "maxLength": 80,
      "metadata": {
        "description": "Conditional. The name of the image Definition to create in the Compute Gallery.\nOnly valid if [imageDefinitionResourceId] is not provided.\nIf left blank, the image definition name will be built on Cloud Adoption Framework principals and based on the [imageDefinitonPublisher], [imageDefinitionOffer], and [imageDefinitionSku] values."
      }
    },
    "imageDefinitionPublisher": {
      "type": "string",
      "defaultValue": "",
      "maxLength": 128,
      "metadata": {
        "description": "Conditional. The compute gallery image definition Publisher."
      }
    },
    "imageDefinitionOffer": {
      "type": "string",
      "defaultValue": "",
      "maxLength": 64,
      "metadata": {
        "description": "Conditional. The computer gallery image definition Offer."
      }
    },
    "imageDefinitionSku": {
      "type": "string",
      "defaultValue": "",
      "maxLength": 64,
      "metadata": {
        "description": "Conditional. The compute gallery image definition Sku."
      }
    },
    "imageDefinitionIsAcceleratedNetworkSupported": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Specifies whether the image definition supports the deployment of virtual machines with accelerated networking enabled."
      }
    },
    "imageDefinitionIsHibernateSupported": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Specifies whether the image definition supports creating VMs with support for hibernation."
      }
    },
    "imageDefinitionIsHigherStoragePerformanceSupported": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Specifies whether the image definition supports capturing images of NVMe disks or Virtual Machines."
      }
    },
    "imageDefinitionSecurityType": {
      "type": "string",
      "defaultValue": "TrustedLaunch",
      "allowedValues": [
        "Standard",
        "ConfidentialVM",
        "ConfidentialVMSupported",
        "TrustedLaunch",
        "TrustedLaunchSupported",
        "TrustedLaunchAndConfidentialVMSupported"
      ]
    },
    "imageMajorVersion": {
      "type": "int",
      "defaultValue": -1,
      "minValue": -1,
      "maxValue": 9999,
      "metadata": {
        "description": "Optional. The image major version from 0 - 9999.\nIn order to specify a custom image version you must specify the [imageMajorVersion], [imageMinorVersion], and [imagePatch] integer from 0-9999."
      }
    },
    "imageMinorVersion": {
      "type": "int",
      "defaultValue": -1,
      "minValue": -1,
      "maxValue": 9999,
      "metadata": {
        "description": "Optional. The image minor version from 0 - 9999.\nIn order to specify a custom image version you must specify the [imageMajorVersion], [imageMinorVersion], and [imagePatch] integer from 0-9999."
      }
    },
    "imagePatch": {
      "type": "int",
      "defaultValue": -1,
      "minValue": -1,
      "maxValue": 9999,
      "metadata": {
        "description": "Optional. The image patch version from 0 - 9999.\nIn order to specify a custom image version you must specify the [imageMajorVersion], [imageMinorVersion], and [imagePatch] integer from 0-9999."
      }
    },
    "imageVersionEOLinDays": {
      "type": "int",
      "defaultValue": 0,
      "metadata": {
        "description": "Optional. The number of days from now that the image version will reach end of life."
      }
    },
    "imageVersionDefaultReplicaCount": {
      "type": "int",
      "defaultValue": 1,
      "minValue": 1,
      "maxValue": 100,
      "metadata": {
        "description": "Optional. The default image version replica count per region. This can be overwritten by the regional value."
      }
    },
    "imageVersionDefaultStorageAccountType": {
      "type": "string",
      "defaultValue": "Standard_LRS",
      "allowedValues": [
        "Premium_LRS",
        "Standard_LRS",
        "Standard_ZRS"
      ],
      "metadata": {
        "description": "Optional. Specifies the storage account type to be used to store the image. This property is not updatable."
      }
    },
    "imageVersionExcludeFromLatest": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Exclude this image version from the latest. This property can be overwritten by the regional value."
      }
    },
    "imageVersionTargetRegions": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Optional. The regions to which the image version will be replicated. (Default: deployment location with Standard_LRS storage and 1 replica.)"
      }
    },
    "remoteComputeGalleryResourceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. The resource Id of the remote compute gallery."
      }
    },
    "remoteImageVersionExcludeFromLatest": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Exclude this image version from the latest in the remote region."
      }
    },
    "remoteImageVersionDefaultReplicaCount": {
      "type": "int",
      "defaultValue": 1,
      "metadata": {
        "description": "Optional. The default image version replica count in the remote region."
      }
    },
    "remoteImageVersionStorageAccountType": {
      "type": "string",
      "defaultValue": "Standard_LRS",
      "allowedValues": [
        "Premium_LRS",
        "Standard_LRS",
        "Standard_ZRS"
      ],
      "metadata": {
        "description": "Optional. Specifies the storage account type to be used to store the image in the remote region. This property is not updatable."
      }
    },
    "tags": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "Optional. The tags to apply to all resources deployed by this template."
      }
    }
  },
  "variables": {
    "$fxv#0": {
      "AzureChina": {
        "chinaeast": {
          "abbreviation": "cne",
          "recoveryServicesGeo": "sha",
          "timeDifference": "+8:00",
          "timeZone": "China Standard Time"
        },
        "chinaeast2": {
          "abbreviation": "cne2",
          "recoveryServicesGeo": "sha2",
          "timeDifference": "+8:00",
          "timeZone": "China Standard Time"
        },
        "chinanorth": {
          "abbreviation": "cnn",
          "recoveryServicesGeo": "bjb",
          "timeDifference": "+8:00",
          "timeZone": "China Standard Time"
        },
        "chinanorth2": {
          "abbreviation": "cnn2",
          "recoveryServicesGeo": "bjb2",
          "timeDifference": "+8:00",
          "timeZone": "China Standard Time"
        }
      },
      "AzureCloud": {
        "australiacentral": {
          "abbreviation": "auc",
          "recoveryServicesGeo": "acl",
          "timeDifference": "+10:00",
          "timeZone": "AUS Eastern Standard Time"
        },
        "australiacentral2": {
          "abbreviation": "auc2",
          "recoveryServicesGeo": "acl2",
          "timeDifference": "+10:00",
          "timeZone": "AUS Eastern Standard Time"
        },
        "australiaeast": {
          "abbreviation": "aue",
          "recoveryServicesGeo": "ae",
          "timeDifference": "+10:00",
          "timeZone": "AUS Eastern Standard Time"
        },
        "australiasoutheast": {
          "abbreviation": "ause",
          "recoveryServicesGeo": "ase",
          "timeDifference": "+10:00",
          "timeZone": "AUS Eastern Standard Time"
        },
        "brazilsouth": {
          "abbreviation": "brs",
          "recoveryServicesGeo": "brs",
          "timeDifference": "-3:00",
          "timeZone": "E. South America Standard Time"
        },
        "brazilsoutheast": {
          "abbreviation": "brse",
          "recoveryServicesGeo": "bse",
          "timeDifference": "-3:00",
          "timeZone": "E. South America Standard Time"
        },
        "canadacentral": {
          "abbreviation": "cac",
          "recoveryServicesGeo": "cnc",
          "timeDifference": "-5:00",
          "timeZone": "Eastern Standard Time"
        },
        "canadaeast": {
          "abbreviation": "cae",
          "recoveryServicesGeo": "cne",
          "timeDifference": "-5:00",
          "timeZone": "Eastern Standard Time"
        },
        "centralindia": {
          "abbreviation": "inc",
          "recoveryServicesGeo": "inc",
          "timeDifference": "+5:30",
          "timeZone": "India Standard Time"
        },
        "centralus": {
          "abbreviation": "usc",
          "recoveryServicesGeo": "cus",
          "timeDifference": "-6:00",
          "timeZone": "Central Standard Time"
        },
        "eastasia": {
          "abbreviation": "ase",
          "recoveryServicesGeo": "ea",
          "timeDifference": "+8:00",
          "timeZone": "China Standard Time"
        },
        "eastus": {
          "abbreviation": "use",
          "recoveryServicesGeo": "eus",
          "timeDifference": "-5:00",
          "timeZone": "Eastern Standard Time"
        },
        "eastus2": {
          "abbreviation": "use2",
          "recoveryServicesGeo": "eus2",
          "timeDifference": "-5:00",
          "timeZone": "Eastern Standard Time"
        },
        "francecentral": {
          "abbreviation": "frc",
          "recoveryServicesGeo": "frc",
          "timeDifference": "+1:00",
          "timeZone": "Central Europe Standard Time"
        },
        "francesouth": {
          "abbreviation": "frs",
          "recoveryServicesGeo": "frs",
          "timeDifference": "+1:00",
          "timeZone": "Central Europe Standard Time"
        },
        "germanynorth": {
          "abbreviation": "den",
          "recoveryServicesGeo": "gn",
          "timeDifference": "+1:00",
          "timeZone": "Central Europe Standard Time"
        },
        "germanywestcentral": {
          "abbreviation": "dewc",
          "recoveryServicesGeo": "gwc",
          "timeDifference": "+1:00",
          "timeZone": "Central Europe Standard Time"
        },
        "israelcentral": {
          "abbreviation": "ilc",
          "recoveryServicesGeo": "ilc",
          "timeDifference": "+2:00",
          "timeZone": "Israel Standard Time"
        },
        "italynorth": {
          "abbreviation": "itn",
          "recoveryServicesGeo": "itn",
          "timeDifference": "+1:00",
          "timeZone": "Central Europe Standard Time"
        },
        "japaneast": {
          "abbreviation": "jpe",
          "recoveryServicesGeo": "jpe",
          "timeDifference": "+9:00",
          "timeZone": "Tokyo Standard Time"
        },
        "japanwest": {
          "abbreviation": "jpw",
          "recoveryServicesGeo": "jpw",
          "timeDifference": "+9:00",
          "timeZone": "Tokyo Standard Time"
        },
        "jioindiacentral": {
          "abbreviation": "injc",
          "recoveryServicesGeo": "jic",
          "timeDifference": "+5:30",
          "timeZone": "India Standard Time"
        },
        "jioindiawest": {
          "abbreviation": "injw",
          "recoveryServicesGeo": "jiw",
          "timeDifference": "+5:30",
          "timeZone": "India Standard Time"
        },
        "koreacentral": {
          "abbreviation": "krc",
          "recoveryServicesGeo": "krc",
          "timeDifference": "+9:00",
          "timeZone": "Korea Standard Time"
        },
        "koreasouth": {
          "abbreviation": "krs",
          "recoveryServicesGeo": "krs",
          "timeDifference": "+9:00",
          "timeZone": "Korea Standard Time"
        },
        "northcentralus": {
          "abbreviation": "usnc",
          "recoveryServicesGeo": "ncus",
          "timeDifference": "-6:00",
          "timeZone": "Central Standard Time"
        },
        "northeurope": {
          "abbreviation": "eun",
          "recoveryServicesGeo": "ne",
          "timeDifference": "0:00",
          "timeZone": "GMT Standard Time"
        },
        "norwayeast": {
          "abbreviation": "noe",
          "recoveryServicesGeo": "nwe",
          "timeDifference": "+1:00",
          "timeZone": "Central Europe Standard Time"
        },
        "norwaywest": {
          "abbreviation": "now",
          "recoveryServicesGeo": "nww",
          "timeDifference": "+1:00",
          "timeZone": "Central Europe Standard Time"
        },
        "polandcentral": {
          "abbreviation": "plc",
          "recoveryServicesGeo": "plc",
          "timeDifference": "+1:00",
          "timeZone": "Central Europe Standard Time"
        },
        "qatarcentral": {
          "abbreviation": "qac",
          "recoveryServicesGeo": "qac",
          "timeDifference": "+3:00",
          "timeZone": "Arabian Standard Time"
        },
        "southafricanorth": {
          "abbreviation": "zan",
          "recoveryServicesGeo": "san",
          "timeDifference": "+2:00",
          "timeZone": "South Africa Standard Time"
        },
        "southafricawest": {
          "abbreviation": "zaw",
          "recoveryServicesGeo": "saw",
          "timeDifference": "+2:00",
          "timeZone": "South Africa Standard Time"
        },
        "southcentralus": {
          "abbreviation": "ussc",
          "recoveryServicesGeo": "scus",
          "timeDifference": "-6:00",
          "timeZone": "Central Standard Time"
        },
        "southeastasia": {
          "abbreviation": "asse",
          "recoveryServicesGeo": "sea",
          "timeDifference": "+8:00",
          "timeZone": "Singapore Standard Time"
        },
        "southindia": {
          "abbreviation": "ins",
          "recoveryServicesGeo": "ins",
          "timeDifference": "+5:30",
          "timeZone": "India Standard Time"
        },
        "swedencentral": {
          "abbreviation": "sec",
          "recoveryServicesGeo": "sdc",
          "timeDifference": "+1:00",
          "timeZone": "Central Europe Standard Time"
        },
        "switzerlandnorth": {
          "abbreviation": "chn",
          "recoveryServicesGeo": "szn",
          "timeDifference": "+1:00",
          "timeZone": "Central Europe Standard Time"
        },
        "switzerlandwest": {
          "abbreviation": "chw",
          "recoveryServicesGeo": "szw",
          "timeDifference": "+1:00",
          "timeZone": "Central Europe Standard Time"
        },
        "uaecentral": {
          "abbreviation": "aec",
          "recoveryServicesGeo": "uac",
          "timeDifference": "+3:00",
          "timeZone": "Arabian Standard Time"
        },
        "uaenorth": {
          "abbreviation": "aen",
          "recoveryServicesGeo": "uan",
          "timeDifference": "+3:00",
          "timeZone": "Arabian Standard Time"
        },
        "uksouth": {
          "abbreviation": "uks",
          "recoveryServicesGeo": "uks",
          "timeDifference": "0:00",
          "timeZone": "GMT Standard Time"
        },
        "ukwest": {
          "abbreviation": "ukw",
          "recoveryServicesGeo": "ukw",
          "timeDifference": "0:00",
          "timeZone": "GMT Standard Time"
        },
        "westcentralus": {
          "abbreviation": "uswc",
          "recoveryServicesGeo": "wcus",
          "timeDifference": "-7:00",
          "timeZone": "Mountain Standard Time"
        },
        "westeurope": {
          "abbreviation": "euw",
          "recoveryServicesGeo": "we",
          "timeDifference": "+1:00",
          "timeZone": "Central Europe Standard Time"
        },
        "westindia": {
          "abbreviation": "inw",
          "recoveryServicesGeo": "inw",
          "timeDifference": "+5:30",
          "timeZone": "India Standard Time"
        },
        "westus": {
          "abbreviation": "usw",
          "recoveryServicesGeo": "wus",
          "timeDifference": "-8:00",
          "timeZone": "Pacific Standard Time"
        },
        "westus2": {
          "abbreviation": "usw2",
          "recoveryServicesGeo": "wus2",
          "timeDifference": "-8:00",
          "timeZone": "Pacific Standard Time"
        },
        "westus3": {
          "abbreviation": "usw3",
          "recoveryServicesGeo": "wus3",
          "timeDifference": "-7:00",
          "timeZone": "Mountain Standard Time"
        }
      },
      "AzureUSGovernment": {
        "usdodcentral": {
          "abbreviation": "dodc",
          "recoveryServicesGeo": "udc",
          "timeDifference": "-6:00",
          "timeZone": "Central Standard Time"
        },
        "usdodeast": {
          "abbreviation": "dode",
          "recoveryServicesGeo": "ude",
          "timeDifference": "-5:00",
          "timeZone": "Eastern Standard Time"
        },
        "usgovarizona": {
          "abbreviation": "az",
          "recoveryServicesGeo": "uga",
          "timeDifference": "-7:00",
          "timeZone": "Mountain Standard Time"
        },
        "usgovtexas": {
          "abbreviation": "tx",
          "recoveryServicesGeo": "ugt",
          "timeDifference": "-6:00",
          "timeZone": "Central Standard Time"
        },
        "usgovvirginia": {
          "abbreviation": "va",
          "recoveryServicesGeo": "ugv",
          "timeDifference": "-5:00",
          "timeZone": "Eastern Standard Time"
        }
      },
      "USNat": {
        "usnateast": {
          "abbreviation": "east",
          "recoveryServicesGeo": "exe",
          "timeDifference": "-5:00",
          "timeZone": "Eastern Standard Time"
        },
        "usnatwest": {
          "abbreviation": "west",
          "recoveryServicesGeo": "exw",
          "timeDifference": "-8:00",
          "timeZone": "Pacific Standard Time"
        }
      },
      "USSec": {
        "usseceast": {
          "abbreviation": "east",
          "recoveryServicesGeo": "rxe",
          "timeDifference": "-5:00",
          "timeZone": "Eastern Standard Time"
        },
        "ussecwest": {
          "abbreviation": "west",
          "recoveryServicesGeo": "rxw",
          "timeDifference": "-8:00",
          "timeZone": "Pacific Standard Time"
        }
      }
    },
    "$fxv#1": {
      "applicationInsights": "appi",
      "appServicePlans": "asp",
      "availabilitySets": "as",
      "computeGalleries": "gal",
      "dataCollectionEndpoints": "dce",
      "dataCollectionRules": "dcr",
      "desktopApplicationGroups": "vddag",
      "diskAccesses": "da",
      "remoteApplicationGroups": "vdrag",
      "disks": "disk",
      "diskEncryptionSets": "des",
      "functionApps": "fa",
      "hostPools": "vdpool",
      "keyVaults": "kv",
      "logAnalyticsWorkspaces": "law",
      "natGateways": "ng",
      "netAppAccounts": "naa",
      "netAppCapacityPools": "nacp",
      "networkInterfaces": "nic",
      "privateEndpoints": "pe",
      "privateLinkScopes": "pls",
      "publicIPAddresses": "pip",
      "recoveryServicesVaults": "rsv",
      "resourceGroups": "rg",
      "routeTables": "rt",
      "scalingPlans": "vdscaling",
      "storageAccounts": "sa",
      "userAssignedIdentities": "uai",
      "virtualMachines": "vm",
      "workspaces": "vdws",
      "imageDefinitions": "vmid"
    },
    "$fxv#2": "param(\r\n    [Parameter(Mandatory=$true)]\r\n    [string]$ResourceManagerUri,\r\n\r\n    [Parameter(Mandatory=$true)]\r\n    [string]$UserAssignedIdentityClientId,\r\n\r\n    [Parameter(Mandatory=$true)]\r\n    [string]$VmResourceId\r\n)\r\n\r\n$ErrorActionPreference = 'Stop'\r\n$WarningPreference = 'SilentlyContinue'\r\n\r\nTry {\r\n    # Fix the resource manager URI since only AzureCloud contains a trailing slash\r\n    $ResourceManagerUriFixed = if($ResourceManagerUri[-1] -eq '/'){$ResourceManagerUri.Substring(0,$ResourceManagerUri.Length - 1)} else {$ResourceManagerUri}\r\n\r\n    # Get an access token for Azure resources\r\n    $AzureManagementAccessToken = (Invoke-RestMethod `\r\n        -Headers @{Metadata=\"true\"} `\r\n        -Uri $('http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01&resource=' + $ResourceManagerUriFixed + '&client_id=' + $UserAssignedIdentityClientId)).access_token\r\n\r\n    # Set header for Azure Management API\r\n    $AzureManagementHeader = @{\r\n        'Content-Type'='application/json'\r\n        'Authorization'='Bearer ' + $AzureManagementAccessToken\r\n    }\r\n\r\n    # Stop the VM\r\n    $null = Invoke-RestMethod -Headers $AzureManagementHeader -Method 'Post' -Uri $($ResourceManagerUriFixed + $VmResourceId + '/powerOff?api-version=2024-03-01')\r\n    # Wait for it to show as stopped in Azure\r\n    Do {\r\n        Start-Sleep -Seconds 5\r\n        $VmStatus = Invoke-RestMethod -Headers $AzureManagementHeader -Method 'Get' -Uri $($ResourceManagerUriFixed + $VmResourceId + '/instanceView?api-version=2024-03-01')\r\n        $VMPowerState = ($VMStatus.statuses | Where-Object {$_.code -like 'PowerState*'}).displayStatus\r\n\r\n    } Until ($VMPowerState -eq 'VM stopped')\r\n    # Generatlize the VM\r\n    $null = Invoke-RestMethod -Headers $AzureManagementHeader -Method 'Post' -Uri $($ResourceManagerUriFixed + $VmResourceId + '/generalize?api-version=2024-03-01')\r\n}\r\ncatch {\r\n    throw\r\n}",
    "$fxv#3": "param(\r\n    [Parameter(Mandatory=$true)]\r\n    [string]$ResourceManagerUri,\r\n\r\n    [Parameter(Mandatory=$true)]\r\n    [string]$UserAssignedIdentityClientId,\r\n\r\n    [Parameter(Mandatory=$true)]\r\n    [string]$ImageVmResourceId,\r\n\r\n    [Parameter(Mandatory=$true)]\r\n    [string]$ManagementVmResourceId,\r\n\r\n    [Parameter(Mandatory=$false)]\r\n    [string]$ImageResourceId\r\n)\r\n\r\n$ErrorActionPreference = 'Stop'\r\n$WarningPreference = 'SilentlyContinue'\r\n\r\nTry {\r\n    # Fix the resource manager URI since only AzureCloud contains a trailing slash\r\n    $ResourceManagerUriFixed = if($ResourceManagerUri[-1] -eq '/'){$ResourceManagerUri.Substring(0,$ResourceManagerUri.Length - 1)} else {$ResourceManagerUri}\r\n\r\n    # Get an access token for Azure resources\r\n    $AzureManagementAccessToken = (Invoke-RestMethod -Headers @{Metadata=\"true\"} -Uri $('http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01&resource=' + $ResourceManagerUriFixed + '&client_id=' + $UserAssignedIdentityClientId)).access_token\r\n\r\n    # Set header for Azure Management API\r\n    $AzureManagementHeader = @{\r\n        'Content-Type'='application/json'\r\n        'Authorization'='Bearer ' + $AzureManagementAccessToken\r\n    }\r\n\r\n    # Delete Image VM \r\n    Invoke-RestMethod -Headers $AzureManagementHeader -Method 'DELETE' -Uri $($ResourceManagerUriFixed + $ImageVmResourceId + '?api-version=2024-03-01')\r\n\r\n    # Delete the Image (If it exists)\r\n    If ($ImageResourceId -ne '') {\r\n        Invoke-RestMethod -Headers $AzureManagementHeader -Method 'DELETE' -Uri $($ResourceManagerUriFixed + $ImageResourceId + '?api-version=2024-03-01')\r\n    }\r\n    # Wait for at least 20 seconds to allow the Run Command to complete. Run Commands have a minimum 20 secs execution time.\r\n    Start-Sleep -seconds 20\r\n\r\n    # Delete the Management VM\r\n    Invoke-RestMethod -Headers $AzureManagementHeader -Method 'DELETE' -Uri $($ResourceManagerUriFixed + $ManagementVmResourceId + '?forceDeletion=true&api-version=2024-03-01')\r\n}\r\ncatch {\r\n    throw\r\n}",
    "installers": [],
    "customizers": "[union(parameters('customizations'), variables('installers'))]",
    "cloud": "[environment().name]",
    "locations": "[variables('$fxv#0')[environment().name]]",
    "resourceAbbreviations": "[variables('$fxv#1')]",
    "depPrefix": "[if(not(empty(parameters('deploymentPrefix'))), format('{0}-', parameters('deploymentPrefix')), '')]",
    "logStorageAccountName": "[take(replace(toLower(format('sa{0}log{1}', variables('depPrefix'), uniqueString(subscription().id, variables('imageBuildResourceGroupName')))), '-', ''), 24)]",
    "imageBuildResourceGroupName": "[if(empty(parameters('imageBuildResourceGroupId')), if(empty(parameters('customBuildResourceGroupName')), format('{0}-image-builder-{1}', variables('resourceAbbreviations').resourceGroups, variables('locations')[parameters('location')].abbreviation), parameters('customBuildResourceGroupName')), last(split(parameters('imageBuildResourceGroupId'), '/')))]",
    "adminPw": "[format('1qaz@WSX{0}', uniqueString(subscription().id, variables('imageBuildResourceGroupName')))]",
    "adminUserName": "vmadmin",
    "logContainerName": "image-customization-logs",
    "galleryImageDefinitionHyperVGeneration": "[if(or(endsWith(parameters('sku'), 'g2'), startsWith(parameters('sku'), 'win11')), 'V2', 'V1')]",
    "galleryImageDefinitionName": "[if(empty(parameters('imageDefinitionResourceId')), if(empty(parameters('customImageDefinitionName')), format('{0}', replace(format('{0}-{1}-{2}-{3}', variables('resourceAbbreviations').imageDefinitions, replace(variables('galleryImageDefinitionPublisher'), '-', ''), replace(variables('galleryImageDefinitionOffer'), '-', ''), replace(variables('galleryImageDefinitionSku'), '-', '')), ' ', '')), parameters('customImageDefinitionName')), last(split(parameters('imageDefinitionResourceId'), '/')))]",
    "galleryImageDefinitionOffer": "[if(not(empty(parameters('imageDefinitionOffer'))), replace(parameters('imageDefinitionOffer'), ' ', ''), parameters('offer'))]",
    "galleryImageDefinitionPublisher": "[if(not(empty(parameters('imageDefinitionPublisher'))), replace(parameters('imageDefinitionPublisher'), ' ', ''), parameters('publisher'))]",
    "galleryImageDefinitionSku": "[if(not(empty(parameters('imageDefinitionSku'))), replace(parameters('imageDefinitionSku'), ' ', ''), parameters('sku'))]",
    "autoImageVersionName": "[format('{0}.{1}.{2}', substring(parameters('timeStamp'), 2, 2), substring(parameters('timeStamp'), 4, 4), substring(parameters('timeStamp'), 9, 4))]",
    "imageVersionName": "[if(and(and(not(equals(parameters('imageMajorVersion'), -1)), not(equals(parameters('imageMajorVersion'), -1))), not(equals(parameters('imagePatch'), -1))), format('{0}.{1}.{2}', parameters('imageMajorVersion'), parameters('imageMinorVersion'), parameters('imagePatch')), variables('autoImageVersionName'))]",
    "imageVersionEndOfLifeDate": "[if(greater(parameters('imageVersionEOLinDays'), 0), dateTimeAdd(parameters('timeStamp'), format('P{0}D', parameters('imageVersionEOLinDays'))), '')]",
    "imageVmName": "[take(format('{0}vmimg-{1}', variables('depPrefix'), uniqueString(parameters('timeStamp'))), 15)]",
    "orchestrationVmName": "[take(format('{0}vmorc-{1}', variables('depPrefix'), uniqueString(parameters('timeStamp'))), 15)]"
  },
  "resources": [
    {
      "condition": "[empty(parameters('imageBuildResourceGroupId'))]",
      "type": "Microsoft.Resources/resourceGroups",
      "apiVersion": "2023-07-01",
      "name": "[variables('imageBuildResourceGroupName')]",
      "location": "[parameters('location')]",
      "tags": "[coalesce(tryGet(parameters('tags'), 'Microsoft.Resources/resourceGroups'), createObject())]"
    },
    {
      "condition": "[empty(parameters('userAssignedIdentityResourceId'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}ManagedIdentity-{1}', variables('depPrefix'), parameters('timeStamp'))]",
      "resourceGroup": "[variables('imageBuildResourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "name": {
            "value": "[format('{0}-image-builder-{1}', variables('resourceAbbreviations').userAssignedIdentities, variables('locations')[parameters('location')].abbreviation)]"
          },
          "tags": {
            "value": "[coalesce(tryGet(parameters('tags'), 'Microsoft.ManagedIdentity/userAssignedIdentities'), createObject())]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.33.93.31351",
              "templateHash": "1801195192480389559"
            }
          },
          "parameters": {
            "name": {
              "type": "string"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            }
          },
          "resources": [
            {
              "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
              "apiVersion": "2023-01-31",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]"
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the user assigned identity."
              },
              "value": "[parameters('name')]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the user assigned identity."
              },
              "value": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name'))]"
            },
            "principalId": {
              "type": "string",
              "metadata": {
                "description": "The principal ID (object ID) of the user assigned identity."
              },
              "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name')), '2023-01-31').principalId]"
            },
            "clientId": {
              "type": "string",
              "metadata": {
                "description": "The client ID (application ID) of the user assigned identity."
              },
              "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name')), '2023-01-31').clientId]"
            },
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The resource group the user assigned identity was deployed into."
              },
              "value": "[resourceGroup().name]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('imageBuildResourceGroupName'))]"
      ]
    },
    {
      "condition": "[empty(parameters('imageDefinitionResourceId'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}Gallery-Image-Definition-{1}', variables('depPrefix'), parameters('timeStamp'))]",
      "resourceGroup": "[split(parameters('computeGalleryResourceId'), '/')[4]]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "galleryName": {
            "value": "[last(split(parameters('computeGalleryResourceId'), '/'))]"
          },
          "name": {
            "value": "[variables('galleryImageDefinitionName')]"
          },
          "hyperVGeneration": {
            "value": "[variables('galleryImageDefinitionHyperVGeneration')]"
          },
          "isHibernateSupported": {
            "value": "[parameters('imageDefinitionIsHibernateSupported')]"
          },
          "isAcceleratedNetworkSupported": {
            "value": "[parameters('imageDefinitionIsAcceleratedNetworkSupported')]"
          },
          "isHigherStoragePerformanceSupported": {
            "value": "[parameters('imageDefinitionIsHigherStoragePerformanceSupported')]"
          },
          "securityType": {
            "value": "[parameters('imageDefinitionSecurityType')]"
          },
          "osType": {
            "value": "Windows"
          },
          "osState": {
            "value": "Generalized"
          },
          "publisher": {
            "value": "[variables('galleryImageDefinitionPublisher')]"
          },
          "offer": {
            "value": "[variables('galleryImageDefinitionOffer')]"
          },
          "sku": {
            "value": "[variables('galleryImageDefinitionSku')]"
          },
          "tags": {
            "value": "[coalesce(tryGet(parameters('tags'), 'Microsoft.Compute/galleries/images'), createObject())]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.33.93.31351",
              "templateHash": "13078416586510542741"
            },
            "name": "Compute Galleries Image Definitions",
            "description": "This module deploys an Azure Compute Gallery Image Definition.",
            "owner": "Azure/module-maintainers"
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. Name of the image definition."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all resources."
              }
            },
            "galleryName": {
              "type": "string",
              "minLength": 1,
              "metadata": {
                "description": "Conditional. The name of the parent Azure Shared Image Gallery. Required if the template is used in a standalone deployment."
              }
            },
            "architecture": {
              "type": "string",
              "defaultValue": "x64",
              "allowedValues": [
                "x64",
                "Arm64"
              ],
              "metadata": {
                "description": "Optional. The OS architecture of the image to be created. V1 images do not support Arm64."
              }
            },
            "osType": {
              "type": "string",
              "defaultValue": "Windows",
              "allowedValues": [
                "Windows",
                "Linux"
              ],
              "metadata": {
                "description": "Optional. OS type of the image to be created."
              }
            },
            "osState": {
              "type": "string",
              "defaultValue": "Generalized",
              "allowedValues": [
                "Generalized",
                "Specialized"
              ],
              "metadata": {
                "description": "Optional. This property allows the user to specify whether the virtual machines created under this image are 'Generalized' or 'Specialized'."
              }
            },
            "publisher": {
              "type": "string",
              "defaultValue": "MicrosoftWindowsServer",
              "metadata": {
                "description": "Optional. The name of the gallery Image Definition publisher."
              }
            },
            "offer": {
              "type": "string",
              "defaultValue": "WindowsServer",
              "metadata": {
                "description": "Optional. The name of the gallery Image Definition offer."
              }
            },
            "sku": {
              "type": "string",
              "defaultValue": "2019-Datacenter",
              "metadata": {
                "description": "Optional. The name of the gallery Image Definition SKU."
              }
            },
            "minRecommendedvCPUs": {
              "type": "int",
              "defaultValue": 1,
              "minValue": 1,
              "maxValue": 128,
              "metadata": {
                "description": "Optional. The minimum number of the CPU cores recommended for this image."
              }
            },
            "maxRecommendedvCPUs": {
              "type": "int",
              "defaultValue": 4,
              "minValue": 1,
              "maxValue": 128,
              "metadata": {
                "description": "Optional. The maximum number of the CPU cores recommended for this image."
              }
            },
            "minRecommendedMemory": {
              "type": "int",
              "defaultValue": 4,
              "minValue": 1,
              "maxValue": 4000,
              "metadata": {
                "description": "Optional. The minimum amount of RAM in GB recommended for this image."
              }
            },
            "maxRecommendedMemory": {
              "type": "int",
              "defaultValue": 16,
              "minValue": 1,
              "maxValue": 4000,
              "metadata": {
                "description": "Optional. The maximum amount of RAM in GB recommended for this image."
              }
            },
            "hyperVGeneration": {
              "type": "string",
              "defaultValue": "V2",
              "allowedValues": [
                "V1",
                "V2"
              ],
              "metadata": {
                "description": "Optional. The hypervisor generation of the Virtual Machine."
              }
            },
            "securityType": {
              "type": "string",
              "defaultValue": "Standard",
              "allowedValues": [
                "Standard",
                "TrustedLaunch",
                "TrustedLaunchSupported",
                "ConfidentialVM",
                "ConfidentialVMSupported",
                "TrustedLaunchAndConfidentialVMSupported"
              ],
              "metadata": {
                "description": "Optional. The security type of the image. Requires a hyperVGeneration V2."
              }
            },
            "isHibernateSupported": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. The image will support hibernation."
              }
            },
            "isAcceleratedNetworkSupported": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. The image supports accelerated networking.</p>Accelerated networking enables single root I/O virtualization (SR-IOV) to a VM, greatly improving its networking performance.</p>This high-performance path bypasses the host from the data path, which reduces latency, jitter, and CPU utilization for the most demanding network workloads on supported VM types."
              }
            },
            "isHigherStoragePerformanceSupported": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. The image supports Higher Storage Performance with NVMe."
              }
            },
            "description": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The description of this gallery Image Definition resource. This property is updatable."
              }
            },
            "eula": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The Eula agreement for the gallery Image Definition. Has to be a valid URL."
              }
            },
            "privacyStatementUri": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The privacy statement uri. Has to be a valid URL."
              }
            },
            "releaseNoteUri": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The release note uri. Has to be a valid URL."
              }
            },
            "productName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The product ID."
              }
            },
            "planName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The plan ID."
              }
            },
            "planPublisherName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The publisher ID."
              }
            },
            "endOfLife": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The end of life date of the gallery Image Definition. This property can be used for decommissioning purposes. This property is updatable. Allowed format: 2020-01-10T23:00:00.000Z."
              }
            },
            "excludedDiskTypes": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. List of the excluded disk types. E.g. Standard_LRS."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Tags for all resources."
              }
            }
          },
          "variables": {
            "hibernateSupported": "[if(parameters('isHibernateSupported'), 'true', 'false')]",
            "acceleratedNetworkSupported": "[if(parameters('isAcceleratedNetworkSupported'), 'true', 'false')]",
            "diskControllerTypes": "[if(parameters('isHigherStoragePerformanceSupported'), createArray(createObject('name', 'DiskControllerTypes', 'value', 'SCSI, NVMe')), createArray())]",
            "gaFeatures": "[if(not(equals(parameters('securityType'), 'Standard')), createArray(createObject('name', 'SecurityType', 'value', parameters('securityType')), createObject('name', 'IsAcceleratedNetworkSupported', 'value', variables('acceleratedNetworkSupported')), createObject('name', 'IsHibernateSupported', 'value', variables('hibernateSupported'))), createArray(createObject('name', 'IsAcceleratedNetworkSupported', 'value', variables('acceleratedNetworkSupported')), createObject('name', 'IsHibernateSupported', 'value', variables('hibernateSupported'))))]",
            "features": "[if(not(empty(variables('diskControllerTypes'))), union(variables('gaFeatures'), variables('diskControllerTypes')), variables('gaFeatures'))]"
          },
          "resources": [
            {
              "type": "Microsoft.Compute/galleries/images",
              "apiVersion": "2022-03-03",
              "name": "[format('{0}/{1}', parameters('galleryName'), parameters('name'))]",
              "location": "[parameters('location')]",
              "properties": {
                "architecture": "[if(and(equals(parameters('architecture'), 'x64'), equals(parameters('hyperVGeneration'), 'V2')), parameters('architecture'), null())]",
                "osType": "[parameters('osType')]",
                "osState": "[parameters('osState')]",
                "identifier": {
                  "publisher": "[parameters('publisher')]",
                  "offer": "[parameters('offer')]",
                  "sku": "[parameters('sku')]"
                },
                "recommended": {
                  "vCPUs": {
                    "min": "[parameters('minRecommendedvCPUs')]",
                    "max": "[parameters('maxRecommendedvCPUs')]"
                  },
                  "memory": {
                    "min": "[parameters('minRecommendedMemory')]",
                    "max": "[parameters('maxRecommendedMemory')]"
                  }
                },
                "hyperVGeneration": "[parameters('hyperVGeneration')]",
                "features": "[variables('features')]",
                "description": "[parameters('description')]",
                "eula": "[if(not(empty(parameters('eula'))), parameters('eula'), null())]",
                "privacyStatementUri": "[parameters('privacyStatementUri')]",
                "releaseNoteUri": "[parameters('releaseNoteUri')]",
                "purchasePlan": {
                  "product": "[if(not(empty(parameters('productName'))), parameters('productName'), null())]",
                  "name": "[if(not(empty(parameters('planName'))), parameters('planName'), null())]",
                  "publisher": "[if(not(empty(parameters('planPublisherName'))), parameters('planPublisherName'), null())]"
                },
                "endOfLifeDate": "[parameters('endOfLife')]",
                "disallowed": {
                  "diskTypes": "[parameters('excludedDiskTypes')]"
                }
              },
              "tags": "[parameters('tags')]"
            }
          ],
          "outputs": {
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The resource group the image was deployed into."
              },
              "value": "[resourceGroup().name]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the image."
              },
              "value": "[resourceId('Microsoft.Compute/galleries/images', parameters('galleryName'), parameters('name'))]"
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the image."
              },
              "value": "[parameters('name')]"
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location the resource was deployed into."
              },
              "value": "[reference(resourceId('Microsoft.Compute/galleries/images', parameters('galleryName'), parameters('name')), '2022-03-03', 'full').location]"
            }
          }
        }
      }
    },
    {
      "condition": "[not(empty(parameters('remoteComputeGalleryResourceId')))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}Remote-Gallery-Image-Definition-{1}', variables('depPrefix'), parameters('timeStamp'))]",
      "subscriptionId": "[split(parameters('remoteComputeGalleryResourceId'), '/')[2]]",
      "resourceGroup": "[split(parameters('remoteComputeGalleryResourceId'), '/')[4]]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "galleryName": {
            "value": "[last(split(parameters('remoteComputeGalleryResourceId'), '/'))]"
          },
          "location": "[if(not(empty(parameters('remoteComputeGalleryResourceId'))), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('remoteComputeGalleryResourceId'), '/')[2], split(parameters('remoteComputeGalleryResourceId'), '/')[4]), 'Microsoft.Compute/galleries', last(split(parameters('remoteComputeGalleryResourceId'), '/'))), '2024-03-03', 'full').location), createObject('value', ''))]",
          "name": "[if(empty(parameters('imageDefinitionResourceId')), createObject('value', variables('galleryImageDefinitionName')), createObject('value', last(split(parameters('imageDefinitionResourceId'), '/'))))]",
          "hyperVGeneration": "[if(empty(parameters('imageDefinitionResourceId')), createObject('value', variables('galleryImageDefinitionHyperVGeneration')), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('imageDefinitionResourceId'), '/')[2], split(parameters('imageDefinitionResourceId'), '/')[4]), 'Microsoft.Compute/galleries/images', split(format('{0}/{1}', split(parameters('imageDefinitionResourceId'), '/')[8], last(split(parameters('imageDefinitionResourceId'), '/'))), '/')[0], split(format('{0}/{1}', split(parameters('imageDefinitionResourceId'), '/')[8], last(split(parameters('imageDefinitionResourceId'), '/'))), '/')[1]), '2024-03-03').hyperVGeneration))]",
          "isHibernateSupported": "[if(not(empty(filter(if(empty(parameters('imageDefinitionResourceId')), createArray(createObject('name', 'IsHibernateSupported', 'value', parameters('imageDefinitionIsHibernateSupported')), createObject('name', 'IsAcceleratedNetworkSupported', 'value', parameters('imageDefinitionIsAcceleratedNetworkSupported')), createObject('name', 'DiskControllerTypes', 'value', parameters('imageDefinitionIsHigherStoragePerformanceSupported')), createObject('name', 'SecurityType', 'value', parameters('imageDefinitionSecurityType'))), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('imageDefinitionResourceId'), '/')[2], split(parameters('imageDefinitionResourceId'), '/')[4]), 'Microsoft.Compute/galleries/images', split(format('{0}/{1}', split(parameters('imageDefinitionResourceId'), '/')[8], last(split(parameters('imageDefinitionResourceId'), '/'))), '/')[0], split(format('{0}/{1}', split(parameters('imageDefinitionResourceId'), '/')[8], last(split(parameters('imageDefinitionResourceId'), '/'))), '/')[1]), '2024-03-03').features), lambda('feature', equals(lambdaVariables('feature').name, 'IsHibernateSupported'))))), createObject('value', bool(filter(if(empty(parameters('imageDefinitionResourceId')), createArray(createObject('name', 'IsHibernateSupported', 'value', parameters('imageDefinitionIsHibernateSupported')), createObject('name', 'IsAcceleratedNetworkSupported', 'value', parameters('imageDefinitionIsAcceleratedNetworkSupported')), createObject('name', 'DiskControllerTypes', 'value', parameters('imageDefinitionIsHigherStoragePerformanceSupported')), createObject('name', 'SecurityType', 'value', parameters('imageDefinitionSecurityType'))), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('imageDefinitionResourceId'), '/')[2], split(parameters('imageDefinitionResourceId'), '/')[4]), 'Microsoft.Compute/galleries/images', split(format('{0}/{1}', split(parameters('imageDefinitionResourceId'), '/')[8], last(split(parameters('imageDefinitionResourceId'), '/'))), '/')[0], split(format('{0}/{1}', split(parameters('imageDefinitionResourceId'), '/')[8], last(split(parameters('imageDefinitionResourceId'), '/'))), '/')[1]), '2024-03-03').features), lambda('feature', equals(lambdaVariables('feature').name, 'IsHibernateSupported')))[0].value)), createObject('value', false()))]",
          "isAcceleratedNetworkSupported": "[if(not(empty(filter(if(empty(parameters('imageDefinitionResourceId')), createArray(createObject('name', 'IsHibernateSupported', 'value', parameters('imageDefinitionIsHibernateSupported')), createObject('name', 'IsAcceleratedNetworkSupported', 'value', parameters('imageDefinitionIsAcceleratedNetworkSupported')), createObject('name', 'DiskControllerTypes', 'value', parameters('imageDefinitionIsHigherStoragePerformanceSupported')), createObject('name', 'SecurityType', 'value', parameters('imageDefinitionSecurityType'))), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('imageDefinitionResourceId'), '/')[2], split(parameters('imageDefinitionResourceId'), '/')[4]), 'Microsoft.Compute/galleries/images', split(format('{0}/{1}', split(parameters('imageDefinitionResourceId'), '/')[8], last(split(parameters('imageDefinitionResourceId'), '/'))), '/')[0], split(format('{0}/{1}', split(parameters('imageDefinitionResourceId'), '/')[8], last(split(parameters('imageDefinitionResourceId'), '/'))), '/')[1]), '2024-03-03').features), lambda('feature', equals(lambdaVariables('feature').name, 'IsAcceleratedNetworkSupported'))))), createObject('value', bool(filter(if(empty(parameters('imageDefinitionResourceId')), createArray(createObject('name', 'IsHibernateSupported', 'value', parameters('imageDefinitionIsHibernateSupported')), createObject('name', 'IsAcceleratedNetworkSupported', 'value', parameters('imageDefinitionIsAcceleratedNetworkSupported')), createObject('name', 'DiskControllerTypes', 'value', parameters('imageDefinitionIsHigherStoragePerformanceSupported')), createObject('name', 'SecurityType', 'value', parameters('imageDefinitionSecurityType'))), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('imageDefinitionResourceId'), '/')[2], split(parameters('imageDefinitionResourceId'), '/')[4]), 'Microsoft.Compute/galleries/images', split(format('{0}/{1}', split(parameters('imageDefinitionResourceId'), '/')[8], last(split(parameters('imageDefinitionResourceId'), '/'))), '/')[0], split(format('{0}/{1}', split(parameters('imageDefinitionResourceId'), '/')[8], last(split(parameters('imageDefinitionResourceId'), '/'))), '/')[1]), '2024-03-03').features), lambda('feature', equals(lambdaVariables('feature').name, 'IsAcceleratedNetworkSupported')))[0].value)), createObject('value', false()))]",
          "isHigherStoragePerformanceSupported": "[if(not(empty(filter(if(empty(parameters('imageDefinitionResourceId')), createArray(createObject('name', 'IsHibernateSupported', 'value', parameters('imageDefinitionIsHibernateSupported')), createObject('name', 'IsAcceleratedNetworkSupported', 'value', parameters('imageDefinitionIsAcceleratedNetworkSupported')), createObject('name', 'DiskControllerTypes', 'value', parameters('imageDefinitionIsHigherStoragePerformanceSupported')), createObject('name', 'SecurityType', 'value', parameters('imageDefinitionSecurityType'))), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('imageDefinitionResourceId'), '/')[2], split(parameters('imageDefinitionResourceId'), '/')[4]), 'Microsoft.Compute/galleries/images', split(format('{0}/{1}', split(parameters('imageDefinitionResourceId'), '/')[8], last(split(parameters('imageDefinitionResourceId'), '/'))), '/')[0], split(format('{0}/{1}', split(parameters('imageDefinitionResourceId'), '/')[8], last(split(parameters('imageDefinitionResourceId'), '/'))), '/')[1]), '2024-03-03').features), lambda('feature', equals(lambdaVariables('feature').name, 'DiskControllerTypes'))))), createObject('value', bool(filter(if(empty(parameters('imageDefinitionResourceId')), createArray(createObject('name', 'IsHibernateSupported', 'value', parameters('imageDefinitionIsHibernateSupported')), createObject('name', 'IsAcceleratedNetworkSupported', 'value', parameters('imageDefinitionIsAcceleratedNetworkSupported')), createObject('name', 'DiskControllerTypes', 'value', parameters('imageDefinitionIsHigherStoragePerformanceSupported')), createObject('name', 'SecurityType', 'value', parameters('imageDefinitionSecurityType'))), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('imageDefinitionResourceId'), '/')[2], split(parameters('imageDefinitionResourceId'), '/')[4]), 'Microsoft.Compute/galleries/images', split(format('{0}/{1}', split(parameters('imageDefinitionResourceId'), '/')[8], last(split(parameters('imageDefinitionResourceId'), '/'))), '/')[0], split(format('{0}/{1}', split(parameters('imageDefinitionResourceId'), '/')[8], last(split(parameters('imageDefinitionResourceId'), '/'))), '/')[1]), '2024-03-03').features), lambda('feature', equals(lambdaVariables('feature').name, 'DiskControllerTypes')))[0].value)), createObject('value', false()))]",
          "securityType": "[if(not(empty(filter(if(empty(parameters('imageDefinitionResourceId')), createArray(createObject('name', 'IsHibernateSupported', 'value', parameters('imageDefinitionIsHibernateSupported')), createObject('name', 'IsAcceleratedNetworkSupported', 'value', parameters('imageDefinitionIsAcceleratedNetworkSupported')), createObject('name', 'DiskControllerTypes', 'value', parameters('imageDefinitionIsHigherStoragePerformanceSupported')), createObject('name', 'SecurityType', 'value', parameters('imageDefinitionSecurityType'))), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('imageDefinitionResourceId'), '/')[2], split(parameters('imageDefinitionResourceId'), '/')[4]), 'Microsoft.Compute/galleries/images', split(format('{0}/{1}', split(parameters('imageDefinitionResourceId'), '/')[8], last(split(parameters('imageDefinitionResourceId'), '/'))), '/')[0], split(format('{0}/{1}', split(parameters('imageDefinitionResourceId'), '/')[8], last(split(parameters('imageDefinitionResourceId'), '/'))), '/')[1]), '2024-03-03').features), lambda('feature', equals(lambdaVariables('feature').name, 'SecurityType'))))), createObject('value', filter(if(empty(parameters('imageDefinitionResourceId')), createArray(createObject('name', 'IsHibernateSupported', 'value', parameters('imageDefinitionIsHibernateSupported')), createObject('name', 'IsAcceleratedNetworkSupported', 'value', parameters('imageDefinitionIsAcceleratedNetworkSupported')), createObject('name', 'DiskControllerTypes', 'value', parameters('imageDefinitionIsHigherStoragePerformanceSupported')), createObject('name', 'SecurityType', 'value', parameters('imageDefinitionSecurityType'))), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('imageDefinitionResourceId'), '/')[2], split(parameters('imageDefinitionResourceId'), '/')[4]), 'Microsoft.Compute/galleries/images', split(format('{0}/{1}', split(parameters('imageDefinitionResourceId'), '/')[8], last(split(parameters('imageDefinitionResourceId'), '/'))), '/')[0], split(format('{0}/{1}', split(parameters('imageDefinitionResourceId'), '/')[8], last(split(parameters('imageDefinitionResourceId'), '/'))), '/')[1]), '2024-03-03').features), lambda('feature', equals(lambdaVariables('feature').name, 'SecurityType')))[0].value), createObject('value', 'Standard'))]",
          "osType": {
            "value": "Windows"
          },
          "osState": {
            "value": "Generalized"
          },
          "publisher": "[if(empty(parameters('imageDefinitionResourceId')), createObject('value', variables('galleryImageDefinitionPublisher')), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('imageDefinitionResourceId'), '/')[2], split(parameters('imageDefinitionResourceId'), '/')[4]), 'Microsoft.Compute/galleries/images', split(format('{0}/{1}', split(parameters('imageDefinitionResourceId'), '/')[8], last(split(parameters('imageDefinitionResourceId'), '/'))), '/')[0], split(format('{0}/{1}', split(parameters('imageDefinitionResourceId'), '/')[8], last(split(parameters('imageDefinitionResourceId'), '/'))), '/')[1]), '2024-03-03').identifier.publisher))]",
          "offer": "[if(empty(parameters('imageDefinitionResourceId')), createObject('value', variables('galleryImageDefinitionOffer')), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('imageDefinitionResourceId'), '/')[2], split(parameters('imageDefinitionResourceId'), '/')[4]), 'Microsoft.Compute/galleries/images', split(format('{0}/{1}', split(parameters('imageDefinitionResourceId'), '/')[8], last(split(parameters('imageDefinitionResourceId'), '/'))), '/')[0], split(format('{0}/{1}', split(parameters('imageDefinitionResourceId'), '/')[8], last(split(parameters('imageDefinitionResourceId'), '/'))), '/')[1]), '2024-03-03').identifier.offer))]",
          "sku": "[if(empty(parameters('imageDefinitionResourceId')), createObject('value', variables('galleryImageDefinitionSku')), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('imageDefinitionResourceId'), '/')[2], split(parameters('imageDefinitionResourceId'), '/')[4]), 'Microsoft.Compute/galleries/images', split(format('{0}/{1}', split(parameters('imageDefinitionResourceId'), '/')[8], last(split(parameters('imageDefinitionResourceId'), '/'))), '/')[0], split(format('{0}/{1}', split(parameters('imageDefinitionResourceId'), '/')[8], last(split(parameters('imageDefinitionResourceId'), '/'))), '/')[1]), '2024-03-03').identifier.sku))]",
          "tags": {
            "value": "[coalesce(tryGet(parameters('tags'), 'Microsoft.Compute/galleries/images'), createObject())]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.33.93.31351",
              "templateHash": "13078416586510542741"
            },
            "name": "Compute Galleries Image Definitions",
            "description": "This module deploys an Azure Compute Gallery Image Definition.",
            "owner": "Azure/module-maintainers"
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. Name of the image definition."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all resources."
              }
            },
            "galleryName": {
              "type": "string",
              "minLength": 1,
              "metadata": {
                "description": "Conditional. The name of the parent Azure Shared Image Gallery. Required if the template is used in a standalone deployment."
              }
            },
            "architecture": {
              "type": "string",
              "defaultValue": "x64",
              "allowedValues": [
                "x64",
                "Arm64"
              ],
              "metadata": {
                "description": "Optional. The OS architecture of the image to be created. V1 images do not support Arm64."
              }
            },
            "osType": {
              "type": "string",
              "defaultValue": "Windows",
              "allowedValues": [
                "Windows",
                "Linux"
              ],
              "metadata": {
                "description": "Optional. OS type of the image to be created."
              }
            },
            "osState": {
              "type": "string",
              "defaultValue": "Generalized",
              "allowedValues": [
                "Generalized",
                "Specialized"
              ],
              "metadata": {
                "description": "Optional. This property allows the user to specify whether the virtual machines created under this image are 'Generalized' or 'Specialized'."
              }
            },
            "publisher": {
              "type": "string",
              "defaultValue": "MicrosoftWindowsServer",
              "metadata": {
                "description": "Optional. The name of the gallery Image Definition publisher."
              }
            },
            "offer": {
              "type": "string",
              "defaultValue": "WindowsServer",
              "metadata": {
                "description": "Optional. The name of the gallery Image Definition offer."
              }
            },
            "sku": {
              "type": "string",
              "defaultValue": "2019-Datacenter",
              "metadata": {
                "description": "Optional. The name of the gallery Image Definition SKU."
              }
            },
            "minRecommendedvCPUs": {
              "type": "int",
              "defaultValue": 1,
              "minValue": 1,
              "maxValue": 128,
              "metadata": {
                "description": "Optional. The minimum number of the CPU cores recommended for this image."
              }
            },
            "maxRecommendedvCPUs": {
              "type": "int",
              "defaultValue": 4,
              "minValue": 1,
              "maxValue": 128,
              "metadata": {
                "description": "Optional. The maximum number of the CPU cores recommended for this image."
              }
            },
            "minRecommendedMemory": {
              "type": "int",
              "defaultValue": 4,
              "minValue": 1,
              "maxValue": 4000,
              "metadata": {
                "description": "Optional. The minimum amount of RAM in GB recommended for this image."
              }
            },
            "maxRecommendedMemory": {
              "type": "int",
              "defaultValue": 16,
              "minValue": 1,
              "maxValue": 4000,
              "metadata": {
                "description": "Optional. The maximum amount of RAM in GB recommended for this image."
              }
            },
            "hyperVGeneration": {
              "type": "string",
              "defaultValue": "V2",
              "allowedValues": [
                "V1",
                "V2"
              ],
              "metadata": {
                "description": "Optional. The hypervisor generation of the Virtual Machine."
              }
            },
            "securityType": {
              "type": "string",
              "defaultValue": "Standard",
              "allowedValues": [
                "Standard",
                "TrustedLaunch",
                "TrustedLaunchSupported",
                "ConfidentialVM",
                "ConfidentialVMSupported",
                "TrustedLaunchAndConfidentialVMSupported"
              ],
              "metadata": {
                "description": "Optional. The security type of the image. Requires a hyperVGeneration V2."
              }
            },
            "isHibernateSupported": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. The image will support hibernation."
              }
            },
            "isAcceleratedNetworkSupported": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. The image supports accelerated networking.</p>Accelerated networking enables single root I/O virtualization (SR-IOV) to a VM, greatly improving its networking performance.</p>This high-performance path bypasses the host from the data path, which reduces latency, jitter, and CPU utilization for the most demanding network workloads on supported VM types."
              }
            },
            "isHigherStoragePerformanceSupported": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. The image supports Higher Storage Performance with NVMe."
              }
            },
            "description": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The description of this gallery Image Definition resource. This property is updatable."
              }
            },
            "eula": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The Eula agreement for the gallery Image Definition. Has to be a valid URL."
              }
            },
            "privacyStatementUri": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The privacy statement uri. Has to be a valid URL."
              }
            },
            "releaseNoteUri": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The release note uri. Has to be a valid URL."
              }
            },
            "productName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The product ID."
              }
            },
            "planName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The plan ID."
              }
            },
            "planPublisherName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The publisher ID."
              }
            },
            "endOfLife": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The end of life date of the gallery Image Definition. This property can be used for decommissioning purposes. This property is updatable. Allowed format: 2020-01-10T23:00:00.000Z."
              }
            },
            "excludedDiskTypes": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. List of the excluded disk types. E.g. Standard_LRS."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Tags for all resources."
              }
            }
          },
          "variables": {
            "hibernateSupported": "[if(parameters('isHibernateSupported'), 'true', 'false')]",
            "acceleratedNetworkSupported": "[if(parameters('isAcceleratedNetworkSupported'), 'true', 'false')]",
            "diskControllerTypes": "[if(parameters('isHigherStoragePerformanceSupported'), createArray(createObject('name', 'DiskControllerTypes', 'value', 'SCSI, NVMe')), createArray())]",
            "gaFeatures": "[if(not(equals(parameters('securityType'), 'Standard')), createArray(createObject('name', 'SecurityType', 'value', parameters('securityType')), createObject('name', 'IsAcceleratedNetworkSupported', 'value', variables('acceleratedNetworkSupported')), createObject('name', 'IsHibernateSupported', 'value', variables('hibernateSupported'))), createArray(createObject('name', 'IsAcceleratedNetworkSupported', 'value', variables('acceleratedNetworkSupported')), createObject('name', 'IsHibernateSupported', 'value', variables('hibernateSupported'))))]",
            "features": "[if(not(empty(variables('diskControllerTypes'))), union(variables('gaFeatures'), variables('diskControllerTypes')), variables('gaFeatures'))]"
          },
          "resources": [
            {
              "type": "Microsoft.Compute/galleries/images",
              "apiVersion": "2022-03-03",
              "name": "[format('{0}/{1}', parameters('galleryName'), parameters('name'))]",
              "location": "[parameters('location')]",
              "properties": {
                "architecture": "[if(and(equals(parameters('architecture'), 'x64'), equals(parameters('hyperVGeneration'), 'V2')), parameters('architecture'), null())]",
                "osType": "[parameters('osType')]",
                "osState": "[parameters('osState')]",
                "identifier": {
                  "publisher": "[parameters('publisher')]",
                  "offer": "[parameters('offer')]",
                  "sku": "[parameters('sku')]"
                },
                "recommended": {
                  "vCPUs": {
                    "min": "[parameters('minRecommendedvCPUs')]",
                    "max": "[parameters('maxRecommendedvCPUs')]"
                  },
                  "memory": {
                    "min": "[parameters('minRecommendedMemory')]",
                    "max": "[parameters('maxRecommendedMemory')]"
                  }
                },
                "hyperVGeneration": "[parameters('hyperVGeneration')]",
                "features": "[variables('features')]",
                "description": "[parameters('description')]",
                "eula": "[if(not(empty(parameters('eula'))), parameters('eula'), null())]",
                "privacyStatementUri": "[parameters('privacyStatementUri')]",
                "releaseNoteUri": "[parameters('releaseNoteUri')]",
                "purchasePlan": {
                  "product": "[if(not(empty(parameters('productName'))), parameters('productName'), null())]",
                  "name": "[if(not(empty(parameters('planName'))), parameters('planName'), null())]",
                  "publisher": "[if(not(empty(parameters('planPublisherName'))), parameters('planPublisherName'), null())]"
                },
                "endOfLifeDate": "[parameters('endOfLife')]",
                "disallowed": {
                  "diskTypes": "[parameters('excludedDiskTypes')]"
                }
              },
              "tags": "[parameters('tags')]"
            }
          ],
          "outputs": {
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The resource group the image was deployed into."
              },
              "value": "[resourceGroup().name]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the image."
              },
              "value": "[resourceId('Microsoft.Compute/galleries/images', parameters('galleryName'), parameters('name'))]"
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the image."
              },
              "value": "[parameters('name')]"
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location the resource was deployed into."
              },
              "value": "[reference(resourceId('Microsoft.Compute/galleries/images', parameters('galleryName'), parameters('name')), '2022-03-03', 'full').location]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}RoleAssign-MI-VirtMachContr-BuildRG-{1}', variables('depPrefix'), parameters('timeStamp'))]",
      "resourceGroup": "[variables('imageBuildResourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "principalId": "[if(empty(parameters('userAssignedIdentityResourceId')), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('imageBuildResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}ManagedIdentity-{1}', variables('depPrefix'), parameters('timeStamp'))), '2022-09-01').outputs.principalId.value), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('userAssignedIdentityResourceId'), '/')[2], split(parameters('userAssignedIdentityResourceId'), '/')[4]), 'Microsoft.ManagedIdentity/userAssignedIdentities', last(split(parameters('userAssignedIdentityResourceId'), '/'))), '2023-01-31').principalId))]",
          "roleDefinitionId": {
            "value": "9980e02c-c2be-4d73-94e8-173b1dc7cf3c"
          },
          "principalType": {
            "value": "ServicePrincipal"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.33.93.31351",
              "templateHash": "7498401289305938982"
            }
          },
          "parameters": {
            "roleDefinitionId": {
              "type": "string",
              "metadata": {
                "description": "Required. You can provide either the role definition GUID or its fully qualified ID in the following format: \\'/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11\\'.\nYou can find the GUIDs in the ID column on the table at https://learn.microsoft.com/en-us/azure/role-based-access-control/built-in-roles.\n"
              }
            },
            "principalId": {
              "type": "string",
              "metadata": {
                "description": "Required. The Principal or Object ID of the Security Principal (User, Group, Service Principal, Managed Identity)."
              }
            },
            "resourceGroupName": {
              "type": "string",
              "defaultValue": "[resourceGroup().name]",
              "metadata": {
                "description": "Optional. Name of the Resource Group to assign the RBAC role to. If not provided, will use the current scope for deployment."
              }
            },
            "subscriptionId": {
              "type": "string",
              "defaultValue": "[subscription().subscriptionId]",
              "metadata": {
                "description": "Optional. Subscription ID of the subscription to assign the RBAC role to. If not provided, will use the current scope for deployment."
              }
            },
            "principalType": {
              "type": "string",
              "defaultValue": "",
              "allowedValues": [
                "ServicePrincipal",
                "Group",
                "User",
                "ForeignGroup",
                "Device",
                ""
              ],
              "metadata": {
                "description": "Optional. The principal type of the assigned principal ID."
              }
            }
          },
          "variables": {
            "roleDefinitionIdVar": "[if(contains(parameters('roleDefinitionId'), '/providers/Microsoft.Authorization/roleDefinitions/'), parameters('roleDefinitionId'), format('/providers/Microsoft.Authorization/roleDefinitions/{0}', parameters('roleDefinitionId')))]"
          },
          "resources": [
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(parameters('subscriptionId'), parameters('resourceGroupName'), variables('roleDefinitionIdVar'), parameters('principalId'))]",
              "properties": {
                "roleDefinitionId": "[variables('roleDefinitionIdVar')]",
                "principalId": "[parameters('principalId')]",
                "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]"
              }
            }
          ],
          "outputs": {
            "resourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Authorization/roleAssignments', guid(parameters('subscriptionId'), parameters('resourceGroupName'), variables('roleDefinitionIdVar'), parameters('principalId')))]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('imageBuildResourceGroupName'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('imageBuildResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}ManagedIdentity-{1}', variables('depPrefix'), parameters('timeStamp')))]"
      ]
    },
    {
      "condition": "[parameters('collectCustomizationLogs')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}RoleAssign-MI-StorageBlobDataContr-BuildRG-{1}', variables('depPrefix'), parameters('timeStamp'))]",
      "resourceGroup": "[variables('imageBuildResourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "principalId": "[if(empty(parameters('userAssignedIdentityResourceId')), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('imageBuildResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}ManagedIdentity-{1}', variables('depPrefix'), parameters('timeStamp'))), '2022-09-01').outputs.principalId.value), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('userAssignedIdentityResourceId'), '/')[2], split(parameters('userAssignedIdentityResourceId'), '/')[4]), 'Microsoft.ManagedIdentity/userAssignedIdentities', last(split(parameters('userAssignedIdentityResourceId'), '/'))), '2023-01-31').principalId))]",
          "roleDefinitionId": {
            "value": "ba92f5b4-2d11-453d-a403-e96b0029c9fe"
          },
          "principalType": {
            "value": "ServicePrincipal"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.33.93.31351",
              "templateHash": "7498401289305938982"
            }
          },
          "parameters": {
            "roleDefinitionId": {
              "type": "string",
              "metadata": {
                "description": "Required. You can provide either the role definition GUID or its fully qualified ID in the following format: \\'/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11\\'.\nYou can find the GUIDs in the ID column on the table at https://learn.microsoft.com/en-us/azure/role-based-access-control/built-in-roles.\n"
              }
            },
            "principalId": {
              "type": "string",
              "metadata": {
                "description": "Required. The Principal or Object ID of the Security Principal (User, Group, Service Principal, Managed Identity)."
              }
            },
            "resourceGroupName": {
              "type": "string",
              "defaultValue": "[resourceGroup().name]",
              "metadata": {
                "description": "Optional. Name of the Resource Group to assign the RBAC role to. If not provided, will use the current scope for deployment."
              }
            },
            "subscriptionId": {
              "type": "string",
              "defaultValue": "[subscription().subscriptionId]",
              "metadata": {
                "description": "Optional. Subscription ID of the subscription to assign the RBAC role to. If not provided, will use the current scope for deployment."
              }
            },
            "principalType": {
              "type": "string",
              "defaultValue": "",
              "allowedValues": [
                "ServicePrincipal",
                "Group",
                "User",
                "ForeignGroup",
                "Device",
                ""
              ],
              "metadata": {
                "description": "Optional. The principal type of the assigned principal ID."
              }
            }
          },
          "variables": {
            "roleDefinitionIdVar": "[if(contains(parameters('roleDefinitionId'), '/providers/Microsoft.Authorization/roleDefinitions/'), parameters('roleDefinitionId'), format('/providers/Microsoft.Authorization/roleDefinitions/{0}', parameters('roleDefinitionId')))]"
          },
          "resources": [
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(parameters('subscriptionId'), parameters('resourceGroupName'), variables('roleDefinitionIdVar'), parameters('principalId'))]",
              "properties": {
                "roleDefinitionId": "[variables('roleDefinitionIdVar')]",
                "principalId": "[parameters('principalId')]",
                "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]"
              }
            }
          ],
          "outputs": {
            "resourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Authorization/roleAssignments', guid(parameters('subscriptionId'), parameters('resourceGroupName'), variables('roleDefinitionIdVar'), parameters('principalId')))]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('imageBuildResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}ManagedIdentity-{1}', variables('depPrefix'), parameters('timeStamp')))]"
      ]
    },
    {
      "condition": "[parameters('collectCustomizationLogs')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}Logs-StorageAccount-{1}', variables('depPrefix'), parameters('timeStamp'))]",
      "resourceGroup": "[variables('imageBuildResourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[variables('logStorageAccountName')]"
          },
          "location": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('subnetResourceId'), '/')[2], split(parameters('subnetResourceId'), '/')[4]), 'Microsoft.Network/virtualNetworks', split(parameters('subnetResourceId'), '/')[8]), '2023-05-01', 'full').location]"
          },
          "allowCrossTenantReplication": {
            "value": false
          },
          "allowSharedKeyAccess": {
            "value": true
          },
          "requireInfrastructureEncryption": {
            "value": true
          },
          "blobServices": {
            "value": {
              "containers": [
                {
                  "name": "[variables('logContainerName')]",
                  "publicAccess": "None"
                }
              ]
            }
          },
          "kind": {
            "value": "StorageV2"
          },
          "managementPolicyRules": {
            "value": [
              {
                "enabled": true,
                "name": "Delete Blobs after 7 days",
                "type": "Lifecycle",
                "definition": {
                  "actions": {
                    "baseBlob": {
                      "delete": {
                        "daysAfterModificationGreaterThan": 7
                      }
                    }
                  },
                  "filters": {
                    "blobTypes": [
                      "blockBlob",
                      "appendBlob"
                    ]
                  }
                }
              }
            ]
          },
          "privateEndpoints": "[if(and(equals(parameters('logStorageAccountNetworkAccess'), 'PrivateEndpoint'), not(empty(parameters('privateEndpointSubnetResourceId')))), createObject('value', createArray(createObject('name', format('{0}-{1}-blob-{2}', variables('resourceAbbreviations').privateEndpoints, variables('logStorageAccountName'), variables('locations')[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('subnetResourceId'), '/')[2], split(parameters('subnetResourceId'), '/')[4]), 'Microsoft.Network/virtualNetworks', split(parameters('subnetResourceId'), '/')[8]), '2023-05-01', 'full').location].abbreviation), 'privateDnsZoneGroup', if(empty(parameters('blobPrivateDnsZoneResourceId')), null(), createObject('privateDNSResourceIds', createArray(format('{0}', parameters('blobPrivateDnsZoneResourceId'))))), 'service', 'blob', 'subnetResourceId', parameters('privateEndpointSubnetResourceId'), 'tags', coalesce(tryGet(parameters('tags'), 'Microsoft.Storage/storageAccounts'), createObject())))), createObject('value', null()))]",
          "publicNetworkAccess": "[if(equals(parameters('logStorageAccountNetworkAccess'), 'PrivateEndpoint'), createObject('value', 'Disabled'), createObject('value', 'Enabled'))]",
          "networkAcls": "[if(equals(parameters('logStorageAccountNetworkAccess'), 'PrivateEndpoint'), createObject('value', createObject('bypass', 'None', 'defaultAction', 'Deny')), if(equals(parameters('logStorageAccountNetworkAccess'), 'ServiceEndpoint'), createObject('value', createObject('bypass', 'None', 'defaultAction', 'Deny', 'ipRules', createArray(), 'virtualNetworkRules', createArray(createObject('id', parameters('subnetResourceId'), 'action', 'Allow')))), createObject('value', createObject('bypass', 'None', 'defaultAction', 'Allow'))))]",
          "sasExpirationPeriod": {
            "value": "180.00:00:00"
          },
          "skuName": {
            "value": "Standard_LRS"
          },
          "tags": {
            "value": "[parameters('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.33.93.31351",
              "templateHash": "12777621792954440394"
            },
            "name": "Storage Accounts",
            "description": "This module deploys a Storage Account.",
            "owner": "Azure/module-maintainers"
          },
          "parameters": {
            "name": {
              "type": "string",
              "maxLength": 24,
              "metadata": {
                "description": "Required. Name of the Storage Account."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all resources."
              }
            },
            "systemAssignedIdentity": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Enables system assigned managed identity on the resource."
              }
            },
            "userAssignedIdentities": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. The ID(s) to assign to the resource."
              }
            },
            "kind": {
              "type": "string",
              "defaultValue": "StorageV2",
              "allowedValues": [
                "Storage",
                "StorageV2",
                "BlobStorage",
                "FileStorage",
                "BlockBlobStorage"
              ],
              "metadata": {
                "description": "Optional. Type of Storage Account to create."
              }
            },
            "skuName": {
              "type": "string",
              "defaultValue": "Standard_GRS",
              "allowedValues": [
                "Standard_LRS",
                "Standard_GRS",
                "Standard_RAGRS",
                "Standard_ZRS",
                "Premium_LRS",
                "Premium_ZRS",
                "Standard_GZRS",
                "Standard_RAGZRS"
              ],
              "metadata": {
                "description": "Optional. Storage Account Sku Name."
              }
            },
            "accessTier": {
              "type": "string",
              "defaultValue": "Hot",
              "allowedValues": [
                "Premium",
                "Hot",
                "Cool"
              ],
              "metadata": {
                "description": "Conditional. Required if the Storage Account kind is set to BlobStorage. The access tier is used for billing. The \"Premium\" access tier is the default value for premium block blobs storage account type and it cannot be changed for the premium block blobs storage account type."
              }
            },
            "largeFileSharesState": {
              "type": "string",
              "defaultValue": "Disabled",
              "allowedValues": [
                "Disabled",
                "Enabled"
              ],
              "metadata": {
                "description": "Optional. Allow large file shares if sets to 'Enabled'. It cannot be disabled once it is enabled. Only supported on locally redundant and zone redundant file shares. It cannot be set on FileStorage storage accounts (storage accounts for premium file shares)."
              }
            },
            "azureFilesIdentityBasedAuthentication": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Provides the identity based authentication settings for Azure Files."
              }
            },
            "defaultToOAuthAuthentication": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. A boolean flag which indicates whether the default authentication is OAuth or not."
              }
            },
            "allowSharedKeyAccess": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Indicates whether the storage account permits requests to be authorized with the account access key via Shared Key. If false, then all requests, including shared access signatures, must be authorized with Azure Active Directory (Azure AD). The default value is null, which is equivalent to true."
              }
            },
            "privateEndpoints": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. Configuration details for private endpoints. For security reasons, it is recommended to use private endpoints whenever possible."
              }
            },
            "managementPolicyRules": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. The Storage Account ManagementPolicies Rules."
              }
            },
            "networkAcls": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Networks ACLs, this value contains IPs to whitelist and/or Subnet information. For security reasons, it is recommended to set the DefaultAction Deny."
              }
            },
            "requireInfrastructureEncryption": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. A Boolean indicating whether or not the service applies a secondary layer of encryption with platform managed keys for data at rest. For security reasons, it is recommended to set it to true."
              }
            },
            "allowCrossTenantReplication": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Allow or disallow cross AAD tenant object replication."
              }
            },
            "customDomainName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Sets the custom domain name assigned to the storage account. Name is the CNAME source."
              }
            },
            "customDomainUseSubDomainName": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Indicates whether indirect CName validation is enabled. This should only be set on updates."
              }
            },
            "dnsEndpointType": {
              "type": "string",
              "defaultValue": "",
              "allowedValues": [
                "",
                "AzureDnsZone",
                "Standard"
              ],
              "metadata": {
                "description": "Optional. Allows you to specify the type of endpoint. Set this to AzureDNSZone to create a large number of accounts in a single subscription, which creates accounts in an Azure DNS Zone and the endpoint URL will have an alphanumeric DNS Zone identifier."
              }
            },
            "blobServices": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Blob service and containers to deploy."
              }
            },
            "fileServices": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. File service and shares to deploy."
              }
            },
            "queueServices": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Queue service and queues to create."
              }
            },
            "tableServices": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Table service and tables to create."
              }
            },
            "allowBlobPublicAccess": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Indicates whether public access is enabled for all blobs or containers in the storage account. For security reasons, it is recommended to set it to false."
              }
            },
            "minimumTlsVersion": {
              "type": "string",
              "defaultValue": "TLS1_2",
              "allowedValues": [
                "TLS1_0",
                "TLS1_1",
                "TLS1_2"
              ],
              "metadata": {
                "description": "Optional. Set the minimum TLS version on request to storage."
              }
            },
            "enableHierarchicalNamespace": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Conditional. If true, enables Hierarchical Namespace for the storage account. Required if enableSftp or enableNfsV3 is set to true."
              }
            },
            "enableSftp": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. If true, enables Secure File Transfer Protocol for the storage account. Requires enableHierarchicalNamespace to be true."
              }
            },
            "localUsers": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. Local users to deploy for SFTP authentication."
              }
            },
            "isLocalUserEnabled": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Enables local users feature, if set to true."
              }
            },
            "enableNfsV3": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. If true, enables NFS 3.0 support for the storage account. Requires enableHierarchicalNamespace to be true."
              }
            },
            "diagnosticWorkspaceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of the diagnostic log analytics workspace."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Tags of the resource."
              }
            },
            "allowedCopyScope": {
              "type": "string",
              "defaultValue": "",
              "allowedValues": [
                "",
                "AAD",
                "PrivateLink"
              ],
              "metadata": {
                "description": "Optional. Restrict copy to and from Storage Accounts within an AAD tenant or with Private Links to the same VNet."
              }
            },
            "publicNetworkAccess": {
              "type": "string",
              "defaultValue": "",
              "allowedValues": [
                "",
                "Enabled",
                "Disabled"
              ],
              "metadata": {
                "description": "Optional. Whether or not public network access is allowed for this resource. For security reasons it should be disabled. If not specified, it will be disabled by default if private endpoints are set and networkAcls are not set."
              }
            },
            "supportsHttpsTrafficOnly": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Allows HTTPS traffic only to storage service if sets to true."
              }
            },
            "diagnosticMetricsToEnable": {
              "type": "array",
              "defaultValue": [
                "Transaction"
              ],
              "allowedValues": [
                "Transaction"
              ],
              "metadata": {
                "description": "Optional. The name of metrics that will be streamed."
              }
            },
            "cMKKeyVaultResourceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Conditional. The resource ID of a key vault to reference a customer managed key for encryption from. Required if 'cMKKeyName' is not empty."
              }
            },
            "cMKKeyName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The name of the customer managed key to use for encryption. Cannot be deployed together with the parameter 'systemAssignedIdentity' enabled."
              }
            },
            "cMKUserAssignedIdentityResourceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Conditional. User assigned identity to use when fetching the customer managed key. Required if 'cMKKeyName' is not empty."
              }
            },
            "cMKKeyVersion": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The version of the customer managed key to reference for encryption. If not provided, latest is used."
              }
            },
            "diagnosticSettingsName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The name of the diagnostic setting, if deployed. If left empty, it defaults to \"<resourceName>-diagnosticSettings\"."
              }
            },
            "sasExpirationPeriod": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The SAS expiration period. DD.HH:MM:SS."
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "diagnosticsMetrics",
                "count": "[length(parameters('diagnosticMetricsToEnable'))]",
                "input": {
                  "category": "[parameters('diagnosticMetricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                  "timeGrain": null,
                  "enabled": true
                }
              }
            ],
            "supportsBlobService": "[or(or(or(equals(parameters('kind'), 'BlockBlobStorage'), equals(parameters('kind'), 'BlobStorage')), equals(parameters('kind'), 'StorageV2')), equals(parameters('kind'), 'Storage'))]",
            "supportsFileService": "[or(or(equals(parameters('kind'), 'FileStorage'), equals(parameters('kind'), 'StorageV2')), equals(parameters('kind'), 'Storage'))]",
            "identityType": "[if(parameters('systemAssignedIdentity'), if(not(empty(parameters('userAssignedIdentities'))), 'SystemAssigned,UserAssigned', 'SystemAssigned'), if(not(empty(parameters('userAssignedIdentities'))), 'UserAssigned', 'None'))]",
            "identity": "[if(not(equals(variables('identityType'), 'None')), createObject('type', variables('identityType'), 'userAssignedIdentities', if(not(empty(parameters('userAssignedIdentities'))), parameters('userAssignedIdentities'), null())), null())]"
          },
          "resources": [
            {
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2022-09-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "kind": "[parameters('kind')]",
              "sku": {
                "name": "[parameters('skuName')]"
              },
              "identity": "[variables('identity')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "allowSharedKeyAccess": "[parameters('allowSharedKeyAccess')]",
                "defaultToOAuthAuthentication": "[parameters('defaultToOAuthAuthentication')]",
                "allowCrossTenantReplication": "[parameters('allowCrossTenantReplication')]",
                "allowedCopyScope": "[if(not(empty(parameters('allowedCopyScope'))), parameters('allowedCopyScope'), null())]",
                "customDomain": {
                  "name": "[parameters('customDomainName')]",
                  "useSubDomainName": "[parameters('customDomainUseSubDomainName')]"
                },
                "dnsEndpointType": "[if(not(empty(parameters('dnsEndpointType'))), parameters('dnsEndpointType'), null())]",
                "isLocalUserEnabled": "[parameters('isLocalUserEnabled')]",
                "encryption": {
                  "keySource": "[if(not(empty(parameters('cMKKeyName'))), 'Microsoft.Keyvault', 'Microsoft.Storage')]",
                  "services": {
                    "blob": "[if(variables('supportsBlobService'), createObject('enabled', true()), null())]",
                    "file": "[if(variables('supportsFileService'), createObject('enabled', true()), null())]",
                    "table": {
                      "enabled": true
                    },
                    "queue": {
                      "enabled": true
                    }
                  },
                  "requireInfrastructureEncryption": "[if(not(equals(parameters('kind'), 'Storage')), parameters('requireInfrastructureEncryption'), null())]",
                  "keyvaultproperties": "[if(not(empty(parameters('cMKKeyName'))), createObject('keyname', parameters('cMKKeyName'), 'keyvaulturi', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('cMKKeyVaultResourceId'), '/')[2], split(parameters('cMKKeyVaultResourceId'), '/')[4]), 'Microsoft.KeyVault/vaults', last(split(parameters('cMKKeyVaultResourceId'), '/'))), '2021-06-01-preview').vaultUri, 'keyversion', if(not(empty(parameters('cMKKeyVersion'))), parameters('cMKKeyVersion'), null())), null())]",
                  "identity": "[if(not(empty(parameters('cMKKeyName'))), createObject('userAssignedIdentity', parameters('cMKUserAssignedIdentityResourceId')), null())]"
                },
                "accessTier": "[if(not(equals(parameters('kind'), 'Storage')), parameters('accessTier'), null())]",
                "sasPolicy": "[if(not(empty(parameters('sasExpirationPeriod'))), createObject('expirationAction', 'Log', 'sasExpirationPeriod', parameters('sasExpirationPeriod')), null())]",
                "supportsHttpsTrafficOnly": "[parameters('supportsHttpsTrafficOnly')]",
                "isHnsEnabled": "[if(parameters('enableHierarchicalNamespace'), parameters('enableHierarchicalNamespace'), null())]",
                "isSftpEnabled": "[parameters('enableSftp')]",
                "isNfsV3Enabled": "[if(parameters('enableNfsV3'), parameters('enableNfsV3'), '')]",
                "largeFileSharesState": "[if(or(equals(parameters('skuName'), 'Standard_LRS'), equals(parameters('skuName'), 'Standard_ZRS')), parameters('largeFileSharesState'), null())]",
                "minimumTlsVersion": "[parameters('minimumTlsVersion')]",
                "networkAcls": "[if(not(empty(parameters('networkAcls'))), createObject('bypass', coalesce(tryGet(parameters('networkAcls'), 'bypass'), null()), 'defaultAction', coalesce(tryGet(parameters('networkAcls'), 'defaultAction'), null()), 'virtualNetworkRules', coalesce(tryGet(parameters('networkAcls'), 'virtualNetworkRules'), createArray()), 'ipRules', coalesce(tryGet(parameters('networkAcls'), 'ipRules'), createArray())), createObject('defaultAction', 'Deny', 'bypass', 'None'))]",
                "allowBlobPublicAccess": "[parameters('allowBlobPublicAccess')]",
                "publicNetworkAccess": "[if(not(empty(parameters('publicNetworkAccess'))), parameters('publicNetworkAccess'), if(and(not(empty(parameters('privateEndpoints'))), empty(parameters('networkAcls'))), 'Disabled', null()))]",
                "azureFilesIdentityBasedAuthentication": "[if(not(empty(parameters('azureFilesIdentityBasedAuthentication'))), parameters('azureFilesIdentityBasedAuthentication'), null())]"
              }
            },
            {
              "condition": "[not(empty(parameters('diagnosticWorkspaceId')))]",
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('name'))]",
              "name": "[if(not(empty(parameters('diagnosticSettingsName'))), parameters('diagnosticSettingsName'), format('{0}-diagnosticSettings', parameters('name')))]",
              "properties": {
                "workspaceId": "[if(not(empty(parameters('diagnosticWorkspaceId'))), parameters('diagnosticWorkspaceId'), null())]",
                "metrics": "[variables('diagnosticsMetrics')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('name'))]"
              ]
            },
            {
              "copy": {
                "name": "storageAccount_privateEndpoints",
                "count": "[length(parameters('privateEndpoints'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('StorageAccount-PrivateEndpoint-{0}-{1}', copyIndex(), uniqueString(deployment().name, parameters('location')))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "groupIds": {
                    "value": [
                      "[parameters('privateEndpoints')[copyIndex()].service]"
                    ]
                  },
                  "name": {
                    "value": "[coalesce(tryGet(parameters('privateEndpoints')[copyIndex()], 'name'), format('pe-{0}-{1}-{2}', last(split(resourceId('Microsoft.Storage/storageAccounts', parameters('name')), '/')), parameters('privateEndpoints')[copyIndex()].service, copyIndex()))]"
                  },
                  "serviceResourceId": {
                    "value": "[resourceId('Microsoft.Storage/storageAccounts', parameters('name'))]"
                  },
                  "subnetResourceId": {
                    "value": "[parameters('privateEndpoints')[copyIndex()].subnetResourceId]"
                  },
                  "location": {
                    "value": "[coalesce(tryGet(parameters('privateEndpoints')[copyIndex()], 'location'), reference(split(parameters('privateEndpoints')[copyIndex()].subnetResourceId, '/subnets/')[0], '2020-06-01', 'Full').location)]"
                  },
                  "privateDnsZoneGroup": {
                    "value": "[coalesce(tryGet(parameters('privateEndpoints')[copyIndex()], 'privateDnsZoneGroup'), createObject())]"
                  },
                  "tags": {
                    "value": "[coalesce(tryGet(parameters('privateEndpoints')[copyIndex()], 'tags'), createObject())]"
                  },
                  "manualPrivateLinkServiceConnections": {
                    "value": "[coalesce(tryGet(parameters('privateEndpoints')[copyIndex()], 'manualPrivateLinkServiceConnections'), createArray())]"
                  },
                  "customDnsConfigs": {
                    "value": "[coalesce(tryGet(parameters('privateEndpoints')[copyIndex()], 'customDnsConfigs'), createArray())]"
                  },
                  "ipConfigurations": {
                    "value": "[coalesce(tryGet(parameters('privateEndpoints')[copyIndex()], 'ipConfigurations'), createArray())]"
                  },
                  "applicationSecurityGroups": {
                    "value": "[coalesce(tryGet(parameters('privateEndpoints')[copyIndex()], 'applicationSecurityGroups'), createArray())]"
                  },
                  "customNetworkInterfaceName": {
                    "value": "[coalesce(tryGet(parameters('privateEndpoints')[copyIndex()], 'customNetworkInterfaceName'), '')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.33.93.31351",
                      "templateHash": "3051445080245504600"
                    },
                    "name": "Private Endpoints"
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the private endpoint resource to create."
                      }
                    },
                    "subnetResourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
                      }
                    },
                    "serviceResourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Resource ID of the resource that needs to be connected to the network."
                      }
                    },
                    "applicationSecurityGroups": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Application security groups in which the private endpoint IP configuration is included."
                      }
                    },
                    "customNetworkInterfaceName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The custom name of the network interface attached to the private endpoint."
                      }
                    },
                    "ipConfigurations": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. A list of IP configurations of the private endpoint. This will be used to map to the First Party Service endpoints."
                      }
                    },
                    "groupIds": {
                      "type": "array",
                      "metadata": {
                        "description": "Required. Subtype(s) of the connection to be created. The allowed values depend on the type serviceResourceId refers to."
                      }
                    },
                    "privateDnsZoneGroup": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. The private DNS zone group configuration used to associate the private endpoint with one or multiple private DNS zones. A DNS zone group can support up to 5 DNS zones."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all Resources."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags to be applied on all resources/resource groups in this deployment."
                      }
                    },
                    "customDnsConfigs": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Custom DNS configurations."
                      }
                    },
                    "manualPrivateLinkServiceConnections": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Manual PrivateLink Service Connections."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/privateEndpoints",
                      "apiVersion": "2023-04-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "applicationSecurityGroups": "[parameters('applicationSecurityGroups')]",
                        "customDnsConfigs": "[parameters('customDnsConfigs')]",
                        "customNetworkInterfaceName": "[parameters('customNetworkInterfaceName')]",
                        "ipConfigurations": "[parameters('ipConfigurations')]",
                        "manualPrivateLinkServiceConnections": "[parameters('manualPrivateLinkServiceConnections')]",
                        "privateLinkServiceConnections": [
                          {
                            "name": "[parameters('name')]",
                            "properties": {
                              "privateLinkServiceId": "[parameters('serviceResourceId')]",
                              "groupIds": "[parameters('groupIds')]"
                            }
                          }
                        ],
                        "subnet": {
                          "id": "[parameters('subnetResourceId')]"
                        }
                      }
                    },
                    {
                      "condition": "[not(empty(parameters('privateDnsZoneGroup')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('PE-PrivateDnsZoneGroup-{0}', uniqueString(deployment().name))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "privateDNSResourceIds": {
                            "value": "[parameters('privateDnsZoneGroup').privateDNSResourceIds]"
                          },
                          "privateEndpointName": {
                            "value": "[parameters('name')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.33.93.31351",
                              "templateHash": "311745235647626630"
                            },
                            "name": "Private Endpoint Private DNS Zone Groups",
                            "description": "This module deploys a Private Endpoint Private DNS Zone Group.",
                            "owner": "Azure/module-maintainers"
                          },
                          "parameters": {
                            "privateEndpointName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent private endpoint. Required if the template is used in a standalone deployment."
                              }
                            },
                            "privateDNSResourceIds": {
                              "type": "array",
                              "minLength": 1,
                              "maxLength": 5,
                              "metadata": {
                                "description": "Required. Array of private DNS zone resource IDs. A DNS zone group can support up to 5 DNS zones."
                              }
                            },
                            "name": {
                              "type": "string",
                              "defaultValue": "default",
                              "metadata": {
                                "description": "Optional. The name of the private DNS zone group."
                              }
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "privateDnsZoneConfigs",
                                "count": "[length(parameters('privateDNSResourceIds'))]",
                                "input": {
                                  "name": "[last(split(parameters('privateDNSResourceIds')[copyIndex('privateDnsZoneConfigs')], '/'))]",
                                  "properties": {
                                    "privateDnsZoneId": "[parameters('privateDNSResourceIds')[copyIndex('privateDnsZoneConfigs')]]"
                                  }
                                }
                              }
                            ]
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                              "apiVersion": "2023-04-01",
                              "name": "[format('{0}/{1}', parameters('privateEndpointName'), parameters('name'))]",
                              "properties": {
                                "privateDnsZoneConfigs": "[variables('privateDnsZoneConfigs')]"
                              }
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the private endpoint DNS zone group."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the private endpoint DNS zone group."
                              },
                              "value": "[resourceId('Microsoft.Network/privateEndpoints/privateDnsZoneGroups', parameters('privateEndpointName'), parameters('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group the private endpoint DNS zone group was deployed into."
                              },
                              "value": "[resourceGroup().name]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group the private endpoint was deployed into."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the private endpoint."
                      },
                      "value": "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the private endpoint."
                      },
                      "value": "[parameters('name')]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference(resourceId('Microsoft.Network/privateEndpoints', parameters('name')), '2023-04-01', 'full').location]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('name'))]"
              ]
            },
            {
              "condition": "[not(empty(parameters('managementPolicyRules')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('Storage-ManagementPolicies-{0}', uniqueString(deployment().name, parameters('location')))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "storageAccountName": {
                    "value": "[parameters('name')]"
                  },
                  "rules": {
                    "value": "[parameters('managementPolicyRules')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.33.93.31351",
                      "templateHash": "17364910765260076608"
                    },
                    "name": "Storage Account Management Policies",
                    "description": "This module deploys a Storage Account Management Policy.",
                    "owner": "Azure/module-maintainers"
                  },
                  "parameters": {
                    "storageAccountName": {
                      "type": "string",
                      "maxLength": 24,
                      "metadata": {
                        "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                      }
                    },
                    "rules": {
                      "type": "array",
                      "metadata": {
                        "description": "Required. The Storage Account ManagementPolicies Rules."
                      }
                    }
                  },
                  "resources": [
                    {
                      "condition": "[not(empty(parameters('rules')))]",
                      "type": "Microsoft.Storage/storageAccounts/managementPolicies",
                      "apiVersion": "2023-01-01",
                      "name": "[format('{0}/{1}', parameters('storageAccountName'), 'default')]",
                      "properties": {
                        "policy": {
                          "rules": "[parameters('rules')]"
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the deployed management policy."
                      },
                      "value": "default"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the deployed management policy."
                      },
                      "value": "default"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group of the deployed management policy."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('name'))]",
                "[resourceId('Microsoft.Resources/deployments', format('Storage-BlobServices-{0}', uniqueString(deployment().name, parameters('location'))))]"
              ]
            },
            {
              "copy": {
                "name": "storageAccount_localUsers",
                "count": "[length(parameters('localUsers'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('Storage-LocalUsers-{0}-{1}', copyIndex(), uniqueString(deployment().name, parameters('location')))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "storageAccountName": {
                    "value": "[parameters('name')]"
                  },
                  "name": {
                    "value": "[parameters('localUsers')[copyIndex()].name]"
                  },
                  "hasSshKey": {
                    "value": "[parameters('localUsers')[copyIndex()].hasSshKey]"
                  },
                  "hasSshPassword": {
                    "value": "[parameters('localUsers')[copyIndex()].hasSshPassword]"
                  },
                  "permissionScopes": {
                    "value": "[parameters('localUsers')[copyIndex()].permissionScopes]"
                  },
                  "hasSharedKey": {
                    "value": "[coalesce(tryGet(parameters('localUsers')[copyIndex()], 'hasSharedKey'), false())]"
                  },
                  "homeDirectory": {
                    "value": "[coalesce(tryGet(parameters('localUsers')[copyIndex()], 'homeDirectory'), '')]"
                  },
                  "sshAuthorizedKeys": {
                    "value": "[coalesce(tryGet(parameters('localUsers')[copyIndex()], 'sshAuthorizedKeys'), createArray())]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.33.93.31351",
                      "templateHash": "7204648720497585792"
                    },
                    "name": "Storage Account Local Users",
                    "description": "This module deploys a Storage Account Local User, which is used for SFTP authentication.",
                    "owner": "Azure/module-maintainers"
                  },
                  "parameters": {
                    "storageAccountName": {
                      "type": "string",
                      "maxLength": 24,
                      "metadata": {
                        "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the local user used for SFTP Authentication."
                      }
                    },
                    "hasSharedKey": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Indicates whether shared key exists. Set it to false to remove existing shared key."
                      }
                    },
                    "hasSshKey": {
                      "type": "bool",
                      "metadata": {
                        "description": "Required. Indicates whether SSH key exists. Set it to false to remove existing SSH key."
                      }
                    },
                    "hasSshPassword": {
                      "type": "bool",
                      "metadata": {
                        "description": "Required. Indicates whether SSH password exists. Set it to false to remove existing SSH password."
                      }
                    },
                    "homeDirectory": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The local user home directory."
                      }
                    },
                    "permissionScopes": {
                      "type": "array",
                      "metadata": {
                        "description": "Required. The permission scopes of the local user."
                      }
                    },
                    "sshAuthorizedKeys": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. The local user SSH authorized keys for SFTP."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Storage/storageAccounts/localUsers",
                      "apiVersion": "2022-05-01",
                      "name": "[format('{0}/{1}', parameters('storageAccountName'), parameters('name'))]",
                      "properties": {
                        "hasSharedKey": "[parameters('hasSharedKey')]",
                        "hasSshKey": "[parameters('hasSshKey')]",
                        "hasSshPassword": "[parameters('hasSshPassword')]",
                        "homeDirectory": "[parameters('homeDirectory')]",
                        "permissionScopes": "[parameters('permissionScopes')]",
                        "sshAuthorizedKeys": "[if(not(empty(parameters('sshAuthorizedKeys'))), parameters('sshAuthorizedKeys'), null())]"
                      }
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the deployed local user."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group of the deployed local user."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the deployed local user."
                      },
                      "value": "[resourceId('Microsoft.Storage/storageAccounts/localUsers', parameters('storageAccountName'), parameters('name'))]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('name'))]"
              ]
            },
            {
              "condition": "[not(empty(parameters('blobServices')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('Storage-BlobServices-{0}', uniqueString(deployment().name, parameters('location')))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "storageAccountName": {
                    "value": "[parameters('name')]"
                  },
                  "containers": {
                    "value": "[coalesce(tryGet(parameters('blobServices'), 'containers'), createArray())]"
                  },
                  "automaticSnapshotPolicyEnabled": {
                    "value": "[coalesce(tryGet(parameters('blobServices'), 'automaticSnapshotPolicyEnabled'), false())]"
                  },
                  "changeFeedEnabled": {
                    "value": "[coalesce(tryGet(parameters('blobServices'), 'changeFeedEnabled'), false())]"
                  },
                  "changeFeedRetentionInDays": {
                    "value": "[coalesce(tryGet(parameters('blobServices'), 'changeFeedRetentionInDays'), 7)]"
                  },
                  "containerDeleteRetentionPolicyEnabled": {
                    "value": "[coalesce(tryGet(parameters('blobServices'), 'containerDeleteRetentionPolicyEnabled'), false())]"
                  },
                  "containerDeleteRetentionPolicyDays": {
                    "value": "[coalesce(tryGet(parameters('blobServices'), 'containerDeleteRetentionPolicyDays'), 7)]"
                  },
                  "containerDeleteRetentionPolicyAllowPermanentDelete": {
                    "value": "[coalesce(tryGet(parameters('blobServices'), 'containerDeleteRetentionPolicyAllowPermanentDelete'), false())]"
                  },
                  "corsRules": {
                    "value": "[coalesce(tryGet(parameters('blobServices'), 'corsRules'), createArray())]"
                  },
                  "defaultServiceVersion": {
                    "value": "[coalesce(tryGet(parameters('blobServices'), 'defaultServiceVersion'), '')]"
                  },
                  "deleteRetentionPolicyAllowPermanentDelete": {
                    "value": "[coalesce(tryGet(parameters('blobServices'), 'deleteRetentionPolicyAllowPermanentDelete'), false())]"
                  },
                  "deleteRetentionPolicyEnabled": {
                    "value": "[coalesce(tryGet(parameters('blobServices'), 'deleteRetentionPolicyEnabled'), false())]"
                  },
                  "deleteRetentionPolicyDays": {
                    "value": "[coalesce(tryGet(parameters('blobServices'), 'deleteRetentionPolicyDays'), 7)]"
                  },
                  "isVersioningEnabled": {
                    "value": "[coalesce(tryGet(parameters('blobServices'), 'isVersioningEnabled'), false())]"
                  },
                  "lastAccessTimeTrackingPolicyEnabled": {
                    "value": "[coalesce(tryGet(parameters('blobServices'), 'lastAccessTimeTrackingPolicyEnabled'), false())]"
                  },
                  "restorePolicyEnabled": {
                    "value": "[coalesce(tryGet(parameters('blobServices'), 'restorePolicyEnabled'), false())]"
                  },
                  "restorePolicyDays": {
                    "value": "[coalesce(tryGet(parameters('blobServices'), 'restorePolicyDays'), 6)]"
                  },
                  "diagnosticStorageAccountId": {
                    "value": "[coalesce(tryGet(parameters('blobServices'), 'diagnosticStorageAccountId'), '')]"
                  },
                  "diagnosticEventHubAuthorizationRuleId": {
                    "value": "[coalesce(tryGet(parameters('blobServices'), 'diagnosticEventHubAuthorizationRuleId'), '')]"
                  },
                  "diagnosticEventHubName": {
                    "value": "[coalesce(tryGet(parameters('blobServices'), 'diagnosticEventHubName'), '')]"
                  },
                  "diagnosticLogCategoriesToEnable": {
                    "value": "[coalesce(tryGet(parameters('blobServices'), 'diagnosticLogCategoriesToEnable'), createArray())]"
                  },
                  "diagnosticMetricsToEnable": {
                    "value": "[coalesce(tryGet(parameters('blobServices'), 'diagnosticMetricsToEnable'), createArray())]"
                  },
                  "diagnosticWorkspaceId": {
                    "value": "[coalesce(tryGet(parameters('blobServices'), 'diagnosticWorkspaceId'), '')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.33.93.31351",
                      "templateHash": "17551999256003354276"
                    },
                    "name": "Storage Account blob Services",
                    "description": "This module deploys a Storage Account Blob Service.",
                    "owner": "Azure/module-maintainers"
                  },
                  "parameters": {
                    "storageAccountName": {
                      "type": "string",
                      "maxLength": 24,
                      "metadata": {
                        "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                      }
                    },
                    "automaticSnapshotPolicyEnabled": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Automatic Snapshot is enabled if set to true."
                      }
                    },
                    "changeFeedEnabled": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. The blob service properties for change feed events. Indicates whether change feed event logging is enabled for the Blob service."
                      }
                    },
                    "changeFeedRetentionInDays": {
                      "type": "int",
                      "nullable": true,
                      "minValue": 1,
                      "maxValue": 146000,
                      "metadata": {
                        "description": "Optional. Indicates whether change feed event logging is enabled for the Blob service. Indicates the duration of changeFeed retention in days. A \"0\" value indicates an infinite retention of the change feed."
                      }
                    },
                    "containerDeleteRetentionPolicyEnabled": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. The blob service properties for container soft delete. Indicates whether DeleteRetentionPolicy is enabled."
                      }
                    },
                    "containerDeleteRetentionPolicyDays": {
                      "type": "int",
                      "defaultValue": 7,
                      "minValue": 1,
                      "maxValue": 365,
                      "metadata": {
                        "description": "Optional. Indicates the number of days that the deleted item should be retained."
                      }
                    },
                    "containerDeleteRetentionPolicyAllowPermanentDelete": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. This property when set to true allows deletion of the soft deleted blob versions and snapshots. This property cannot be used with blob restore policy. This property only applies to blob service and does not apply to containers or file share."
                      }
                    },
                    "corsRules": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Specifies CORS rules for the Blob service. You can include up to five CorsRule elements in the request. If no CorsRule elements are included in the request body, all CORS rules will be deleted, and CORS will be disabled for the Blob service."
                      }
                    },
                    "defaultServiceVersion": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Indicates the default version to use for requests to the Blob service if an incoming request's version is not specified. Possible values include version 2008-10-27 and all more recent versions."
                      }
                    },
                    "deleteRetentionPolicyEnabled": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. The blob service properties for blob soft delete."
                      }
                    },
                    "deleteRetentionPolicyDays": {
                      "type": "int",
                      "defaultValue": 7,
                      "minValue": 1,
                      "maxValue": 365,
                      "metadata": {
                        "description": "Optional. Indicates the number of days that the deleted blob should be retained."
                      }
                    },
                    "deleteRetentionPolicyAllowPermanentDelete": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. This property when set to true allows deletion of the soft deleted blob versions and snapshots. This property cannot be used with blob restore policy. This property only applies to blob service and does not apply to containers or file share."
                      }
                    },
                    "isVersioningEnabled": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Use versioning to automatically maintain previous versions of your blobs."
                      }
                    },
                    "lastAccessTimeTrackingPolicyEnabled": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. The blob service property to configure last access time based tracking policy. When set to true last access time based tracking is enabled."
                      }
                    },
                    "restorePolicyEnabled": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. The blob service properties for blob restore policy. If point-in-time restore is enabled, then versioning, change feed, and blob soft delete must also be enabled."
                      }
                    },
                    "restorePolicyDays": {
                      "type": "int",
                      "defaultValue": 6,
                      "minValue": 1,
                      "metadata": {
                        "description": "Optional. how long this blob can be restored. It should be less than DeleteRetentionPolicy days."
                      }
                    },
                    "containers": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Blob containers to create."
                      }
                    },
                    "diagnosticStorageAccountId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic storage account."
                      }
                    },
                    "diagnosticWorkspaceId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of a log analytics workspace."
                      }
                    },
                    "diagnosticEventHubAuthorizationRuleId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                      }
                    },
                    "diagnosticEventHubName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
                      }
                    },
                    "diagnosticLogCategoriesToEnable": {
                      "type": "array",
                      "defaultValue": [
                        "allLogs"
                      ],
                      "allowedValues": [
                        "",
                        "allLogs",
                        "StorageRead",
                        "StorageWrite",
                        "StorageDelete"
                      ],
                      "metadata": {
                        "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to '' to disable log collection."
                      }
                    },
                    "diagnosticMetricsToEnable": {
                      "type": "array",
                      "defaultValue": [
                        "Transaction"
                      ],
                      "allowedValues": [
                        "Transaction"
                      ],
                      "metadata": {
                        "description": "Optional. The name of metrics that will be streamed."
                      }
                    },
                    "diagnosticSettingsName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The name of the diagnostic setting, if deployed. If left empty, it defaults to \"<resourceName>-diagnosticSettings\"."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "diagnosticsLogsSpecified",
                        "count": "[length(filter(parameters('diagnosticLogCategoriesToEnable'), lambda('item', and(not(equals(lambdaVariables('item'), 'allLogs')), not(equals(lambdaVariables('item'), ''))))))]",
                        "input": {
                          "category": "[filter(parameters('diagnosticLogCategoriesToEnable'), lambda('item', and(not(equals(lambdaVariables('item'), 'allLogs')), not(equals(lambdaVariables('item'), '')))))[copyIndex('diagnosticsLogsSpecified')]]",
                          "enabled": true
                        }
                      },
                      {
                        "name": "diagnosticsMetrics",
                        "count": "[length(parameters('diagnosticMetricsToEnable'))]",
                        "input": {
                          "category": "[parameters('diagnosticMetricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                          "timeGrain": null,
                          "enabled": true
                        }
                      }
                    ],
                    "name": "default",
                    "diagnosticsLogs": "[if(contains(parameters('diagnosticLogCategoriesToEnable'), 'allLogs'), createArray(createObject('categoryGroup', 'allLogs', 'enabled', true())), if(contains(parameters('diagnosticLogCategoriesToEnable'), ''), createArray(), variables('diagnosticsLogsSpecified')))]"
                  },
                  "resources": {
                    "storageAccount": {
                      "existing": true,
                      "type": "Microsoft.Storage/storageAccounts",
                      "apiVersion": "2022-09-01",
                      "name": "[parameters('storageAccountName')]"
                    },
                    "blobServices": {
                      "type": "Microsoft.Storage/storageAccounts/blobServices",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}/{1}', parameters('storageAccountName'), variables('name'))]",
                      "properties": {
                        "automaticSnapshotPolicyEnabled": "[parameters('automaticSnapshotPolicyEnabled')]",
                        "changeFeed": "[if(parameters('changeFeedEnabled'), createObject('enabled', true(), 'retentionInDays', parameters('changeFeedRetentionInDays')), null())]",
                        "containerDeleteRetentionPolicy": {
                          "enabled": "[parameters('containerDeleteRetentionPolicyEnabled')]",
                          "days": "[if(equals(parameters('containerDeleteRetentionPolicyEnabled'), true()), parameters('containerDeleteRetentionPolicyDays'), null())]",
                          "allowPermanentDelete": "[if(equals(parameters('containerDeleteRetentionPolicyEnabled'), true()), parameters('containerDeleteRetentionPolicyAllowPermanentDelete'), null())]"
                        },
                        "cors": {
                          "corsRules": "[parameters('corsRules')]"
                        },
                        "defaultServiceVersion": "[if(not(empty(parameters('defaultServiceVersion'))), parameters('defaultServiceVersion'), null())]",
                        "deleteRetentionPolicy": {
                          "enabled": "[parameters('deleteRetentionPolicyEnabled')]",
                          "days": "[if(equals(parameters('deleteRetentionPolicyEnabled'), true()), parameters('deleteRetentionPolicyDays'), null())]",
                          "allowPermanentDelete": "[if(and(parameters('deleteRetentionPolicyEnabled'), parameters('deleteRetentionPolicyAllowPermanentDelete')), true(), null())]"
                        },
                        "isVersioningEnabled": "[parameters('isVersioningEnabled')]",
                        "lastAccessTimeTrackingPolicy": {
                          "enable": "[parameters('lastAccessTimeTrackingPolicyEnabled')]",
                          "name": "[if(equals(parameters('lastAccessTimeTrackingPolicyEnabled'), true()), 'AccessTimeTracking', null())]",
                          "trackingGranularityInDays": "[if(equals(parameters('lastAccessTimeTrackingPolicyEnabled'), true()), 1, null())]"
                        },
                        "restorePolicy": {
                          "enabled": "[parameters('restorePolicyEnabled')]",
                          "days": "[if(equals(parameters('restorePolicyEnabled'), true()), parameters('restorePolicyDays'), null())]"
                        }
                      }
                    },
                    "blobServices_diagnosticSettings": {
                      "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('diagnosticWorkspaceId')))), not(empty(parameters('diagnosticEventHubAuthorizationRuleId')))), not(empty(parameters('diagnosticEventHubName'))))]",
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.Storage/storageAccounts/{0}/blobServices/{1}', parameters('storageAccountName'), variables('name'))]",
                      "name": "[if(not(empty(parameters('diagnosticSettingsName'))), parameters('diagnosticSettingsName'), format('{0}-diagnosticSettings', variables('name')))]",
                      "properties": {
                        "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                        "workspaceId": "[if(not(empty(parameters('diagnosticWorkspaceId'))), parameters('diagnosticWorkspaceId'), null())]",
                        "eventHubAuthorizationRuleId": "[if(not(empty(parameters('diagnosticEventHubAuthorizationRuleId'))), parameters('diagnosticEventHubAuthorizationRuleId'), null())]",
                        "eventHubName": "[if(not(empty(parameters('diagnosticEventHubName'))), parameters('diagnosticEventHubName'), null())]",
                        "metrics": "[variables('diagnosticsMetrics')]",
                        "logs": "[variables('diagnosticsLogs')]"
                      },
                      "dependsOn": [
                        "blobServices"
                      ]
                    },
                    "blobServices_container": {
                      "copy": {
                        "name": "blobServices_container",
                        "count": "[length(parameters('containers'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('Container-{0}-{1}', copyIndex(), deployment().name)]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "storageAccountName": {
                            "value": "[parameters('storageAccountName')]"
                          },
                          "name": {
                            "value": "[parameters('containers')[copyIndex()].name]"
                          },
                          "defaultEncryptionScope": {
                            "value": "[coalesce(tryGet(parameters('containers')[copyIndex()], 'defaultEncryptionScope'), '')]"
                          },
                          "denyEncryptionScopeOverride": {
                            "value": "[coalesce(tryGet(parameters('containers')[copyIndex()], 'denyEncryptionScopeOverride'), false())]"
                          },
                          "enableNfsV3AllSquash": {
                            "value": "[coalesce(tryGet(parameters('containers')[copyIndex()], 'enableNfsV3AllSquash'), false())]"
                          },
                          "enableNfsV3RootSquash": {
                            "value": "[coalesce(tryGet(parameters('containers')[copyIndex()], 'enableNfsV3RootSquash'), false())]"
                          },
                          "immutableStorageWithVersioningEnabled": {
                            "value": "[coalesce(tryGet(parameters('containers')[copyIndex()], 'immutableStorageWithVersioningEnabled'), false())]"
                          },
                          "metadata": {
                            "value": "[coalesce(tryGet(parameters('containers')[copyIndex()], 'metadata'), createObject())]"
                          },
                          "publicAccess": {
                            "value": "[coalesce(tryGet(parameters('containers')[copyIndex()], 'publicAccess'), 'None')]"
                          },
                          "immutabilityPolicyProperties": {
                            "value": "[coalesce(tryGet(parameters('containers')[copyIndex()], 'immutabilityPolicyProperties'), createObject())]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.33.93.31351",
                              "templateHash": "6550965942967960104"
                            }
                          },
                          "parameters": {
                            "storageAccountName": {
                              "type": "string",
                              "maxLength": 24,
                              "metadata": {
                                "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                              }
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the storage container to deploy."
                              }
                            },
                            "defaultEncryptionScope": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Default the container to use specified encryption scope for all writes."
                              }
                            },
                            "denyEncryptionScopeOverride": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Block override of encryption scope from the container default."
                              }
                            },
                            "enableNfsV3AllSquash": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Enable NFSv3 all squash on blob container."
                              }
                            },
                            "enableNfsV3RootSquash": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Enable NFSv3 root squash on blob container."
                              }
                            },
                            "immutableStorageWithVersioningEnabled": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. This is an immutable property, when set to true it enables object level immutability at the container level. The property is immutable and can only be set to true at the container creation time. Existing containers must undergo a migration process."
                              }
                            },
                            "immutabilityPolicyName": {
                              "type": "string",
                              "defaultValue": "default",
                              "metadata": {
                                "description": "Optional. Name of the immutable policy."
                              }
                            },
                            "immutabilityPolicyProperties": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Configure immutability policy."
                              }
                            },
                            "metadata": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. A name-value pair to associate with the container as metadata."
                              }
                            },
                            "publicAccess": {
                              "type": "string",
                              "defaultValue": "None",
                              "allowedValues": [
                                "Container",
                                "Blob",
                                "None"
                              ],
                              "metadata": {
                                "description": "Optional. Specifies whether data in the container may be accessed publicly and the level of access."
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}/{1}/{2}', parameters('storageAccountName'), 'default', parameters('name'))]",
                              "properties": {
                                "defaultEncryptionScope": "[if(not(empty(parameters('defaultEncryptionScope'))), parameters('defaultEncryptionScope'), null())]",
                                "denyEncryptionScopeOverride": "[if(equals(parameters('denyEncryptionScopeOverride'), true()), parameters('denyEncryptionScopeOverride'), null())]",
                                "enableNfsV3AllSquash": "[if(equals(parameters('enableNfsV3AllSquash'), true()), parameters('enableNfsV3AllSquash'), null())]",
                                "enableNfsV3RootSquash": "[if(equals(parameters('enableNfsV3RootSquash'), true()), parameters('enableNfsV3RootSquash'), null())]",
                                "immutableStorageWithVersioning": "[if(equals(parameters('immutableStorageWithVersioningEnabled'), true()), createObject('enabled', parameters('immutableStorageWithVersioningEnabled')), null())]",
                                "metadata": "[parameters('metadata')]",
                                "publicAccess": "[parameters('publicAccess')]"
                              }
                            },
                            {
                              "condition": "[not(empty(parameters('immutabilityPolicyProperties')))]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[parameters('immutabilityPolicyName')]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "storageAccountName": {
                                    "value": "[parameters('storageAccountName')]"
                                  },
                                  "containerName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "immutabilityPeriodSinceCreationInDays": {
                                    "value": "[coalesce(tryGet(parameters('immutabilityPolicyProperties'), 'immutabilityPeriodSinceCreationInDays'), 365)]"
                                  },
                                  "allowProtectedAppendWrites": {
                                    "value": "[coalesce(tryGet(parameters('immutabilityPolicyProperties'), 'allowProtectedAppendWrites'), true())]"
                                  },
                                  "allowProtectedAppendWritesAll": {
                                    "value": "[coalesce(tryGet(parameters('immutabilityPolicyProperties'), 'allowProtectedAppendWritesAll'), true())]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.33.93.31351",
                                      "templateHash": "11732976874540025094"
                                    },
                                    "name": "Storage Account Blob Container Immutability Policies",
                                    "description": "This module deploys a Storage Account Blob Container Immutability Policy.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "parameters": {
                                    "storageAccountName": {
                                      "type": "string",
                                      "maxLength": 24,
                                      "metadata": {
                                        "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "containerName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent container to apply the policy to. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "immutabilityPeriodSinceCreationInDays": {
                                      "type": "int",
                                      "defaultValue": 365,
                                      "metadata": {
                                        "description": "Optional. The immutability period for the blobs in the container since the policy creation, in days."
                                      }
                                    },
                                    "allowProtectedAppendWrites": {
                                      "type": "bool",
                                      "defaultValue": true,
                                      "metadata": {
                                        "description": "Optional. This property can only be changed for unlocked time-based retention policies. When enabled, new blocks can be written to an append blob while maintaining immutability protection and compliance. Only new blocks can be added and any existing blocks cannot be modified or deleted. This property cannot be changed with ExtendImmutabilityPolicy API."
                                      }
                                    },
                                    "allowProtectedAppendWritesAll": {
                                      "type": "bool",
                                      "defaultValue": true,
                                      "metadata": {
                                        "description": "Optional. This property can only be changed for unlocked time-based retention policies. When enabled, new blocks can be written to both \"Append and Block Blobs\" while maintaining immutability protection and compliance. Only new blocks can be added and any existing blocks cannot be modified or deleted. This property cannot be changed with ExtendImmutabilityPolicy API. The \"allowProtectedAppendWrites\" and \"allowProtectedAppendWritesAll\" properties are mutually exclusive."
                                      }
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Storage/storageAccounts/blobServices/containers/immutabilityPolicies",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('{0}/{1}/{2}/{3}', parameters('storageAccountName'), 'default', parameters('containerName'), 'default')]",
                                      "properties": {
                                        "immutabilityPeriodSinceCreationInDays": "[parameters('immutabilityPeriodSinceCreationInDays')]",
                                        "allowProtectedAppendWrites": "[parameters('allowProtectedAppendWrites')]",
                                        "allowProtectedAppendWritesAll": "[parameters('allowProtectedAppendWritesAll')]"
                                      }
                                    }
                                  ],
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the deployed immutability policy."
                                      },
                                      "value": "default"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the deployed immutability policy."
                                      },
                                      "value": "[resourceId('Microsoft.Storage/storageAccounts/blobServices/containers/immutabilityPolicies', parameters('storageAccountName'), 'default', parameters('containerName'), 'default')]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group of the deployed immutability policy."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Storage/storageAccounts/blobServices/containers', parameters('storageAccountName'), 'default', parameters('name'))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the deployed container."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the deployed container."
                              },
                              "value": "[resourceId('Microsoft.Storage/storageAccounts/blobServices/containers', parameters('storageAccountName'), 'default', parameters('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group of the deployed container."
                              },
                              "value": "[resourceGroup().name]"
                            }
                          }
                        }
                      }
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the deployed blob service."
                      },
                      "value": "[variables('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the deployed blob service."
                      },
                      "value": "[resourceId('Microsoft.Storage/storageAccounts/blobServices', parameters('storageAccountName'), variables('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the deployed blob service."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('name'))]"
              ]
            },
            {
              "condition": "[not(empty(parameters('fileServices')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('Storage-FileServices-{0}', uniqueString(deployment().name, parameters('location')))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "storageAccountName": {
                    "value": "[parameters('name')]"
                  },
                  "diagnosticStorageAccountId": {
                    "value": "[coalesce(tryGet(parameters('fileServices'), 'diagnosticStorageAccountId'), '')]"
                  },
                  "diagnosticEventHubAuthorizationRuleId": {
                    "value": "[coalesce(tryGet(parameters('fileServices'), 'diagnosticEventHubAuthorizationRuleId'), '')]"
                  },
                  "diagnosticEventHubName": {
                    "value": "[coalesce(tryGet(parameters('fileServices'), 'diagnosticEventHubName'), '')]"
                  },
                  "diagnosticLogCategoriesToEnable": {
                    "value": "[coalesce(tryGet(parameters('fileServices'), 'diagnosticLogCategoriesToEnable'), createArray())]"
                  },
                  "diagnosticMetricsToEnable": {
                    "value": "[coalesce(tryGet(parameters('fileServices'), 'diagnosticMetricsToEnable'), createArray())]"
                  },
                  "protocolSettings": {
                    "value": "[coalesce(tryGet(parameters('fileServices'), 'protocolSettings'), createObject())]"
                  },
                  "shareDeleteRetentionPolicy": {
                    "value": "[coalesce(tryGet(parameters('fileServices'), 'shareDeleteRetentionPolicy'), createObject('enabled', true(), 'days', 7))]"
                  },
                  "shares": {
                    "value": "[coalesce(tryGet(parameters('fileServices'), 'shares'), createArray())]"
                  },
                  "diagnosticWorkspaceId": {
                    "value": "[coalesce(tryGet(parameters('fileServices'), 'diagnosticWorkspaceId'), '')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.33.93.31351",
                      "templateHash": "4110359746568586422"
                    },
                    "name": "Storage Account File Share Services",
                    "description": "This module deploys a Storage Account File Share Service.",
                    "owner": "Azure/module-maintainers"
                  },
                  "parameters": {
                    "storageAccountName": {
                      "type": "string",
                      "maxLength": 24,
                      "metadata": {
                        "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                      }
                    },
                    "name": {
                      "type": "string",
                      "defaultValue": "default",
                      "metadata": {
                        "description": "Optional. The name of the file service."
                      }
                    },
                    "protocolSettings": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Protocol settings for file service."
                      }
                    },
                    "shareDeleteRetentionPolicy": {
                      "type": "object",
                      "defaultValue": {
                        "enabled": true,
                        "days": 7
                      },
                      "metadata": {
                        "description": "Optional. The service properties for soft delete."
                      }
                    },
                    "diagnosticStorageAccountId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic storage account."
                      }
                    },
                    "diagnosticWorkspaceId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of a log analytics workspace."
                      }
                    },
                    "diagnosticEventHubAuthorizationRuleId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                      }
                    },
                    "diagnosticEventHubName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
                      }
                    },
                    "shares": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. File shares to create."
                      }
                    },
                    "diagnosticLogCategoriesToEnable": {
                      "type": "array",
                      "defaultValue": [
                        "allLogs"
                      ],
                      "allowedValues": [
                        "",
                        "allLogs",
                        "StorageRead",
                        "StorageWrite",
                        "StorageDelete"
                      ],
                      "metadata": {
                        "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to '' to disable log collection."
                      }
                    },
                    "diagnosticMetricsToEnable": {
                      "type": "array",
                      "defaultValue": [
                        "Transaction"
                      ],
                      "allowedValues": [
                        "Transaction"
                      ],
                      "metadata": {
                        "description": "Optional. The name of metrics that will be streamed."
                      }
                    },
                    "diagnosticSettingsName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The name of the diagnostic setting, if deployed. If left empty, it defaults to \"<resourceName>-diagnosticSettings\"."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "diagnosticsLogsSpecified",
                        "count": "[length(filter(parameters('diagnosticLogCategoriesToEnable'), lambda('item', and(not(equals(lambdaVariables('item'), 'allLogs')), not(equals(lambdaVariables('item'), ''))))))]",
                        "input": {
                          "category": "[filter(parameters('diagnosticLogCategoriesToEnable'), lambda('item', and(not(equals(lambdaVariables('item'), 'allLogs')), not(equals(lambdaVariables('item'), '')))))[copyIndex('diagnosticsLogsSpecified')]]",
                          "enabled": true
                        }
                      },
                      {
                        "name": "diagnosticsMetrics",
                        "count": "[length(parameters('diagnosticMetricsToEnable'))]",
                        "input": {
                          "category": "[parameters('diagnosticMetricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                          "timeGrain": null,
                          "enabled": true
                        }
                      }
                    ],
                    "diagnosticsLogs": "[if(contains(parameters('diagnosticLogCategoriesToEnable'), 'allLogs'), createArray(createObject('categoryGroup', 'allLogs', 'enabled', true())), if(contains(parameters('diagnosticLogCategoriesToEnable'), ''), createArray(), variables('diagnosticsLogsSpecified')))]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Storage/storageAccounts/fileServices",
                      "apiVersion": "2021-09-01",
                      "name": "[format('{0}/{1}', parameters('storageAccountName'), parameters('name'))]",
                      "properties": {
                        "protocolSettings": "[parameters('protocolSettings')]",
                        "shareDeleteRetentionPolicy": "[parameters('shareDeleteRetentionPolicy')]"
                      }
                    },
                    {
                      "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('diagnosticWorkspaceId')))), not(empty(parameters('diagnosticEventHubAuthorizationRuleId')))), not(empty(parameters('diagnosticEventHubName'))))]",
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.Storage/storageAccounts/{0}/fileServices/{1}', parameters('storageAccountName'), parameters('name'))]",
                      "name": "[if(not(empty(parameters('diagnosticSettingsName'))), parameters('diagnosticSettingsName'), format('{0}-diagnosticSettings', parameters('name')))]",
                      "properties": {
                        "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                        "workspaceId": "[if(not(empty(parameters('diagnosticWorkspaceId'))), parameters('diagnosticWorkspaceId'), null())]",
                        "eventHubAuthorizationRuleId": "[if(not(empty(parameters('diagnosticEventHubAuthorizationRuleId'))), parameters('diagnosticEventHubAuthorizationRuleId'), null())]",
                        "eventHubName": "[if(not(empty(parameters('diagnosticEventHubName'))), parameters('diagnosticEventHubName'), null())]",
                        "metrics": "[variables('diagnosticsMetrics')]",
                        "logs": "[variables('diagnosticsLogs')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts/fileServices', parameters('storageAccountName'), parameters('name'))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "fileServices_shares",
                        "count": "[length(parameters('shares'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-shares-{1}', deployment().name, copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "storageAccountName": {
                            "value": "[parameters('storageAccountName')]"
                          },
                          "fileServicesName": {
                            "value": "[parameters('name')]"
                          },
                          "name": {
                            "value": "[parameters('shares')[copyIndex()].name]"
                          },
                          "accessTier": {
                            "value": "[coalesce(tryGet(parameters('shares')[copyIndex()], 'accessTier'), if(equals(reference(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2021-09-01', 'full').kind, 'FileStorage'), 'Premium', 'TransactionOptimized'))]"
                          },
                          "enabledProtocols": {
                            "value": "[coalesce(tryGet(parameters('shares')[copyIndex()], 'enabledProtocols'), 'SMB')]"
                          },
                          "rootSquash": {
                            "value": "[coalesce(tryGet(parameters('shares')[copyIndex()], 'rootSquash'), 'NoRootSquash')]"
                          },
                          "shareQuota": {
                            "value": "[coalesce(tryGet(parameters('shares')[copyIndex()], 'shareQuota'), 5120)]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.33.93.31351",
                              "templateHash": "5236774497759564366"
                            },
                            "name": "Storage Account File Shares",
                            "description": "This module deploys a Storage Account File Share.",
                            "owner": "Azure/module-maintainers"
                          },
                          "parameters": {
                            "storageAccountName": {
                              "type": "string",
                              "maxLength": 24,
                              "metadata": {
                                "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                              }
                            },
                            "fileServicesName": {
                              "type": "string",
                              "defaultValue": "default",
                              "metadata": {
                                "description": "Conditional. The name of the parent file service. Required if the template is used in a standalone deployment."
                              }
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the file share to create."
                              }
                            },
                            "accessTier": {
                              "type": "string",
                              "defaultValue": "TransactionOptimized",
                              "allowedValues": [
                                "Premium",
                                "Hot",
                                "Cool",
                                "TransactionOptimized"
                              ],
                              "metadata": {
                                "description": "Conditional. Access tier for specific share. Required if the Storage Account kind is set to FileStorage (should be set to \"Premium\"). GpV2 account can choose between TransactionOptimized (default), Hot, and Cool."
                              }
                            },
                            "shareQuota": {
                              "type": "int",
                              "defaultValue": 5120,
                              "metadata": {
                                "description": "Optional. The maximum size of the share, in gigabytes. Must be greater than 0, and less than or equal to 5120 (5TB). For Large File Shares, the maximum size is 102400 (100TB)."
                              }
                            },
                            "enabledProtocols": {
                              "type": "string",
                              "defaultValue": "SMB",
                              "allowedValues": [
                                "NFS",
                                "SMB"
                              ],
                              "metadata": {
                                "description": "Optional. The authentication protocol that is used for the file share. Can only be specified when creating a share."
                              }
                            },
                            "rootSquash": {
                              "type": "string",
                              "defaultValue": "NoRootSquash",
                              "allowedValues": [
                                "AllSquash",
                                "NoRootSquash",
                                "RootSquash"
                              ],
                              "metadata": {
                                "description": "Optional. Permissions for NFS file shares are enforced by the client OS rather than the Azure Files service. Toggling the root squash behavior reduces the rights of the root user for NFS shares."
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Storage/storageAccounts/fileServices/shares",
                              "apiVersion": "2021-09-01",
                              "name": "[format('{0}/{1}/{2}', parameters('storageAccountName'), parameters('fileServicesName'), parameters('name'))]",
                              "properties": {
                                "accessTier": "[parameters('accessTier')]",
                                "shareQuota": "[parameters('shareQuota')]",
                                "rootSquash": "[if(equals(parameters('enabledProtocols'), 'NFS'), parameters('rootSquash'), null())]",
                                "enabledProtocols": "[parameters('enabledProtocols')]"
                              }
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the deployed file share."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the deployed file share."
                              },
                              "value": "[resourceId('Microsoft.Storage/storageAccounts/fileServices/shares', parameters('storageAccountName'), parameters('fileServicesName'), parameters('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group of the deployed file share."
                              },
                              "value": "[resourceGroup().name]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts/fileServices', parameters('storageAccountName'), parameters('name'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the deployed file share service."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the deployed file share service."
                      },
                      "value": "[resourceId('Microsoft.Storage/storageAccounts/fileServices', parameters('storageAccountName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group of the deployed file share service."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('name'))]"
              ]
            },
            {
              "condition": "[not(empty(parameters('queueServices')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('Storage-QueueServices-{0}', uniqueString(deployment().name, parameters('location')))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "storageAccountName": {
                    "value": "[parameters('name')]"
                  },
                  "diagnosticStorageAccountId": {
                    "value": "[coalesce(tryGet(parameters('queueServices'), 'diagnosticStorageAccountId'), '')]"
                  },
                  "diagnosticEventHubAuthorizationRuleId": {
                    "value": "[coalesce(tryGet(parameters('queueServices'), 'diagnosticEventHubAuthorizationRuleId'), '')]"
                  },
                  "diagnosticEventHubName": {
                    "value": "[coalesce(tryGet(parameters('queueServices'), 'diagnosticEventHubName'), '')]"
                  },
                  "diagnosticLogCategoriesToEnable": {
                    "value": "[coalesce(tryGet(parameters('queueServices'), 'diagnosticLogCategoriesToEnable'), createArray())]"
                  },
                  "diagnosticMetricsToEnable": {
                    "value": "[coalesce(tryGet(parameters('queueServices'), 'diagnosticMetricsToEnable'), createArray())]"
                  },
                  "queues": {
                    "value": "[coalesce(tryGet(parameters('queueServices'), 'queues'), createArray())]"
                  },
                  "diagnosticWorkspaceId": {
                    "value": "[coalesce(tryGet(parameters('queueServices'), 'diagnosticWorkspaceId'), '')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.33.93.31351",
                      "templateHash": "13222080909442943023"
                    },
                    "name": "Storage Account Queue Services",
                    "description": "This module deploys a Storage Account Queue Service.",
                    "owner": "Azure/module-maintainers"
                  },
                  "parameters": {
                    "storageAccountName": {
                      "type": "string",
                      "maxLength": 24,
                      "metadata": {
                        "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                      }
                    },
                    "queues": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Queues to create."
                      }
                    },
                    "diagnosticStorageAccountId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic storage account."
                      }
                    },
                    "diagnosticWorkspaceId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of a log analytics workspace."
                      }
                    },
                    "diagnosticEventHubAuthorizationRuleId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                      }
                    },
                    "diagnosticEventHubName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
                      }
                    },
                    "diagnosticLogCategoriesToEnable": {
                      "type": "array",
                      "defaultValue": [
                        "allLogs"
                      ],
                      "allowedValues": [
                        "",
                        "allLogs",
                        "StorageRead",
                        "StorageWrite",
                        "StorageDelete"
                      ],
                      "metadata": {
                        "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to '' to disable log collection."
                      }
                    },
                    "diagnosticMetricsToEnable": {
                      "type": "array",
                      "defaultValue": [
                        "Transaction"
                      ],
                      "allowedValues": [
                        "Transaction"
                      ],
                      "metadata": {
                        "description": "Optional. The name of metrics that will be streamed."
                      }
                    },
                    "diagnosticSettingsName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The name of the diagnostic setting, if deployed. If left empty, it defaults to \"<resourceName>-diagnosticSettings\"."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "diagnosticsLogsSpecified",
                        "count": "[length(filter(parameters('diagnosticLogCategoriesToEnable'), lambda('item', and(not(equals(lambdaVariables('item'), 'allLogs')), not(equals(lambdaVariables('item'), ''))))))]",
                        "input": {
                          "category": "[filter(parameters('diagnosticLogCategoriesToEnable'), lambda('item', and(not(equals(lambdaVariables('item'), 'allLogs')), not(equals(lambdaVariables('item'), '')))))[copyIndex('diagnosticsLogsSpecified')]]",
                          "enabled": true
                        }
                      },
                      {
                        "name": "diagnosticsMetrics",
                        "count": "[length(parameters('diagnosticMetricsToEnable'))]",
                        "input": {
                          "category": "[parameters('diagnosticMetricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                          "timeGrain": null,
                          "enabled": true
                        }
                      }
                    ],
                    "name": "default",
                    "diagnosticsLogs": "[if(contains(parameters('diagnosticLogCategoriesToEnable'), 'allLogs'), createArray(createObject('categoryGroup', 'allLogs', 'enabled', true())), if(contains(parameters('diagnosticLogCategoriesToEnable'), ''), createArray(), variables('diagnosticsLogsSpecified')))]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Storage/storageAccounts/queueServices",
                      "apiVersion": "2021-09-01",
                      "name": "[format('{0}/{1}', parameters('storageAccountName'), variables('name'))]",
                      "properties": {}
                    },
                    {
                      "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('diagnosticWorkspaceId')))), not(empty(parameters('diagnosticEventHubAuthorizationRuleId')))), not(empty(parameters('diagnosticEventHubName'))))]",
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.Storage/storageAccounts/{0}/queueServices/{1}', parameters('storageAccountName'), variables('name'))]",
                      "name": "[if(not(empty(parameters('diagnosticSettingsName'))), parameters('diagnosticSettingsName'), format('{0}-diagnosticSettings', variables('name')))]",
                      "properties": {
                        "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                        "workspaceId": "[if(not(empty(parameters('diagnosticWorkspaceId'))), parameters('diagnosticWorkspaceId'), null())]",
                        "eventHubAuthorizationRuleId": "[if(not(empty(parameters('diagnosticEventHubAuthorizationRuleId'))), parameters('diagnosticEventHubAuthorizationRuleId'), null())]",
                        "eventHubName": "[if(not(empty(parameters('diagnosticEventHubName'))), parameters('diagnosticEventHubName'), null())]",
                        "metrics": "[variables('diagnosticsMetrics')]",
                        "logs": "[variables('diagnosticsLogs')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts/queueServices', parameters('storageAccountName'), variables('name'))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "queueServices_queues",
                        "count": "[length(parameters('queues'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('Queue-{0}-{1}', copyIndex(), deployment().name)]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "storageAccountName": {
                            "value": "[parameters('storageAccountName')]"
                          },
                          "name": {
                            "value": "[parameters('queues')[copyIndex()].name]"
                          },
                          "metadata": {
                            "value": "[coalesce(tryGet(parameters('queues')[copyIndex()], 'metadata'), createObject())]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.33.93.31351",
                              "templateHash": "10670535880656099260"
                            },
                            "name": "Storage Account Queues",
                            "description": "This module deploys a Storage Account Queue.",
                            "owner": "Azure/module-maintainers"
                          },
                          "parameters": {
                            "storageAccountName": {
                              "type": "string",
                              "maxLength": 24,
                              "metadata": {
                                "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                              }
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the storage queue to deploy."
                              }
                            },
                            "metadata": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Required. A name-value pair that represents queue metadata."
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Storage/storageAccounts/queueServices/queues",
                              "apiVersion": "2021-09-01",
                              "name": "[format('{0}/{1}/{2}', parameters('storageAccountName'), 'default', parameters('name'))]",
                              "properties": {
                                "metadata": "[parameters('metadata')]"
                              }
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the deployed queue."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the deployed queue."
                              },
                              "value": "[resourceId('Microsoft.Storage/storageAccounts/queueServices/queues', parameters('storageAccountName'), 'default', parameters('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group of the deployed queue."
                              },
                              "value": "[resourceGroup().name]"
                            }
                          }
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the deployed file share service."
                      },
                      "value": "[variables('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the deployed file share service."
                      },
                      "value": "[resourceId('Microsoft.Storage/storageAccounts/queueServices', parameters('storageAccountName'), variables('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group of the deployed file share service."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('name'))]"
              ]
            },
            {
              "condition": "[not(empty(parameters('tableServices')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('Storage-TableServices-{0}', uniqueString(deployment().name, parameters('location')))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "storageAccountName": {
                    "value": "[parameters('name')]"
                  },
                  "diagnosticStorageAccountId": {
                    "value": "[coalesce(tryGet(parameters('tableServices'), 'diagnosticStorageAccountId'), '')]"
                  },
                  "diagnosticEventHubAuthorizationRuleId": {
                    "value": "[coalesce(tryGet(parameters('tableServices'), 'diagnosticEventHubAuthorizationRuleId'), '')]"
                  },
                  "diagnosticEventHubName": {
                    "value": "[coalesce(tryGet(parameters('tableServices'), 'diagnosticEventHubName'), '')]"
                  },
                  "diagnosticLogCategoriesToEnable": {
                    "value": "[coalesce(tryGet(parameters('tableServices'), 'diagnosticLogCategoriesToEnable'), createArray())]"
                  },
                  "diagnosticMetricsToEnable": {
                    "value": "[coalesce(tryGet(parameters('tableServices'), 'diagnosticMetricsToEnable'), createArray())]"
                  },
                  "tables": {
                    "value": "[coalesce(tryGet(parameters('tableServices'), 'tables'), createArray())]"
                  },
                  "diagnosticWorkspaceId": {
                    "value": "[coalesce(tryGet(parameters('tableServices'), 'diagnosticWorkspaceId'), '')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.33.93.31351",
                      "templateHash": "9301389801468901664"
                    },
                    "name": "Storage Account Table Services",
                    "description": "This module deploys a Storage Account Table Service.",
                    "owner": "Azure/module-maintainers"
                  },
                  "parameters": {
                    "storageAccountName": {
                      "type": "string",
                      "maxLength": 24,
                      "metadata": {
                        "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                      }
                    },
                    "tables": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. tables to create."
                      }
                    },
                    "diagnosticStorageAccountId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic storage account."
                      }
                    },
                    "diagnosticWorkspaceId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of a log analytics workspace."
                      }
                    },
                    "diagnosticEventHubAuthorizationRuleId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                      }
                    },
                    "diagnosticEventHubName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
                      }
                    },
                    "diagnosticLogCategoriesToEnable": {
                      "type": "array",
                      "defaultValue": [
                        "allLogs"
                      ],
                      "allowedValues": [
                        "",
                        "allLogs",
                        "StorageRead",
                        "StorageWrite",
                        "StorageDelete"
                      ],
                      "metadata": {
                        "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to '' to disable log collection."
                      }
                    },
                    "diagnosticMetricsToEnable": {
                      "type": "array",
                      "defaultValue": [
                        "Transaction"
                      ],
                      "allowedValues": [
                        "Transaction"
                      ],
                      "metadata": {
                        "description": "Optional. The name of metrics that will be streamed."
                      }
                    },
                    "diagnosticSettingsName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The name of the diagnostic setting, if deployed. If left empty, it defaults to \"<resourceName>-diagnosticSettings\"."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "diagnosticsLogsSpecified",
                        "count": "[length(filter(parameters('diagnosticLogCategoriesToEnable'), lambda('item', and(not(equals(lambdaVariables('item'), 'allLogs')), not(equals(lambdaVariables('item'), ''))))))]",
                        "input": {
                          "category": "[filter(parameters('diagnosticLogCategoriesToEnable'), lambda('item', and(not(equals(lambdaVariables('item'), 'allLogs')), not(equals(lambdaVariables('item'), '')))))[copyIndex('diagnosticsLogsSpecified')]]",
                          "enabled": true
                        }
                      },
                      {
                        "name": "diagnosticsMetrics",
                        "count": "[length(parameters('diagnosticMetricsToEnable'))]",
                        "input": {
                          "category": "[parameters('diagnosticMetricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                          "timeGrain": null,
                          "enabled": true
                        }
                      }
                    ],
                    "name": "default",
                    "diagnosticsLogs": "[if(contains(parameters('diagnosticLogCategoriesToEnable'), 'allLogs'), createArray(createObject('categoryGroup', 'allLogs', 'enabled', true())), if(contains(parameters('diagnosticLogCategoriesToEnable'), ''), createArray(), variables('diagnosticsLogsSpecified')))]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Storage/storageAccounts/tableServices",
                      "apiVersion": "2021-09-01",
                      "name": "[format('{0}/{1}', parameters('storageAccountName'), variables('name'))]",
                      "properties": {}
                    },
                    {
                      "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('diagnosticWorkspaceId')))), not(empty(parameters('diagnosticEventHubAuthorizationRuleId')))), not(empty(parameters('diagnosticEventHubName'))))]",
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.Storage/storageAccounts/{0}/tableServices/{1}', parameters('storageAccountName'), variables('name'))]",
                      "name": "[if(not(empty(parameters('diagnosticSettingsName'))), parameters('diagnosticSettingsName'), format('{0}-diagnosticSettings', variables('name')))]",
                      "properties": {
                        "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                        "workspaceId": "[if(not(empty(parameters('diagnosticWorkspaceId'))), parameters('diagnosticWorkspaceId'), null())]",
                        "eventHubAuthorizationRuleId": "[if(not(empty(parameters('diagnosticEventHubAuthorizationRuleId'))), parameters('diagnosticEventHubAuthorizationRuleId'), null())]",
                        "eventHubName": "[if(not(empty(parameters('diagnosticEventHubName'))), parameters('diagnosticEventHubName'), null())]",
                        "metrics": "[variables('diagnosticsMetrics')]",
                        "logs": "[variables('diagnosticsLogs')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts/tableServices', parameters('storageAccountName'), variables('name'))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "tableServices_tables",
                        "count": "[length(parameters('tables'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('Table-{0}-{1}', copyIndex(), deployment().name)]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[parameters('tables')[copyIndex()]]"
                          },
                          "storageAccountName": {
                            "value": "[parameters('storageAccountName')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.33.93.31351",
                              "templateHash": "11562923573583360758"
                            },
                            "name": "Storage Account Table",
                            "description": "This module deploys a Storage Account Table.",
                            "owner": "Azure/module-maintainers"
                          },
                          "parameters": {
                            "storageAccountName": {
                              "type": "string",
                              "maxLength": 24,
                              "metadata": {
                                "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                              }
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the table."
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Storage/storageAccounts/tableServices/tables",
                              "apiVersion": "2021-09-01",
                              "name": "[format('{0}/{1}/{2}', parameters('storageAccountName'), 'default', parameters('name'))]"
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the deployed file share service."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the deployed file share service."
                              },
                              "value": "[resourceId('Microsoft.Storage/storageAccounts/tableServices/tables', parameters('storageAccountName'), 'default', parameters('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group of the deployed file share service."
                              },
                              "value": "[resourceGroup().name]"
                            }
                          }
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the deployed table service."
                      },
                      "value": "[variables('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the deployed table service."
                      },
                      "value": "[resourceId('Microsoft.Storage/storageAccounts/tableServices', parameters('storageAccountName'), variables('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group of the deployed table service."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('name'))]"
              ]
            }
          ],
          "outputs": {
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the deployed storage account."
              },
              "value": "[resourceId('Microsoft.Storage/storageAccounts', parameters('name'))]"
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the deployed storage account."
              },
              "value": "[parameters('name')]"
            },
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The resource group of the deployed storage account."
              },
              "value": "[resourceGroup().name]"
            },
            "primaryBlobEndpoint": {
              "type": "string",
              "metadata": {
                "description": "The primary blob endpoint reference if blob services are deployed."
              },
              "value": "[if(and(not(empty(parameters('blobServices'))), contains(parameters('blobServices'), 'containers')), reference(format('Microsoft.Storage/storageAccounts/{0}', parameters('name')), '2019-04-01').primaryEndpoints.blob, '')]"
            },
            "systemAssignedPrincipalId": {
              "type": "string",
              "metadata": {
                "description": "The principal ID of the system assigned identity."
              },
              "value": "[if(and(parameters('systemAssignedIdentity'), contains(reference(resourceId('Microsoft.Storage/storageAccounts', parameters('name')), '2022-09-01', 'full').identity, 'principalId')), reference(resourceId('Microsoft.Storage/storageAccounts', parameters('name')), '2022-09-01', 'full').identity.principalId, '')]"
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location the resource was deployed into."
              },
              "value": "[reference(resourceId('Microsoft.Storage/storageAccounts', parameters('name')), '2022-09-01', 'full').location]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('imageBuildResourceGroupName'))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}Orchestration-VM-{1}', variables('depPrefix'), parameters('timeStamp'))]",
      "resourceGroup": "[variables('imageBuildResourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('subnetResourceId'), '/')[2], split(parameters('subnetResourceId'), '/')[4]), 'Microsoft.Network/virtualNetworks', split(parameters('subnetResourceId'), '/')[8]), '2023-05-01', 'full').location]"
          },
          "name": {
            "value": "[variables('orchestrationVmName')]"
          },
          "adminPassword": {
            "value": "[variables('adminPw')]"
          },
          "adminUsername": {
            "value": "[variables('adminUserName')]"
          },
          "encryptionAtHost": {
            "value": "[parameters('encryptionAtHost')]"
          },
          "imageReference": {
            "value": {
              "publisher": "MicrosoftWindowsServer",
              "offer": "WindowsServer",
              "sku": "2019-datacenter-core-g2",
              "version": "latest"
            }
          },
          "nicConfigurations": {
            "value": [
              {
                "deleteOption": "Delete",
                "enableAcceleratedNetworking": false,
                "ipConfigurations": [
                  {
                    "name": "ipconfig01",
                    "subnetResourceId": "[parameters('subnetResourceId')]"
                  }
                ],
                "nicSuffix": "-nic-01"
              }
            ]
          },
          "osDisk": {
            "value": {
              "caching": "None",
              "createOption": "fromImage",
              "deleteOption": "Delete",
              "diskSizeGB": "128",
              "managedDisk": {
                "storageAccountType": "Standard_LRS"
              }
            }
          },
          "osType": {
            "value": "Windows"
          },
          "tags": {
            "value": "[coalesce(tryGet(parameters('tags'), 'Microsoft.Compute/virtualMachines'), createObject())]"
          },
          "userAssignedIdentities": "[if(empty(parameters('userAssignedIdentityResourceId')), createObject('value', createObject(format('{0}', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('imageBuildResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}ManagedIdentity-{1}', variables('depPrefix'), parameters('timeStamp'))), '2022-09-01').outputs.resourceId.value), createObject())), createObject('value', createObject(format('{0}', parameters('userAssignedIdentityResourceId')), createObject())))]",
          "vmSize": {
            "value": "Standard_B2s"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.33.93.31351",
              "templateHash": "18274689160111715520"
            },
            "name": "Virtual Machines",
            "description": "This module deploys a Virtual Machine with one or multiple NICs and optionally one or multiple public IPs.",
            "owner": "Azure/module-maintainers"
          },
          "parameters": {
            "name": {
              "type": "string",
              "defaultValue": "[take(toLower(uniqueString(resourceGroup().name)), 10)]",
              "metadata": {
                "description": "Optional. The name of the virtual machine to be created. You should use a unique prefix to reduce name collisions in Active Directory. If no value is provided, a 10 character long unique string will be generated based on the Resource Group's name."
              }
            },
            "computerName": {
              "type": "string",
              "defaultValue": "[parameters('name')]",
              "metadata": {
                "description": "Optional. Can be used if the computer name needs to be different from the Azure VM resource name. If not used, the resource name will be used as computer name."
              }
            },
            "vmSize": {
              "type": "string",
              "metadata": {
                "description": "Required. Specifies the size for the VMs."
              }
            },
            "encryptionAtHost": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. This property can be used by user in the request to enable or disable the Host Encryption for the virtual machine. This will enable the encryption for all the disks including Resource/Temp disk at host itself. For security reasons, it is recommended to set encryptionAtHost to True. Restrictions: Cannot be enabled if Azure Disk Encryption (guest-VM encryption using bitlocker/DM-Crypt) is enabled on your VMs."
              }
            },
            "securityType": {
              "type": "string",
              "defaultValue": "Standard",
              "allowedValues": [
                "TrustedLaunch",
                "ConfidentialVM",
                "Standard"
              ],
              "metadata": {
                "description": "Optional. Specifies the SecurityType of the virtual machine. It is set as TrustedLaunch to enable UefiSettings."
              }
            },
            "secureBootEnabled": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Specifies whether secure boot should be enabled on the virtual machine. This parameter is part of the UefiSettings. SecurityType should be set to TrustedLaunch to enable UefiSettings."
              }
            },
            "vTpmEnabled": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Specifies whether vTPM should be enabled on the virtual machine. This parameter is part of the UefiSettings.  SecurityType should be set to TrustedLaunch to enable UefiSettings."
              }
            },
            "imageReference": {
              "type": "object",
              "metadata": {
                "description": "Required. OS image reference. In case of marketplace images, it's the combination of the publisher, offer, sku, version attributes. In case of custom images it's the resource ID of the custom image."
              }
            },
            "plan": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Specifies information about the marketplace image used to create the virtual machine. This element is only used for marketplace images. Before you can use a marketplace image from an API, you must enable the image for programmatic use."
              }
            },
            "osDisk": {
              "type": "object",
              "metadata": {
                "description": "Required. Specifies the OS disk. For security reasons, it is recommended to specify DiskEncryptionSet into the osDisk object.  Restrictions: DiskEncryptionSet cannot be enabled if Azure Disk Encryption (guest-VM encryption using bitlocker/DM-Crypt) is enabled on your VMs."
              }
            },
            "dataDisks": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. Specifies the data disks. For security reasons, it is recommended to specify DiskEncryptionSet into the dataDisk object. Restrictions: DiskEncryptionSet cannot be enabled if Azure Disk Encryption (guest-VM encryption using bitlocker/DM-Crypt) is enabled on your VMs."
              }
            },
            "ultraSSDEnabled": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. The flag that enables or disables a capability to have one or more managed data disks with UltraSSD_LRS storage account type on the VM or VMSS. Managed disks with storage account type UltraSSD_LRS can be added to a virtual machine or virtual machine scale set only if this property is enabled."
              }
            },
            "adminUsername": {
              "type": "securestring",
              "metadata": {
                "description": "Required. Administrator username."
              }
            },
            "adminPassword": {
              "type": "securestring",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. When specifying a Windows Virtual Machine, this value should be passed."
              }
            },
            "customData": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Custom data associated to the VM, this value will be automatically converted into base64 to account for the expected VM format."
              }
            },
            "certificatesToBeInstalled": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. Specifies set of certificates that should be installed onto the virtual machine."
              }
            },
            "priority": {
              "type": "string",
              "defaultValue": "Regular",
              "allowedValues": [
                "Regular",
                "Low",
                "Spot"
              ],
              "metadata": {
                "description": "Optional. Specifies the priority for the virtual machine."
              }
            },
            "enableEvictionPolicy": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Specifies the eviction policy for the low priority virtual machine. Will result in 'Deallocate' eviction policy."
              }
            },
            "maxPriceForLowPriorityVm": {
              "type": "int",
              "defaultValue": -1,
              "metadata": {
                "description": "Optional. Specifies the maximum price you are willing to pay for a low priority VM/VMSS. This price is in US Dollars."
              }
            },
            "dedicatedHostId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Specifies resource ID about the dedicated host that the virtual machine resides in."
              }
            },
            "licenseType": {
              "type": "string",
              "defaultValue": "",
              "allowedValues": [
                "Windows_Client",
                "Windows_Server",
                ""
              ],
              "metadata": {
                "description": "Optional. Specifies that the image or disk that is being used was licensed on-premises. This element is only used for images that contain the Windows Server operating system."
              }
            },
            "publicKeys": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. The list of SSH public keys used to authenticate with linux based VMs."
              }
            },
            "systemAssignedIdentity": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Enables system assigned managed identity on the resource. The system-assigned managed identity will automatically be enabled if extensionAadJoinConfig.enabled = \"True\"."
              }
            },
            "userAssignedIdentities": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. The ID(s) to assign to the resource."
              }
            },
            "bootDiagnostics": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Whether boot diagnostics should be enabled on the Virtual Machine. Boot diagnostics will be enabled with a managed storage account if no bootDiagnosticsStorageAccountName value is provided. If bootDiagnostics and bootDiagnosticsStorageAccountName values are not provided, boot diagnostics will be disabled."
              }
            },
            "bootDiagnosticStorageAccountName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Custom storage account used to store boot diagnostic information. Boot diagnostics will be enabled with a custom storage account if a value is provided."
              }
            },
            "bootDiagnosticStorageAccountUri": {
              "type": "string",
              "defaultValue": "[format('.blob.{0}/', environment().suffixes.storage)]",
              "metadata": {
                "description": "Optional. Storage account boot diagnostic base URI."
              }
            },
            "proximityPlacementGroupResourceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of a proximity placement group."
              }
            },
            "availabilitySetResourceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of an availability set. Cannot be used in combination with availability zone nor scale set."
              }
            },
            "availabilityZone": {
              "type": "int",
              "defaultValue": 0,
              "allowedValues": [
                0,
                1,
                2,
                3
              ],
              "metadata": {
                "description": "Optional. If set to 1, 2 or 3, the availability zone for all VMs is hardcoded to that value. If zero, then availability zones is not used. Cannot be used in combination with availability set nor scale set."
              }
            },
            "nicConfigurations": {
              "type": "array",
              "metadata": {
                "description": "Required. Configures NICs and PIPs."
              }
            },
            "pipDiagnosticSettingsName": {
              "type": "string",
              "defaultValue": "[format('{0}-diagnosticSettings', parameters('name'))]",
              "metadata": {
                "description": "Optional. The name of the PIP diagnostic setting, if deployed."
              }
            },
            "pipdiagnosticLogCategoriesToEnable": {
              "type": "array",
              "defaultValue": [
                "allLogs"
              ],
              "allowedValues": [
                "",
                "allLogs",
                "DDoSProtectionNotifications",
                "DDoSMitigationFlowLogs",
                "DDoSMitigationReports"
              ],
              "metadata": {
                "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to '' to disable log collection."
              }
            },
            "pipdiagnosticMetricsToEnable": {
              "type": "array",
              "defaultValue": [
                "AllMetrics"
              ],
              "allowedValues": [
                "AllMetrics"
              ],
              "metadata": {
                "description": "Optional. The name of metrics that will be streamed."
              }
            },
            "nicDiagnosticSettingsName": {
              "type": "string",
              "defaultValue": "[format('{0}-diagnosticSettings', parameters('name'))]",
              "metadata": {
                "description": "Optional. The name of the NIC diagnostic setting, if deployed."
              }
            },
            "nicdiagnosticMetricsToEnable": {
              "type": "array",
              "defaultValue": [
                "AllMetrics"
              ],
              "allowedValues": [
                "AllMetrics"
              ],
              "metadata": {
                "description": "Optional. The name of metrics that will be streamed."
              }
            },
            "allowExtensionOperations": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Specifies whether extension operations should be allowed on the virtual machine. This may only be set to False when no extensions are present on the virtual machine."
              }
            },
            "extensionDomainJoinPassword": {
              "type": "securestring",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Required if name is specified. Password of the user specified in user parameter."
              }
            },
            "extensionDomainJoinConfig": {
              "type": "object",
              "defaultValue": {
                "enabled": false
              },
              "metadata": {
                "description": "Optional. The configuration for the [Domain Join] extension. Must at least contain the [\"enabled\": true] property to be executed."
              }
            },
            "extensionAadJoinConfig": {
              "type": "object",
              "defaultValue": {
                "enabled": false
              },
              "metadata": {
                "description": "Optional. The configuration for the [AAD Join] extension. Must at least contain the [\"enabled\": true] property to be executed."
              }
            },
            "extensionAntiMalwareConfig": {
              "type": "object",
              "defaultValue": {
                "enabled": false
              },
              "metadata": {
                "description": "Optional. The configuration for the [Anti Malware] extension. Must at least contain the [\"enabled\": true] property to be executed."
              }
            },
            "extensionMonitoringAgentConfig": {
              "type": "object",
              "defaultValue": {
                "enabled": false
              },
              "metadata": {
                "description": "Optional. The configuration for the [Monitoring Agent] extension. Must at least contain the [\"enabled\": true] property to be executed."
              }
            },
            "monitoringWorkspaceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of the monitoring log analytics workspace. Must be set when extensionMonitoringAgentConfig is set to true."
              }
            },
            "extensionDependencyAgentConfig": {
              "type": "object",
              "defaultValue": {
                "enabled": false
              },
              "metadata": {
                "description": "Optional. The configuration for the [Dependency Agent] extension. Must at least contain the [\"enabled\": true] property to be executed."
              }
            },
            "extensionNetworkWatcherAgentConfig": {
              "type": "object",
              "defaultValue": {
                "enabled": false
              },
              "metadata": {
                "description": "Optional. The configuration for the [Network Watcher Agent] extension. Must at least contain the [\"enabled\": true] property to be executed."
              }
            },
            "extensionAzureDiskEncryptionConfig": {
              "type": "object",
              "defaultValue": {
                "enabled": false
              },
              "metadata": {
                "description": "Optional. The configuration for the [Azure Disk Encryption] extension. Must at least contain the [\"enabled\": true] property to be executed. Restrictions: Cannot be enabled on disks that have encryption at host enabled. Managed disks encrypted using Azure Disk Encryption cannot be encrypted using customer-managed keys."
              }
            },
            "extensionDSCConfig": {
              "type": "object",
              "defaultValue": {
                "enabled": false
              },
              "metadata": {
                "description": "Optional. The configuration for the [Desired State Configuration] extension. Must at least contain the [\"enabled\": true] property to be executed."
              }
            },
            "extensionCustomScriptConfig": {
              "type": "object",
              "defaultValue": {
                "enabled": false,
                "fileData": []
              },
              "metadata": {
                "description": "Optional. The configuration for the [Custom Script] extension. Must at least contain the [\"enabled\": true] property to be executed."
              }
            },
            "extensionCustomScriptProtectedSetting": {
              "type": "secureObject",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Any object that contains the extension specific protected settings."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all resources."
              }
            },
            "diagnosticStorageAccountId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of the diagnostic storage account."
              }
            },
            "diagnosticWorkspaceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of the diagnostic log analytics workspace."
              }
            },
            "diagnosticEventHubAuthorizationRuleId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
              }
            },
            "diagnosticEventHubName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Tags of the resource."
              }
            },
            "baseTime": {
              "type": "string",
              "defaultValue": "[utcNow('u')]",
              "metadata": {
                "description": "Generated. Do not provide a value! This date value is used to generate a registration token."
              }
            },
            "sasTokenValidityLength": {
              "type": "string",
              "defaultValue": "PT8H",
              "metadata": {
                "description": "Optional. SAS token validity length to use to download files from storage accounts. Usage: 'PT8H' - valid for 8 hours; 'P5D' - valid for 5 days; 'P1Y' - valid for 1 year. When not provided, the SAS token will be valid for 8 hours."
              }
            },
            "osType": {
              "type": "string",
              "allowedValues": [
                "Windows",
                "Linux"
              ],
              "metadata": {
                "description": "Required. The chosen OS type."
              }
            },
            "disablePasswordAuthentication": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Specifies whether password authentication should be disabled."
              }
            },
            "provisionVMAgent": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Indicates whether virtual machine agent should be provisioned on the virtual machine. When this property is not specified in the request body, default behavior is to set it to true. This will ensure that VM Agent is installed on the VM so that extensions can be added to the VM later."
              }
            },
            "enableAutomaticUpdates": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Indicates whether Automatic Updates is enabled for the Windows virtual machine. Default value is true. When patchMode is set to Manual, this parameter must be set to false. For virtual machine scale sets, this property can be updated and updates will take effect on OS reprovisioning."
              }
            },
            "patchMode": {
              "type": "string",
              "defaultValue": "",
              "allowedValues": [
                "AutomaticByPlatform",
                "AutomaticByOS",
                "Manual",
                "ImageDefault",
                ""
              ],
              "metadata": {
                "description": "Optional. VM guest patching orchestration mode. 'AutomaticByOS' & 'Manual' are for Windows only, 'ImageDefault' for Linux only. Refer to 'https://learn.microsoft.com/en-us/azure/virtual-machines/automatic-vm-guest-patching'."
              }
            },
            "patchAssessmentMode": {
              "type": "string",
              "defaultValue": "ImageDefault",
              "allowedValues": [
                "AutomaticByPlatform",
                "ImageDefault"
              ],
              "metadata": {
                "description": "Optional. VM guest patching assessment mode. Set it to 'AutomaticByPlatform' to enable automatically check for updates every 24 hours."
              }
            },
            "timeZone": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Specifies the time zone of the virtual machine. e.g. 'Pacific Standard Time'. Possible values can be `TimeZoneInfo.id` value from time zones returned by `TimeZoneInfo.GetSystemTimeZones`."
              }
            },
            "additionalUnattendContent": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. Specifies additional base-64 encoded XML formatted information that can be included in the Unattend.xml file, which is used by Windows Setup. - AdditionalUnattendContent object."
              }
            },
            "winRM": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. Specifies the Windows Remote Management listeners. This enables remote Windows PowerShell. - WinRMConfiguration object."
              }
            },
            "configurationProfile": {
              "type": "string",
              "defaultValue": "",
              "allowedValues": [
                "/providers/Microsoft.Automanage/bestPractices/AzureBestPracticesProduction",
                "/providers/Microsoft.Automanage/bestPractices/AzureBestPracticesDevTest",
                ""
              ],
              "metadata": {
                "description": "Required. The configuration profile of automanage."
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "publicKeysFormatted",
                "count": "[length(parameters('publicKeys'))]",
                "input": {
                  "path": "[parameters('publicKeys')[copyIndex('publicKeysFormatted')].path]",
                  "keyData": "[parameters('publicKeys')[copyIndex('publicKeysFormatted')].keyData]"
                }
              }
            ],
            "linuxConfiguration": {
              "disablePasswordAuthentication": "[parameters('disablePasswordAuthentication')]",
              "ssh": {
                "publicKeys": "[variables('publicKeysFormatted')]"
              },
              "provisionVMAgent": "[parameters('provisionVMAgent')]",
              "patchSettings": "[if(and(parameters('provisionVMAgent'), or(equals(toLower(parameters('patchMode')), toLower('AutomaticByPlatform')), equals(toLower(parameters('patchMode')), toLower('ImageDefault')))), createObject('patchMode', parameters('patchMode'), 'assessmentMode', parameters('patchAssessmentMode')), null())]"
            },
            "windowsConfiguration": {
              "provisionVMAgent": "[parameters('provisionVMAgent')]",
              "enableAutomaticUpdates": "[parameters('enableAutomaticUpdates')]",
              "patchSettings": "[if(and(parameters('provisionVMAgent'), or(or(equals(toLower(parameters('patchMode')), toLower('AutomaticByPlatform')), equals(toLower(parameters('patchMode')), toLower('AutomaticByOS'))), equals(toLower(parameters('patchMode')), toLower('Manual')))), createObject('patchMode', parameters('patchMode'), 'assessmentMode', parameters('patchAssessmentMode')), null())]",
              "timeZone": "[if(empty(parameters('timeZone')), null(), parameters('timeZone'))]",
              "additionalUnattendContent": "[if(empty(parameters('additionalUnattendContent')), null(), parameters('additionalUnattendContent'))]",
              "winRM": "[if(not(empty(parameters('winRM'))), createObject('listeners', parameters('winRM')), null())]"
            },
            "accountSasProperties": {
              "signedServices": "b",
              "signedPermission": "r",
              "signedExpiry": "[dateTimeAdd(parameters('baseTime'), parameters('sasTokenValidityLength'))]",
              "signedResourceTypes": "o",
              "signedProtocol": "https"
            },
            "identityType": "[if(if(parameters('extensionAadJoinConfig').enabled, true(), parameters('systemAssignedIdentity')), if(not(empty(parameters('userAssignedIdentities'))), 'SystemAssigned, UserAssigned', 'SystemAssigned'), if(not(empty(parameters('userAssignedIdentities'))), 'UserAssigned', 'None'))]",
            "identity": "[if(not(equals(variables('identityType'), 'None')), createObject('type', variables('identityType'), 'userAssignedIdentities', if(not(empty(parameters('userAssignedIdentities'))), parameters('userAssignedIdentities'), null())), null())]"
          },
          "resources": [
            {
              "type": "Microsoft.Compute/virtualMachines",
              "apiVersion": "2022-11-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "identity": "[variables('identity')]",
              "tags": "[parameters('tags')]",
              "zones": "[if(not(equals(parameters('availabilityZone'), 0)), array(parameters('availabilityZone')), null())]",
              "plan": "[if(not(empty(parameters('plan'))), parameters('plan'), null())]",
              "properties": {
                "hardwareProfile": {
                  "vmSize": "[parameters('vmSize')]"
                },
                "securityProfile": {
                  "encryptionAtHost": "[if(parameters('encryptionAtHost'), parameters('encryptionAtHost'), null())]",
                  "securityType": "[if(not(equals(parameters('securityType'), 'Standard')), parameters('securityType'), null())]",
                  "uefiSettings": "[if(not(equals(parameters('securityType'), 'Standard')), createObject('secureBootEnabled', parameters('secureBootEnabled'), 'vTpmEnabled', parameters('vTpmEnabled')), null())]"
                },
                "storageProfile": {
                  "copy": [
                    {
                      "name": "dataDisks",
                      "count": "[length(parameters('dataDisks'))]",
                      "input": {
                        "lun": "[copyIndex('dataDisks')]",
                        "name": "[format('{0}-disk-data-{1}', parameters('name'), padLeft(add(copyIndex('dataDisks'), 1), 2, '0'))]",
                        "diskSizeGB": "[parameters('dataDisks')[copyIndex('dataDisks')].diskSizeGB]",
                        "createOption": "[coalesce(tryGet(parameters('dataDisks')[copyIndex('dataDisks')], 'createOption'), 'Empty')]",
                        "deleteOption": "[coalesce(tryGet(parameters('dataDisks')[copyIndex('dataDisks')], 'deleteOption'), 'Delete')]",
                        "caching": "[coalesce(tryGet(parameters('dataDisks')[copyIndex('dataDisks')], 'caching'), 'ReadOnly')]",
                        "managedDisk": {
                          "storageAccountType": "[parameters('dataDisks')[copyIndex('dataDisks')].managedDisk.storageAccountType]",
                          "diskEncryptionSet": "[if(contains(parameters('dataDisks')[copyIndex('dataDisks')].managedDisk, 'diskEncryptionSet'), createObject('id', parameters('dataDisks')[copyIndex('dataDisks')].managedDisk.diskEncryptionSet.id), null())]"
                        }
                      }
                    }
                  ],
                  "imageReference": "[parameters('imageReference')]",
                  "osDisk": {
                    "name": "[format('{0}-disk-os-01', parameters('name'))]",
                    "createOption": "[coalesce(tryGet(parameters('osDisk'), 'createOption'), 'FromImage')]",
                    "deleteOption": "[coalesce(tryGet(parameters('osDisk'), 'deleteOption'), 'Delete')]",
                    "diskSizeGB": "[parameters('osDisk').diskSizeGB]",
                    "caching": "[coalesce(tryGet(parameters('osDisk'), 'caching'), 'ReadOnly')]",
                    "managedDisk": {
                      "storageAccountType": "[parameters('osDisk').managedDisk.storageAccountType]",
                      "diskEncryptionSet": "[if(contains(parameters('osDisk').managedDisk, 'diskEncryptionSet'), createObject('id', parameters('osDisk').managedDisk.diskEncryptionSet.id), null())]"
                    }
                  }
                },
                "additionalCapabilities": {
                  "ultraSSDEnabled": "[parameters('ultraSSDEnabled')]"
                },
                "osProfile": {
                  "computerName": "[parameters('computerName')]",
                  "adminUsername": "[parameters('adminUsername')]",
                  "adminPassword": "[parameters('adminPassword')]",
                  "customData": "[if(not(empty(parameters('customData'))), base64(parameters('customData')), null())]",
                  "windowsConfiguration": "[if(equals(parameters('osType'), 'Windows'), variables('windowsConfiguration'), null())]",
                  "linuxConfiguration": "[if(equals(parameters('osType'), 'Linux'), variables('linuxConfiguration'), null())]",
                  "secrets": "[parameters('certificatesToBeInstalled')]",
                  "allowExtensionOperations": "[parameters('allowExtensionOperations')]"
                },
                "networkProfile": {
                  "copy": [
                    {
                      "name": "networkInterfaces",
                      "count": "[length(parameters('nicConfigurations'))]",
                      "input": {
                        "properties": {
                          "deleteOption": "[coalesce(tryGet(parameters('nicConfigurations')[copyIndex('networkInterfaces')], 'deleteOption'), 'Delete')]",
                          "primary": "[if(equals(copyIndex('networkInterfaces'), 0), true(), false())]"
                        },
                        "id": "[resourceId('Microsoft.Network/networkInterfaces', format('{0}{1}', parameters('name'), parameters('nicConfigurations')[copyIndex('networkInterfaces')].nicSuffix))]"
                      }
                    }
                  ]
                },
                "diagnosticsProfile": {
                  "bootDiagnostics": {
                    "enabled": "[if(not(empty(parameters('bootDiagnosticStorageAccountName'))), true(), parameters('bootDiagnostics'))]",
                    "storageUri": "[if(not(empty(parameters('bootDiagnosticStorageAccountName'))), format('https://{0}{1}', parameters('bootDiagnosticStorageAccountName'), parameters('bootDiagnosticStorageAccountUri')), null())]"
                  }
                },
                "availabilitySet": "[if(not(empty(parameters('availabilitySetResourceId'))), createObject('id', parameters('availabilitySetResourceId')), null())]",
                "proximityPlacementGroup": "[if(not(empty(parameters('proximityPlacementGroupResourceId'))), createObject('id', parameters('proximityPlacementGroupResourceId')), null())]",
                "priority": "[parameters('priority')]",
                "evictionPolicy": "[if(parameters('enableEvictionPolicy'), 'Deallocate', null())]",
                "billingProfile": "[if(and(not(empty(parameters('priority'))), not(equals(parameters('maxPriceForLowPriorityVm'), -1))), createObject('maxPrice', parameters('maxPriceForLowPriorityVm')), null())]",
                "host": "[if(not(empty(parameters('dedicatedHostId'))), createObject('id', parameters('dedicatedHostId')), null())]",
                "licenseType": "[if(not(empty(parameters('licenseType'))), parameters('licenseType'), null())]"
              },
              "dependsOn": [
                "vm_nic"
              ]
            },
            {
              "condition": "[not(empty(parameters('configurationProfile')))]",
              "type": "Microsoft.Automanage/configurationProfileAssignments",
              "apiVersion": "2021-04-30-preview",
              "scope": "[format('Microsoft.Compute/virtualMachines/{0}', parameters('name'))]",
              "name": "default",
              "properties": {
                "configurationProfile": "[parameters('configurationProfile')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
              ]
            },
            {
              "copy": {
                "name": "vm_nic",
                "count": "[length(parameters('nicConfigurations'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-VM-Nic-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "networkInterfaceName": {
                    "value": "[format('{0}{1}', parameters('name'), parameters('nicConfigurations')[copyIndex()].nicSuffix)]"
                  },
                  "virtualMachineName": {
                    "value": "[parameters('name')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "enableIPForwarding": "[if(contains(parameters('nicConfigurations')[copyIndex()], 'enableIPForwarding'), if(not(empty(parameters('nicConfigurations')[copyIndex()].enableIPForwarding)), createObject('value', parameters('nicConfigurations')[copyIndex()].enableIPForwarding), createObject('value', false())), createObject('value', false()))]",
                  "enableAcceleratedNetworking": {
                    "value": "[coalesce(tryGet(parameters('nicConfigurations')[copyIndex()], 'enableAcceleratedNetworking'), true())]"
                  },
                  "dnsServers": "[if(contains(parameters('nicConfigurations')[copyIndex()], 'dnsServers'), if(not(empty(parameters('nicConfigurations')[copyIndex()].dnsServers)), createObject('value', parameters('nicConfigurations')[copyIndex()].dnsServers), createObject('value', createArray())), createObject('value', createArray()))]",
                  "networkSecurityGroupResourceId": {
                    "value": "[coalesce(tryGet(parameters('nicConfigurations')[copyIndex()], 'networkSecurityGroupResourceId'), '')]"
                  },
                  "ipConfigurations": {
                    "value": "[parameters('nicConfigurations')[copyIndex()].ipConfigurations]"
                  },
                  "diagnosticStorageAccountId": {
                    "value": "[parameters('diagnosticStorageAccountId')]"
                  },
                  "diagnosticWorkspaceId": {
                    "value": "[parameters('diagnosticWorkspaceId')]"
                  },
                  "diagnosticEventHubAuthorizationRuleId": {
                    "value": "[parameters('diagnosticEventHubAuthorizationRuleId')]"
                  },
                  "diagnosticEventHubName": {
                    "value": "[parameters('diagnosticEventHubName')]"
                  },
                  "pipDiagnosticSettingsName": {
                    "value": "[parameters('pipDiagnosticSettingsName')]"
                  },
                  "nicDiagnosticSettingsName": {
                    "value": "[parameters('nicDiagnosticSettingsName')]"
                  },
                  "pipdiagnosticMetricsToEnable": {
                    "value": "[parameters('pipdiagnosticMetricsToEnable')]"
                  },
                  "pipdiagnosticLogCategoriesToEnable": {
                    "value": "[parameters('pipdiagnosticLogCategoriesToEnable')]"
                  },
                  "nicDiagnosticMetricsToEnable": {
                    "value": "[parameters('nicdiagnosticMetricsToEnable')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.33.93.31351",
                      "templateHash": "14484357329155131419"
                    }
                  },
                  "parameters": {
                    "networkInterfaceName": {
                      "type": "string"
                    },
                    "virtualMachineName": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "enableIPForwarding": {
                      "type": "bool",
                      "defaultValue": false
                    },
                    "enableAcceleratedNetworking": {
                      "type": "bool",
                      "defaultValue": false
                    },
                    "dnsServers": {
                      "type": "array",
                      "defaultValue": []
                    },
                    "networkSecurityGroupResourceId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The network security group (NSG) to attach to the network interface."
                      }
                    },
                    "ipConfigurations": {
                      "type": "array"
                    },
                    "diagnosticStorageAccountId": {
                      "type": "string"
                    },
                    "diagnosticWorkspaceId": {
                      "type": "string"
                    },
                    "diagnosticEventHubAuthorizationRuleId": {
                      "type": "string"
                    },
                    "diagnosticEventHubName": {
                      "type": "string"
                    },
                    "pipdiagnosticMetricsToEnable": {
                      "type": "array"
                    },
                    "pipdiagnosticLogCategoriesToEnable": {
                      "type": "array"
                    },
                    "nicDiagnosticMetricsToEnable": {
                      "type": "array"
                    },
                    "pipDiagnosticSettingsName": {
                      "type": "string",
                      "defaultValue": "[format('{0}-diagnosticSettings', parameters('virtualMachineName'))]",
                      "metadata": {
                        "description": "Optional. The name of the PIP diagnostic setting, if deployed."
                      }
                    },
                    "nicDiagnosticSettingsName": {
                      "type": "string",
                      "defaultValue": "[format('{0}-diagnosticSettings', parameters('virtualMachineName'))]",
                      "metadata": {
                        "description": "Optional. The name of the NIC diagnostic setting, if deployed."
                      }
                    }
                  },
                  "resources": [
                    {
                      "copy": {
                        "name": "networkInterface_publicIPAddresses",
                        "count": "[length(parameters('ipConfigurations'))]"
                      },
                      "condition": "[contains(parameters('ipConfigurations')[copyIndex()], 'pipconfiguration')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-publicIP-{1}', deployment().name, copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[format('{0}{1}', parameters('virtualMachineName'), parameters('ipConfigurations')[copyIndex()].pipconfiguration.publicIpNameSuffix)]"
                          },
                          "diagnosticEventHubAuthorizationRuleId": {
                            "value": "[parameters('diagnosticEventHubAuthorizationRuleId')]"
                          },
                          "diagnosticEventHubName": {
                            "value": "[parameters('diagnosticEventHubName')]"
                          },
                          "diagnosticLogCategoriesToEnable": {
                            "value": "[parameters('pipdiagnosticLogCategoriesToEnable')]"
                          },
                          "diagnosticMetricsToEnable": {
                            "value": "[parameters('pipdiagnosticMetricsToEnable')]"
                          },
                          "diagnosticSettingsName": {
                            "value": "[parameters('pipDiagnosticSettingsName')]"
                          },
                          "diagnosticStorageAccountId": {
                            "value": "[parameters('diagnosticStorageAccountId')]"
                          },
                          "diagnosticWorkspaceId": {
                            "value": "[parameters('diagnosticWorkspaceId')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "publicIPAddressVersion": {
                            "value": "[coalesce(tryGet(parameters('ipConfigurations')[copyIndex()], 'publicIPAddressVersion'), 'IPv4')]"
                          },
                          "publicIPAllocationMethod": {
                            "value": "[coalesce(tryGet(parameters('ipConfigurations')[copyIndex()], 'publicIPAllocationMethod'), 'Static')]"
                          },
                          "publicIPPrefixResourceId": {
                            "value": "[coalesce(tryGet(parameters('ipConfigurations')[copyIndex()], 'publicIPPrefixResourceId'), '')]"
                          },
                          "skuName": {
                            "value": "[coalesce(tryGet(parameters('ipConfigurations')[copyIndex()], 'skuName'), 'Standard')]"
                          },
                          "skuTier": {
                            "value": "[coalesce(tryGet(parameters('ipConfigurations')[copyIndex()], 'skuTier'), 'Regional')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "zones": {
                            "value": "[coalesce(tryGet(parameters('ipConfigurations')[copyIndex()], 'zones'), createArray())]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.33.93.31351",
                              "templateHash": "15720807152690696617"
                            },
                            "name": "Public IP Addresses",
                            "description": "This module deploys a Public IP Address.",
                            "owner": "Azure/module-maintainers"
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the Public IP Address."
                              }
                            },
                            "publicIPPrefixResourceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of the Public IP Prefix object. This is only needed if you want your Public IPs created in a PIP Prefix."
                              }
                            },
                            "publicIPAllocationMethod": {
                              "type": "string",
                              "defaultValue": "Static",
                              "allowedValues": [
                                "Dynamic",
                                "Static"
                              ],
                              "metadata": {
                                "description": "Optional. The public IP address allocation method."
                              }
                            },
                            "skuName": {
                              "type": "string",
                              "defaultValue": "Standard",
                              "allowedValues": [
                                "Basic",
                                "Standard"
                              ],
                              "metadata": {
                                "description": "Optional. Name of a public IP address SKU."
                              }
                            },
                            "skuTier": {
                              "type": "string",
                              "defaultValue": "Regional",
                              "allowedValues": [
                                "Global",
                                "Regional"
                              ],
                              "metadata": {
                                "description": "Optional. Tier of a public IP address SKU."
                              }
                            },
                            "zones": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. A list of availability zones denoting the IP allocated for the resource needs to come from."
                              }
                            },
                            "publicIPAddressVersion": {
                              "type": "string",
                              "defaultValue": "IPv4",
                              "allowedValues": [
                                "IPv4",
                                "IPv6"
                              ],
                              "metadata": {
                                "description": "Optional. IP address version."
                              }
                            },
                            "diagnosticStorageAccountId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of the diagnostic storage account."
                              }
                            },
                            "diagnosticWorkspaceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of the diagnostic log analytics workspace."
                              }
                            },
                            "diagnosticEventHubAuthorizationRuleId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                              }
                            },
                            "diagnosticEventHubName": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
                              }
                            },
                            "domainNameLabel": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The domain name label. The concatenation of the domain name label and the regionalized DNS zone make up the fully qualified domain name associated with the public IP address. If a domain name label is specified, an A DNS record is created for the public IP in the Microsoft Azure DNS system."
                              }
                            },
                            "domainNameLabelScope": {
                              "type": "string",
                              "defaultValue": "",
                              "allowedValues": [
                                "",
                                "NoReuse",
                                "ResourceGroupReuse",
                                "SubscriptionReuse",
                                "TenantReuse"
                              ],
                              "metadata": {
                                "description": "Optional. The domain name label scope. If a domain name label and a domain name label scope are specified, an A DNS record is created for the public IP in the Microsoft Azure DNS system with a hashed value includes in FQDN."
                              }
                            },
                            "fqdn": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The Fully Qualified Domain Name of the A DNS record associated with the public IP. This is the concatenation of the domainNameLabel and the regionalized DNS zone."
                              }
                            },
                            "reverseFqdn": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The reverse FQDN. A user-visible, fully qualified domain name that resolves to this public IP address. If the reverseFqdn is specified, then a PTR DNS record is created pointing from the IP address in the in-addr.arpa domain to the reverse FQDN."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. Location for all resources."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Tags of the resource."
                              }
                            },
                            "diagnosticLogCategoriesToEnable": {
                              "type": "array",
                              "defaultValue": [
                                "allLogs"
                              ],
                              "allowedValues": [
                                "",
                                "allLogs",
                                "DDoSProtectionNotifications",
                                "DDoSMitigationFlowLogs",
                                "DDoSMitigationReports"
                              ],
                              "metadata": {
                                "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to '' to disable log collection."
                              }
                            },
                            "diagnosticMetricsToEnable": {
                              "type": "array",
                              "defaultValue": [
                                "AllMetrics"
                              ],
                              "allowedValues": [
                                "AllMetrics"
                              ],
                              "metadata": {
                                "description": "Optional. The name of metrics that will be streamed."
                              }
                            },
                            "diagnosticSettingsName": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The name of the diagnostic setting, if deployed. If left empty, it defaults to \"<resourceName>-diagnosticSettings\"."
                              }
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "diagnosticsLogsSpecified",
                                "count": "[length(filter(parameters('diagnosticLogCategoriesToEnable'), lambda('item', and(not(equals(lambdaVariables('item'), 'allLogs')), not(equals(lambdaVariables('item'), ''))))))]",
                                "input": {
                                  "category": "[filter(parameters('diagnosticLogCategoriesToEnable'), lambda('item', and(not(equals(lambdaVariables('item'), 'allLogs')), not(equals(lambdaVariables('item'), '')))))[copyIndex('diagnosticsLogsSpecified')]]",
                                  "enabled": true
                                }
                              },
                              {
                                "name": "diagnosticsMetrics",
                                "count": "[length(parameters('diagnosticMetricsToEnable'))]",
                                "input": {
                                  "category": "[parameters('diagnosticMetricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                                  "timeGrain": null,
                                  "enabled": true
                                }
                              }
                            ],
                            "diagnosticsLogs": "[if(contains(parameters('diagnosticLogCategoriesToEnable'), 'allLogs'), createArray(createObject('categoryGroup', 'allLogs', 'enabled', true())), if(contains(parameters('diagnosticLogCategoriesToEnable'), ''), createArray(), variables('diagnosticsLogsSpecified')))]"
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/publicIPAddresses",
                              "apiVersion": "2023-04-01",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "sku": {
                                "name": "[parameters('skuName')]",
                                "tier": "[parameters('skuTier')]"
                              },
                              "zones": "[parameters('zones')]",
                              "properties": {
                                "dnsSettings": "[if(not(empty(parameters('domainNameLabel'))), createObject('domainNameLabel', parameters('domainNameLabel'), 'domainNameLabelScope', if(not(empty(parameters('domainNameLabelScope'))), if(equals(parameters('domainNameLabelScope'), 'NoReuse'), 'NoReuse', if(equals(parameters('domainNameLabelScope'), 'ResourceGroupReuse'), 'ResourceGroupReuse', if(equals(parameters('domainNameLabelScope'), 'SubscriptionReuse'), 'SubscriptionReuse', 'TenantReuse'))), null()), 'fqdn', parameters('fqdn'), 'reverseFqdn', parameters('reverseFqdn')), null())]",
                                "publicIPAddressVersion": "[parameters('publicIPAddressVersion')]",
                                "publicIPAllocationMethod": "[parameters('publicIPAllocationMethod')]",
                                "publicIPPrefix": "[if(not(empty(parameters('publicIPPrefixResourceId'))), createObject('id', parameters('publicIPPrefixResourceId')), null())]",
                                "idleTimeoutInMinutes": 4,
                                "ipTags": []
                              }
                            },
                            {
                              "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('diagnosticWorkspaceId')))), not(empty(parameters('diagnosticEventHubAuthorizationRuleId')))), not(empty(parameters('diagnosticEventHubName'))))]",
                              "type": "Microsoft.Insights/diagnosticSettings",
                              "apiVersion": "2021-05-01-preview",
                              "scope": "[format('Microsoft.Network/publicIPAddresses/{0}', parameters('name'))]",
                              "name": "[if(not(empty(parameters('diagnosticSettingsName'))), parameters('diagnosticSettingsName'), format('{0}-diagnosticSettings', parameters('name')))]",
                              "properties": {
                                "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                                "workspaceId": "[if(not(empty(parameters('diagnosticWorkspaceId'))), parameters('diagnosticWorkspaceId'), null())]",
                                "eventHubAuthorizationRuleId": "[if(not(empty(parameters('diagnosticEventHubAuthorizationRuleId'))), parameters('diagnosticEventHubAuthorizationRuleId'), null())]",
                                "eventHubName": "[if(not(empty(parameters('diagnosticEventHubName'))), parameters('diagnosticEventHubName'), null())]",
                                "metrics": "[variables('diagnosticsMetrics')]",
                                "logs": "[variables('diagnosticsLogs')]"
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/publicIPAddresses', parameters('name'))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group the public IP address was deployed into."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the public IP address."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the public IP address."
                              },
                              "value": "[resourceId('Microsoft.Network/publicIPAddresses', parameters('name'))]"
                            },
                            "ipAddress": {
                              "type": "string",
                              "metadata": {
                                "description": "The public IP address of the public IP address resource."
                              },
                              "value": "[coalesce(tryGet(reference(resourceId('Microsoft.Network/publicIPAddresses', parameters('name')), '2023-04-01'), 'ipAddress'), '')]"
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "The location the resource was deployed into."
                              },
                              "value": "[reference(resourceId('Microsoft.Network/publicIPAddresses', parameters('name')), '2023-04-01', 'full').location]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-NetworkInterface', deployment().name)]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[parameters('networkInterfaceName')]"
                          },
                          "ipConfigurations": {
                            "copy": [
                              {
                                "name": "value",
                                "count": "[length(parameters('ipConfigurations'))]",
                                "input": "[createObject('name', if(not(empty(parameters('ipConfigurations')[copyIndex('value')].name)), parameters('ipConfigurations')[copyIndex('value')].name, null()), 'primary', equals(copyIndex('value'), 0), 'privateIPAllocationMethod', if(contains(parameters('ipConfigurations')[copyIndex('value')], 'privateIPAllocationMethod'), if(not(empty(parameters('ipConfigurations')[copyIndex('value')].privateIPAllocationMethod)), parameters('ipConfigurations')[copyIndex('value')].privateIPAllocationMethod, null()), null()), 'privateIPAddress', if(contains(parameters('ipConfigurations')[copyIndex('value')], 'privateIPAddress'), if(not(empty(parameters('ipConfigurations')[copyIndex('value')].privateIPAddress)), parameters('ipConfigurations')[copyIndex('value')].privateIPAddress, null()), null()), 'publicIPAddressResourceId', if(contains(parameters('ipConfigurations')[copyIndex('value')], 'pipconfiguration'), resourceId('Microsoft.Network/publicIPAddresses', format('{0}{1}', parameters('virtualMachineName'), parameters('ipConfigurations')[copyIndex('value')].pipconfiguration.publicIpNameSuffix)), null()), 'subnetResourceId', parameters('ipConfigurations')[copyIndex('value')].subnetResourceId, 'loadBalancerBackendAddressPools', coalesce(tryGet(parameters('ipConfigurations')[copyIndex('value')], 'loadBalancerBackendAddressPools'), null()), 'applicationSecurityGroups', coalesce(tryGet(parameters('ipConfigurations')[copyIndex('value')], 'applicationSecurityGroups'), null()), 'applicationGatewayBackendAddressPools', coalesce(tryGet(parameters('ipConfigurations')[copyIndex('value')], 'applicationGatewayBackendAddressPools'), null()), 'gatewayLoadBalancer', coalesce(tryGet(parameters('ipConfigurations')[copyIndex('value')], 'gatewayLoadBalancer'), null()), 'loadBalancerInboundNatRules', coalesce(tryGet(parameters('ipConfigurations')[copyIndex('value')], 'loadBalancerInboundNatRules'), null()), 'privateIPAddressVersion', coalesce(tryGet(parameters('ipConfigurations')[copyIndex('value')], 'privateIPAddressVersion'), null()), 'virtualNetworkTaps', coalesce(tryGet(parameters('ipConfigurations')[copyIndex('value')], 'virtualNetworkTaps'), null()))]"
                              }
                            ]
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "diagnosticEventHubAuthorizationRuleId": {
                            "value": "[parameters('diagnosticEventHubAuthorizationRuleId')]"
                          },
                          "diagnosticEventHubName": {
                            "value": "[parameters('diagnosticEventHubName')]"
                          },
                          "diagnosticStorageAccountId": {
                            "value": "[parameters('diagnosticStorageAccountId')]"
                          },
                          "diagnosticMetricsToEnable": {
                            "value": "[parameters('nicDiagnosticMetricsToEnable')]"
                          },
                          "diagnosticSettingsName": {
                            "value": "[parameters('nicDiagnosticSettingsName')]"
                          },
                          "diagnosticWorkspaceId": {
                            "value": "[parameters('diagnosticWorkspaceId')]"
                          },
                          "dnsServers": "[if(not(empty(parameters('dnsServers'))), createObject('value', parameters('dnsServers')), createObject('value', createArray()))]",
                          "enableAcceleratedNetworking": {
                            "value": "[parameters('enableAcceleratedNetworking')]"
                          },
                          "enableIPForwarding": {
                            "value": "[parameters('enableIPForwarding')]"
                          },
                          "networkSecurityGroupResourceId": "[if(not(empty(parameters('networkSecurityGroupResourceId'))), createObject('value', parameters('networkSecurityGroupResourceId')), createObject('value', ''))]"
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.33.93.31351",
                              "templateHash": "4954422085139593724"
                            },
                            "name": "Network Interface",
                            "description": "This module deploys a Network Interface.",
                            "owner": "Azure/module-maintainers"
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the network interface."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. Location for all resources."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Tags of the resource."
                              }
                            },
                            "enableIPForwarding": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Indicates whether IP forwarding is enabled on this network interface."
                              }
                            },
                            "enableAcceleratedNetworking": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. If the network interface is accelerated networking enabled."
                              }
                            },
                            "dnsServers": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. List of DNS servers IP addresses. Use 'AzureProvidedDNS' to switch to azure provided DNS resolution. 'AzureProvidedDNS' value cannot be combined with other IPs, it must be the only value in dnsServers collection."
                              }
                            },
                            "networkSecurityGroupResourceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The network security group (NSG) to attach to the network interface."
                              }
                            },
                            "auxiliaryMode": {
                              "type": "string",
                              "defaultValue": "None",
                              "allowedValues": [
                                "Floating",
                                "MaxConnections",
                                "None"
                              ],
                              "metadata": {
                                "description": "Optional. Auxiliary mode of Network Interface resource. Not all regions are enabled for Auxiliary Mode Nic."
                              }
                            },
                            "auxiliarySku": {
                              "type": "string",
                              "defaultValue": "None",
                              "allowedValues": [
                                "A1",
                                "A2",
                                "A4",
                                "A8",
                                "None"
                              ],
                              "metadata": {
                                "description": "Optional. Auxiliary sku of Network Interface resource. Not all regions are enabled for Auxiliary Mode Nic."
                              }
                            },
                            "disableTcpStateTracking": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Indicates whether to disable tcp state tracking. Subscription must be registered for the Microsoft.Network/AllowDisableTcpStateTracking feature before this property can be set to true."
                              }
                            },
                            "ipConfigurations": {
                              "type": "array",
                              "metadata": {
                                "description": "Required. A list of IPConfigurations of the network interface."
                              }
                            },
                            "diagnosticStorageAccountId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of the diagnostic storage account."
                              }
                            },
                            "diagnosticWorkspaceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource identifier of log analytics."
                              }
                            },
                            "diagnosticEventHubAuthorizationRuleId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                              }
                            },
                            "diagnosticEventHubName": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
                              }
                            },
                            "diagnosticMetricsToEnable": {
                              "type": "array",
                              "defaultValue": [
                                "AllMetrics"
                              ],
                              "allowedValues": [
                                "AllMetrics"
                              ],
                              "metadata": {
                                "description": "Optional. The name of metrics that will be streamed."
                              }
                            },
                            "diagnosticSettingsName": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The name of the diagnostic setting, if deployed. If left empty, it defaults to \"<resourceName>-diagnosticSettings\"."
                              }
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "diagnosticsMetrics",
                                "count": "[length(parameters('diagnosticMetricsToEnable'))]",
                                "input": {
                                  "category": "[parameters('diagnosticMetricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                                  "timeGrain": null,
                                  "enabled": true
                                }
                              }
                            ]
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/networkInterfaces",
                              "apiVersion": "2023-04-01",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "copy": [
                                  {
                                    "name": "ipConfigurations",
                                    "count": "[length(parameters('ipConfigurations'))]",
                                    "input": {
                                      "name": "[coalesce(tryGet(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'name'), format('ipconfig0{0}', add(copyIndex('ipConfigurations'), 1)))]",
                                      "properties": {
                                        "primary": "[if(equals(copyIndex('ipConfigurations'), 0), true(), false())]",
                                        "privateIPAllocationMethod": "[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'privateIPAllocationMethod'), if(not(empty(parameters('ipConfigurations')[copyIndex('ipConfigurations')].privateIPAllocationMethod)), parameters('ipConfigurations')[copyIndex('ipConfigurations')].privateIPAllocationMethod, null()), null())]",
                                        "privateIPAddress": "[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'privateIPAddress'), if(not(empty(parameters('ipConfigurations')[copyIndex('ipConfigurations')].privateIPAddress)), parameters('ipConfigurations')[copyIndex('ipConfigurations')].privateIPAddress, null()), null())]",
                                        "publicIPAddress": "[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'publicIPAddressResourceId'), if(not(equals(parameters('ipConfigurations')[copyIndex('ipConfigurations')].publicIPAddressResourceId, null())), createObject('id', parameters('ipConfigurations')[copyIndex('ipConfigurations')].publicIPAddressResourceId), null()), null())]",
                                        "subnet": {
                                          "id": "[parameters('ipConfigurations')[copyIndex('ipConfigurations')].subnetResourceId]"
                                        },
                                        "loadBalancerBackendAddressPools": "[coalesce(tryGet(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'loadBalancerBackendAddressPools'), null())]",
                                        "applicationSecurityGroups": "[coalesce(tryGet(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'applicationSecurityGroups'), null())]",
                                        "applicationGatewayBackendAddressPools": "[coalesce(tryGet(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'applicationGatewayBackendAddressPools'), null())]",
                                        "gatewayLoadBalancer": "[coalesce(tryGet(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'gatewayLoadBalancer'), null())]",
                                        "loadBalancerInboundNatRules": "[coalesce(tryGet(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'loadBalancerInboundNatRules'), null())]",
                                        "privateIPAddressVersion": "[coalesce(tryGet(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'privateIPAddressVersion'), null())]",
                                        "virtualNetworkTaps": "[coalesce(tryGet(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'virtualNetworkTaps'), null())]"
                                      }
                                    }
                                  }
                                ],
                                "auxiliaryMode": "[parameters('auxiliaryMode')]",
                                "auxiliarySku": "[parameters('auxiliarySku')]",
                                "disableTcpStateTracking": "[parameters('disableTcpStateTracking')]",
                                "dnsSettings": "[if(not(empty(parameters('dnsServers'))), createObject('dnsServers', parameters('dnsServers')), null())]",
                                "enableAcceleratedNetworking": "[parameters('enableAcceleratedNetworking')]",
                                "enableIPForwarding": "[parameters('enableIPForwarding')]",
                                "networkSecurityGroup": "[if(not(empty(parameters('networkSecurityGroupResourceId'))), createObject('id', parameters('networkSecurityGroupResourceId')), null())]"
                              }
                            },
                            {
                              "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('diagnosticWorkspaceId')))), not(empty(parameters('diagnosticEventHubAuthorizationRuleId')))), not(empty(parameters('diagnosticEventHubName'))))]",
                              "type": "Microsoft.Insights/diagnosticSettings",
                              "apiVersion": "2021-05-01-preview",
                              "scope": "[format('Microsoft.Network/networkInterfaces/{0}', parameters('name'))]",
                              "name": "[if(not(empty(parameters('diagnosticSettingsName'))), parameters('diagnosticSettingsName'), format('{0}-diagnosticSettings', parameters('name')))]",
                              "properties": {
                                "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                                "workspaceId": "[if(not(empty(parameters('diagnosticWorkspaceId'))), parameters('diagnosticWorkspaceId'), null())]",
                                "eventHubAuthorizationRuleId": "[if(not(empty(parameters('diagnosticEventHubAuthorizationRuleId'))), parameters('diagnosticEventHubAuthorizationRuleId'), null())]",
                                "eventHubName": "[if(not(empty(parameters('diagnosticEventHubName'))), parameters('diagnosticEventHubName'), null())]",
                                "metrics": "[variables('diagnosticsMetrics')]"
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/networkInterfaces', parameters('name'))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the deployed resource."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the deployed resource."
                              },
                              "value": "[resourceId('Microsoft.Network/networkInterfaces', parameters('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group of the deployed resource."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "The location the resource was deployed into."
                              },
                              "value": "[reference(resourceId('Microsoft.Network/networkInterfaces', parameters('name')), '2023-04-01', 'full').location]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "networkInterface_publicIPAddresses"
                      ]
                    }
                  ]
                }
              }
            },
            {
              "condition": "[parameters('extensionAadJoinConfig').enabled]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-VM-AADLogin', uniqueString(deployment().name, parameters('location')))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "virtualMachineName": {
                    "value": "[parameters('name')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "name": {
                    "value": "AADLogin"
                  },
                  "publisher": {
                    "value": "Microsoft.Azure.ActiveDirectory"
                  },
                  "type": "[if(equals(parameters('osType'), 'Windows'), createObject('value', 'AADLoginForWindows'), createObject('value', 'AADSSHLoginforLinux'))]",
                  "typeHandlerVersion": {
                    "value": "[coalesce(tryGet(parameters('extensionAadJoinConfig'), 'typeHandlerVersion'), '1.0')]"
                  },
                  "autoUpgradeMinorVersion": {
                    "value": "[coalesce(tryGet(parameters('extensionAadJoinConfig'), 'autoUpgradeMinorVersion'), true())]"
                  },
                  "enableAutomaticUpgrade": {
                    "value": "[coalesce(tryGet(parameters('extensionAadJoinConfig'), 'enableAutomaticUpgrade'), false())]"
                  },
                  "settings": {
                    "value": "[coalesce(tryGet(parameters('extensionAadJoinConfig'), 'settings'), createObject())]"
                  },
                  "tags": {
                    "value": "[coalesce(tryGet(parameters('extensionAadJoinConfig'), 'tags'), createObject())]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.33.93.31351",
                      "templateHash": "11887421850832144050"
                    },
                    "name": "Virtual Machine Extensions",
                    "description": "This module deploys a Virtual Machine Extension.",
                    "owner": "Azure/module-maintainers"
                  },
                  "parameters": {
                    "virtualMachineName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the virtual machine extension."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. The location the extension is deployed to."
                      }
                    },
                    "publisher": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the extension handler publisher."
                      }
                    },
                    "type": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\"."
                      }
                    },
                    "typeHandlerVersion": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Specifies the version of the script handler."
                      }
                    },
                    "autoUpgradeMinorVersion": {
                      "type": "bool",
                      "metadata": {
                        "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."
                      }
                    },
                    "forceUpdateTag": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed."
                      }
                    },
                    "settings": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Any object that contains the extension specific settings."
                      }
                    },
                    "protectedSettings": {
                      "type": "secureObject",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Any object that contains the extension specific protected settings."
                      }
                    },
                    "supressFailures": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false."
                      }
                    },
                    "enableAutomaticUpgrade": {
                      "type": "bool",
                      "metadata": {
                        "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2022-11-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "publisher": "[parameters('publisher')]",
                        "type": "[parameters('type')]",
                        "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                        "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                        "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                        "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                        "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                        "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                        "suppressFailures": "[parameters('supressFailures')]"
                      }
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the extension."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the extension."
                      },
                      "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the Resource Group the extension was created in."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference(resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name')), '2022-11-01', 'full').location]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
              ]
            },
            {
              "condition": "[parameters('extensionDomainJoinConfig').enabled]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-VM-DomainJoin', uniqueString(deployment().name, parameters('location')))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "virtualMachineName": {
                    "value": "[parameters('name')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "name": {
                    "value": "DomainJoin"
                  },
                  "publisher": {
                    "value": "Microsoft.Compute"
                  },
                  "type": {
                    "value": "JsonADDomainExtension"
                  },
                  "typeHandlerVersion": {
                    "value": "[coalesce(tryGet(parameters('extensionDomainJoinConfig'), 'typeHandlerVersion'), '1.3')]"
                  },
                  "autoUpgradeMinorVersion": {
                    "value": "[coalesce(tryGet(parameters('extensionDomainJoinConfig'), 'autoUpgradeMinorVersion'), true())]"
                  },
                  "enableAutomaticUpgrade": {
                    "value": "[coalesce(tryGet(parameters('extensionDomainJoinConfig'), 'enableAutomaticUpgrade'), false())]"
                  },
                  "settings": {
                    "value": "[parameters('extensionDomainJoinConfig').settings]"
                  },
                  "tags": {
                    "value": "[coalesce(tryGet(parameters('extensionDomainJoinConfig'), 'tags'), createObject())]"
                  },
                  "protectedSettings": {
                    "value": {
                      "Password": "[parameters('extensionDomainJoinPassword')]"
                    }
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.33.93.31351",
                      "templateHash": "11887421850832144050"
                    },
                    "name": "Virtual Machine Extensions",
                    "description": "This module deploys a Virtual Machine Extension.",
                    "owner": "Azure/module-maintainers"
                  },
                  "parameters": {
                    "virtualMachineName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the virtual machine extension."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. The location the extension is deployed to."
                      }
                    },
                    "publisher": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the extension handler publisher."
                      }
                    },
                    "type": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\"."
                      }
                    },
                    "typeHandlerVersion": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Specifies the version of the script handler."
                      }
                    },
                    "autoUpgradeMinorVersion": {
                      "type": "bool",
                      "metadata": {
                        "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."
                      }
                    },
                    "forceUpdateTag": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed."
                      }
                    },
                    "settings": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Any object that contains the extension specific settings."
                      }
                    },
                    "protectedSettings": {
                      "type": "secureObject",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Any object that contains the extension specific protected settings."
                      }
                    },
                    "supressFailures": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false."
                      }
                    },
                    "enableAutomaticUpgrade": {
                      "type": "bool",
                      "metadata": {
                        "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2022-11-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "publisher": "[parameters('publisher')]",
                        "type": "[parameters('type')]",
                        "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                        "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                        "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                        "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                        "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                        "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                        "suppressFailures": "[parameters('supressFailures')]"
                      }
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the extension."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the extension."
                      },
                      "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the Resource Group the extension was created in."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference(resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name')), '2022-11-01', 'full').location]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
              ]
            },
            {
              "condition": "[parameters('extensionAntiMalwareConfig').enabled]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-VM-MicrosoftAntiMalware', uniqueString(deployment().name, parameters('location')))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "virtualMachineName": {
                    "value": "[parameters('name')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "name": {
                    "value": "MicrosoftAntiMalware"
                  },
                  "publisher": {
                    "value": "Microsoft.Azure.Security"
                  },
                  "type": {
                    "value": "IaaSAntimalware"
                  },
                  "typeHandlerVersion": {
                    "value": "[coalesce(tryGet(parameters('extensionAntiMalwareConfig'), 'typeHandlerVersion'), '1.3')]"
                  },
                  "autoUpgradeMinorVersion": {
                    "value": "[coalesce(tryGet(parameters('extensionAntiMalwareConfig'), 'autoUpgradeMinorVersion'), true())]"
                  },
                  "enableAutomaticUpgrade": {
                    "value": "[coalesce(tryGet(parameters('extensionAntiMalwareConfig'), 'enableAutomaticUpgrade'), false())]"
                  },
                  "settings": {
                    "value": "[parameters('extensionAntiMalwareConfig').settings]"
                  },
                  "tags": {
                    "value": "[coalesce(tryGet(parameters('extensionAntiMalwareConfig'), 'tags'), createObject())]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.33.93.31351",
                      "templateHash": "11887421850832144050"
                    },
                    "name": "Virtual Machine Extensions",
                    "description": "This module deploys a Virtual Machine Extension.",
                    "owner": "Azure/module-maintainers"
                  },
                  "parameters": {
                    "virtualMachineName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the virtual machine extension."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. The location the extension is deployed to."
                      }
                    },
                    "publisher": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the extension handler publisher."
                      }
                    },
                    "type": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\"."
                      }
                    },
                    "typeHandlerVersion": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Specifies the version of the script handler."
                      }
                    },
                    "autoUpgradeMinorVersion": {
                      "type": "bool",
                      "metadata": {
                        "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."
                      }
                    },
                    "forceUpdateTag": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed."
                      }
                    },
                    "settings": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Any object that contains the extension specific settings."
                      }
                    },
                    "protectedSettings": {
                      "type": "secureObject",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Any object that contains the extension specific protected settings."
                      }
                    },
                    "supressFailures": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false."
                      }
                    },
                    "enableAutomaticUpgrade": {
                      "type": "bool",
                      "metadata": {
                        "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2022-11-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "publisher": "[parameters('publisher')]",
                        "type": "[parameters('type')]",
                        "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                        "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                        "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                        "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                        "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                        "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                        "suppressFailures": "[parameters('supressFailures')]"
                      }
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the extension."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the extension."
                      },
                      "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the Resource Group the extension was created in."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference(resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name')), '2022-11-01', 'full').location]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
              ]
            },
            {
              "condition": "[parameters('extensionMonitoringAgentConfig').enabled]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-VM-MicrosoftMonitoringAgent', uniqueString(deployment().name, parameters('location')))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "virtualMachineName": {
                    "value": "[parameters('name')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "name": {
                    "value": "MicrosoftMonitoringAgent"
                  },
                  "publisher": {
                    "value": "Microsoft.EnterpriseCloud.Monitoring"
                  },
                  "type": "[if(equals(parameters('osType'), 'Windows'), createObject('value', 'MicrosoftMonitoringAgent'), createObject('value', 'OmsAgentForLinux'))]",
                  "typeHandlerVersion": {
                    "value": "[coalesce(tryGet(parameters('extensionMonitoringAgentConfig'), 'typeHandlerVersion'), if(equals(parameters('osType'), 'Windows'), '1.0', '1.7'))]"
                  },
                  "autoUpgradeMinorVersion": {
                    "value": "[coalesce(tryGet(parameters('extensionMonitoringAgentConfig'), 'autoUpgradeMinorVersion'), true())]"
                  },
                  "enableAutomaticUpgrade": {
                    "value": "[coalesce(tryGet(parameters('extensionMonitoringAgentConfig'), 'enableAutomaticUpgrade'), false())]"
                  },
                  "settings": {
                    "value": {
                      "workspaceId": "[if(not(empty(parameters('monitoringWorkspaceId'))), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('monitoringWorkspaceId'), '/')[2], split(parameters('monitoringWorkspaceId'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', last(split(parameters('monitoringWorkspaceId'), '/'))), '2021-06-01').customerId, '')]"
                    }
                  },
                  "tags": {
                    "value": "[coalesce(tryGet(parameters('extensionMonitoringAgentConfig'), 'tags'), createObject())]"
                  },
                  "protectedSettings": {
                    "value": {
                      "workspaceKey": "[if(not(empty(parameters('monitoringWorkspaceId'))), listKeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('monitoringWorkspaceId'), '/')[2], split(parameters('monitoringWorkspaceId'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', last(split(parameters('monitoringWorkspaceId'), '/'))), '2021-06-01').primarySharedKey, '')]"
                    }
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.33.93.31351",
                      "templateHash": "11887421850832144050"
                    },
                    "name": "Virtual Machine Extensions",
                    "description": "This module deploys a Virtual Machine Extension.",
                    "owner": "Azure/module-maintainers"
                  },
                  "parameters": {
                    "virtualMachineName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the virtual machine extension."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. The location the extension is deployed to."
                      }
                    },
                    "publisher": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the extension handler publisher."
                      }
                    },
                    "type": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\"."
                      }
                    },
                    "typeHandlerVersion": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Specifies the version of the script handler."
                      }
                    },
                    "autoUpgradeMinorVersion": {
                      "type": "bool",
                      "metadata": {
                        "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."
                      }
                    },
                    "forceUpdateTag": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed."
                      }
                    },
                    "settings": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Any object that contains the extension specific settings."
                      }
                    },
                    "protectedSettings": {
                      "type": "secureObject",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Any object that contains the extension specific protected settings."
                      }
                    },
                    "supressFailures": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false."
                      }
                    },
                    "enableAutomaticUpgrade": {
                      "type": "bool",
                      "metadata": {
                        "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2022-11-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "publisher": "[parameters('publisher')]",
                        "type": "[parameters('type')]",
                        "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                        "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                        "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                        "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                        "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                        "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                        "suppressFailures": "[parameters('supressFailures')]"
                      }
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the extension."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the extension."
                      },
                      "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the Resource Group the extension was created in."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference(resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name')), '2022-11-01', 'full').location]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
              ]
            },
            {
              "condition": "[parameters('extensionDependencyAgentConfig').enabled]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-VM-DependencyAgent', uniqueString(deployment().name, parameters('location')))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "virtualMachineName": {
                    "value": "[parameters('name')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "name": {
                    "value": "DependencyAgent"
                  },
                  "publisher": {
                    "value": "Microsoft.Azure.Monitoring.DependencyAgent"
                  },
                  "type": "[if(equals(parameters('osType'), 'Windows'), createObject('value', 'DependencyAgentWindows'), createObject('value', 'DependencyAgentLinux'))]",
                  "typeHandlerVersion": {
                    "value": "[coalesce(tryGet(parameters('extensionDependencyAgentConfig'), 'typeHandlerVersion'), '9.5')]"
                  },
                  "autoUpgradeMinorVersion": {
                    "value": "[coalesce(tryGet(parameters('extensionDependencyAgentConfig'), 'autoUpgradeMinorVersion'), true())]"
                  },
                  "enableAutomaticUpgrade": {
                    "value": "[coalesce(tryGet(parameters('extensionDependencyAgentConfig'), 'enableAutomaticUpgrade'), true())]"
                  },
                  "tags": {
                    "value": "[coalesce(tryGet(parameters('extensionDependencyAgentConfig'), 'tags'), createObject())]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.33.93.31351",
                      "templateHash": "11887421850832144050"
                    },
                    "name": "Virtual Machine Extensions",
                    "description": "This module deploys a Virtual Machine Extension.",
                    "owner": "Azure/module-maintainers"
                  },
                  "parameters": {
                    "virtualMachineName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the virtual machine extension."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. The location the extension is deployed to."
                      }
                    },
                    "publisher": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the extension handler publisher."
                      }
                    },
                    "type": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\"."
                      }
                    },
                    "typeHandlerVersion": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Specifies the version of the script handler."
                      }
                    },
                    "autoUpgradeMinorVersion": {
                      "type": "bool",
                      "metadata": {
                        "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."
                      }
                    },
                    "forceUpdateTag": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed."
                      }
                    },
                    "settings": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Any object that contains the extension specific settings."
                      }
                    },
                    "protectedSettings": {
                      "type": "secureObject",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Any object that contains the extension specific protected settings."
                      }
                    },
                    "supressFailures": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false."
                      }
                    },
                    "enableAutomaticUpgrade": {
                      "type": "bool",
                      "metadata": {
                        "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2022-11-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "publisher": "[parameters('publisher')]",
                        "type": "[parameters('type')]",
                        "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                        "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                        "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                        "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                        "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                        "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                        "suppressFailures": "[parameters('supressFailures')]"
                      }
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the extension."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the extension."
                      },
                      "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the Resource Group the extension was created in."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference(resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name')), '2022-11-01', 'full').location]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
              ]
            },
            {
              "condition": "[parameters('extensionNetworkWatcherAgentConfig').enabled]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-VM-NetworkWatcherAgent', uniqueString(deployment().name, parameters('location')))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "virtualMachineName": {
                    "value": "[parameters('name')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "name": {
                    "value": "NetworkWatcherAgent"
                  },
                  "publisher": {
                    "value": "Microsoft.Azure.NetworkWatcher"
                  },
                  "type": "[if(equals(parameters('osType'), 'Windows'), createObject('value', 'NetworkWatcherAgentWindows'), createObject('value', 'NetworkWatcherAgentLinux'))]",
                  "typeHandlerVersion": {
                    "value": "[coalesce(tryGet(parameters('extensionNetworkWatcherAgentConfig'), 'typeHandlerVersion'), '1.4')]"
                  },
                  "autoUpgradeMinorVersion": {
                    "value": "[coalesce(tryGet(parameters('extensionNetworkWatcherAgentConfig'), 'autoUpgradeMinorVersion'), true())]"
                  },
                  "enableAutomaticUpgrade": {
                    "value": "[coalesce(tryGet(parameters('extensionNetworkWatcherAgentConfig'), 'enableAutomaticUpgrade'), false())]"
                  },
                  "tags": {
                    "value": "[coalesce(tryGet(parameters('extensionNetworkWatcherAgentConfig'), 'tags'), createObject())]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.33.93.31351",
                      "templateHash": "11887421850832144050"
                    },
                    "name": "Virtual Machine Extensions",
                    "description": "This module deploys a Virtual Machine Extension.",
                    "owner": "Azure/module-maintainers"
                  },
                  "parameters": {
                    "virtualMachineName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the virtual machine extension."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. The location the extension is deployed to."
                      }
                    },
                    "publisher": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the extension handler publisher."
                      }
                    },
                    "type": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\"."
                      }
                    },
                    "typeHandlerVersion": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Specifies the version of the script handler."
                      }
                    },
                    "autoUpgradeMinorVersion": {
                      "type": "bool",
                      "metadata": {
                        "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."
                      }
                    },
                    "forceUpdateTag": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed."
                      }
                    },
                    "settings": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Any object that contains the extension specific settings."
                      }
                    },
                    "protectedSettings": {
                      "type": "secureObject",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Any object that contains the extension specific protected settings."
                      }
                    },
                    "supressFailures": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false."
                      }
                    },
                    "enableAutomaticUpgrade": {
                      "type": "bool",
                      "metadata": {
                        "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2022-11-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "publisher": "[parameters('publisher')]",
                        "type": "[parameters('type')]",
                        "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                        "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                        "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                        "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                        "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                        "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                        "suppressFailures": "[parameters('supressFailures')]"
                      }
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the extension."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the extension."
                      },
                      "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the Resource Group the extension was created in."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference(resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name')), '2022-11-01', 'full').location]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
              ]
            },
            {
              "condition": "[parameters('extensionDSCConfig').enabled]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-VM-DesiredStateConfiguration', uniqueString(deployment().name, parameters('location')))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "virtualMachineName": {
                    "value": "[parameters('name')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "name": {
                    "value": "DesiredStateConfiguration"
                  },
                  "publisher": {
                    "value": "Microsoft.Powershell"
                  },
                  "type": {
                    "value": "DSC"
                  },
                  "typeHandlerVersion": {
                    "value": "[coalesce(tryGet(parameters('extensionDSCConfig'), 'typeHandlerVersion'), '2.77')]"
                  },
                  "autoUpgradeMinorVersion": {
                    "value": "[coalesce(tryGet(parameters('extensionDSCConfig'), 'autoUpgradeMinorVersion'), true())]"
                  },
                  "enableAutomaticUpgrade": {
                    "value": "[coalesce(tryGet(parameters('extensionDSCConfig'), 'enableAutomaticUpgrade'), false())]"
                  },
                  "settings": {
                    "value": "[coalesce(tryGet(parameters('extensionDSCConfig'), 'settings'), createObject())]"
                  },
                  "tags": {
                    "value": "[coalesce(tryGet(parameters('extensionDSCConfig'), 'tags'), createObject())]"
                  },
                  "protectedSettings": {
                    "value": "[coalesce(tryGet(parameters('extensionDSCConfig'), 'protectedSettings'), createObject())]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.33.93.31351",
                      "templateHash": "11887421850832144050"
                    },
                    "name": "Virtual Machine Extensions",
                    "description": "This module deploys a Virtual Machine Extension.",
                    "owner": "Azure/module-maintainers"
                  },
                  "parameters": {
                    "virtualMachineName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the virtual machine extension."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. The location the extension is deployed to."
                      }
                    },
                    "publisher": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the extension handler publisher."
                      }
                    },
                    "type": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\"."
                      }
                    },
                    "typeHandlerVersion": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Specifies the version of the script handler."
                      }
                    },
                    "autoUpgradeMinorVersion": {
                      "type": "bool",
                      "metadata": {
                        "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."
                      }
                    },
                    "forceUpdateTag": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed."
                      }
                    },
                    "settings": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Any object that contains the extension specific settings."
                      }
                    },
                    "protectedSettings": {
                      "type": "secureObject",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Any object that contains the extension specific protected settings."
                      }
                    },
                    "supressFailures": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false."
                      }
                    },
                    "enableAutomaticUpgrade": {
                      "type": "bool",
                      "metadata": {
                        "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2022-11-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "publisher": "[parameters('publisher')]",
                        "type": "[parameters('type')]",
                        "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                        "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                        "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                        "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                        "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                        "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                        "suppressFailures": "[parameters('supressFailures')]"
                      }
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the extension."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the extension."
                      },
                      "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the Resource Group the extension was created in."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference(resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name')), '2022-11-01', 'full').location]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
              ]
            },
            {
              "condition": "[parameters('extensionCustomScriptConfig').enabled]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-VM-CustomScriptExtension', uniqueString(deployment().name, parameters('location')))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "virtualMachineName": {
                    "value": "[parameters('name')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "name": {
                    "value": "CustomScriptExtension"
                  },
                  "publisher": "[if(equals(parameters('osType'), 'Windows'), createObject('value', 'Microsoft.Compute'), createObject('value', 'Microsoft.Azure.Extensions'))]",
                  "type": "[if(equals(parameters('osType'), 'Windows'), createObject('value', 'CustomScriptExtension'), createObject('value', 'CustomScript'))]",
                  "typeHandlerVersion": {
                    "value": "[coalesce(tryGet(parameters('extensionCustomScriptConfig'), 'typeHandlerVersion'), if(equals(parameters('osType'), 'Windows'), '1.10', '2.1'))]"
                  },
                  "autoUpgradeMinorVersion": {
                    "value": "[coalesce(tryGet(parameters('extensionCustomScriptConfig'), 'autoUpgradeMinorVersion'), true())]"
                  },
                  "enableAutomaticUpgrade": {
                    "value": "[coalesce(tryGet(parameters('extensionCustomScriptConfig'), 'enableAutomaticUpgrade'), false())]"
                  },
                  "settings": {
                    "value": {
                      "copy": [
                        {
                          "name": "fileUris",
                          "count": "[length(parameters('extensionCustomScriptConfig').fileData)]",
                          "input": "[if(contains(parameters('extensionCustomScriptConfig').fileData[copyIndex('fileUris')], 'storageAccountId'), format('{0}?{1}', parameters('extensionCustomScriptConfig').fileData[copyIndex('fileUris')].uri, listAccountSas(parameters('extensionCustomScriptConfig').fileData[copyIndex('fileUris')].storageAccountId, '2019-04-01', variables('accountSasProperties')).accountSasToken), parameters('extensionCustomScriptConfig').fileData[copyIndex('fileUris')].uri)]"
                        }
                      ]
                    }
                  },
                  "tags": {
                    "value": "[coalesce(tryGet(parameters('extensionCustomScriptConfig'), 'tags'), createObject())]"
                  },
                  "protectedSettings": {
                    "value": "[parameters('extensionCustomScriptProtectedSetting')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.33.93.31351",
                      "templateHash": "11887421850832144050"
                    },
                    "name": "Virtual Machine Extensions",
                    "description": "This module deploys a Virtual Machine Extension.",
                    "owner": "Azure/module-maintainers"
                  },
                  "parameters": {
                    "virtualMachineName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the virtual machine extension."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. The location the extension is deployed to."
                      }
                    },
                    "publisher": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the extension handler publisher."
                      }
                    },
                    "type": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\"."
                      }
                    },
                    "typeHandlerVersion": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Specifies the version of the script handler."
                      }
                    },
                    "autoUpgradeMinorVersion": {
                      "type": "bool",
                      "metadata": {
                        "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."
                      }
                    },
                    "forceUpdateTag": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed."
                      }
                    },
                    "settings": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Any object that contains the extension specific settings."
                      }
                    },
                    "protectedSettings": {
                      "type": "secureObject",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Any object that contains the extension specific protected settings."
                      }
                    },
                    "supressFailures": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false."
                      }
                    },
                    "enableAutomaticUpgrade": {
                      "type": "bool",
                      "metadata": {
                        "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2022-11-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "publisher": "[parameters('publisher')]",
                        "type": "[parameters('type')]",
                        "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                        "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                        "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                        "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                        "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                        "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                        "suppressFailures": "[parameters('supressFailures')]"
                      }
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the extension."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the extension."
                      },
                      "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the Resource Group the extension was created in."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference(resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name')), '2022-11-01', 'full').location]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]",
                "[resourceId('Microsoft.Resources/deployments', format('{0}-VM-DesiredStateConfiguration', uniqueString(deployment().name, parameters('location'))))]"
              ]
            },
            {
              "condition": "[parameters('extensionAzureDiskEncryptionConfig').enabled]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-VM-AzureDiskEncryption', uniqueString(deployment().name, parameters('location')))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "virtualMachineName": {
                    "value": "[parameters('name')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "name": {
                    "value": "AzureDiskEncryption"
                  },
                  "publisher": {
                    "value": "Microsoft.Azure.Security"
                  },
                  "type": "[if(equals(parameters('osType'), 'Windows'), createObject('value', 'AzureDiskEncryption'), createObject('value', 'AzureDiskEncryptionForLinux'))]",
                  "typeHandlerVersion": {
                    "value": "[coalesce(tryGet(parameters('extensionAzureDiskEncryptionConfig'), 'typeHandlerVersion'), if(equals(parameters('osType'), 'Windows'), '2.2', '1.1'))]"
                  },
                  "autoUpgradeMinorVersion": {
                    "value": "[coalesce(tryGet(parameters('extensionAzureDiskEncryptionConfig'), 'autoUpgradeMinorVersion'), true())]"
                  },
                  "enableAutomaticUpgrade": {
                    "value": "[coalesce(tryGet(parameters('extensionAzureDiskEncryptionConfig'), 'enableAutomaticUpgrade'), false())]"
                  },
                  "forceUpdateTag": {
                    "value": "[coalesce(tryGet(parameters('extensionAzureDiskEncryptionConfig'), 'forceUpdateTag'), '1.0')]"
                  },
                  "settings": {
                    "value": "[parameters('extensionAzureDiskEncryptionConfig').settings]"
                  },
                  "tags": {
                    "value": "[coalesce(tryGet(parameters('extensionAzureDiskEncryptionConfig'), 'tags'), createObject())]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.33.93.31351",
                      "templateHash": "11887421850832144050"
                    },
                    "name": "Virtual Machine Extensions",
                    "description": "This module deploys a Virtual Machine Extension.",
                    "owner": "Azure/module-maintainers"
                  },
                  "parameters": {
                    "virtualMachineName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the virtual machine extension."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. The location the extension is deployed to."
                      }
                    },
                    "publisher": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the extension handler publisher."
                      }
                    },
                    "type": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\"."
                      }
                    },
                    "typeHandlerVersion": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Specifies the version of the script handler."
                      }
                    },
                    "autoUpgradeMinorVersion": {
                      "type": "bool",
                      "metadata": {
                        "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."
                      }
                    },
                    "forceUpdateTag": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed."
                      }
                    },
                    "settings": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Any object that contains the extension specific settings."
                      }
                    },
                    "protectedSettings": {
                      "type": "secureObject",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Any object that contains the extension specific protected settings."
                      }
                    },
                    "supressFailures": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false."
                      }
                    },
                    "enableAutomaticUpgrade": {
                      "type": "bool",
                      "metadata": {
                        "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2022-11-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "publisher": "[parameters('publisher')]",
                        "type": "[parameters('type')]",
                        "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                        "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                        "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                        "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                        "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                        "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                        "suppressFailures": "[parameters('supressFailures')]"
                      }
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the extension."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the extension."
                      },
                      "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the Resource Group the extension was created in."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference(resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name')), '2022-11-01', 'full').location]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]",
                "[resourceId('Microsoft.Resources/deployments', format('{0}-VM-CustomScriptExtension', uniqueString(deployment().name, parameters('location'))))]",
                "[resourceId('Microsoft.Resources/deployments', format('{0}-VM-MicrosoftMonitoringAgent', uniqueString(deployment().name, parameters('location'))))]"
              ]
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the VM."
              },
              "value": "[parameters('name')]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the VM."
              },
              "value": "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
            },
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The name of the resource group the VM was created in."
              },
              "value": "[resourceGroup().name]"
            },
            "systemAssignedPrincipalId": {
              "type": "string",
              "metadata": {
                "description": "The principal ID of the system assigned identity."
              },
              "value": "[if(and(parameters('systemAssignedIdentity'), contains(reference(resourceId('Microsoft.Compute/virtualMachines', parameters('name')), '2022-11-01', 'full').identity, 'principalId')), reference(resourceId('Microsoft.Compute/virtualMachines', parameters('name')), '2022-11-01', 'full').identity.principalId, '')]"
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location the resource was deployed into."
              },
              "value": "[reference(resourceId('Microsoft.Compute/virtualMachines', parameters('name')), '2022-11-01', 'full').location]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('imageBuildResourceGroupName'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('imageBuildResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}RoleAssign-MI-VirtMachContr-BuildRG-{1}', variables('depPrefix'), parameters('timeStamp')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('imageBuildResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}ManagedIdentity-{1}', variables('depPrefix'), parameters('timeStamp')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}Image-VM-{1}', variables('depPrefix'), parameters('timeStamp'))]",
      "resourceGroup": "[variables('imageBuildResourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('subnetResourceId'), '/')[2], split(parameters('subnetResourceId'), '/')[4]), 'Microsoft.Network/virtualNetworks', split(parameters('subnetResourceId'), '/')[8]), '2023-05-01', 'full').location]"
          },
          "name": {
            "value": "[variables('imageVmName')]"
          },
          "adminPassword": {
            "value": "[variables('adminPw')]"
          },
          "adminUsername": {
            "value": "[variables('adminUserName')]"
          },
          "bootDiagnostics": {
            "value": false
          },
          "encryptionAtHost": {
            "value": "[parameters('encryptionAtHost')]"
          },
          "imageReference": "[if(empty(parameters('customSourceImageResourceId')), createObject('value', createObject('publisher', parameters('publisher'), 'offer', parameters('offer'), 'sku', parameters('sku'), 'version', 'latest')), createObject('value', createObject('id', parameters('customSourceImageResourceId'))))]",
          "nicConfigurations": {
            "value": [
              {
                "enableAcceleratedNetworking": "[parameters('imageDefinitionIsAcceleratedNetworkSupported')]",
                "deleteOption": "Delete",
                "ipConfigurations": [
                  {
                    "name": "ipconfig01",
                    "subnetResourceId": "[parameters('subnetResourceId')]"
                  }
                ],
                "nicSuffix": "-nic-01"
              }
            ]
          },
          "osDisk": {
            "value": {
              "caching": "None",
              "createOption": "fromImage",
              "deleteOption": "Delete",
              "diskSizeGB": "128",
              "managedDisk": {
                "storageAccountType": "Premium_LRS"
              }
            }
          },
          "osType": {
            "value": "Windows"
          },
          "securityType": "[if(equals(if(empty(parameters('imageDefinitionResourceId')), parameters('imageDefinitionSecurityType'), if(not(empty(filter(if(empty(parameters('imageDefinitionResourceId')), createArray(createObject('name', 'IsHibernateSupported', 'value', parameters('imageDefinitionIsHibernateSupported')), createObject('name', 'IsAcceleratedNetworkSupported', 'value', parameters('imageDefinitionIsAcceleratedNetworkSupported')), createObject('name', 'DiskControllerTypes', 'value', parameters('imageDefinitionIsHigherStoragePerformanceSupported')), createObject('name', 'SecurityType', 'value', parameters('imageDefinitionSecurityType'))), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('imageDefinitionResourceId'), '/')[2], split(parameters('imageDefinitionResourceId'), '/')[4]), 'Microsoft.Compute/galleries/images', split(format('{0}/{1}', split(parameters('imageDefinitionResourceId'), '/')[8], last(split(parameters('imageDefinitionResourceId'), '/'))), '/')[0], split(format('{0}/{1}', split(parameters('imageDefinitionResourceId'), '/')[8], last(split(parameters('imageDefinitionResourceId'), '/'))), '/')[1]), '2024-03-03').features), lambda('feature', equals(lambdaVariables('feature').name, 'SecurityType'))))), filter(if(empty(parameters('imageDefinitionResourceId')), createArray(createObject('name', 'IsHibernateSupported', 'value', parameters('imageDefinitionIsHibernateSupported')), createObject('name', 'IsAcceleratedNetworkSupported', 'value', parameters('imageDefinitionIsAcceleratedNetworkSupported')), createObject('name', 'DiskControllerTypes', 'value', parameters('imageDefinitionIsHigherStoragePerformanceSupported')), createObject('name', 'SecurityType', 'value', parameters('imageDefinitionSecurityType'))), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('imageDefinitionResourceId'), '/')[2], split(parameters('imageDefinitionResourceId'), '/')[4]), 'Microsoft.Compute/galleries/images', split(format('{0}/{1}', split(parameters('imageDefinitionResourceId'), '/')[8], last(split(parameters('imageDefinitionResourceId'), '/'))), '/')[0], split(format('{0}/{1}', split(parameters('imageDefinitionResourceId'), '/')[8], last(split(parameters('imageDefinitionResourceId'), '/'))), '/')[1]), '2024-03-03').features), lambda('feature', equals(lambdaVariables('feature').name, 'SecurityType')))[0].value, 'Standard')), 'TrustedLaunch'), createObject('value', 'TrustedLaunch'), if(equals(if(empty(parameters('imageDefinitionResourceId')), parameters('imageDefinitionSecurityType'), if(not(empty(filter(if(empty(parameters('imageDefinitionResourceId')), createArray(createObject('name', 'IsHibernateSupported', 'value', parameters('imageDefinitionIsHibernateSupported')), createObject('name', 'IsAcceleratedNetworkSupported', 'value', parameters('imageDefinitionIsAcceleratedNetworkSupported')), createObject('name', 'DiskControllerTypes', 'value', parameters('imageDefinitionIsHigherStoragePerformanceSupported')), createObject('name', 'SecurityType', 'value', parameters('imageDefinitionSecurityType'))), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('imageDefinitionResourceId'), '/')[2], split(parameters('imageDefinitionResourceId'), '/')[4]), 'Microsoft.Compute/galleries/images', split(format('{0}/{1}', split(parameters('imageDefinitionResourceId'), '/')[8], last(split(parameters('imageDefinitionResourceId'), '/'))), '/')[0], split(format('{0}/{1}', split(parameters('imageDefinitionResourceId'), '/')[8], last(split(parameters('imageDefinitionResourceId'), '/'))), '/')[1]), '2024-03-03').features), lambda('feature', equals(lambdaVariables('feature').name, 'SecurityType'))))), filter(if(empty(parameters('imageDefinitionResourceId')), createArray(createObject('name', 'IsHibernateSupported', 'value', parameters('imageDefinitionIsHibernateSupported')), createObject('name', 'IsAcceleratedNetworkSupported', 'value', parameters('imageDefinitionIsAcceleratedNetworkSupported')), createObject('name', 'DiskControllerTypes', 'value', parameters('imageDefinitionIsHigherStoragePerformanceSupported')), createObject('name', 'SecurityType', 'value', parameters('imageDefinitionSecurityType'))), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('imageDefinitionResourceId'), '/')[2], split(parameters('imageDefinitionResourceId'), '/')[4]), 'Microsoft.Compute/galleries/images', split(format('{0}/{1}', split(parameters('imageDefinitionResourceId'), '/')[8], last(split(parameters('imageDefinitionResourceId'), '/'))), '/')[0], split(format('{0}/{1}', split(parameters('imageDefinitionResourceId'), '/')[8], last(split(parameters('imageDefinitionResourceId'), '/'))), '/')[1]), '2024-03-03').features), lambda('feature', equals(lambdaVariables('feature').name, 'SecurityType')))[0].value, 'Standard')), 'ConfidentialVM'), createObject('value', 'ConfidentialVM'), createObject('value', 'Standard')))]",
          "secureBootEnabled": "[if(equals(if(equals(if(empty(parameters('imageDefinitionResourceId')), parameters('imageDefinitionSecurityType'), if(not(empty(filter(if(empty(parameters('imageDefinitionResourceId')), createArray(createObject('name', 'IsHibernateSupported', 'value', parameters('imageDefinitionIsHibernateSupported')), createObject('name', 'IsAcceleratedNetworkSupported', 'value', parameters('imageDefinitionIsAcceleratedNetworkSupported')), createObject('name', 'DiskControllerTypes', 'value', parameters('imageDefinitionIsHigherStoragePerformanceSupported')), createObject('name', 'SecurityType', 'value', parameters('imageDefinitionSecurityType'))), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('imageDefinitionResourceId'), '/')[2], split(parameters('imageDefinitionResourceId'), '/')[4]), 'Microsoft.Compute/galleries/images', split(format('{0}/{1}', split(parameters('imageDefinitionResourceId'), '/')[8], last(split(parameters('imageDefinitionResourceId'), '/'))), '/')[0], split(format('{0}/{1}', split(parameters('imageDefinitionResourceId'), '/')[8], last(split(parameters('imageDefinitionResourceId'), '/'))), '/')[1]), '2024-03-03').features), lambda('feature', equals(lambdaVariables('feature').name, 'SecurityType'))))), filter(if(empty(parameters('imageDefinitionResourceId')), createArray(createObject('name', 'IsHibernateSupported', 'value', parameters('imageDefinitionIsHibernateSupported')), createObject('name', 'IsAcceleratedNetworkSupported', 'value', parameters('imageDefinitionIsAcceleratedNetworkSupported')), createObject('name', 'DiskControllerTypes', 'value', parameters('imageDefinitionIsHigherStoragePerformanceSupported')), createObject('name', 'SecurityType', 'value', parameters('imageDefinitionSecurityType'))), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('imageDefinitionResourceId'), '/')[2], split(parameters('imageDefinitionResourceId'), '/')[4]), 'Microsoft.Compute/galleries/images', split(format('{0}/{1}', split(parameters('imageDefinitionResourceId'), '/')[8], last(split(parameters('imageDefinitionResourceId'), '/'))), '/')[0], split(format('{0}/{1}', split(parameters('imageDefinitionResourceId'), '/')[8], last(split(parameters('imageDefinitionResourceId'), '/'))), '/')[1]), '2024-03-03').features), lambda('feature', equals(lambdaVariables('feature').name, 'SecurityType')))[0].value, 'Standard')), 'TrustedLaunch'), 'TrustedLaunch', if(equals(if(empty(parameters('imageDefinitionResourceId')), parameters('imageDefinitionSecurityType'), if(not(empty(filter(if(empty(parameters('imageDefinitionResourceId')), createArray(createObject('name', 'IsHibernateSupported', 'value', parameters('imageDefinitionIsHibernateSupported')), createObject('name', 'IsAcceleratedNetworkSupported', 'value', parameters('imageDefinitionIsAcceleratedNetworkSupported')), createObject('name', 'DiskControllerTypes', 'value', parameters('imageDefinitionIsHigherStoragePerformanceSupported')), createObject('name', 'SecurityType', 'value', parameters('imageDefinitionSecurityType'))), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('imageDefinitionResourceId'), '/')[2], split(parameters('imageDefinitionResourceId'), '/')[4]), 'Microsoft.Compute/galleries/images', split(format('{0}/{1}', split(parameters('imageDefinitionResourceId'), '/')[8], last(split(parameters('imageDefinitionResourceId'), '/'))), '/')[0], split(format('{0}/{1}', split(parameters('imageDefinitionResourceId'), '/')[8], last(split(parameters('imageDefinitionResourceId'), '/'))), '/')[1]), '2024-03-03').features), lambda('feature', equals(lambdaVariables('feature').name, 'SecurityType'))))), filter(if(empty(parameters('imageDefinitionResourceId')), createArray(createObject('name', 'IsHibernateSupported', 'value', parameters('imageDefinitionIsHibernateSupported')), createObject('name', 'IsAcceleratedNetworkSupported', 'value', parameters('imageDefinitionIsAcceleratedNetworkSupported')), createObject('name', 'DiskControllerTypes', 'value', parameters('imageDefinitionIsHigherStoragePerformanceSupported')), createObject('name', 'SecurityType', 'value', parameters('imageDefinitionSecurityType'))), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('imageDefinitionResourceId'), '/')[2], split(parameters('imageDefinitionResourceId'), '/')[4]), 'Microsoft.Compute/galleries/images', split(format('{0}/{1}', split(parameters('imageDefinitionResourceId'), '/')[8], last(split(parameters('imageDefinitionResourceId'), '/'))), '/')[0], split(format('{0}/{1}', split(parameters('imageDefinitionResourceId'), '/')[8], last(split(parameters('imageDefinitionResourceId'), '/'))), '/')[1]), '2024-03-03').features), lambda('feature', equals(lambdaVariables('feature').name, 'SecurityType')))[0].value, 'Standard')), 'ConfidentialVM'), 'ConfidentialVM', 'Standard')), 'TrustedLaunch'), createObject('value', true()), createObject('value', false()))]",
          "vTpmEnabled": "[if(equals(if(equals(if(empty(parameters('imageDefinitionResourceId')), parameters('imageDefinitionSecurityType'), if(not(empty(filter(if(empty(parameters('imageDefinitionResourceId')), createArray(createObject('name', 'IsHibernateSupported', 'value', parameters('imageDefinitionIsHibernateSupported')), createObject('name', 'IsAcceleratedNetworkSupported', 'value', parameters('imageDefinitionIsAcceleratedNetworkSupported')), createObject('name', 'DiskControllerTypes', 'value', parameters('imageDefinitionIsHigherStoragePerformanceSupported')), createObject('name', 'SecurityType', 'value', parameters('imageDefinitionSecurityType'))), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('imageDefinitionResourceId'), '/')[2], split(parameters('imageDefinitionResourceId'), '/')[4]), 'Microsoft.Compute/galleries/images', split(format('{0}/{1}', split(parameters('imageDefinitionResourceId'), '/')[8], last(split(parameters('imageDefinitionResourceId'), '/'))), '/')[0], split(format('{0}/{1}', split(parameters('imageDefinitionResourceId'), '/')[8], last(split(parameters('imageDefinitionResourceId'), '/'))), '/')[1]), '2024-03-03').features), lambda('feature', equals(lambdaVariables('feature').name, 'SecurityType'))))), filter(if(empty(parameters('imageDefinitionResourceId')), createArray(createObject('name', 'IsHibernateSupported', 'value', parameters('imageDefinitionIsHibernateSupported')), createObject('name', 'IsAcceleratedNetworkSupported', 'value', parameters('imageDefinitionIsAcceleratedNetworkSupported')), createObject('name', 'DiskControllerTypes', 'value', parameters('imageDefinitionIsHigherStoragePerformanceSupported')), createObject('name', 'SecurityType', 'value', parameters('imageDefinitionSecurityType'))), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('imageDefinitionResourceId'), '/')[2], split(parameters('imageDefinitionResourceId'), '/')[4]), 'Microsoft.Compute/galleries/images', split(format('{0}/{1}', split(parameters('imageDefinitionResourceId'), '/')[8], last(split(parameters('imageDefinitionResourceId'), '/'))), '/')[0], split(format('{0}/{1}', split(parameters('imageDefinitionResourceId'), '/')[8], last(split(parameters('imageDefinitionResourceId'), '/'))), '/')[1]), '2024-03-03').features), lambda('feature', equals(lambdaVariables('feature').name, 'SecurityType')))[0].value, 'Standard')), 'TrustedLaunch'), 'TrustedLaunch', if(equals(if(empty(parameters('imageDefinitionResourceId')), parameters('imageDefinitionSecurityType'), if(not(empty(filter(if(empty(parameters('imageDefinitionResourceId')), createArray(createObject('name', 'IsHibernateSupported', 'value', parameters('imageDefinitionIsHibernateSupported')), createObject('name', 'IsAcceleratedNetworkSupported', 'value', parameters('imageDefinitionIsAcceleratedNetworkSupported')), createObject('name', 'DiskControllerTypes', 'value', parameters('imageDefinitionIsHigherStoragePerformanceSupported')), createObject('name', 'SecurityType', 'value', parameters('imageDefinitionSecurityType'))), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('imageDefinitionResourceId'), '/')[2], split(parameters('imageDefinitionResourceId'), '/')[4]), 'Microsoft.Compute/galleries/images', split(format('{0}/{1}', split(parameters('imageDefinitionResourceId'), '/')[8], last(split(parameters('imageDefinitionResourceId'), '/'))), '/')[0], split(format('{0}/{1}', split(parameters('imageDefinitionResourceId'), '/')[8], last(split(parameters('imageDefinitionResourceId'), '/'))), '/')[1]), '2024-03-03').features), lambda('feature', equals(lambdaVariables('feature').name, 'SecurityType'))))), filter(if(empty(parameters('imageDefinitionResourceId')), createArray(createObject('name', 'IsHibernateSupported', 'value', parameters('imageDefinitionIsHibernateSupported')), createObject('name', 'IsAcceleratedNetworkSupported', 'value', parameters('imageDefinitionIsAcceleratedNetworkSupported')), createObject('name', 'DiskControllerTypes', 'value', parameters('imageDefinitionIsHigherStoragePerformanceSupported')), createObject('name', 'SecurityType', 'value', parameters('imageDefinitionSecurityType'))), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('imageDefinitionResourceId'), '/')[2], split(parameters('imageDefinitionResourceId'), '/')[4]), 'Microsoft.Compute/galleries/images', split(format('{0}/{1}', split(parameters('imageDefinitionResourceId'), '/')[8], last(split(parameters('imageDefinitionResourceId'), '/'))), '/')[0], split(format('{0}/{1}', split(parameters('imageDefinitionResourceId'), '/')[8], last(split(parameters('imageDefinitionResourceId'), '/'))), '/')[1]), '2024-03-03').features), lambda('feature', equals(lambdaVariables('feature').name, 'SecurityType')))[0].value, 'Standard')), 'ConfidentialVM'), 'ConfidentialVM', 'Standard')), 'TrustedLaunch'), createObject('value', true()), createObject('value', false()))]",
          "tags": {
            "value": "[coalesce(tryGet(parameters('tags'), 'Microsoft.Compute/virtualMachines'), createObject())]"
          },
          "userAssignedIdentities": "[if(empty(parameters('userAssignedIdentityResourceId')), createObject('value', createObject(format('{0}', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('imageBuildResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}ManagedIdentity-{1}', variables('depPrefix'), parameters('timeStamp'))), '2022-09-01').outputs.resourceId.value), createObject())), createObject('value', createObject(format('{0}', parameters('userAssignedIdentityResourceId')), createObject())))]",
          "vmSize": {
            "value": "[parameters('vmSize')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.33.93.31351",
              "templateHash": "18274689160111715520"
            },
            "name": "Virtual Machines",
            "description": "This module deploys a Virtual Machine with one or multiple NICs and optionally one or multiple public IPs.",
            "owner": "Azure/module-maintainers"
          },
          "parameters": {
            "name": {
              "type": "string",
              "defaultValue": "[take(toLower(uniqueString(resourceGroup().name)), 10)]",
              "metadata": {
                "description": "Optional. The name of the virtual machine to be created. You should use a unique prefix to reduce name collisions in Active Directory. If no value is provided, a 10 character long unique string will be generated based on the Resource Group's name."
              }
            },
            "computerName": {
              "type": "string",
              "defaultValue": "[parameters('name')]",
              "metadata": {
                "description": "Optional. Can be used if the computer name needs to be different from the Azure VM resource name. If not used, the resource name will be used as computer name."
              }
            },
            "vmSize": {
              "type": "string",
              "metadata": {
                "description": "Required. Specifies the size for the VMs."
              }
            },
            "encryptionAtHost": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. This property can be used by user in the request to enable or disable the Host Encryption for the virtual machine. This will enable the encryption for all the disks including Resource/Temp disk at host itself. For security reasons, it is recommended to set encryptionAtHost to True. Restrictions: Cannot be enabled if Azure Disk Encryption (guest-VM encryption using bitlocker/DM-Crypt) is enabled on your VMs."
              }
            },
            "securityType": {
              "type": "string",
              "defaultValue": "Standard",
              "allowedValues": [
                "TrustedLaunch",
                "ConfidentialVM",
                "Standard"
              ],
              "metadata": {
                "description": "Optional. Specifies the SecurityType of the virtual machine. It is set as TrustedLaunch to enable UefiSettings."
              }
            },
            "secureBootEnabled": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Specifies whether secure boot should be enabled on the virtual machine. This parameter is part of the UefiSettings. SecurityType should be set to TrustedLaunch to enable UefiSettings."
              }
            },
            "vTpmEnabled": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Specifies whether vTPM should be enabled on the virtual machine. This parameter is part of the UefiSettings.  SecurityType should be set to TrustedLaunch to enable UefiSettings."
              }
            },
            "imageReference": {
              "type": "object",
              "metadata": {
                "description": "Required. OS image reference. In case of marketplace images, it's the combination of the publisher, offer, sku, version attributes. In case of custom images it's the resource ID of the custom image."
              }
            },
            "plan": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Specifies information about the marketplace image used to create the virtual machine. This element is only used for marketplace images. Before you can use a marketplace image from an API, you must enable the image for programmatic use."
              }
            },
            "osDisk": {
              "type": "object",
              "metadata": {
                "description": "Required. Specifies the OS disk. For security reasons, it is recommended to specify DiskEncryptionSet into the osDisk object.  Restrictions: DiskEncryptionSet cannot be enabled if Azure Disk Encryption (guest-VM encryption using bitlocker/DM-Crypt) is enabled on your VMs."
              }
            },
            "dataDisks": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. Specifies the data disks. For security reasons, it is recommended to specify DiskEncryptionSet into the dataDisk object. Restrictions: DiskEncryptionSet cannot be enabled if Azure Disk Encryption (guest-VM encryption using bitlocker/DM-Crypt) is enabled on your VMs."
              }
            },
            "ultraSSDEnabled": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. The flag that enables or disables a capability to have one or more managed data disks with UltraSSD_LRS storage account type on the VM or VMSS. Managed disks with storage account type UltraSSD_LRS can be added to a virtual machine or virtual machine scale set only if this property is enabled."
              }
            },
            "adminUsername": {
              "type": "securestring",
              "metadata": {
                "description": "Required. Administrator username."
              }
            },
            "adminPassword": {
              "type": "securestring",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. When specifying a Windows Virtual Machine, this value should be passed."
              }
            },
            "customData": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Custom data associated to the VM, this value will be automatically converted into base64 to account for the expected VM format."
              }
            },
            "certificatesToBeInstalled": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. Specifies set of certificates that should be installed onto the virtual machine."
              }
            },
            "priority": {
              "type": "string",
              "defaultValue": "Regular",
              "allowedValues": [
                "Regular",
                "Low",
                "Spot"
              ],
              "metadata": {
                "description": "Optional. Specifies the priority for the virtual machine."
              }
            },
            "enableEvictionPolicy": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Specifies the eviction policy for the low priority virtual machine. Will result in 'Deallocate' eviction policy."
              }
            },
            "maxPriceForLowPriorityVm": {
              "type": "int",
              "defaultValue": -1,
              "metadata": {
                "description": "Optional. Specifies the maximum price you are willing to pay for a low priority VM/VMSS. This price is in US Dollars."
              }
            },
            "dedicatedHostId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Specifies resource ID about the dedicated host that the virtual machine resides in."
              }
            },
            "licenseType": {
              "type": "string",
              "defaultValue": "",
              "allowedValues": [
                "Windows_Client",
                "Windows_Server",
                ""
              ],
              "metadata": {
                "description": "Optional. Specifies that the image or disk that is being used was licensed on-premises. This element is only used for images that contain the Windows Server operating system."
              }
            },
            "publicKeys": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. The list of SSH public keys used to authenticate with linux based VMs."
              }
            },
            "systemAssignedIdentity": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Enables system assigned managed identity on the resource. The system-assigned managed identity will automatically be enabled if extensionAadJoinConfig.enabled = \"True\"."
              }
            },
            "userAssignedIdentities": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. The ID(s) to assign to the resource."
              }
            },
            "bootDiagnostics": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Whether boot diagnostics should be enabled on the Virtual Machine. Boot diagnostics will be enabled with a managed storage account if no bootDiagnosticsStorageAccountName value is provided. If bootDiagnostics and bootDiagnosticsStorageAccountName values are not provided, boot diagnostics will be disabled."
              }
            },
            "bootDiagnosticStorageAccountName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Custom storage account used to store boot diagnostic information. Boot diagnostics will be enabled with a custom storage account if a value is provided."
              }
            },
            "bootDiagnosticStorageAccountUri": {
              "type": "string",
              "defaultValue": "[format('.blob.{0}/', environment().suffixes.storage)]",
              "metadata": {
                "description": "Optional. Storage account boot diagnostic base URI."
              }
            },
            "proximityPlacementGroupResourceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of a proximity placement group."
              }
            },
            "availabilitySetResourceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of an availability set. Cannot be used in combination with availability zone nor scale set."
              }
            },
            "availabilityZone": {
              "type": "int",
              "defaultValue": 0,
              "allowedValues": [
                0,
                1,
                2,
                3
              ],
              "metadata": {
                "description": "Optional. If set to 1, 2 or 3, the availability zone for all VMs is hardcoded to that value. If zero, then availability zones is not used. Cannot be used in combination with availability set nor scale set."
              }
            },
            "nicConfigurations": {
              "type": "array",
              "metadata": {
                "description": "Required. Configures NICs and PIPs."
              }
            },
            "pipDiagnosticSettingsName": {
              "type": "string",
              "defaultValue": "[format('{0}-diagnosticSettings', parameters('name'))]",
              "metadata": {
                "description": "Optional. The name of the PIP diagnostic setting, if deployed."
              }
            },
            "pipdiagnosticLogCategoriesToEnable": {
              "type": "array",
              "defaultValue": [
                "allLogs"
              ],
              "allowedValues": [
                "",
                "allLogs",
                "DDoSProtectionNotifications",
                "DDoSMitigationFlowLogs",
                "DDoSMitigationReports"
              ],
              "metadata": {
                "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to '' to disable log collection."
              }
            },
            "pipdiagnosticMetricsToEnable": {
              "type": "array",
              "defaultValue": [
                "AllMetrics"
              ],
              "allowedValues": [
                "AllMetrics"
              ],
              "metadata": {
                "description": "Optional. The name of metrics that will be streamed."
              }
            },
            "nicDiagnosticSettingsName": {
              "type": "string",
              "defaultValue": "[format('{0}-diagnosticSettings', parameters('name'))]",
              "metadata": {
                "description": "Optional. The name of the NIC diagnostic setting, if deployed."
              }
            },
            "nicdiagnosticMetricsToEnable": {
              "type": "array",
              "defaultValue": [
                "AllMetrics"
              ],
              "allowedValues": [
                "AllMetrics"
              ],
              "metadata": {
                "description": "Optional. The name of metrics that will be streamed."
              }
            },
            "allowExtensionOperations": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Specifies whether extension operations should be allowed on the virtual machine. This may only be set to False when no extensions are present on the virtual machine."
              }
            },
            "extensionDomainJoinPassword": {
              "type": "securestring",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Required if name is specified. Password of the user specified in user parameter."
              }
            },
            "extensionDomainJoinConfig": {
              "type": "object",
              "defaultValue": {
                "enabled": false
              },
              "metadata": {
                "description": "Optional. The configuration for the [Domain Join] extension. Must at least contain the [\"enabled\": true] property to be executed."
              }
            },
            "extensionAadJoinConfig": {
              "type": "object",
              "defaultValue": {
                "enabled": false
              },
              "metadata": {
                "description": "Optional. The configuration for the [AAD Join] extension. Must at least contain the [\"enabled\": true] property to be executed."
              }
            },
            "extensionAntiMalwareConfig": {
              "type": "object",
              "defaultValue": {
                "enabled": false
              },
              "metadata": {
                "description": "Optional. The configuration for the [Anti Malware] extension. Must at least contain the [\"enabled\": true] property to be executed."
              }
            },
            "extensionMonitoringAgentConfig": {
              "type": "object",
              "defaultValue": {
                "enabled": false
              },
              "metadata": {
                "description": "Optional. The configuration for the [Monitoring Agent] extension. Must at least contain the [\"enabled\": true] property to be executed."
              }
            },
            "monitoringWorkspaceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of the monitoring log analytics workspace. Must be set when extensionMonitoringAgentConfig is set to true."
              }
            },
            "extensionDependencyAgentConfig": {
              "type": "object",
              "defaultValue": {
                "enabled": false
              },
              "metadata": {
                "description": "Optional. The configuration for the [Dependency Agent] extension. Must at least contain the [\"enabled\": true] property to be executed."
              }
            },
            "extensionNetworkWatcherAgentConfig": {
              "type": "object",
              "defaultValue": {
                "enabled": false
              },
              "metadata": {
                "description": "Optional. The configuration for the [Network Watcher Agent] extension. Must at least contain the [\"enabled\": true] property to be executed."
              }
            },
            "extensionAzureDiskEncryptionConfig": {
              "type": "object",
              "defaultValue": {
                "enabled": false
              },
              "metadata": {
                "description": "Optional. The configuration for the [Azure Disk Encryption] extension. Must at least contain the [\"enabled\": true] property to be executed. Restrictions: Cannot be enabled on disks that have encryption at host enabled. Managed disks encrypted using Azure Disk Encryption cannot be encrypted using customer-managed keys."
              }
            },
            "extensionDSCConfig": {
              "type": "object",
              "defaultValue": {
                "enabled": false
              },
              "metadata": {
                "description": "Optional. The configuration for the [Desired State Configuration] extension. Must at least contain the [\"enabled\": true] property to be executed."
              }
            },
            "extensionCustomScriptConfig": {
              "type": "object",
              "defaultValue": {
                "enabled": false,
                "fileData": []
              },
              "metadata": {
                "description": "Optional. The configuration for the [Custom Script] extension. Must at least contain the [\"enabled\": true] property to be executed."
              }
            },
            "extensionCustomScriptProtectedSetting": {
              "type": "secureObject",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Any object that contains the extension specific protected settings."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all resources."
              }
            },
            "diagnosticStorageAccountId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of the diagnostic storage account."
              }
            },
            "diagnosticWorkspaceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of the diagnostic log analytics workspace."
              }
            },
            "diagnosticEventHubAuthorizationRuleId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
              }
            },
            "diagnosticEventHubName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Tags of the resource."
              }
            },
            "baseTime": {
              "type": "string",
              "defaultValue": "[utcNow('u')]",
              "metadata": {
                "description": "Generated. Do not provide a value! This date value is used to generate a registration token."
              }
            },
            "sasTokenValidityLength": {
              "type": "string",
              "defaultValue": "PT8H",
              "metadata": {
                "description": "Optional. SAS token validity length to use to download files from storage accounts. Usage: 'PT8H' - valid for 8 hours; 'P5D' - valid for 5 days; 'P1Y' - valid for 1 year. When not provided, the SAS token will be valid for 8 hours."
              }
            },
            "osType": {
              "type": "string",
              "allowedValues": [
                "Windows",
                "Linux"
              ],
              "metadata": {
                "description": "Required. The chosen OS type."
              }
            },
            "disablePasswordAuthentication": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Specifies whether password authentication should be disabled."
              }
            },
            "provisionVMAgent": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Indicates whether virtual machine agent should be provisioned on the virtual machine. When this property is not specified in the request body, default behavior is to set it to true. This will ensure that VM Agent is installed on the VM so that extensions can be added to the VM later."
              }
            },
            "enableAutomaticUpdates": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Indicates whether Automatic Updates is enabled for the Windows virtual machine. Default value is true. When patchMode is set to Manual, this parameter must be set to false. For virtual machine scale sets, this property can be updated and updates will take effect on OS reprovisioning."
              }
            },
            "patchMode": {
              "type": "string",
              "defaultValue": "",
              "allowedValues": [
                "AutomaticByPlatform",
                "AutomaticByOS",
                "Manual",
                "ImageDefault",
                ""
              ],
              "metadata": {
                "description": "Optional. VM guest patching orchestration mode. 'AutomaticByOS' & 'Manual' are for Windows only, 'ImageDefault' for Linux only. Refer to 'https://learn.microsoft.com/en-us/azure/virtual-machines/automatic-vm-guest-patching'."
              }
            },
            "patchAssessmentMode": {
              "type": "string",
              "defaultValue": "ImageDefault",
              "allowedValues": [
                "AutomaticByPlatform",
                "ImageDefault"
              ],
              "metadata": {
                "description": "Optional. VM guest patching assessment mode. Set it to 'AutomaticByPlatform' to enable automatically check for updates every 24 hours."
              }
            },
            "timeZone": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Specifies the time zone of the virtual machine. e.g. 'Pacific Standard Time'. Possible values can be `TimeZoneInfo.id` value from time zones returned by `TimeZoneInfo.GetSystemTimeZones`."
              }
            },
            "additionalUnattendContent": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. Specifies additional base-64 encoded XML formatted information that can be included in the Unattend.xml file, which is used by Windows Setup. - AdditionalUnattendContent object."
              }
            },
            "winRM": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. Specifies the Windows Remote Management listeners. This enables remote Windows PowerShell. - WinRMConfiguration object."
              }
            },
            "configurationProfile": {
              "type": "string",
              "defaultValue": "",
              "allowedValues": [
                "/providers/Microsoft.Automanage/bestPractices/AzureBestPracticesProduction",
                "/providers/Microsoft.Automanage/bestPractices/AzureBestPracticesDevTest",
                ""
              ],
              "metadata": {
                "description": "Required. The configuration profile of automanage."
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "publicKeysFormatted",
                "count": "[length(parameters('publicKeys'))]",
                "input": {
                  "path": "[parameters('publicKeys')[copyIndex('publicKeysFormatted')].path]",
                  "keyData": "[parameters('publicKeys')[copyIndex('publicKeysFormatted')].keyData]"
                }
              }
            ],
            "linuxConfiguration": {
              "disablePasswordAuthentication": "[parameters('disablePasswordAuthentication')]",
              "ssh": {
                "publicKeys": "[variables('publicKeysFormatted')]"
              },
              "provisionVMAgent": "[parameters('provisionVMAgent')]",
              "patchSettings": "[if(and(parameters('provisionVMAgent'), or(equals(toLower(parameters('patchMode')), toLower('AutomaticByPlatform')), equals(toLower(parameters('patchMode')), toLower('ImageDefault')))), createObject('patchMode', parameters('patchMode'), 'assessmentMode', parameters('patchAssessmentMode')), null())]"
            },
            "windowsConfiguration": {
              "provisionVMAgent": "[parameters('provisionVMAgent')]",
              "enableAutomaticUpdates": "[parameters('enableAutomaticUpdates')]",
              "patchSettings": "[if(and(parameters('provisionVMAgent'), or(or(equals(toLower(parameters('patchMode')), toLower('AutomaticByPlatform')), equals(toLower(parameters('patchMode')), toLower('AutomaticByOS'))), equals(toLower(parameters('patchMode')), toLower('Manual')))), createObject('patchMode', parameters('patchMode'), 'assessmentMode', parameters('patchAssessmentMode')), null())]",
              "timeZone": "[if(empty(parameters('timeZone')), null(), parameters('timeZone'))]",
              "additionalUnattendContent": "[if(empty(parameters('additionalUnattendContent')), null(), parameters('additionalUnattendContent'))]",
              "winRM": "[if(not(empty(parameters('winRM'))), createObject('listeners', parameters('winRM')), null())]"
            },
            "accountSasProperties": {
              "signedServices": "b",
              "signedPermission": "r",
              "signedExpiry": "[dateTimeAdd(parameters('baseTime'), parameters('sasTokenValidityLength'))]",
              "signedResourceTypes": "o",
              "signedProtocol": "https"
            },
            "identityType": "[if(if(parameters('extensionAadJoinConfig').enabled, true(), parameters('systemAssignedIdentity')), if(not(empty(parameters('userAssignedIdentities'))), 'SystemAssigned, UserAssigned', 'SystemAssigned'), if(not(empty(parameters('userAssignedIdentities'))), 'UserAssigned', 'None'))]",
            "identity": "[if(not(equals(variables('identityType'), 'None')), createObject('type', variables('identityType'), 'userAssignedIdentities', if(not(empty(parameters('userAssignedIdentities'))), parameters('userAssignedIdentities'), null())), null())]"
          },
          "resources": [
            {
              "type": "Microsoft.Compute/virtualMachines",
              "apiVersion": "2022-11-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "identity": "[variables('identity')]",
              "tags": "[parameters('tags')]",
              "zones": "[if(not(equals(parameters('availabilityZone'), 0)), array(parameters('availabilityZone')), null())]",
              "plan": "[if(not(empty(parameters('plan'))), parameters('plan'), null())]",
              "properties": {
                "hardwareProfile": {
                  "vmSize": "[parameters('vmSize')]"
                },
                "securityProfile": {
                  "encryptionAtHost": "[if(parameters('encryptionAtHost'), parameters('encryptionAtHost'), null())]",
                  "securityType": "[if(not(equals(parameters('securityType'), 'Standard')), parameters('securityType'), null())]",
                  "uefiSettings": "[if(not(equals(parameters('securityType'), 'Standard')), createObject('secureBootEnabled', parameters('secureBootEnabled'), 'vTpmEnabled', parameters('vTpmEnabled')), null())]"
                },
                "storageProfile": {
                  "copy": [
                    {
                      "name": "dataDisks",
                      "count": "[length(parameters('dataDisks'))]",
                      "input": {
                        "lun": "[copyIndex('dataDisks')]",
                        "name": "[format('{0}-disk-data-{1}', parameters('name'), padLeft(add(copyIndex('dataDisks'), 1), 2, '0'))]",
                        "diskSizeGB": "[parameters('dataDisks')[copyIndex('dataDisks')].diskSizeGB]",
                        "createOption": "[coalesce(tryGet(parameters('dataDisks')[copyIndex('dataDisks')], 'createOption'), 'Empty')]",
                        "deleteOption": "[coalesce(tryGet(parameters('dataDisks')[copyIndex('dataDisks')], 'deleteOption'), 'Delete')]",
                        "caching": "[coalesce(tryGet(parameters('dataDisks')[copyIndex('dataDisks')], 'caching'), 'ReadOnly')]",
                        "managedDisk": {
                          "storageAccountType": "[parameters('dataDisks')[copyIndex('dataDisks')].managedDisk.storageAccountType]",
                          "diskEncryptionSet": "[if(contains(parameters('dataDisks')[copyIndex('dataDisks')].managedDisk, 'diskEncryptionSet'), createObject('id', parameters('dataDisks')[copyIndex('dataDisks')].managedDisk.diskEncryptionSet.id), null())]"
                        }
                      }
                    }
                  ],
                  "imageReference": "[parameters('imageReference')]",
                  "osDisk": {
                    "name": "[format('{0}-disk-os-01', parameters('name'))]",
                    "createOption": "[coalesce(tryGet(parameters('osDisk'), 'createOption'), 'FromImage')]",
                    "deleteOption": "[coalesce(tryGet(parameters('osDisk'), 'deleteOption'), 'Delete')]",
                    "diskSizeGB": "[parameters('osDisk').diskSizeGB]",
                    "caching": "[coalesce(tryGet(parameters('osDisk'), 'caching'), 'ReadOnly')]",
                    "managedDisk": {
                      "storageAccountType": "[parameters('osDisk').managedDisk.storageAccountType]",
                      "diskEncryptionSet": "[if(contains(parameters('osDisk').managedDisk, 'diskEncryptionSet'), createObject('id', parameters('osDisk').managedDisk.diskEncryptionSet.id), null())]"
                    }
                  }
                },
                "additionalCapabilities": {
                  "ultraSSDEnabled": "[parameters('ultraSSDEnabled')]"
                },
                "osProfile": {
                  "computerName": "[parameters('computerName')]",
                  "adminUsername": "[parameters('adminUsername')]",
                  "adminPassword": "[parameters('adminPassword')]",
                  "customData": "[if(not(empty(parameters('customData'))), base64(parameters('customData')), null())]",
                  "windowsConfiguration": "[if(equals(parameters('osType'), 'Windows'), variables('windowsConfiguration'), null())]",
                  "linuxConfiguration": "[if(equals(parameters('osType'), 'Linux'), variables('linuxConfiguration'), null())]",
                  "secrets": "[parameters('certificatesToBeInstalled')]",
                  "allowExtensionOperations": "[parameters('allowExtensionOperations')]"
                },
                "networkProfile": {
                  "copy": [
                    {
                      "name": "networkInterfaces",
                      "count": "[length(parameters('nicConfigurations'))]",
                      "input": {
                        "properties": {
                          "deleteOption": "[coalesce(tryGet(parameters('nicConfigurations')[copyIndex('networkInterfaces')], 'deleteOption'), 'Delete')]",
                          "primary": "[if(equals(copyIndex('networkInterfaces'), 0), true(), false())]"
                        },
                        "id": "[resourceId('Microsoft.Network/networkInterfaces', format('{0}{1}', parameters('name'), parameters('nicConfigurations')[copyIndex('networkInterfaces')].nicSuffix))]"
                      }
                    }
                  ]
                },
                "diagnosticsProfile": {
                  "bootDiagnostics": {
                    "enabled": "[if(not(empty(parameters('bootDiagnosticStorageAccountName'))), true(), parameters('bootDiagnostics'))]",
                    "storageUri": "[if(not(empty(parameters('bootDiagnosticStorageAccountName'))), format('https://{0}{1}', parameters('bootDiagnosticStorageAccountName'), parameters('bootDiagnosticStorageAccountUri')), null())]"
                  }
                },
                "availabilitySet": "[if(not(empty(parameters('availabilitySetResourceId'))), createObject('id', parameters('availabilitySetResourceId')), null())]",
                "proximityPlacementGroup": "[if(not(empty(parameters('proximityPlacementGroupResourceId'))), createObject('id', parameters('proximityPlacementGroupResourceId')), null())]",
                "priority": "[parameters('priority')]",
                "evictionPolicy": "[if(parameters('enableEvictionPolicy'), 'Deallocate', null())]",
                "billingProfile": "[if(and(not(empty(parameters('priority'))), not(equals(parameters('maxPriceForLowPriorityVm'), -1))), createObject('maxPrice', parameters('maxPriceForLowPriorityVm')), null())]",
                "host": "[if(not(empty(parameters('dedicatedHostId'))), createObject('id', parameters('dedicatedHostId')), null())]",
                "licenseType": "[if(not(empty(parameters('licenseType'))), parameters('licenseType'), null())]"
              },
              "dependsOn": [
                "vm_nic"
              ]
            },
            {
              "condition": "[not(empty(parameters('configurationProfile')))]",
              "type": "Microsoft.Automanage/configurationProfileAssignments",
              "apiVersion": "2021-04-30-preview",
              "scope": "[format('Microsoft.Compute/virtualMachines/{0}', parameters('name'))]",
              "name": "default",
              "properties": {
                "configurationProfile": "[parameters('configurationProfile')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
              ]
            },
            {
              "copy": {
                "name": "vm_nic",
                "count": "[length(parameters('nicConfigurations'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-VM-Nic-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "networkInterfaceName": {
                    "value": "[format('{0}{1}', parameters('name'), parameters('nicConfigurations')[copyIndex()].nicSuffix)]"
                  },
                  "virtualMachineName": {
                    "value": "[parameters('name')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "enableIPForwarding": "[if(contains(parameters('nicConfigurations')[copyIndex()], 'enableIPForwarding'), if(not(empty(parameters('nicConfigurations')[copyIndex()].enableIPForwarding)), createObject('value', parameters('nicConfigurations')[copyIndex()].enableIPForwarding), createObject('value', false())), createObject('value', false()))]",
                  "enableAcceleratedNetworking": {
                    "value": "[coalesce(tryGet(parameters('nicConfigurations')[copyIndex()], 'enableAcceleratedNetworking'), true())]"
                  },
                  "dnsServers": "[if(contains(parameters('nicConfigurations')[copyIndex()], 'dnsServers'), if(not(empty(parameters('nicConfigurations')[copyIndex()].dnsServers)), createObject('value', parameters('nicConfigurations')[copyIndex()].dnsServers), createObject('value', createArray())), createObject('value', createArray()))]",
                  "networkSecurityGroupResourceId": {
                    "value": "[coalesce(tryGet(parameters('nicConfigurations')[copyIndex()], 'networkSecurityGroupResourceId'), '')]"
                  },
                  "ipConfigurations": {
                    "value": "[parameters('nicConfigurations')[copyIndex()].ipConfigurations]"
                  },
                  "diagnosticStorageAccountId": {
                    "value": "[parameters('diagnosticStorageAccountId')]"
                  },
                  "diagnosticWorkspaceId": {
                    "value": "[parameters('diagnosticWorkspaceId')]"
                  },
                  "diagnosticEventHubAuthorizationRuleId": {
                    "value": "[parameters('diagnosticEventHubAuthorizationRuleId')]"
                  },
                  "diagnosticEventHubName": {
                    "value": "[parameters('diagnosticEventHubName')]"
                  },
                  "pipDiagnosticSettingsName": {
                    "value": "[parameters('pipDiagnosticSettingsName')]"
                  },
                  "nicDiagnosticSettingsName": {
                    "value": "[parameters('nicDiagnosticSettingsName')]"
                  },
                  "pipdiagnosticMetricsToEnable": {
                    "value": "[parameters('pipdiagnosticMetricsToEnable')]"
                  },
                  "pipdiagnosticLogCategoriesToEnable": {
                    "value": "[parameters('pipdiagnosticLogCategoriesToEnable')]"
                  },
                  "nicDiagnosticMetricsToEnable": {
                    "value": "[parameters('nicdiagnosticMetricsToEnable')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.33.93.31351",
                      "templateHash": "14484357329155131419"
                    }
                  },
                  "parameters": {
                    "networkInterfaceName": {
                      "type": "string"
                    },
                    "virtualMachineName": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "enableIPForwarding": {
                      "type": "bool",
                      "defaultValue": false
                    },
                    "enableAcceleratedNetworking": {
                      "type": "bool",
                      "defaultValue": false
                    },
                    "dnsServers": {
                      "type": "array",
                      "defaultValue": []
                    },
                    "networkSecurityGroupResourceId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The network security group (NSG) to attach to the network interface."
                      }
                    },
                    "ipConfigurations": {
                      "type": "array"
                    },
                    "diagnosticStorageAccountId": {
                      "type": "string"
                    },
                    "diagnosticWorkspaceId": {
                      "type": "string"
                    },
                    "diagnosticEventHubAuthorizationRuleId": {
                      "type": "string"
                    },
                    "diagnosticEventHubName": {
                      "type": "string"
                    },
                    "pipdiagnosticMetricsToEnable": {
                      "type": "array"
                    },
                    "pipdiagnosticLogCategoriesToEnable": {
                      "type": "array"
                    },
                    "nicDiagnosticMetricsToEnable": {
                      "type": "array"
                    },
                    "pipDiagnosticSettingsName": {
                      "type": "string",
                      "defaultValue": "[format('{0}-diagnosticSettings', parameters('virtualMachineName'))]",
                      "metadata": {
                        "description": "Optional. The name of the PIP diagnostic setting, if deployed."
                      }
                    },
                    "nicDiagnosticSettingsName": {
                      "type": "string",
                      "defaultValue": "[format('{0}-diagnosticSettings', parameters('virtualMachineName'))]",
                      "metadata": {
                        "description": "Optional. The name of the NIC diagnostic setting, if deployed."
                      }
                    }
                  },
                  "resources": [
                    {
                      "copy": {
                        "name": "networkInterface_publicIPAddresses",
                        "count": "[length(parameters('ipConfigurations'))]"
                      },
                      "condition": "[contains(parameters('ipConfigurations')[copyIndex()], 'pipconfiguration')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-publicIP-{1}', deployment().name, copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[format('{0}{1}', parameters('virtualMachineName'), parameters('ipConfigurations')[copyIndex()].pipconfiguration.publicIpNameSuffix)]"
                          },
                          "diagnosticEventHubAuthorizationRuleId": {
                            "value": "[parameters('diagnosticEventHubAuthorizationRuleId')]"
                          },
                          "diagnosticEventHubName": {
                            "value": "[parameters('diagnosticEventHubName')]"
                          },
                          "diagnosticLogCategoriesToEnable": {
                            "value": "[parameters('pipdiagnosticLogCategoriesToEnable')]"
                          },
                          "diagnosticMetricsToEnable": {
                            "value": "[parameters('pipdiagnosticMetricsToEnable')]"
                          },
                          "diagnosticSettingsName": {
                            "value": "[parameters('pipDiagnosticSettingsName')]"
                          },
                          "diagnosticStorageAccountId": {
                            "value": "[parameters('diagnosticStorageAccountId')]"
                          },
                          "diagnosticWorkspaceId": {
                            "value": "[parameters('diagnosticWorkspaceId')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "publicIPAddressVersion": {
                            "value": "[coalesce(tryGet(parameters('ipConfigurations')[copyIndex()], 'publicIPAddressVersion'), 'IPv4')]"
                          },
                          "publicIPAllocationMethod": {
                            "value": "[coalesce(tryGet(parameters('ipConfigurations')[copyIndex()], 'publicIPAllocationMethod'), 'Static')]"
                          },
                          "publicIPPrefixResourceId": {
                            "value": "[coalesce(tryGet(parameters('ipConfigurations')[copyIndex()], 'publicIPPrefixResourceId'), '')]"
                          },
                          "skuName": {
                            "value": "[coalesce(tryGet(parameters('ipConfigurations')[copyIndex()], 'skuName'), 'Standard')]"
                          },
                          "skuTier": {
                            "value": "[coalesce(tryGet(parameters('ipConfigurations')[copyIndex()], 'skuTier'), 'Regional')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "zones": {
                            "value": "[coalesce(tryGet(parameters('ipConfigurations')[copyIndex()], 'zones'), createArray())]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.33.93.31351",
                              "templateHash": "15720807152690696617"
                            },
                            "name": "Public IP Addresses",
                            "description": "This module deploys a Public IP Address.",
                            "owner": "Azure/module-maintainers"
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the Public IP Address."
                              }
                            },
                            "publicIPPrefixResourceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of the Public IP Prefix object. This is only needed if you want your Public IPs created in a PIP Prefix."
                              }
                            },
                            "publicIPAllocationMethod": {
                              "type": "string",
                              "defaultValue": "Static",
                              "allowedValues": [
                                "Dynamic",
                                "Static"
                              ],
                              "metadata": {
                                "description": "Optional. The public IP address allocation method."
                              }
                            },
                            "skuName": {
                              "type": "string",
                              "defaultValue": "Standard",
                              "allowedValues": [
                                "Basic",
                                "Standard"
                              ],
                              "metadata": {
                                "description": "Optional. Name of a public IP address SKU."
                              }
                            },
                            "skuTier": {
                              "type": "string",
                              "defaultValue": "Regional",
                              "allowedValues": [
                                "Global",
                                "Regional"
                              ],
                              "metadata": {
                                "description": "Optional. Tier of a public IP address SKU."
                              }
                            },
                            "zones": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. A list of availability zones denoting the IP allocated for the resource needs to come from."
                              }
                            },
                            "publicIPAddressVersion": {
                              "type": "string",
                              "defaultValue": "IPv4",
                              "allowedValues": [
                                "IPv4",
                                "IPv6"
                              ],
                              "metadata": {
                                "description": "Optional. IP address version."
                              }
                            },
                            "diagnosticStorageAccountId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of the diagnostic storage account."
                              }
                            },
                            "diagnosticWorkspaceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of the diagnostic log analytics workspace."
                              }
                            },
                            "diagnosticEventHubAuthorizationRuleId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                              }
                            },
                            "diagnosticEventHubName": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
                              }
                            },
                            "domainNameLabel": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The domain name label. The concatenation of the domain name label and the regionalized DNS zone make up the fully qualified domain name associated with the public IP address. If a domain name label is specified, an A DNS record is created for the public IP in the Microsoft Azure DNS system."
                              }
                            },
                            "domainNameLabelScope": {
                              "type": "string",
                              "defaultValue": "",
                              "allowedValues": [
                                "",
                                "NoReuse",
                                "ResourceGroupReuse",
                                "SubscriptionReuse",
                                "TenantReuse"
                              ],
                              "metadata": {
                                "description": "Optional. The domain name label scope. If a domain name label and a domain name label scope are specified, an A DNS record is created for the public IP in the Microsoft Azure DNS system with a hashed value includes in FQDN."
                              }
                            },
                            "fqdn": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The Fully Qualified Domain Name of the A DNS record associated with the public IP. This is the concatenation of the domainNameLabel and the regionalized DNS zone."
                              }
                            },
                            "reverseFqdn": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The reverse FQDN. A user-visible, fully qualified domain name that resolves to this public IP address. If the reverseFqdn is specified, then a PTR DNS record is created pointing from the IP address in the in-addr.arpa domain to the reverse FQDN."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. Location for all resources."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Tags of the resource."
                              }
                            },
                            "diagnosticLogCategoriesToEnable": {
                              "type": "array",
                              "defaultValue": [
                                "allLogs"
                              ],
                              "allowedValues": [
                                "",
                                "allLogs",
                                "DDoSProtectionNotifications",
                                "DDoSMitigationFlowLogs",
                                "DDoSMitigationReports"
                              ],
                              "metadata": {
                                "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to '' to disable log collection."
                              }
                            },
                            "diagnosticMetricsToEnable": {
                              "type": "array",
                              "defaultValue": [
                                "AllMetrics"
                              ],
                              "allowedValues": [
                                "AllMetrics"
                              ],
                              "metadata": {
                                "description": "Optional. The name of metrics that will be streamed."
                              }
                            },
                            "diagnosticSettingsName": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The name of the diagnostic setting, if deployed. If left empty, it defaults to \"<resourceName>-diagnosticSettings\"."
                              }
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "diagnosticsLogsSpecified",
                                "count": "[length(filter(parameters('diagnosticLogCategoriesToEnable'), lambda('item', and(not(equals(lambdaVariables('item'), 'allLogs')), not(equals(lambdaVariables('item'), ''))))))]",
                                "input": {
                                  "category": "[filter(parameters('diagnosticLogCategoriesToEnable'), lambda('item', and(not(equals(lambdaVariables('item'), 'allLogs')), not(equals(lambdaVariables('item'), '')))))[copyIndex('diagnosticsLogsSpecified')]]",
                                  "enabled": true
                                }
                              },
                              {
                                "name": "diagnosticsMetrics",
                                "count": "[length(parameters('diagnosticMetricsToEnable'))]",
                                "input": {
                                  "category": "[parameters('diagnosticMetricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                                  "timeGrain": null,
                                  "enabled": true
                                }
                              }
                            ],
                            "diagnosticsLogs": "[if(contains(parameters('diagnosticLogCategoriesToEnable'), 'allLogs'), createArray(createObject('categoryGroup', 'allLogs', 'enabled', true())), if(contains(parameters('diagnosticLogCategoriesToEnable'), ''), createArray(), variables('diagnosticsLogsSpecified')))]"
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/publicIPAddresses",
                              "apiVersion": "2023-04-01",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "sku": {
                                "name": "[parameters('skuName')]",
                                "tier": "[parameters('skuTier')]"
                              },
                              "zones": "[parameters('zones')]",
                              "properties": {
                                "dnsSettings": "[if(not(empty(parameters('domainNameLabel'))), createObject('domainNameLabel', parameters('domainNameLabel'), 'domainNameLabelScope', if(not(empty(parameters('domainNameLabelScope'))), if(equals(parameters('domainNameLabelScope'), 'NoReuse'), 'NoReuse', if(equals(parameters('domainNameLabelScope'), 'ResourceGroupReuse'), 'ResourceGroupReuse', if(equals(parameters('domainNameLabelScope'), 'SubscriptionReuse'), 'SubscriptionReuse', 'TenantReuse'))), null()), 'fqdn', parameters('fqdn'), 'reverseFqdn', parameters('reverseFqdn')), null())]",
                                "publicIPAddressVersion": "[parameters('publicIPAddressVersion')]",
                                "publicIPAllocationMethod": "[parameters('publicIPAllocationMethod')]",
                                "publicIPPrefix": "[if(not(empty(parameters('publicIPPrefixResourceId'))), createObject('id', parameters('publicIPPrefixResourceId')), null())]",
                                "idleTimeoutInMinutes": 4,
                                "ipTags": []
                              }
                            },
                            {
                              "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('diagnosticWorkspaceId')))), not(empty(parameters('diagnosticEventHubAuthorizationRuleId')))), not(empty(parameters('diagnosticEventHubName'))))]",
                              "type": "Microsoft.Insights/diagnosticSettings",
                              "apiVersion": "2021-05-01-preview",
                              "scope": "[format('Microsoft.Network/publicIPAddresses/{0}', parameters('name'))]",
                              "name": "[if(not(empty(parameters('diagnosticSettingsName'))), parameters('diagnosticSettingsName'), format('{0}-diagnosticSettings', parameters('name')))]",
                              "properties": {
                                "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                                "workspaceId": "[if(not(empty(parameters('diagnosticWorkspaceId'))), parameters('diagnosticWorkspaceId'), null())]",
                                "eventHubAuthorizationRuleId": "[if(not(empty(parameters('diagnosticEventHubAuthorizationRuleId'))), parameters('diagnosticEventHubAuthorizationRuleId'), null())]",
                                "eventHubName": "[if(not(empty(parameters('diagnosticEventHubName'))), parameters('diagnosticEventHubName'), null())]",
                                "metrics": "[variables('diagnosticsMetrics')]",
                                "logs": "[variables('diagnosticsLogs')]"
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/publicIPAddresses', parameters('name'))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group the public IP address was deployed into."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the public IP address."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the public IP address."
                              },
                              "value": "[resourceId('Microsoft.Network/publicIPAddresses', parameters('name'))]"
                            },
                            "ipAddress": {
                              "type": "string",
                              "metadata": {
                                "description": "The public IP address of the public IP address resource."
                              },
                              "value": "[coalesce(tryGet(reference(resourceId('Microsoft.Network/publicIPAddresses', parameters('name')), '2023-04-01'), 'ipAddress'), '')]"
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "The location the resource was deployed into."
                              },
                              "value": "[reference(resourceId('Microsoft.Network/publicIPAddresses', parameters('name')), '2023-04-01', 'full').location]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-NetworkInterface', deployment().name)]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[parameters('networkInterfaceName')]"
                          },
                          "ipConfigurations": {
                            "copy": [
                              {
                                "name": "value",
                                "count": "[length(parameters('ipConfigurations'))]",
                                "input": "[createObject('name', if(not(empty(parameters('ipConfigurations')[copyIndex('value')].name)), parameters('ipConfigurations')[copyIndex('value')].name, null()), 'primary', equals(copyIndex('value'), 0), 'privateIPAllocationMethod', if(contains(parameters('ipConfigurations')[copyIndex('value')], 'privateIPAllocationMethod'), if(not(empty(parameters('ipConfigurations')[copyIndex('value')].privateIPAllocationMethod)), parameters('ipConfigurations')[copyIndex('value')].privateIPAllocationMethod, null()), null()), 'privateIPAddress', if(contains(parameters('ipConfigurations')[copyIndex('value')], 'privateIPAddress'), if(not(empty(parameters('ipConfigurations')[copyIndex('value')].privateIPAddress)), parameters('ipConfigurations')[copyIndex('value')].privateIPAddress, null()), null()), 'publicIPAddressResourceId', if(contains(parameters('ipConfigurations')[copyIndex('value')], 'pipconfiguration'), resourceId('Microsoft.Network/publicIPAddresses', format('{0}{1}', parameters('virtualMachineName'), parameters('ipConfigurations')[copyIndex('value')].pipconfiguration.publicIpNameSuffix)), null()), 'subnetResourceId', parameters('ipConfigurations')[copyIndex('value')].subnetResourceId, 'loadBalancerBackendAddressPools', coalesce(tryGet(parameters('ipConfigurations')[copyIndex('value')], 'loadBalancerBackendAddressPools'), null()), 'applicationSecurityGroups', coalesce(tryGet(parameters('ipConfigurations')[copyIndex('value')], 'applicationSecurityGroups'), null()), 'applicationGatewayBackendAddressPools', coalesce(tryGet(parameters('ipConfigurations')[copyIndex('value')], 'applicationGatewayBackendAddressPools'), null()), 'gatewayLoadBalancer', coalesce(tryGet(parameters('ipConfigurations')[copyIndex('value')], 'gatewayLoadBalancer'), null()), 'loadBalancerInboundNatRules', coalesce(tryGet(parameters('ipConfigurations')[copyIndex('value')], 'loadBalancerInboundNatRules'), null()), 'privateIPAddressVersion', coalesce(tryGet(parameters('ipConfigurations')[copyIndex('value')], 'privateIPAddressVersion'), null()), 'virtualNetworkTaps', coalesce(tryGet(parameters('ipConfigurations')[copyIndex('value')], 'virtualNetworkTaps'), null()))]"
                              }
                            ]
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "diagnosticEventHubAuthorizationRuleId": {
                            "value": "[parameters('diagnosticEventHubAuthorizationRuleId')]"
                          },
                          "diagnosticEventHubName": {
                            "value": "[parameters('diagnosticEventHubName')]"
                          },
                          "diagnosticStorageAccountId": {
                            "value": "[parameters('diagnosticStorageAccountId')]"
                          },
                          "diagnosticMetricsToEnable": {
                            "value": "[parameters('nicDiagnosticMetricsToEnable')]"
                          },
                          "diagnosticSettingsName": {
                            "value": "[parameters('nicDiagnosticSettingsName')]"
                          },
                          "diagnosticWorkspaceId": {
                            "value": "[parameters('diagnosticWorkspaceId')]"
                          },
                          "dnsServers": "[if(not(empty(parameters('dnsServers'))), createObject('value', parameters('dnsServers')), createObject('value', createArray()))]",
                          "enableAcceleratedNetworking": {
                            "value": "[parameters('enableAcceleratedNetworking')]"
                          },
                          "enableIPForwarding": {
                            "value": "[parameters('enableIPForwarding')]"
                          },
                          "networkSecurityGroupResourceId": "[if(not(empty(parameters('networkSecurityGroupResourceId'))), createObject('value', parameters('networkSecurityGroupResourceId')), createObject('value', ''))]"
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.33.93.31351",
                              "templateHash": "4954422085139593724"
                            },
                            "name": "Network Interface",
                            "description": "This module deploys a Network Interface.",
                            "owner": "Azure/module-maintainers"
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the network interface."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. Location for all resources."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Tags of the resource."
                              }
                            },
                            "enableIPForwarding": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Indicates whether IP forwarding is enabled on this network interface."
                              }
                            },
                            "enableAcceleratedNetworking": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. If the network interface is accelerated networking enabled."
                              }
                            },
                            "dnsServers": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. List of DNS servers IP addresses. Use 'AzureProvidedDNS' to switch to azure provided DNS resolution. 'AzureProvidedDNS' value cannot be combined with other IPs, it must be the only value in dnsServers collection."
                              }
                            },
                            "networkSecurityGroupResourceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The network security group (NSG) to attach to the network interface."
                              }
                            },
                            "auxiliaryMode": {
                              "type": "string",
                              "defaultValue": "None",
                              "allowedValues": [
                                "Floating",
                                "MaxConnections",
                                "None"
                              ],
                              "metadata": {
                                "description": "Optional. Auxiliary mode of Network Interface resource. Not all regions are enabled for Auxiliary Mode Nic."
                              }
                            },
                            "auxiliarySku": {
                              "type": "string",
                              "defaultValue": "None",
                              "allowedValues": [
                                "A1",
                                "A2",
                                "A4",
                                "A8",
                                "None"
                              ],
                              "metadata": {
                                "description": "Optional. Auxiliary sku of Network Interface resource. Not all regions are enabled for Auxiliary Mode Nic."
                              }
                            },
                            "disableTcpStateTracking": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Indicates whether to disable tcp state tracking. Subscription must be registered for the Microsoft.Network/AllowDisableTcpStateTracking feature before this property can be set to true."
                              }
                            },
                            "ipConfigurations": {
                              "type": "array",
                              "metadata": {
                                "description": "Required. A list of IPConfigurations of the network interface."
                              }
                            },
                            "diagnosticStorageAccountId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of the diagnostic storage account."
                              }
                            },
                            "diagnosticWorkspaceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource identifier of log analytics."
                              }
                            },
                            "diagnosticEventHubAuthorizationRuleId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                              }
                            },
                            "diagnosticEventHubName": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
                              }
                            },
                            "diagnosticMetricsToEnable": {
                              "type": "array",
                              "defaultValue": [
                                "AllMetrics"
                              ],
                              "allowedValues": [
                                "AllMetrics"
                              ],
                              "metadata": {
                                "description": "Optional. The name of metrics that will be streamed."
                              }
                            },
                            "diagnosticSettingsName": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The name of the diagnostic setting, if deployed. If left empty, it defaults to \"<resourceName>-diagnosticSettings\"."
                              }
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "diagnosticsMetrics",
                                "count": "[length(parameters('diagnosticMetricsToEnable'))]",
                                "input": {
                                  "category": "[parameters('diagnosticMetricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                                  "timeGrain": null,
                                  "enabled": true
                                }
                              }
                            ]
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/networkInterfaces",
                              "apiVersion": "2023-04-01",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "copy": [
                                  {
                                    "name": "ipConfigurations",
                                    "count": "[length(parameters('ipConfigurations'))]",
                                    "input": {
                                      "name": "[coalesce(tryGet(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'name'), format('ipconfig0{0}', add(copyIndex('ipConfigurations'), 1)))]",
                                      "properties": {
                                        "primary": "[if(equals(copyIndex('ipConfigurations'), 0), true(), false())]",
                                        "privateIPAllocationMethod": "[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'privateIPAllocationMethod'), if(not(empty(parameters('ipConfigurations')[copyIndex('ipConfigurations')].privateIPAllocationMethod)), parameters('ipConfigurations')[copyIndex('ipConfigurations')].privateIPAllocationMethod, null()), null())]",
                                        "privateIPAddress": "[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'privateIPAddress'), if(not(empty(parameters('ipConfigurations')[copyIndex('ipConfigurations')].privateIPAddress)), parameters('ipConfigurations')[copyIndex('ipConfigurations')].privateIPAddress, null()), null())]",
                                        "publicIPAddress": "[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'publicIPAddressResourceId'), if(not(equals(parameters('ipConfigurations')[copyIndex('ipConfigurations')].publicIPAddressResourceId, null())), createObject('id', parameters('ipConfigurations')[copyIndex('ipConfigurations')].publicIPAddressResourceId), null()), null())]",
                                        "subnet": {
                                          "id": "[parameters('ipConfigurations')[copyIndex('ipConfigurations')].subnetResourceId]"
                                        },
                                        "loadBalancerBackendAddressPools": "[coalesce(tryGet(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'loadBalancerBackendAddressPools'), null())]",
                                        "applicationSecurityGroups": "[coalesce(tryGet(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'applicationSecurityGroups'), null())]",
                                        "applicationGatewayBackendAddressPools": "[coalesce(tryGet(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'applicationGatewayBackendAddressPools'), null())]",
                                        "gatewayLoadBalancer": "[coalesce(tryGet(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'gatewayLoadBalancer'), null())]",
                                        "loadBalancerInboundNatRules": "[coalesce(tryGet(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'loadBalancerInboundNatRules'), null())]",
                                        "privateIPAddressVersion": "[coalesce(tryGet(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'privateIPAddressVersion'), null())]",
                                        "virtualNetworkTaps": "[coalesce(tryGet(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'virtualNetworkTaps'), null())]"
                                      }
                                    }
                                  }
                                ],
                                "auxiliaryMode": "[parameters('auxiliaryMode')]",
                                "auxiliarySku": "[parameters('auxiliarySku')]",
                                "disableTcpStateTracking": "[parameters('disableTcpStateTracking')]",
                                "dnsSettings": "[if(not(empty(parameters('dnsServers'))), createObject('dnsServers', parameters('dnsServers')), null())]",
                                "enableAcceleratedNetworking": "[parameters('enableAcceleratedNetworking')]",
                                "enableIPForwarding": "[parameters('enableIPForwarding')]",
                                "networkSecurityGroup": "[if(not(empty(parameters('networkSecurityGroupResourceId'))), createObject('id', parameters('networkSecurityGroupResourceId')), null())]"
                              }
                            },
                            {
                              "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('diagnosticWorkspaceId')))), not(empty(parameters('diagnosticEventHubAuthorizationRuleId')))), not(empty(parameters('diagnosticEventHubName'))))]",
                              "type": "Microsoft.Insights/diagnosticSettings",
                              "apiVersion": "2021-05-01-preview",
                              "scope": "[format('Microsoft.Network/networkInterfaces/{0}', parameters('name'))]",
                              "name": "[if(not(empty(parameters('diagnosticSettingsName'))), parameters('diagnosticSettingsName'), format('{0}-diagnosticSettings', parameters('name')))]",
                              "properties": {
                                "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                                "workspaceId": "[if(not(empty(parameters('diagnosticWorkspaceId'))), parameters('diagnosticWorkspaceId'), null())]",
                                "eventHubAuthorizationRuleId": "[if(not(empty(parameters('diagnosticEventHubAuthorizationRuleId'))), parameters('diagnosticEventHubAuthorizationRuleId'), null())]",
                                "eventHubName": "[if(not(empty(parameters('diagnosticEventHubName'))), parameters('diagnosticEventHubName'), null())]",
                                "metrics": "[variables('diagnosticsMetrics')]"
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/networkInterfaces', parameters('name'))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the deployed resource."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the deployed resource."
                              },
                              "value": "[resourceId('Microsoft.Network/networkInterfaces', parameters('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group of the deployed resource."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "The location the resource was deployed into."
                              },
                              "value": "[reference(resourceId('Microsoft.Network/networkInterfaces', parameters('name')), '2023-04-01', 'full').location]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "networkInterface_publicIPAddresses"
                      ]
                    }
                  ]
                }
              }
            },
            {
              "condition": "[parameters('extensionAadJoinConfig').enabled]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-VM-AADLogin', uniqueString(deployment().name, parameters('location')))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "virtualMachineName": {
                    "value": "[parameters('name')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "name": {
                    "value": "AADLogin"
                  },
                  "publisher": {
                    "value": "Microsoft.Azure.ActiveDirectory"
                  },
                  "type": "[if(equals(parameters('osType'), 'Windows'), createObject('value', 'AADLoginForWindows'), createObject('value', 'AADSSHLoginforLinux'))]",
                  "typeHandlerVersion": {
                    "value": "[coalesce(tryGet(parameters('extensionAadJoinConfig'), 'typeHandlerVersion'), '1.0')]"
                  },
                  "autoUpgradeMinorVersion": {
                    "value": "[coalesce(tryGet(parameters('extensionAadJoinConfig'), 'autoUpgradeMinorVersion'), true())]"
                  },
                  "enableAutomaticUpgrade": {
                    "value": "[coalesce(tryGet(parameters('extensionAadJoinConfig'), 'enableAutomaticUpgrade'), false())]"
                  },
                  "settings": {
                    "value": "[coalesce(tryGet(parameters('extensionAadJoinConfig'), 'settings'), createObject())]"
                  },
                  "tags": {
                    "value": "[coalesce(tryGet(parameters('extensionAadJoinConfig'), 'tags'), createObject())]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.33.93.31351",
                      "templateHash": "11887421850832144050"
                    },
                    "name": "Virtual Machine Extensions",
                    "description": "This module deploys a Virtual Machine Extension.",
                    "owner": "Azure/module-maintainers"
                  },
                  "parameters": {
                    "virtualMachineName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the virtual machine extension."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. The location the extension is deployed to."
                      }
                    },
                    "publisher": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the extension handler publisher."
                      }
                    },
                    "type": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\"."
                      }
                    },
                    "typeHandlerVersion": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Specifies the version of the script handler."
                      }
                    },
                    "autoUpgradeMinorVersion": {
                      "type": "bool",
                      "metadata": {
                        "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."
                      }
                    },
                    "forceUpdateTag": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed."
                      }
                    },
                    "settings": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Any object that contains the extension specific settings."
                      }
                    },
                    "protectedSettings": {
                      "type": "secureObject",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Any object that contains the extension specific protected settings."
                      }
                    },
                    "supressFailures": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false."
                      }
                    },
                    "enableAutomaticUpgrade": {
                      "type": "bool",
                      "metadata": {
                        "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2022-11-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "publisher": "[parameters('publisher')]",
                        "type": "[parameters('type')]",
                        "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                        "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                        "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                        "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                        "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                        "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                        "suppressFailures": "[parameters('supressFailures')]"
                      }
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the extension."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the extension."
                      },
                      "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the Resource Group the extension was created in."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference(resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name')), '2022-11-01', 'full').location]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
              ]
            },
            {
              "condition": "[parameters('extensionDomainJoinConfig').enabled]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-VM-DomainJoin', uniqueString(deployment().name, parameters('location')))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "virtualMachineName": {
                    "value": "[parameters('name')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "name": {
                    "value": "DomainJoin"
                  },
                  "publisher": {
                    "value": "Microsoft.Compute"
                  },
                  "type": {
                    "value": "JsonADDomainExtension"
                  },
                  "typeHandlerVersion": {
                    "value": "[coalesce(tryGet(parameters('extensionDomainJoinConfig'), 'typeHandlerVersion'), '1.3')]"
                  },
                  "autoUpgradeMinorVersion": {
                    "value": "[coalesce(tryGet(parameters('extensionDomainJoinConfig'), 'autoUpgradeMinorVersion'), true())]"
                  },
                  "enableAutomaticUpgrade": {
                    "value": "[coalesce(tryGet(parameters('extensionDomainJoinConfig'), 'enableAutomaticUpgrade'), false())]"
                  },
                  "settings": {
                    "value": "[parameters('extensionDomainJoinConfig').settings]"
                  },
                  "tags": {
                    "value": "[coalesce(tryGet(parameters('extensionDomainJoinConfig'), 'tags'), createObject())]"
                  },
                  "protectedSettings": {
                    "value": {
                      "Password": "[parameters('extensionDomainJoinPassword')]"
                    }
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.33.93.31351",
                      "templateHash": "11887421850832144050"
                    },
                    "name": "Virtual Machine Extensions",
                    "description": "This module deploys a Virtual Machine Extension.",
                    "owner": "Azure/module-maintainers"
                  },
                  "parameters": {
                    "virtualMachineName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the virtual machine extension."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. The location the extension is deployed to."
                      }
                    },
                    "publisher": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the extension handler publisher."
                      }
                    },
                    "type": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\"."
                      }
                    },
                    "typeHandlerVersion": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Specifies the version of the script handler."
                      }
                    },
                    "autoUpgradeMinorVersion": {
                      "type": "bool",
                      "metadata": {
                        "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."
                      }
                    },
                    "forceUpdateTag": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed."
                      }
                    },
                    "settings": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Any object that contains the extension specific settings."
                      }
                    },
                    "protectedSettings": {
                      "type": "secureObject",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Any object that contains the extension specific protected settings."
                      }
                    },
                    "supressFailures": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false."
                      }
                    },
                    "enableAutomaticUpgrade": {
                      "type": "bool",
                      "metadata": {
                        "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2022-11-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "publisher": "[parameters('publisher')]",
                        "type": "[parameters('type')]",
                        "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                        "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                        "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                        "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                        "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                        "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                        "suppressFailures": "[parameters('supressFailures')]"
                      }
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the extension."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the extension."
                      },
                      "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the Resource Group the extension was created in."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference(resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name')), '2022-11-01', 'full').location]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
              ]
            },
            {
              "condition": "[parameters('extensionAntiMalwareConfig').enabled]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-VM-MicrosoftAntiMalware', uniqueString(deployment().name, parameters('location')))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "virtualMachineName": {
                    "value": "[parameters('name')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "name": {
                    "value": "MicrosoftAntiMalware"
                  },
                  "publisher": {
                    "value": "Microsoft.Azure.Security"
                  },
                  "type": {
                    "value": "IaaSAntimalware"
                  },
                  "typeHandlerVersion": {
                    "value": "[coalesce(tryGet(parameters('extensionAntiMalwareConfig'), 'typeHandlerVersion'), '1.3')]"
                  },
                  "autoUpgradeMinorVersion": {
                    "value": "[coalesce(tryGet(parameters('extensionAntiMalwareConfig'), 'autoUpgradeMinorVersion'), true())]"
                  },
                  "enableAutomaticUpgrade": {
                    "value": "[coalesce(tryGet(parameters('extensionAntiMalwareConfig'), 'enableAutomaticUpgrade'), false())]"
                  },
                  "settings": {
                    "value": "[parameters('extensionAntiMalwareConfig').settings]"
                  },
                  "tags": {
                    "value": "[coalesce(tryGet(parameters('extensionAntiMalwareConfig'), 'tags'), createObject())]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.33.93.31351",
                      "templateHash": "11887421850832144050"
                    },
                    "name": "Virtual Machine Extensions",
                    "description": "This module deploys a Virtual Machine Extension.",
                    "owner": "Azure/module-maintainers"
                  },
                  "parameters": {
                    "virtualMachineName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the virtual machine extension."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. The location the extension is deployed to."
                      }
                    },
                    "publisher": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the extension handler publisher."
                      }
                    },
                    "type": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\"."
                      }
                    },
                    "typeHandlerVersion": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Specifies the version of the script handler."
                      }
                    },
                    "autoUpgradeMinorVersion": {
                      "type": "bool",
                      "metadata": {
                        "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."
                      }
                    },
                    "forceUpdateTag": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed."
                      }
                    },
                    "settings": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Any object that contains the extension specific settings."
                      }
                    },
                    "protectedSettings": {
                      "type": "secureObject",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Any object that contains the extension specific protected settings."
                      }
                    },
                    "supressFailures": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false."
                      }
                    },
                    "enableAutomaticUpgrade": {
                      "type": "bool",
                      "metadata": {
                        "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2022-11-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "publisher": "[parameters('publisher')]",
                        "type": "[parameters('type')]",
                        "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                        "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                        "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                        "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                        "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                        "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                        "suppressFailures": "[parameters('supressFailures')]"
                      }
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the extension."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the extension."
                      },
                      "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the Resource Group the extension was created in."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference(resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name')), '2022-11-01', 'full').location]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
              ]
            },
            {
              "condition": "[parameters('extensionMonitoringAgentConfig').enabled]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-VM-MicrosoftMonitoringAgent', uniqueString(deployment().name, parameters('location')))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "virtualMachineName": {
                    "value": "[parameters('name')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "name": {
                    "value": "MicrosoftMonitoringAgent"
                  },
                  "publisher": {
                    "value": "Microsoft.EnterpriseCloud.Monitoring"
                  },
                  "type": "[if(equals(parameters('osType'), 'Windows'), createObject('value', 'MicrosoftMonitoringAgent'), createObject('value', 'OmsAgentForLinux'))]",
                  "typeHandlerVersion": {
                    "value": "[coalesce(tryGet(parameters('extensionMonitoringAgentConfig'), 'typeHandlerVersion'), if(equals(parameters('osType'), 'Windows'), '1.0', '1.7'))]"
                  },
                  "autoUpgradeMinorVersion": {
                    "value": "[coalesce(tryGet(parameters('extensionMonitoringAgentConfig'), 'autoUpgradeMinorVersion'), true())]"
                  },
                  "enableAutomaticUpgrade": {
                    "value": "[coalesce(tryGet(parameters('extensionMonitoringAgentConfig'), 'enableAutomaticUpgrade'), false())]"
                  },
                  "settings": {
                    "value": {
                      "workspaceId": "[if(not(empty(parameters('monitoringWorkspaceId'))), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('monitoringWorkspaceId'), '/')[2], split(parameters('monitoringWorkspaceId'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', last(split(parameters('monitoringWorkspaceId'), '/'))), '2021-06-01').customerId, '')]"
                    }
                  },
                  "tags": {
                    "value": "[coalesce(tryGet(parameters('extensionMonitoringAgentConfig'), 'tags'), createObject())]"
                  },
                  "protectedSettings": {
                    "value": {
                      "workspaceKey": "[if(not(empty(parameters('monitoringWorkspaceId'))), listKeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('monitoringWorkspaceId'), '/')[2], split(parameters('monitoringWorkspaceId'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', last(split(parameters('monitoringWorkspaceId'), '/'))), '2021-06-01').primarySharedKey, '')]"
                    }
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.33.93.31351",
                      "templateHash": "11887421850832144050"
                    },
                    "name": "Virtual Machine Extensions",
                    "description": "This module deploys a Virtual Machine Extension.",
                    "owner": "Azure/module-maintainers"
                  },
                  "parameters": {
                    "virtualMachineName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the virtual machine extension."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. The location the extension is deployed to."
                      }
                    },
                    "publisher": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the extension handler publisher."
                      }
                    },
                    "type": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\"."
                      }
                    },
                    "typeHandlerVersion": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Specifies the version of the script handler."
                      }
                    },
                    "autoUpgradeMinorVersion": {
                      "type": "bool",
                      "metadata": {
                        "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."
                      }
                    },
                    "forceUpdateTag": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed."
                      }
                    },
                    "settings": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Any object that contains the extension specific settings."
                      }
                    },
                    "protectedSettings": {
                      "type": "secureObject",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Any object that contains the extension specific protected settings."
                      }
                    },
                    "supressFailures": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false."
                      }
                    },
                    "enableAutomaticUpgrade": {
                      "type": "bool",
                      "metadata": {
                        "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2022-11-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "publisher": "[parameters('publisher')]",
                        "type": "[parameters('type')]",
                        "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                        "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                        "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                        "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                        "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                        "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                        "suppressFailures": "[parameters('supressFailures')]"
                      }
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the extension."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the extension."
                      },
                      "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the Resource Group the extension was created in."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference(resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name')), '2022-11-01', 'full').location]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
              ]
            },
            {
              "condition": "[parameters('extensionDependencyAgentConfig').enabled]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-VM-DependencyAgent', uniqueString(deployment().name, parameters('location')))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "virtualMachineName": {
                    "value": "[parameters('name')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "name": {
                    "value": "DependencyAgent"
                  },
                  "publisher": {
                    "value": "Microsoft.Azure.Monitoring.DependencyAgent"
                  },
                  "type": "[if(equals(parameters('osType'), 'Windows'), createObject('value', 'DependencyAgentWindows'), createObject('value', 'DependencyAgentLinux'))]",
                  "typeHandlerVersion": {
                    "value": "[coalesce(tryGet(parameters('extensionDependencyAgentConfig'), 'typeHandlerVersion'), '9.5')]"
                  },
                  "autoUpgradeMinorVersion": {
                    "value": "[coalesce(tryGet(parameters('extensionDependencyAgentConfig'), 'autoUpgradeMinorVersion'), true())]"
                  },
                  "enableAutomaticUpgrade": {
                    "value": "[coalesce(tryGet(parameters('extensionDependencyAgentConfig'), 'enableAutomaticUpgrade'), true())]"
                  },
                  "tags": {
                    "value": "[coalesce(tryGet(parameters('extensionDependencyAgentConfig'), 'tags'), createObject())]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.33.93.31351",
                      "templateHash": "11887421850832144050"
                    },
                    "name": "Virtual Machine Extensions",
                    "description": "This module deploys a Virtual Machine Extension.",
                    "owner": "Azure/module-maintainers"
                  },
                  "parameters": {
                    "virtualMachineName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the virtual machine extension."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. The location the extension is deployed to."
                      }
                    },
                    "publisher": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the extension handler publisher."
                      }
                    },
                    "type": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\"."
                      }
                    },
                    "typeHandlerVersion": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Specifies the version of the script handler."
                      }
                    },
                    "autoUpgradeMinorVersion": {
                      "type": "bool",
                      "metadata": {
                        "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."
                      }
                    },
                    "forceUpdateTag": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed."
                      }
                    },
                    "settings": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Any object that contains the extension specific settings."
                      }
                    },
                    "protectedSettings": {
                      "type": "secureObject",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Any object that contains the extension specific protected settings."
                      }
                    },
                    "supressFailures": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false."
                      }
                    },
                    "enableAutomaticUpgrade": {
                      "type": "bool",
                      "metadata": {
                        "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2022-11-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "publisher": "[parameters('publisher')]",
                        "type": "[parameters('type')]",
                        "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                        "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                        "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                        "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                        "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                        "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                        "suppressFailures": "[parameters('supressFailures')]"
                      }
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the extension."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the extension."
                      },
                      "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the Resource Group the extension was created in."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference(resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name')), '2022-11-01', 'full').location]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
              ]
            },
            {
              "condition": "[parameters('extensionNetworkWatcherAgentConfig').enabled]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-VM-NetworkWatcherAgent', uniqueString(deployment().name, parameters('location')))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "virtualMachineName": {
                    "value": "[parameters('name')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "name": {
                    "value": "NetworkWatcherAgent"
                  },
                  "publisher": {
                    "value": "Microsoft.Azure.NetworkWatcher"
                  },
                  "type": "[if(equals(parameters('osType'), 'Windows'), createObject('value', 'NetworkWatcherAgentWindows'), createObject('value', 'NetworkWatcherAgentLinux'))]",
                  "typeHandlerVersion": {
                    "value": "[coalesce(tryGet(parameters('extensionNetworkWatcherAgentConfig'), 'typeHandlerVersion'), '1.4')]"
                  },
                  "autoUpgradeMinorVersion": {
                    "value": "[coalesce(tryGet(parameters('extensionNetworkWatcherAgentConfig'), 'autoUpgradeMinorVersion'), true())]"
                  },
                  "enableAutomaticUpgrade": {
                    "value": "[coalesce(tryGet(parameters('extensionNetworkWatcherAgentConfig'), 'enableAutomaticUpgrade'), false())]"
                  },
                  "tags": {
                    "value": "[coalesce(tryGet(parameters('extensionNetworkWatcherAgentConfig'), 'tags'), createObject())]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.33.93.31351",
                      "templateHash": "11887421850832144050"
                    },
                    "name": "Virtual Machine Extensions",
                    "description": "This module deploys a Virtual Machine Extension.",
                    "owner": "Azure/module-maintainers"
                  },
                  "parameters": {
                    "virtualMachineName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the virtual machine extension."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. The location the extension is deployed to."
                      }
                    },
                    "publisher": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the extension handler publisher."
                      }
                    },
                    "type": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\"."
                      }
                    },
                    "typeHandlerVersion": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Specifies the version of the script handler."
                      }
                    },
                    "autoUpgradeMinorVersion": {
                      "type": "bool",
                      "metadata": {
                        "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."
                      }
                    },
                    "forceUpdateTag": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed."
                      }
                    },
                    "settings": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Any object that contains the extension specific settings."
                      }
                    },
                    "protectedSettings": {
                      "type": "secureObject",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Any object that contains the extension specific protected settings."
                      }
                    },
                    "supressFailures": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false."
                      }
                    },
                    "enableAutomaticUpgrade": {
                      "type": "bool",
                      "metadata": {
                        "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2022-11-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "publisher": "[parameters('publisher')]",
                        "type": "[parameters('type')]",
                        "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                        "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                        "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                        "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                        "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                        "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                        "suppressFailures": "[parameters('supressFailures')]"
                      }
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the extension."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the extension."
                      },
                      "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the Resource Group the extension was created in."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference(resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name')), '2022-11-01', 'full').location]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
              ]
            },
            {
              "condition": "[parameters('extensionDSCConfig').enabled]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-VM-DesiredStateConfiguration', uniqueString(deployment().name, parameters('location')))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "virtualMachineName": {
                    "value": "[parameters('name')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "name": {
                    "value": "DesiredStateConfiguration"
                  },
                  "publisher": {
                    "value": "Microsoft.Powershell"
                  },
                  "type": {
                    "value": "DSC"
                  },
                  "typeHandlerVersion": {
                    "value": "[coalesce(tryGet(parameters('extensionDSCConfig'), 'typeHandlerVersion'), '2.77')]"
                  },
                  "autoUpgradeMinorVersion": {
                    "value": "[coalesce(tryGet(parameters('extensionDSCConfig'), 'autoUpgradeMinorVersion'), true())]"
                  },
                  "enableAutomaticUpgrade": {
                    "value": "[coalesce(tryGet(parameters('extensionDSCConfig'), 'enableAutomaticUpgrade'), false())]"
                  },
                  "settings": {
                    "value": "[coalesce(tryGet(parameters('extensionDSCConfig'), 'settings'), createObject())]"
                  },
                  "tags": {
                    "value": "[coalesce(tryGet(parameters('extensionDSCConfig'), 'tags'), createObject())]"
                  },
                  "protectedSettings": {
                    "value": "[coalesce(tryGet(parameters('extensionDSCConfig'), 'protectedSettings'), createObject())]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.33.93.31351",
                      "templateHash": "11887421850832144050"
                    },
                    "name": "Virtual Machine Extensions",
                    "description": "This module deploys a Virtual Machine Extension.",
                    "owner": "Azure/module-maintainers"
                  },
                  "parameters": {
                    "virtualMachineName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the virtual machine extension."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. The location the extension is deployed to."
                      }
                    },
                    "publisher": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the extension handler publisher."
                      }
                    },
                    "type": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\"."
                      }
                    },
                    "typeHandlerVersion": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Specifies the version of the script handler."
                      }
                    },
                    "autoUpgradeMinorVersion": {
                      "type": "bool",
                      "metadata": {
                        "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."
                      }
                    },
                    "forceUpdateTag": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed."
                      }
                    },
                    "settings": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Any object that contains the extension specific settings."
                      }
                    },
                    "protectedSettings": {
                      "type": "secureObject",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Any object that contains the extension specific protected settings."
                      }
                    },
                    "supressFailures": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false."
                      }
                    },
                    "enableAutomaticUpgrade": {
                      "type": "bool",
                      "metadata": {
                        "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2022-11-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "publisher": "[parameters('publisher')]",
                        "type": "[parameters('type')]",
                        "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                        "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                        "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                        "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                        "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                        "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                        "suppressFailures": "[parameters('supressFailures')]"
                      }
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the extension."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the extension."
                      },
                      "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the Resource Group the extension was created in."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference(resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name')), '2022-11-01', 'full').location]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
              ]
            },
            {
              "condition": "[parameters('extensionCustomScriptConfig').enabled]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-VM-CustomScriptExtension', uniqueString(deployment().name, parameters('location')))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "virtualMachineName": {
                    "value": "[parameters('name')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "name": {
                    "value": "CustomScriptExtension"
                  },
                  "publisher": "[if(equals(parameters('osType'), 'Windows'), createObject('value', 'Microsoft.Compute'), createObject('value', 'Microsoft.Azure.Extensions'))]",
                  "type": "[if(equals(parameters('osType'), 'Windows'), createObject('value', 'CustomScriptExtension'), createObject('value', 'CustomScript'))]",
                  "typeHandlerVersion": {
                    "value": "[coalesce(tryGet(parameters('extensionCustomScriptConfig'), 'typeHandlerVersion'), if(equals(parameters('osType'), 'Windows'), '1.10', '2.1'))]"
                  },
                  "autoUpgradeMinorVersion": {
                    "value": "[coalesce(tryGet(parameters('extensionCustomScriptConfig'), 'autoUpgradeMinorVersion'), true())]"
                  },
                  "enableAutomaticUpgrade": {
                    "value": "[coalesce(tryGet(parameters('extensionCustomScriptConfig'), 'enableAutomaticUpgrade'), false())]"
                  },
                  "settings": {
                    "value": {
                      "copy": [
                        {
                          "name": "fileUris",
                          "count": "[length(parameters('extensionCustomScriptConfig').fileData)]",
                          "input": "[if(contains(parameters('extensionCustomScriptConfig').fileData[copyIndex('fileUris')], 'storageAccountId'), format('{0}?{1}', parameters('extensionCustomScriptConfig').fileData[copyIndex('fileUris')].uri, listAccountSas(parameters('extensionCustomScriptConfig').fileData[copyIndex('fileUris')].storageAccountId, '2019-04-01', variables('accountSasProperties')).accountSasToken), parameters('extensionCustomScriptConfig').fileData[copyIndex('fileUris')].uri)]"
                        }
                      ]
                    }
                  },
                  "tags": {
                    "value": "[coalesce(tryGet(parameters('extensionCustomScriptConfig'), 'tags'), createObject())]"
                  },
                  "protectedSettings": {
                    "value": "[parameters('extensionCustomScriptProtectedSetting')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.33.93.31351",
                      "templateHash": "11887421850832144050"
                    },
                    "name": "Virtual Machine Extensions",
                    "description": "This module deploys a Virtual Machine Extension.",
                    "owner": "Azure/module-maintainers"
                  },
                  "parameters": {
                    "virtualMachineName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the virtual machine extension."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. The location the extension is deployed to."
                      }
                    },
                    "publisher": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the extension handler publisher."
                      }
                    },
                    "type": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\"."
                      }
                    },
                    "typeHandlerVersion": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Specifies the version of the script handler."
                      }
                    },
                    "autoUpgradeMinorVersion": {
                      "type": "bool",
                      "metadata": {
                        "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."
                      }
                    },
                    "forceUpdateTag": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed."
                      }
                    },
                    "settings": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Any object that contains the extension specific settings."
                      }
                    },
                    "protectedSettings": {
                      "type": "secureObject",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Any object that contains the extension specific protected settings."
                      }
                    },
                    "supressFailures": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false."
                      }
                    },
                    "enableAutomaticUpgrade": {
                      "type": "bool",
                      "metadata": {
                        "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2022-11-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "publisher": "[parameters('publisher')]",
                        "type": "[parameters('type')]",
                        "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                        "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                        "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                        "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                        "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                        "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                        "suppressFailures": "[parameters('supressFailures')]"
                      }
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the extension."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the extension."
                      },
                      "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the Resource Group the extension was created in."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference(resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name')), '2022-11-01', 'full').location]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]",
                "[resourceId('Microsoft.Resources/deployments', format('{0}-VM-DesiredStateConfiguration', uniqueString(deployment().name, parameters('location'))))]"
              ]
            },
            {
              "condition": "[parameters('extensionAzureDiskEncryptionConfig').enabled]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-VM-AzureDiskEncryption', uniqueString(deployment().name, parameters('location')))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "virtualMachineName": {
                    "value": "[parameters('name')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "name": {
                    "value": "AzureDiskEncryption"
                  },
                  "publisher": {
                    "value": "Microsoft.Azure.Security"
                  },
                  "type": "[if(equals(parameters('osType'), 'Windows'), createObject('value', 'AzureDiskEncryption'), createObject('value', 'AzureDiskEncryptionForLinux'))]",
                  "typeHandlerVersion": {
                    "value": "[coalesce(tryGet(parameters('extensionAzureDiskEncryptionConfig'), 'typeHandlerVersion'), if(equals(parameters('osType'), 'Windows'), '2.2', '1.1'))]"
                  },
                  "autoUpgradeMinorVersion": {
                    "value": "[coalesce(tryGet(parameters('extensionAzureDiskEncryptionConfig'), 'autoUpgradeMinorVersion'), true())]"
                  },
                  "enableAutomaticUpgrade": {
                    "value": "[coalesce(tryGet(parameters('extensionAzureDiskEncryptionConfig'), 'enableAutomaticUpgrade'), false())]"
                  },
                  "forceUpdateTag": {
                    "value": "[coalesce(tryGet(parameters('extensionAzureDiskEncryptionConfig'), 'forceUpdateTag'), '1.0')]"
                  },
                  "settings": {
                    "value": "[parameters('extensionAzureDiskEncryptionConfig').settings]"
                  },
                  "tags": {
                    "value": "[coalesce(tryGet(parameters('extensionAzureDiskEncryptionConfig'), 'tags'), createObject())]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.33.93.31351",
                      "templateHash": "11887421850832144050"
                    },
                    "name": "Virtual Machine Extensions",
                    "description": "This module deploys a Virtual Machine Extension.",
                    "owner": "Azure/module-maintainers"
                  },
                  "parameters": {
                    "virtualMachineName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the virtual machine extension."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. The location the extension is deployed to."
                      }
                    },
                    "publisher": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the extension handler publisher."
                      }
                    },
                    "type": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\"."
                      }
                    },
                    "typeHandlerVersion": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Specifies the version of the script handler."
                      }
                    },
                    "autoUpgradeMinorVersion": {
                      "type": "bool",
                      "metadata": {
                        "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."
                      }
                    },
                    "forceUpdateTag": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed."
                      }
                    },
                    "settings": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Any object that contains the extension specific settings."
                      }
                    },
                    "protectedSettings": {
                      "type": "secureObject",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Any object that contains the extension specific protected settings."
                      }
                    },
                    "supressFailures": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false."
                      }
                    },
                    "enableAutomaticUpgrade": {
                      "type": "bool",
                      "metadata": {
                        "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2022-11-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "publisher": "[parameters('publisher')]",
                        "type": "[parameters('type')]",
                        "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                        "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                        "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                        "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                        "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                        "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                        "suppressFailures": "[parameters('supressFailures')]"
                      }
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the extension."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the extension."
                      },
                      "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the Resource Group the extension was created in."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference(resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name')), '2022-11-01', 'full').location]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]",
                "[resourceId('Microsoft.Resources/deployments', format('{0}-VM-CustomScriptExtension', uniqueString(deployment().name, parameters('location'))))]",
                "[resourceId('Microsoft.Resources/deployments', format('{0}-VM-MicrosoftMonitoringAgent', uniqueString(deployment().name, parameters('location'))))]"
              ]
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the VM."
              },
              "value": "[parameters('name')]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the VM."
              },
              "value": "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
            },
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The name of the resource group the VM was created in."
              },
              "value": "[resourceGroup().name]"
            },
            "systemAssignedPrincipalId": {
              "type": "string",
              "metadata": {
                "description": "The principal ID of the system assigned identity."
              },
              "value": "[if(and(parameters('systemAssignedIdentity'), contains(reference(resourceId('Microsoft.Compute/virtualMachines', parameters('name')), '2022-11-01', 'full').identity, 'principalId')), reference(resourceId('Microsoft.Compute/virtualMachines', parameters('name')), '2022-11-01', 'full').identity.principalId, '')]"
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location the resource was deployed into."
              },
              "value": "[reference(resourceId('Microsoft.Compute/virtualMachines', parameters('name')), '2022-11-01', 'full').location]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('imageBuildResourceGroupName'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('imageBuildResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}ManagedIdentity-{1}', variables('depPrefix'), parameters('timeStamp')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}Customize-Image-{1}', variables('depPrefix'), parameters('timeStamp'))]",
      "resourceGroup": "[variables('imageBuildResourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "cloud": {
            "value": "[variables('cloud')]"
          },
          "appsToRemove": {
            "value": "[parameters('appsToRemove')]"
          },
          "location": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('subnetResourceId'), '/')[2], split(parameters('subnetResourceId'), '/')[4]), 'Microsoft.Network/virtualNetworks', split(parameters('subnetResourceId'), '/')[8]), '2023-05-01', 'full').location]"
          },
          "customizations": {
            "value": "[variables('customizers')]"
          },
          "installFsLogix": {
            "value": "[parameters('installFsLogix')]"
          },
          "installOneDrive": {
            "value": "[parameters('installOneDrive')]"
          },
          "installTeams": {
            "value": "[parameters('installTeams')]"
          },
          "installVirtualDesktopOptimizationTool": {
            "value": "[parameters('installVirtualDesktopOptimizationTool')]"
          },
          "userAssignedIdentityClientId": "[if(empty(parameters('userAssignedIdentityResourceId')), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('imageBuildResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}ManagedIdentity-{1}', variables('depPrefix'), parameters('timeStamp'))), '2022-09-01').outputs.clientId.value), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('userAssignedIdentityResourceId'), '/')[2], split(parameters('userAssignedIdentityResourceId'), '/')[4]), 'Microsoft.ManagedIdentity/userAssignedIdentities', last(split(parameters('userAssignedIdentityResourceId'), '/'))), '2023-01-31').clientId))]",
          "orchestrationVmName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('imageBuildResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}Orchestration-VM-{1}', variables('depPrefix'), parameters('timeStamp'))), '2022-09-01').outputs.name.value]"
          },
          "office365AppsToInstall": {
            "value": "[parameters('office365AppsToInstall')]"
          },
          "imageVmName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('imageBuildResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}Image-VM-{1}', variables('depPrefix'), parameters('timeStamp'))), '2022-09-01').outputs.name.value]"
          },
          "teamsCloudType": {
            "value": "[parameters('teamsCloudType')]"
          },
          "logBlobContainerUri": "[if(parameters('collectCustomizationLogs'), createObject('value', format('{0}{1}/', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('imageBuildResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}Logs-StorageAccount-{1}', variables('depPrefix'), parameters('timeStamp'))), '2022-09-01').outputs.primaryBlobEndpoint.value, variables('logContainerName'))), createObject('value', ''))]",
          "installUpdates": {
            "value": "[parameters('installUpdates')]"
          },
          "updateService": {
            "value": "[parameters('updateService')]"
          },
          "wsusServer": {
            "value": "[parameters('wsusServer')]"
          },
          "artifactsContainerUri": {
            "value": "[parameters('artifactsContainerUri')]"
          },
          "fslogixSetupBlobName": {
            "value": "[parameters('fslogixSetupBlobName')]"
          },
          "officeDeploymentToolBlobName": {
            "value": "[parameters('officeDeploymentToolBlobName')]"
          },
          "onedriveSetupBlobName": {
            "value": "[parameters('onedriveSetupBlobName')]"
          },
          "teamsInstallerBlobName": {
            "value": "[parameters('teamsInstallerBlobName')]"
          },
          "vdiCustomizations": {
            "value": "[parameters('vdiCustomizations')]"
          },
          "vDotBlobName": {
            "value": "[parameters('vDotBlobName')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.33.93.31351",
              "templateHash": "7814070874555957890"
            }
          },
          "parameters": {
            "appsToRemove": {
              "type": "array"
            },
            "cloud": {
              "type": "string"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "artifactsContainerUri": {
              "type": "string"
            },
            "customizations": {
              "type": "array"
            },
            "logBlobContainerUri": {
              "type": "string"
            },
            "orchestrationVmName": {
              "type": "string"
            },
            "imageVmName": {
              "type": "string"
            },
            "installFsLogix": {
              "type": "bool"
            },
            "fslogixSetupBlobName": {
              "type": "string"
            },
            "installOneDrive": {
              "type": "bool"
            },
            "installTeams": {
              "type": "bool"
            },
            "installUpdates": {
              "type": "bool"
            },
            "installVirtualDesktopOptimizationTool": {
              "type": "bool"
            },
            "office365AppsToInstall": {
              "type": "array"
            },
            "onedriveSetupBlobName": {
              "type": "string"
            },
            "vDotBlobName": {
              "type": "string"
            },
            "officeDeploymentToolBlobName": {
              "type": "string"
            },
            "teamsInstallerBlobName": {
              "type": "string"
            },
            "teamsCloudType": {
              "type": "string"
            },
            "timeStamp": {
              "type": "string",
              "defaultValue": "[utcNow('yyMMddhhmm')]"
            },
            "updateService": {
              "type": "string"
            },
            "vdiCustomizations": {
              "type": "array"
            },
            "userAssignedIdentityClientId": {
              "type": "string"
            },
            "wsusServer": {
              "type": "string"
            }
          },
          "variables": {
            "copy": [
              {
                "name": "customizers",
                "count": "[length(parameters('customizations'))]",
                "input": {
                  "name": "[replace(parameters('customizations')[copyIndex('customizers')].name, ' ', '-')]",
                  "uri": "[if(contains(parameters('customizations')[copyIndex('customizers')].blobNameOrUri, '://'), parameters('customizations')[copyIndex('customizers')].blobNameOrUri, format('{0}/{1}', parameters('artifactsContainerUri'), parameters('customizations')[copyIndex('customizers')].blobNameOrUri))]",
                  "arguments": "[coalesce(tryGet(parameters('customizations')[copyIndex('customizers')], 'arguments'), '')]"
                }
              },
              {
                "name": "vdiCustomizers",
                "count": "[length(parameters('vdiCustomizations'))]",
                "input": {
                  "name": "[replace(parameters('vdiCustomizations')[copyIndex('vdiCustomizers')].name, ' ', '-')]",
                  "uri": "[if(contains(parameters('vdiCustomizations')[copyIndex('vdiCustomizers')].blobNameOrUri, '://'), parameters('vdiCustomizations')[copyIndex('vdiCustomizers')].blobNameOrUri, format('{0}/{1}', parameters('artifactsContainerUri'), parameters('vdiCustomizations')[copyIndex('vdiCustomizers')].blobNameOrUri))]",
                  "arguments": "[coalesce(tryGet(parameters('vdiCustomizations')[copyIndex('vdiCustomizers')], 'arguments'), '')]"
                }
              }
            ],
            "$fxv#0": "param(\r\n    [Parameter(Mandatory=$true)]\r\n    [string]$AppsToRemove\r\n)\r\n\r\nfunction Write-OutputWithTimeStamp {\r\n    param(\r\n        [parameter(ValueFromPipeline=$True, Mandatory=$True, Position=0)]\r\n        [string]$Message\r\n    )    \r\n    $Timestamp = Get-Date -Format 'MM/dd/yyyy HH:mm:ss'\r\n    $Entry = '[' + $Timestamp + '] ' + $Message\r\n    Write-Output $Entry\r\n}\r\n\r\nStart-Transcript -Path \"$env:SystemRoot\\Logs\\Remove-Apps.log\" -Force\r\nWrite-Output \"*********************************\"\r\nWrite-Output \"Removing Built-In Windows Apps\"\r\nWrite-Output \"*********************************\"\r\n[array]$apps = $AppsToRemove.replace('\\\"', '\"') | ConvertFrom-Json\r\n\r\n$ProvisionedApps = Get-AppxProvisionedPackage -online\r\n$InstalledApps = Get-AppxPackage -AllUsers\r\n\r\nForEach ($app in $apps) {\r\n\r\n    If ($($ProvisionedApps.DisplayName) -contains $app) {\r\n        Write-OutputWithTimeStamp \"Removing Provisioned AppX Package [$app]\"\r\n        Get-AppxProvisionedPackage -online | Where-Object {$_.DisplayName -eq \"$app\"} | Remove-AppxProvisionedPackage -online\r\n    }\r\n\r\n    If ($($InstalledApps.Name) -contains $app) {\r\n        Write-OutputWithTimeStamp \"Uninstalling Appx Package [$app] for all users.\"\r\n        Get-AppxPackage -AllUsers | Where-Object { $_.Name -eq \"$app\" } | Remove-AppxPackage -AllUsers\r\n    }\r\n\r\n}\r\nWrite-Output \"*********************************\"\r\nWrite-Output \"Removing Built-in Capabilities\"\r\nWrite-Output \"*********************************\"\r\n$capabilitylist = \"App.Support.ContactSupport\", \"App.Support.QuickAssist\"\r\n\r\nForEach ($capability in $capabilitylist) {\r\n    $InstalledCapability = $null\r\n    $InstalledCapability = Get-WindowsCapability -Online | Where-Object { $_.Name -like \"$capability*\" -and $_.State -ne \"NotPresent\" }\r\n    If ($InstalledCapability) {\r\n        Write-OutputWithTimeStamp \"Removing [$Capability]\"\r\n        $InstalledCapability | Remove-WindowsCapability -Online\r\n    }\r\n}\r\nStop-Transcript",
            "$fxv#1": "param(\r\n  [string]$APIVersion,\r\n  [string]$Arguments='',\r\n  [string]$BlobStorageSuffix,\r\n  [string]$BuildDir='',\r\n  [string]$Name,\r\n  [string]$Uri,\r\n  [string]$UserAssignedIdentityClientId\r\n)\r\n\r\nfunction Write-OutputWithTimeStamp {\r\n  param(\r\n      [string]$Message\r\n  )    \r\n  $Timestamp = Get-Date -Format 'MM/dd/yyyy HH:mm:ss'\r\n  $Entry = '[' + $Timestamp + '] ' + $Message\r\n  Write-Output $Entry\r\n}\r\n\r\nStart-Transcript -Path \"$env:SystemRoot\\Logs\\$Name.log\" -Force\r\nWrite-OutputWithTimeStamp \"Starting '$Name' script with the following parameters.\"\r\nWrite-Output ( $PSBoundParameters | Format-Table -AutoSize )\r\nIf ($Arguments -eq '') { $Arguments = $null }\r\nIf ($BuildDir -ne '') {\r\n  $TempDir = Join-Path $BuildDir -ChildPath $Name\r\n} Else {\r\n  $TempDir = Join-Path $Env:TEMP -ChildPath $Name\r\n}\r\nNew-Item -Path $TempDir -ItemType Directory -Force | Out-Null\r\n$WebClient = New-Object System.Net.WebClient\r\nIf ($Uri -match $BlobStorageSuffix -and $UserAssignedIdentityClientId -ne '') {\r\n  Write-OutputWithTimeStamp \"Getting access token for '$Uri' using User Assigned Identity.\"\r\n  $StorageEndpoint = ($Uri -split \"://\")[0] + \"://\" + ($Uri -split \"/\")[2] + \"/\"\r\n  $TokenUri = \"http://169.254.169.254/metadata/identity/oauth2/token?api-version=$APIVersion&resource=$StorageEndpoint&client_id=$UserAssignedIdentityClientId\"\r\n  $AccessToken = ((Invoke-WebRequest -Headers @{Metadata = $true } -Uri $TokenUri -UseBasicParsing).Content | ConvertFrom-Json).access_token\r\n  $WebClient.Headers.Add('x-ms-version', '2017-11-09')\r\n  $webClient.Headers.Add(\"Authorization\", \"Bearer $AccessToken\")\r\n}\r\n$SourceFileName = ($Uri -Split \"/\")[-1]\r\nWrite-OutputWithTimeStamp \"Downloading '$Uri' to '$TempDir'.\"\r\n$DestFile = Join-Path -Path $TempDir -ChildPath $SourceFileName\r\n$webClient.DownloadFile(\"$Uri\", \"$DestFile\")\r\nStart-Sleep -Seconds 10\r\nIf (!(Test-Path -Path $DestFile)) { Write-Error \"Failed to download $SourceFileName\"; Exit 1 }\r\nWrite-OutputWithTimeStamp 'Finished downloading'\r\nSet-Location -Path $TempDir\r\n$Ext = [System.IO.Path]::GetExtension($DestFile).ToLower().Replace('.','')\r\nswitch ($Ext) {\r\n  'exe' {\r\n      If ($Arguments) {\r\n        Write-OutputWithTimeStamp \"Executing '`\"$DestFile`\" $Arguments'\"\r\n        $Install = Start-Process -FilePath \"$DestFile\" -ArgumentList $Arguments -NoNewWindow -Wait -PassThru\r\n        Write-OutputWithTimeStamp \"Installation ended with exit code $($Install.ExitCode).\"\r\n      }\r\n      Else {\r\n        Write-OutputWithTimeStamp \"Executing `\"$DestFile`\"\"\r\n        $Install = Start-Process -FilePath \"$DestFile\" -NoNewWindow -Wait -PassThru\r\n        Write-OutputWithTimeStamp \"Installation ended with exit code $($Install.ExitCode).\"\r\n      }      \r\n    }\r\n  'msi' {\r\n    If ($Arguments) {\r\n      If ($Arguments -notcontains $SourceFileName) {\r\n        $Arguments = \"/i $DestFile $Arguments\"\r\n      }\r\n      Write-OutputWithTimeStamp \"Executing 'msiexec.exe $Arguments'\"\r\n      $MsiExec = Start-Process -FilePath msiexec.exe -ArgumentList $Arguments -Wait -PassThru\r\n      Write-OutputWithTimeStamp \"Installation ended with exit code $($MsiExec.ExitCode).\"\r\n\r\n    }\r\n    Else {\r\n      Write-OutputWithTimeStamp \"Executing 'msiexec.exe /i $DestFile /qn'\"\r\n      $MsiExec = Start-Process -FilePath msiexec.exe -ArgumentList \"/i $DestFile /qn\" -Wait -PassThru\r\n      Write-OutputWithTimeStamp \"Installation ended with exit code $($MsiExec.ExitCode).\"\r\n    }    \r\n  }\r\n  'bat' {\r\n    If ($Arguments) {\r\n      Write-OutputWithTimeStamp \"Executing 'cmd.exe `\"$DestFile`\" $Arguments'\"\r\n      Start-Process -FilePath cmd.exe -ArgumentList \"`\"$DestFile`\" $Arguments\" -Wait\r\n    }\r\n    Else {\r\n      Write-OutputWithTimeStamp \"Executing 'cmd.exe `\"$DestFile`\"'\"\r\n      Start-Process -FilePath cmd.exe -ArgumentList \"`\"$DestFile`\"\" -Wait\r\n    }\r\n  }\r\n  'ps1' {\r\n    If ($Arguments) {\r\n      Write-OutputWithTimeStamp \"Calling PowerShell Script '$DestFile' with arguments '$Arguments'\"\r\n      & $DestFile $Arguments\r\n    }\r\n    Else {\r\n      Write-OutputWithTimeStamp \"Calling PowerShell Script '$DestFile'\"\r\n      & $DestFile\r\n    }\r\n  }\r\n  'zip' {\r\n    $DestinationPath = Join-Path -Path \"$TempDir\" -ChildPath $([System.IO.Path]::GetFileNameWithoutExtension($SourceFileName))\r\n    Write-OutputWithTimeStamp \"Extracting '$DestFile' to '$DestinationPath'.\"\r\n    Expand-Archive -Path $DestFile -DestinationPath $DestinationPath -Force\r\n    Write-OutputWithTimeStamp \"Finding PowerShell script in root of '$DestinationPath'.\"\r\n    $PSScript = (Get-ChildItem -Path $DestinationPath -filter '*.ps1').FullName\r\n    If ($PSScript.count -gt 1) { $PSScript = $PSScript[0] }\r\n    If ($Arguments) {\r\n      Write-OutputWithTimeStamp \"Calling PowerShell Script '$PSScript' with arguments '$Arguments'\"\r\n      & $PSScript $Arguments\r\n    }\r\n    Else {\r\n      Write-OutputWithTimeStamp \"Calling PowerShell Script '$PSScript'\"         \r\n      & $PSScript\r\n    }\r\n  }\r\n}\r\nIf ((Split-Path $TempDir -Parent) -eq $Env:Temp) {Remove-Item -Path $TempDir -Recurse -Force -ErrorAction SilentlyContinue}\r\nStop-Transcript",
            "$fxv#10": "param(\r\n    [string]$ResourceManagerUri,\r\n    [string]$UserAssignedIdentityClientId,\r\n    [string]$VmResourceId\r\n)\r\n\r\n$ErrorActionPreference = 'Stop'\r\n$WarningPreference = 'SilentlyContinue'\r\n\r\nTry {\r\n    # Fix the resource manager URI since only AzureCloud contains a trailing slash\r\n    $ResourceManagerUriFixed = if($ResourceManagerUri[-1] -eq '/'){$ResourceManagerUri.Substring(0,$ResourceManagerUri.Length - 1)} else {$ResourceManagerUri}\r\n\r\n    # Get an access token for Azure resources\r\n    $AzureManagementAccessToken = (Invoke-RestMethod `\r\n        -Headers @{Metadata=\"true\"} `\r\n        -Uri $('http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01&resource=' + $ResourceManagerUriFixed + '&client_id=' + $UserAssignedIdentityClientId)).access_token\r\n\r\n    # Set header for Azure Management API\r\n    $AzureManagementHeader = @{\r\n        'Content-Type'='application/json'\r\n        'Authorization'='Bearer ' + $AzureManagementAccessToken\r\n    }\r\n    \r\n    # Restart the VM\r\n    $null = Invoke-RestMethod -Headers $AzureManagementHeader -Method 'Post' -Uri $($ResourceManagerUriFixed + $VmResourceId + '/restart?api-version=2024-03-01')\r\n    $VmStatus = Invoke-RestMethod -Headers $AzureManagementHeader -Method 'Get' -Uri $($ResourceManagerUriFixed + $VmResourceId + '/instanceView?api-version=2024-03-01')\r\n    $provisioningState = ($VMStatus.statuses | Where-Object {$_.code -like 'PowerState*'}).code\r\n    While ($provisioningState -ne \"PowerState/running\") {\r\n        Start-Sleep -Seconds 5\r\n        $VmStatus = Invoke-RestMethod -Headers $AzureManagementHeader -Method 'Get' -Uri $($ResourceManagerUriFixed + $VmResourceId + '/instanceView?api-version=2024-03-01')\r\n        $provisioningState = ($VMStatus.statuses | Where-Object {$_.code -like 'PowerState*'}).code\r\n    }\r\n    Start-Sleep -Seconds 15   \r\n}\r\ncatch {\r\n    throw\r\n}",
            "$fxv#11": "param(\r\n  [string]$APIVersion,\r\n  [string]$Arguments='',\r\n  [string]$BlobStorageSuffix,\r\n  [string]$BuildDir='',\r\n  [string]$Name,\r\n  [string]$Uri,\r\n  [string]$UserAssignedIdentityClientId\r\n)\r\n\r\nfunction Write-OutputWithTimeStamp {\r\n  param(\r\n      [string]$Message\r\n  )    \r\n  $Timestamp = Get-Date -Format 'MM/dd/yyyy HH:mm:ss'\r\n  $Entry = '[' + $Timestamp + '] ' + $Message\r\n  Write-Output $Entry\r\n}\r\n\r\nStart-Transcript -Path \"$env:SystemRoot\\Logs\\$Name.log\" -Force\r\nWrite-OutputWithTimeStamp \"Starting '$Name' script with the following parameters.\"\r\nWrite-Output ( $PSBoundParameters | Format-Table -AutoSize )\r\nIf ($Arguments -eq '') { $Arguments = $null }\r\nIf ($BuildDir -ne '') {\r\n  $TempDir = Join-Path $BuildDir -ChildPath $Name\r\n} Else {\r\n  $TempDir = Join-Path $Env:TEMP -ChildPath $Name\r\n}\r\nNew-Item -Path $TempDir -ItemType Directory -Force | Out-Null\r\n$WebClient = New-Object System.Net.WebClient\r\nIf ($Uri -match $BlobStorageSuffix -and $UserAssignedIdentityClientId -ne '') {\r\n  Write-OutputWithTimeStamp \"Getting access token for '$Uri' using User Assigned Identity.\"\r\n  $StorageEndpoint = ($Uri -split \"://\")[0] + \"://\" + ($Uri -split \"/\")[2] + \"/\"\r\n  $TokenUri = \"http://169.254.169.254/metadata/identity/oauth2/token?api-version=$APIVersion&resource=$StorageEndpoint&client_id=$UserAssignedIdentityClientId\"\r\n  $AccessToken = ((Invoke-WebRequest -Headers @{Metadata = $true } -Uri $TokenUri -UseBasicParsing).Content | ConvertFrom-Json).access_token\r\n  $WebClient.Headers.Add('x-ms-version', '2017-11-09')\r\n  $webClient.Headers.Add(\"Authorization\", \"Bearer $AccessToken\")\r\n}\r\n$SourceFileName = ($Uri -Split \"/\")[-1]\r\nWrite-OutputWithTimeStamp \"Downloading '$Uri' to '$TempDir'.\"\r\n$DestFile = Join-Path -Path $TempDir -ChildPath $SourceFileName\r\n$webClient.DownloadFile(\"$Uri\", \"$DestFile\")\r\nStart-Sleep -Seconds 10\r\nIf (!(Test-Path -Path $DestFile)) { Write-Error \"Failed to download $SourceFileName\"; Exit 1 }\r\nWrite-OutputWithTimeStamp 'Finished downloading'\r\nSet-Location -Path $TempDir\r\n$Ext = [System.IO.Path]::GetExtension($DestFile).ToLower().Replace('.','')\r\nswitch ($Ext) {\r\n  'exe' {\r\n      If ($Arguments) {\r\n        Write-OutputWithTimeStamp \"Executing '`\"$DestFile`\" $Arguments'\"\r\n        $Install = Start-Process -FilePath \"$DestFile\" -ArgumentList $Arguments -NoNewWindow -Wait -PassThru\r\n        Write-OutputWithTimeStamp \"Installation ended with exit code $($Install.ExitCode).\"\r\n      }\r\n      Else {\r\n        Write-OutputWithTimeStamp \"Executing `\"$DestFile`\"\"\r\n        $Install = Start-Process -FilePath \"$DestFile\" -NoNewWindow -Wait -PassThru\r\n        Write-OutputWithTimeStamp \"Installation ended with exit code $($Install.ExitCode).\"\r\n      }      \r\n    }\r\n  'msi' {\r\n    If ($Arguments) {\r\n      If ($Arguments -notcontains $SourceFileName) {\r\n        $Arguments = \"/i $DestFile $Arguments\"\r\n      }\r\n      Write-OutputWithTimeStamp \"Executing 'msiexec.exe $Arguments'\"\r\n      $MsiExec = Start-Process -FilePath msiexec.exe -ArgumentList $Arguments -Wait -PassThru\r\n      Write-OutputWithTimeStamp \"Installation ended with exit code $($MsiExec.ExitCode).\"\r\n\r\n    }\r\n    Else {\r\n      Write-OutputWithTimeStamp \"Executing 'msiexec.exe /i $DestFile /qn'\"\r\n      $MsiExec = Start-Process -FilePath msiexec.exe -ArgumentList \"/i $DestFile /qn\" -Wait -PassThru\r\n      Write-OutputWithTimeStamp \"Installation ended with exit code $($MsiExec.ExitCode).\"\r\n    }    \r\n  }\r\n  'bat' {\r\n    If ($Arguments) {\r\n      Write-OutputWithTimeStamp \"Executing 'cmd.exe `\"$DestFile`\" $Arguments'\"\r\n      Start-Process -FilePath cmd.exe -ArgumentList \"`\"$DestFile`\" $Arguments\" -Wait\r\n    }\r\n    Else {\r\n      Write-OutputWithTimeStamp \"Executing 'cmd.exe `\"$DestFile`\"'\"\r\n      Start-Process -FilePath cmd.exe -ArgumentList \"`\"$DestFile`\"\" -Wait\r\n    }\r\n  }\r\n  'ps1' {\r\n    If ($Arguments) {\r\n      Write-OutputWithTimeStamp \"Calling PowerShell Script '$DestFile' with arguments '$Arguments'\"\r\n      & $DestFile $Arguments\r\n    }\r\n    Else {\r\n      Write-OutputWithTimeStamp \"Calling PowerShell Script '$DestFile'\"\r\n      & $DestFile\r\n    }\r\n  }\r\n  'zip' {\r\n    $DestinationPath = Join-Path -Path \"$TempDir\" -ChildPath $([System.IO.Path]::GetFileNameWithoutExtension($SourceFileName))\r\n    Write-OutputWithTimeStamp \"Extracting '$DestFile' to '$DestinationPath'.\"\r\n    Expand-Archive -Path $DestFile -DestinationPath $DestinationPath -Force\r\n    Write-OutputWithTimeStamp \"Finding PowerShell script in root of '$DestinationPath'.\"\r\n    $PSScript = (Get-ChildItem -Path $DestinationPath -filter '*.ps1').FullName\r\n    If ($PSScript.count -gt 1) { $PSScript = $PSScript[0] }\r\n    If ($Arguments) {\r\n      Write-OutputWithTimeStamp \"Calling PowerShell Script '$PSScript' with arguments '$Arguments'\"\r\n      & $PSScript $Arguments\r\n    }\r\n    Else {\r\n      Write-OutputWithTimeStamp \"Calling PowerShell Script '$PSScript'\"         \r\n      & $PSScript\r\n    }\r\n  }\r\n}\r\nIf ((Split-Path $TempDir -Parent) -eq $Env:Temp) {Remove-Item -Path $TempDir -Recurse -Force -ErrorAction SilentlyContinue}\r\nStop-Transcript",
            "$fxv#12": "param(\r\n    [string]$BuildDir=''\r\n)\r\n\r\nIf ($BuildDir -ne '' -and (Test-Path -Path $BuildDir)) {Remove-Item -Path $BuildDir -Recurse -Force | Out-Null}\r\nGet-ChildItem -Path $env:SystemDrive -Exclude $env:SystemRoot\\Logs\\* -Include *.tmp, *.dmp, *.etl, *.evtx, thumbcache*.db, *.log -File -Recurse -Force -ErrorAction SilentlyContinue | Remove-Item -ErrorAction SilentlyContinue\r\nGet-ChildItem -Path $env:ProgramData\\Microsoft\\Windows\\RetailDemo\\* -Recurse -Force -ErrorAction SilentlyContinue | Remove-Item -Recurse -ErrorAction SilentlyContinue\r\nRemove-Item -Path $env:SystemRoot\\Temp\\* -Recurse -Force -ErrorAction SilentlyContinue\r\nRemove-Item -Path $env:ProgramData\\Microsoft\\Windows\\WER\\Temp\\* -Recurse -Force -ErrorAction SilentlyContinue\r\nRemove-Item -Path $env:ProgramData\\Microsoft\\Windows\\WER\\ReportArchive\\* -Recurse -Force -ErrorAction SilentlyContinue\r\nRemove-Item -Path $env:ProgramData\\Microsoft\\Windows\\WER\\ReportQueue\\* -Recurse -Force -ErrorAction SilentlyContinue\r\nRemove-Item -Path $env:TEMP\\* -Recurse -Force -ErrorAction SilentlyContinue\r\nClear-RecycleBin -Force -ErrorAction SilentlyContinue\r\nClear-BCCache -Force -ErrorAction SilentlyContinue",
            "$fxv#13": "$Services = 'RdAgent', 'WindowsTelemetryService', 'WindowsAzureGuestAgent'        \r\nForEach ($Service in $Services) {\r\n    If (Get-Service | Where-Object {$_.Name -eq $Service}) {\r\n        While ((Get-Service -Name $Service).Status -ne 'Running') {\r\n            Write-Output \">>> Waiting for $Service to start...\"\r\n            Start-Sleep -Seconds 5\r\n        }\r\n    }\r\n}\r\n$Files = \"$env:SystemRoot\\System32\\sysprep\\unattend.xml\", \"$env:SystemRoot\\Panther\\Unattend.xml\"\r\nForEach ($file in $Files) {\r\n    if (Test-Path -Path $File) {\r\n      Write-Output \">>> Removing $file\"\r\n      Remove-Item $file -Force\r\n    }\r\n}\r\nWrite-Output '>>> Sysprepping VM ...'\r\nStart-Process -FilePath \"C:\\Windows\\System32\\Sysprep\\Sysprep.exe\" -ArgumentList \"/generalize /oobe /quit /mode:vm\" -Wait\r\nwhile($true) {\r\n    $imageState = (Get-ItemProperty HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Setup\\State).ImageState\r\n    Write-Output $imageState\r\n    if ($imageState -eq 'IMAGE_STATE_GENERALIZE_RESEAL_TO_OOBE') { break }\r\n    Start-Sleep -s 5\r\n}\r\nWrite-Output \">>> Sysprep complete ...\"",
            "$fxv#2": "param(\r\n    [string]$APIVersion,\r\n    [string]$BlobStorageSuffix,\r\n    [string]$BuildDir='',\r\n    [string]$UserAssignedIdentityClientId,\r\n    [string]$Uri=''\r\n)\r\nfunction Write-OutputWithTimeStamp {\r\n    param(\r\n        [string]$Message\r\n    )    \r\n    $Timestamp = Get-Date -Format 'MM/dd/yyyy HH:mm:ss'\r\n    $Entry = '[' + $Timestamp + '] ' + $Message\r\n    Write-Output $Entry\r\n}\r\n\r\n$ErrorActionPreference = \"Stop\"\r\n$Name = 'FSLogix'\r\nStart-Transcript -Path \"$env:SystemRoot\\Logs\\Install-$Name.log\" -Force\r\nWrite-OutputWithTimeStamp \"Starting '$SoftwareName' install script with following Parameters:\"\r\nWrite-Output ( $PSBoundParameters | Format-Table -AutoSize )\r\n\r\nIf ($Uri -eq '') {\r\n    $Uri = 'https://aka.ms/fslogix_download'\r\n}\r\nIf ($BuildDir -ne '') {\r\n    $TempDir = Join-Path $BuildDir -ChildPath $Name\r\n}\r\nElse {\r\n    $TempDir = Join-Path $Env:TEMP -ChildPath $Name\r\n}\r\nNew-Item -Path $TempDir -ItemType Directory -Force | Out-Null\r\n$WebClient = New-Object System.Net.WebClient\r\nIf ($Uri -match $BlobStorageSuffix -and $UserAssignedIdentityClientId -ne '') {\r\n    $StorageEndpoint = ($Uri -split \"://\")[0] + \"://\" + ($Uri -split \"/\")[2] + \"/\"\r\n    $TokenUri = \"http://169.254.169.254/metadata/identity/oauth2/token?api-version=$APIVersion&resource=$StorageEndpoint&client_id=$UserAssignedIdentityClientId\"\r\n    $AccessToken = ((Invoke-WebRequest -Headers @{Metadata = $true } -Uri $TokenUri -UseBasicParsing).Content | ConvertFrom-Json).access_token\r\n    $WebClient.Headers.Add('x-ms-version', '2017-11-09')\r\n    $webClient.Headers.Add(\"Authorization\", \"Bearer $AccessToken\")\r\n}\r\n$DestFile = Join-Path -Path $TempDir -ChildPath 'FSLogix.zip'\r\nWrite-OutputWithTimeStamp \"Downloading 'FSLogix.zip' from '$uri' to '$DestFile'.\"\r\n$webClient.DownloadFile(\"$Uri\", \"$DestFile\")\r\nStart-Sleep -seconds 10\r\nIf (!(Test-Path -Path $DestFile)) { Write-Error \"Failed to download $SourceFileName\"; Exit 1 }\r\nUnblock-File -Path $DestFile\r\nWrite-OutputWithTimeStamp \"Extracting Contents of Zip File\"\r\nExpand-Archive -Path $destFile -DestinationPath $TempDir -Force\r\n$Installer = (Get-ChildItem -Path $TempDir -File -Recurse -Filter 'FSLogixAppsSetup.exe' | Where-Object { $_.FullName -like '*x64*' }).FullName\r\nWrite-OutputWithTimeStamp \"Installation file found: [$Installer], executing installation.\"\r\n$Install = Start-Process -FilePath $Installer -ArgumentList \"/install /quiet /norestart\" -Wait -PassThru\r\nIf ($($Install.ExitCode) -eq 0) {\r\n    Write-OutputWithTimeStamp \"'Microsoft FSLogix Apps' installed successfully.\"\r\n}\r\nElse {\r\n    Write-Error \"The Install exit code is $($Install.ExitCode)\"\r\n}\r\nWrite-OutputWithTimeStamp \"Copying the FSLogix ADMX and ADML files to the PolicyDefinitions folders.\"\r\nGet-ChildItem -Path $TempDir -File -Recurse -Filter '*.admx' | ForEach-Object { Write-OutputWithTimeStamp \"Copying $($_.Name)\"; Copy-Item -Path $_.FullName -Destination \"$env:WINDIR\\PolicyDefinitions\\\" -Force }\r\nGet-ChildItem -Path $TempDir -File -Recurse -Filter '*.adml' | ForEach-Object { Write-OutputWithTimeStamp \"Copying $($_.Name)\"; Copy-Item -Path $_.FullName -Destination \"$env:WINDIR\\PolicyDefinitions\\en-us\\\" -Force }\r\nIf ((Split-Path $TempDir -Parent) -eq $Env:Temp) { Remove-Item -Path $TempDir -Recurse -Force -ErrorAction SilentlyContinue }\r\nWrite-OutputWithTimeStamp \"Installation complete.\"\r\nStop-Transcript",
            "$fxv#3": "param(\r\n    [string]$APIVersion,\r\n    [string]$AppsToInstall,\r\n    [string]$BlobStorageSuffix,\r\n    [string]$BuildDir='',\r\n    [string]$Environment,\r\n    [string]$Uri='',\r\n    [string]$UserAssignedIdentityClientId\r\n)\r\n$ErrorActionPreference = \"Stop\"\r\nFunction Get-InternetUrl {\r\n    [CmdletBinding()]\r\n    Param (\r\n        [Parameter(\r\n            Mandatory,\r\n            HelpMessage = \"Specifies the website that contains a link to the desired download.\"\r\n        )]\r\n        [uri]$WebSiteUrl,\r\n\r\n        [Parameter(\r\n            Mandatory,\r\n            HelpMessage = \"Specifies the search string. Wildcard '*' can be used.\"    \r\n        )]\r\n        [string]$SearchString\r\n    )\r\n\r\n    $HTML = Invoke-WebRequest -Uri $WebSiteUrl -UseBasicParsing\r\n    $Links = $HTML.Links\r\n    #First try to find search string in actual link href\r\n    $LinkHref = $HTML.Links.Href | Get-Unique | Where-Object { $_ -like \"*$SearchString*\" }\r\n    If ($LinkHref) {\r\n        Return $LinkHref\r\n    }\r\n    #If not found, try to find search string in the outer html\r\n    $LinkHrefs = $Links | Where-Object { $_.OuterHTML -like \"*$SearchString*\" }\r\n    If ($LinkHrefs) {\r\n        Return $LinkHrefs.href\r\n    }\r\n    Return $null\r\n}\r\n\r\nfunction Write-OutputWithTimeStamp {\r\n    param(\r\n        [string]$Message\r\n    )    \r\n    $Timestamp = Get-Date -Format 'MM/dd/yyyy HH:mm:ss'\r\n    $Entry = '[' + $Timestamp + '] ' + $Message\r\n    Write-Output $Entry\r\n}\r\n\r\n$SoftwareName = 'Microsoft-365-Applications'\r\nStart-Transcript -Path \"$env:SystemRoot\\Logs\\Install-$SoftwareName.log\" -Force\r\nWrite-OutputWithTimeStamp \"Starting Script to install '$SoftwareName' with the following parameters:\"\r\nWrite-Output ( $PSBoundParameters | Format-Table -AutoSize )\r\n\r\nIf ($AppsToInstall -ne '' -and $null -ne $AppsToInstall) {\r\n    [array]$AppsToInstall = $AppsToInstall.Replace('\\\"', '\"') | ConvertFrom-Json\r\n}\r\nElse {\r\n    [array]$AppsToInstall = @(\"Access\", \"Excel\", \"OneNote\", \"Outlook\", \"PowerPoint\", \"Word\")\r\n}\r\n\r\nIf ($Uri -eq '') {\r\n    $WebsiteUri = 'https://go.microsoft.com/fwlink/p/?LinkID=626065'\r\n    $Uri = Get-InternetUrl -WebSiteUrl $WebsiteUri -SearchString 'OfficeDeploymentTool'\r\n    If ($Uri -eq '' -or $null -eq $Uri) {\r\n        $Uri = 'https://download.microsoft.com/download/2/7/A/27AF1BE6-DD20-4CB4-B154-EBAB8A7D4A7E/officedeploymenttool_18324-20194.exe'\r\n    }\r\n}\r\n\r\nIf ($BuildDir -ne '') {\r\n    $TempDir = Join-Path $BuildDir -ChildPath $SoftwareName\r\n}\r\nElse {\r\n    $TempDir = Join-Path $Env:TEMP -ChildPath $SoftwareName\r\n}\r\nNew-Item -Path $TempDir -ItemType Directory -Force | Out-Null  \r\n$WebClient = New-Object System.Net.WebClient\r\nIf ($Uri -match $BlobStorageSuffix -and $UserAssignedIdentityClientId -ne '') {\r\n    $StorageEndpoint = ($Uri -split \"://\")[0] + \"://\" + ($Uri -split \"/\")[2] + \"/\"\r\n    $TokenUri = \"http://169.254.169.254/metadata/identity/oauth2/token?api-version=$APIVersion&resource=$StorageEndpoint&client_id=$UserAssignedIdentityClientId\"\r\n    $AccessToken = ((Invoke-WebRequest -Headers @{Metadata = $true } -Uri $TokenUri -UseBasicParsing).Content | ConvertFrom-Json).access_token\r\n    $WebClient.Headers.Add('x-ms-version', '2017-11-09')\r\n    $webClient.Headers.Add(\"Authorization\", \"Bearer $AccessToken\")\r\n}\r\n$SourceFileName = ($Uri -Split \"/\")[-1]\r\n$DestFile = Join-Path -Path $TempDir -ChildPath $SourceFileName\r\nWrite-OutputWithTimeStamp \"Downloading '$Uri' to '$DestFile'.\"\r\n$webClient.DownloadFile(\"$Uri\", \"$DestFile\")\r\nStart-Sleep -Seconds 5\r\nIf (!(Test-Path -Path $DestFile)) { Write-Error \"Failed to download $SourceFileName\"; Exit 1 }\r\nWrite-OutputWithTimeStamp \"Finished downloading\"\r\nWrite-OutputWithTimeStamp \"Extracting the Office 365 Deployment Toolkit.\"\r\nStart-Process -FilePath $destFile -ArgumentList \"/extract:`\"$TempDir\\ODT`\" /quiet /passive /norestart\" -Wait -PassThru | Out-Null\r\n$Setup = (Get-ChildItem -Path \"$TempDir\\ODT\" -Filter '*setup*.exe').FullName\r\nWrite-OutputWithTimeStamp \"Found Office Deployment Tool Setup Executable - '$Setup'.\"\r\nWrite-OutputWithTimeStamp \"Dynamically creating $SoftwareName configuration file for setup.\"\r\n$ConfigFile = Join-Path -Path $TempDir -ChildPath 'office365x64.xml'\r\n[array]$Content = @()\r\n[array]$ExcludedApps = @()\r\n$ExcludedApps += '      <ExcludeApp ID=\"Groove\" />'\r\n$ExcludedApps += '      <ExcludeApp ID=\"OneDrive\" />'\r\n$ExcludedApps += '      <ExcludeApp ID=\"Teams\" />'\r\nif ($AppsToInstall -notcontains 'Access') {\r\n    $ExcludedApps += '      <ExcludeApp ID=\"Access\" />'\r\n}\r\nif ($AppsToInstall -notcontains 'Excel') {\r\n    $ExcludedApps += '      <ExcludeApp ID=\"Excel\" />'\r\n}\r\nif ($AppsToInstall -notcontains 'OneNote') {\r\n    $ExcludedApps += '      <ExcludeApp ID=\"OneNote\" />'\r\n}\r\nif ($AppsToInstall -notcontains 'Outlook') {\r\n    $ExcludedApps += '      <ExcludeApp ID=\"Outlook\" />'\r\n}\r\nif ($AppsToInstall -notcontains 'PowerPoint') {\r\n    $ExcludedApps += '      <ExcludeApp ID=\"PowerPoint\" />'\r\n}\r\nif ($AppsToInstall -notcontains 'Publisher') {\r\n    $ExcludedApps += '      <ExcludeApp ID=\"Publisher\" />'\r\n}\r\nif ($AppsToInstall -notcontains 'SkypeForBusiness') {\r\n    $ExcludedApps += '      <ExcludeApp ID=\"Lync\" />'\r\n}\r\nif ($AppsToInstall -notcontains 'Word') {\r\n    $ExcludedApps += '      <ExcludeApp ID=\"Word\" />'\r\n}\r\n\r\n$Content += '<Configuration>'\r\n\r\nSwitch ($Environment) {\r\n    \"USSec\" {\r\n        $Content += '  <Add AllowCdnFallback=\"TRUE\" SourcePath=\"https://officexo.azurefd.microsoft.scloud/prsstelecontainer/55336b82-a18d-4dd6-b5f6-9e5095c314a6/\" Channel=\"MonthlyEnterprise\" OfficeClientEdition=\"64\">'\r\n    }\r\n    \"USNat\" { \r\n        $Content += '  <Add AllowCdnFallback=\"TRUE\" SourcePath=\"https://officexo.azurefd.eaglex.ic.gov/prsstelecontainer/55336b82-a18d-4dd6-b5f6-9e5095c314a6/\" Channel=\"MonthlyEnterprise\" OfficeClientEdition=\"64\">'\r\n    }\r\n    Default {\r\n        $Content += '  <Add OfficeClientEdition=\"64\" Channel=\"MonthlyEnterprise\">'\r\n    }\r\n}\r\n\r\nIf ($AppsToInstall -contains 'Access' -or $AppsToInstall -contains 'Excel' -or $AppsToInstall -contains 'OneNote' -or $AppsToInstall -contains 'Outlook' -or $AppsToInstall -contains 'PowerPoint' -or $AppsToInstall -contains 'Publisher' -or $AppsToInstall -contains 'Word') {\r\n    $Content += '    <Product ID=\"O365ProPlusRetail\">'\r\n    $Content += '      <Language ID=\"en-us\" />'\r\n    $Content += $ExcludedApps\r\n    $Content += '    </Product>'\r\n}\r\nif ($AppsToInstall -contains 'Project') {\r\n    $Content += '    <Product ID=\"ProjectProRetail\">'\r\n    $Content += '      <Language ID=\"en-us\" />'\r\n    $Content += $ExcludedApps\r\n    $Content += '    </Product>'\r\n}\r\nif ($AppsToInstall -contains 'Visio') {\r\n    $Content += '    <Product ID=\"VisioProRetail\">'\r\n    $Content += '      <Language ID=\"en-us\" />'\r\n    $Content += $ExcludedApps\r\n    $Content += '    </Product>'\r\n}\r\n$Content += '  </Add>'\r\n$Content += '  <Property Name=\"SharedComputerLicensing\" Value=\"1\" />'\r\n$Content += '  <Property Name=\"FORCEAPPSHUTDOWN\" Value=\"TRUE\" />'\r\n$Content += '  <Updates Enabled=\"FALSE\" />'\r\n$Content += '  <Display Level=\"None\" AcceptEULA=\"TRUE\" />'\r\n$Content += '</Configuration>'\r\nAdd-Content -Path $ConfigFile -Value $Content\r\nWrite-OutputWithTimeStamp \"Config File Content:\"\r\nWrite-OutputWithTimeStamp \"---------------------------------------------------------------------------------------------------------\"\r\n$ConfigFileContent = Get-Content -Path $ConfigFile\r\nWrite-Output $ConfigFileContent\r\nWrite-OutputWithTimeStamp \"---------------------------------------------------------------------------------------------------------\"\r\nWrite-OutputWithTimeStamp \"Starting setup process.\"\r\n$Install = Start-Process -FilePath $Setup -ArgumentList \"/configure `\"$ConfigFile`\"\" -Wait -PassThru -ErrorAction \"Stop\"\r\nIf ($($Install.ExitCode) -eq 0) {\r\n    Write-OutputWithTimeStamp \"'$SoftwareName' installed successfully.\"\r\n}\r\nElse {\r\n    Write-Error \"'$SoftwareName' install exit code is $($Install.ExitCode)\"\r\n}\r\nIf ((Split-Path $TempDir -Parent) -eq $Env:Temp) { Remove-Item -Path $TempDir -Recurse -Force -ErrorAction SilentlyContinue }\r\nStop-Transcript",
            "$fxv#4": "param(\r\n    [string]$APIVersion,\r\n    [string]$BlobStorageSuffix,\r\n    [string]$BuildDir='',\r\n    [string]$UserAssignedIdentityClientId,\r\n    [string]$Uri=''\r\n)\r\n\r\n$ErrorActionPreference = \"Stop\"\r\n\r\nfunction Write-OutputWithTimeStamp {\r\n    param(\r\n        [string]$Message\r\n    )    \r\n    $Timestamp = Get-Date -Format 'MM/dd/yyyy HH:mm:ss'\r\n    $Entry = '[' + $Timestamp + '] ' + $Message\r\n    Write-Output $Entry\r\n}\r\n\r\n$SoftwareName = 'OneDrive'\r\n\r\nStart-Transcript -Path \"$env:SystemRoot\\Logs\\Install-$SoftwareName.log\" -Force\r\nWrite-OutputWithTimeStamp \"Starting Script to install '$SoftwareName' with the following parameters:\"\r\nWrite-Output ( $PSBoundParameters | Format-Table -AutoSize )\r\n\r\nIf ($Uri -eq '') {\r\n    $Uri = 'https://go.microsoft.com/fwlink/p/?linkid=2121808'\r\n}\r\n\r\nIf ($BuildDir -ne '') {\r\n    $TempDir = Join-Path $BuildDir -ChildPath $SoftwareName\r\n}\r\nElse {\r\n    $TempDir = Join-Path $Env:TEMP -ChildPath $SoftwareName\r\n}\r\nNew-Item -Path $TempDir -ItemType Directory -Force | Out-Null \r\n\r\n$RegPath = 'HKLM:\\SOFTWARE\\Microsoft\\OneDrive'\r\nIf (Test-Path -Path $RegPath) {\r\n    If (Get-ItemProperty -Path $RegPath -Name AllUsersInstall -ErrorAction SilentlyContinue) {\r\n        $AllUsersInstall = Get-ItemPropertyValue -Path $RegPath -Name AllUsersInstall\r\n    }\r\n}\r\nIf ($AllUsersInstall -eq '1') {\r\n    Write-OutputWithTimeStamp \"$SoftwareName is already setup per-machine. Quiting.\"\r\n}\r\nElse {\r\n    Write-OutputWithTimeStamp \"Starting '$SoftwareName' install script with following Parameters:\"\r\n    Write-Output ( $PSBoundParameters | Format-Table -AutoSize )\r\n    $WebClient = New-Object System.Net.WebClient\r\n    If ($Uri -match $BlobStorageSuffix -and $UserAssignedIdentityClientId -ne '') {\r\n        $StorageEndpoint = ($Uri -split \"://\")[0] + \"://\" + ($Uri -split \"/\")[2] + \"/\"\r\n        $TokenUri = \"http://169.254.169.254/metadata/identity/oauth2/token?api-version=$APIVersion&resource=$StorageEndpoint&client_id=$UserAssignedIdentityClientId\"\r\n        $AccessToken = ((Invoke-WebRequest -Headers @{Metadata = $true } -Uri $TokenUri -UseBasicParsing).Content | ConvertFrom-Json).access_token\r\n        $WebClient.Headers.Add('x-ms-version', '2017-11-09')\r\n        $webClient.Headers.Add(\"Authorization\", \"Bearer $AccessToken\")\r\n    }\r\n    $DestFile = Join-Path -Path $TempDir -ChildPath 'OneDriveSetup.exe'\r\n    Write-OutputWithTimeStamp \"Downloading 'OneDriveSetup.exe' from '$Uri' to '$DestFile'.\"\r\n    $webClient.DownloadFile(\"$Uri\", \"$DestFile\")\r\n    Start-Sleep -Seconds 5\r\n    If (!(Test-Path -Path $DestFile)) { Write-Error \"Failed to download $SourceFileName\"; Exit 1 }\r\n    $OneDriveSetup = $DestFile\r\n    #Find existing OneDriveSetup\r\n    $RegPath = 'HKLM:\\SOFTWARE\\WOW6432Node\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\OneDriveSetup.exe'\r\n    If (Test-Path -Path $RegPath) {\r\n        Write-OutputWithTimeStamp \"Found Per-Machine Installation, determining uninstallation command.\"\r\n        If (Get-ItemProperty -Path $RegPath -name UninstallString -ErrorAction SilentlyContinue) {\r\n            $UninstallString = (Get-ItemPropertyValue -Path $RegPath -Name UninstallString).toLower()\r\n            $OneDriveSetupindex = $UninstallString.IndexOf('onedrivesetup.exe') + 17\r\n            $Uninstaller = $UninstallString.Substring(0, $OneDriveSetupindex)\r\n            $Arguments = $UninstallString.Substring($OneDriveSetupindex).replace('  ', ' ').trim()\r\n        }\r\n    }\r\n    Else {\r\n        $Uninstaller = $OneDriveSetup\r\n        $Arguments = '/uninstall'\r\n    }    \r\n    # Uninstall existing version\r\n    Write-OutputWithTimeStamp \"Running [$Uninstaller $Arguments] to remove any existing versions.\"\r\n    Start-Process -FilePath $Uninstaller -ArgumentList $Arguments\r\n    If (get-process onedrivesetup) { Wait-Process -Name OneDriveSetup }\r\n    # Set OneDrive for All Users Install\r\n    Write-OutputWithTimeStamp \"Setting registry values to indicate a per-machine (AllUsersInstall)\"\r\n    New-Item -Path \"HKLM:\\SOFTWARE\\Microsoft\\OneDrive\" -Force | Out-Null\r\n    New-ItemProperty -Path \"HKLM:\\SOFTWARE\\Microsoft\\OneDrive\" -Name AllUsersInstall -PropertyType DWORD -Value 1 -Force | Out-Null\r\n    $Install = Start-Process -FilePath $OneDriveSetup -ArgumentList '/allusers' -Wait -Passthru\r\n    If ($($Install.ExitCode) -eq 0) {\r\n        Write-OutputWithTimeStamp \"'$SoftwareName' installed successfully.\"\r\n    }\r\n    Else {\r\n        Write-Error \"'$SoftwareName' install exit code is $($Install.ExitCode)\"\r\n    }\r\n    Write-OutputWithTimeStamp \"Configuring OneDrive to startup for each user upon logon.\"\r\n    New-ItemProperty -Path 'HKLM:\\Software\\Microsoft\\Windows\\CurrentVersion\\Run' -Name OneDrive -PropertyType String -Value 'C:\\Program Files\\Microsoft OneDrive\\OneDrive.exe /background' -Force | Out-Null\r\n    Write-OutputWithTimeStamp \"Installed OneDrive Per-Machine\"\r\n    If ((Split-Path $TempDir -Parent) -eq $Env:Temp) { Remove-Item -Path $TempDir -Recurse -Force -ErrorAction SilentlyContinue }\r\n}\r\nStop-Transcript",
            "$fxv#5": "param(\r\n    [string]$APIVersion,\r\n    [string]$BlobStorageSuffix,\r\n    [string]$BuildDir='',\r\n    [string]$UserAssignedIdentityClientId,\r\n    [string]$TeamsCloudType,\r\n    [string]$Uri=''\r\n)\r\n\r\n$ErrorActionPreference = 'Stop'\r\n\r\nfunction Write-OutputWithTimeStamp {\r\n    param(\r\n        [string]$Message\r\n    )    \r\n    $Timestamp = Get-Date -Format 'MM/dd/yyyy HH:mm:ss'\r\n    $Entry = '[' + $Timestamp + '] ' + $Message\r\n    Write-Output $Entry\r\n}\r\n\r\n$SoftwareName = 'Teams'\r\nStart-Transcript -Path \"$env:SystemRoot\\Logs\\Install-$SoftwareName.log\" -Force\r\nWrite-OutputWithTimeStamp \"Starting script to install $SoftwareName with the following parameters:\"\r\nWrite-Output ( $PSBoundParameters | Format-Table -AutoSize )\r\nIf ($null -ne $BuildDir -and $BuildDir -ne '') {\r\n    $TempDir = Join-Path $BuildDir -ChildPath $SoftwareName\r\n}\r\nElse {\r\n    $TempDir = Join-Path $Env:TEMP -ChildPath $SoftwareName\r\n}\r\nNew-Item -Path $TempDir -ItemType Directory -Force | Out-Null  \r\n\r\n$WebClient = New-Object System.Net.WebClient\r\nIf ($Null -ne $Uri -and $Uri -ne '' -and $Uri -match $BlobStorageSuffix -and $UserAssignedIdentityClientId -ne '') {\r\n    $StorageEndpoint = ($Uri -split \"://\")[0] + \"://\" + ($Uri -split \"/\")[2] + \"/\"\r\n    $TokenUri = \"http://169.254.169.254/metadata/identity/oauth2/token?api-version=$APIVersion&resource=$StorageEndpoint&client_id=$UserAssignedIdentityClientId\"\r\n    $AccessToken = ((Invoke-WebRequest -Headers @{Metadata = $true } -Uri $TokenUri -UseBasicParsing).Content | ConvertFrom-Json).access_token\r\n    $WebClient.Headers.Add('x-ms-version', '2017-11-09')\r\n    $webClient.Headers.Add(\"Authorization\", \"Bearer $AccessToken\")\r\n    $SourceFileName = ($Uri -Split \"/\")[-1]\r\n    $DestFile = Join-Path -Path $TempDir -ChildPath $SourceFileName\r\n    Write-OutputWithTimeStamp \"Downloading '$Uri' to '$DestFile'.\"\r\n    $webClient.DownloadFile(\"$Uri\", \"$DestFile\")\r\n    Start-Sleep -Seconds 5\r\n    If (!(Test-Path -Path $DestFile)) { Write-Error \"Failed to download $SourceFileName\"; Exit 1 }\r\n    Expand-Archive -Path $destFile -DestinationPath $TempDir -Force\r\n    $WebView2File = (Get-ChildItem -Path $TempDir -filter 'webview*.exe' -Recurse).FullName\r\n    $vcRedistFile = (Get-ChildItem -Path $TempDir -filter 'vc*.exe' -Recurse).FullName\r\n    $webRTCFile = (Get-ChildItem -Path $TempDir -filter 'MsRdcWebRTCSvc.msi' -Recurse).FullName\r\n    $BootStrapperFile = (Get-ChildItem -Path $TempDir -filter '*bootstrapper.exe' -Recurse).FullName\r\n    $MSIXFile = (Get-ChildItem -Path $TempDir -filter '*.msix' -Recurse).FullName\r\n}\r\nElse {\r\n    Write-OutputWithTimeStamp \"No valid Uri provided. Downloading required installers from the internet.\"\r\n    $WebView2File = Join-Path -Path $TempDir -ChildPath 'webview2RuntimeInstaller.exe'\r\n    Write-OutputWithTimeStamp \"Downloading WebView2 Runtime Installer\"\r\n    $WebClient.DownloadFile('https://go.microsoft.com/fwlink/?linkid=2124703', $WebView2File)\r\n    Write-OutputWithTimeStamp \"Downloading Visual C++ Redistributables\"\r\n    $vcRedistFile = Join-Path -Path $TempDir -ChildPath 'vc_redist.x64.exe'\r\n    $WebClient.DownloadFile('https://aka.ms/vs/16/release/vc_redist.x64.exe', $vcRedistFile)\r\n    Write-OutputWithTimeStamp \"Downloading Remote Desktop WebRTC Redirector Service\"\r\n    $webRTCFile = Join-Path -Path $TempDir -ChildPath 'MsRdcWebRTCSvc.msi'\r\n    $WebClient.DownloadFile('https://aka.ms/msrdcwebrtcsvc/msi', $webRTCFile)\r\n    Write-OutputWithTimeStamp \"Downloading Teams Bootstrapper\"\r\n    $BootStrapperFile = Join-Path -Path $TempDir -ChildPath 'Teams_bootstrapper.exe'\r\n    $WebClient.DownloadFile('https://go.microsoft.com/fwlink/?linkid=2243204&clcid=0x409', $BootStrapperFile)\r\n    Write-OutputWithTimeStamp \"Downloading Teams MSIX\"\r\n    $MSIXFile = Join-Path -Path $TempDir -ChildPath 'Teams_windows_x64.msix'\r\n    $WebClient.DownloadFile('https://go.microsoft.com/fwlink/?linkid=2196106', $MSIXFile)    \r\n}\r\nWrite-OutputWithTimeStamp \"Enabling media optimizations for Teams\"\r\n# Enable media optimizations for Team\r\nNew-Item -Path \"HKLM:\\SOFTWARE\\Microsoft\\Teams\" -Force\r\nNew-ItemProperty -Path \"HKLM:\\SOFTWARE\\Microsoft\\Teams\" -Name IsWVDEnvironment -PropertyType DWORD -Value 1 -Force\r\nWrite-OutputWithTimeStamp \"Installing Microsoft Visual C++ Redistributables.\"\r\n$VCRedistInstaller = Start-Process -FilePath $vcRedistFile -ArgumentList \"/install /quiet /norestart\" -Wait -PassThru\r\nIf ($($VCRedistInstaller.ExitCode) -eq 0 ) {\r\n    Write-OutputWithTimeStamp \"Installed the latest version of Microsoft Visual C++ Redistributable\"\r\n}\r\n# Check to see if WebView2 is already installed\r\nIf (Test-Path -Path 'HKLM:\\SOFTWARE\\WOW6432Node\\Microsoft\\EdgeUpdate\\Clients\\{F3017226-FE2A-4295-8BDF-00C3A9A7E4C5}') {\r\n    If (Get-ItemProperty -Path 'HKLM:\\SOFTWARE\\WOW6432Node\\Microsoft\\EdgeUpdate\\Clients\\{F3017226-FE2A-4295-8BDF-00C3A9A7E4C5}' -Name pv -ErrorAction SilentlyContinue) {\r\n        $WebView2Installed = $True\r\n        $InstalledVersion = (Get-ItemProperty -Path 'HKLM:\\SOFTWARE\\WOW6432Node\\Microsoft\\EdgeUpdate\\Clients\\{F3017226-FE2A-4295-8BDF-00C3A9A7E4C5}' -Name pv).pv\r\n        Write-OutputWithTimeStamp \"WebView2 Runtime is already installed. Version: $InstalledVersion\"\r\n    }\r\n}\r\nIf (-not $WebView2Installed) {\r\n    Write-OutputWithTimeStamp \"Installing the latest version of the Microsoft WebView2 Runtime\"\r\n    $WebView2Installer = Start-Process -FilePath $WebView2File -ArgumentList \"/silent /install\" -Wait -PassThru\r\n    If ($($WebView2Installer.ExitCode) -eq 0 ) {\r\n        Write-OutputWithTimeStamp \"Installed the latest version of the Microsoft WebView2 Runtime\"\r\n    }\r\n}\r\n\r\n# install the Remote Desktop WebRTC Redirector Service\r\nWrite-OutputWithTimeStamp \"Installing the Remote Desktop WebRTC Redirector Service\"\r\n$WebRTCInstall = Start-Process -FilePath msiexec.exe -ArgumentList \"/i $webRTCFile /quiet /norestart\" -Wait -PassThru\r\nIf ($($WebRTCInstall.ExitCode) -eq 0) {\r\n    Write-OutputWithTimeStamp \"Installed the Remote Desktop WebRTC Redirector Service\"\r\n}\r\n$TeamsInstall = Start-Process -FilePath \"$BootStrapperFile\" -ArgumentList \"-p -o `\"$MSIXFile`\"\" -Wait -PassThru\r\nIf ($($TeamsInstall.ExitCode) -eq 0) {\r\n    Write-OutputWithTimeStamp \"Installed Teams successfully.\"\r\n}\r\nSwitch ($TeamsCloudType) {\r\n    \"GCC\" {\r\n        $CloudType = 2\r\n    }\r\n    \"GCCH\" {\r\n        $CloudType = 3\r\n    }\r\n    \"DOD\" {\r\n        $CloudType = 4\r\n    }\r\n    \"USSec\" {\r\n        $CloudType = 5\r\n    }\r\n    \"USNat\" {\r\n        $CloudType = 6\r\n    }\r\n    \"Gallatin\" {\r\n        $CloudType = 7\r\n    }\r\n}\r\nIf ($CloudType) {\r\n    $null = Start-Process -FilePath reg.exe -ArgumentList \"LOAD HKLM\\Default $env:SystemDrive\\Users\\Default\\ntuser.dat\" -Wait\r\n    $null = Start-Process -FilePath reg.exe -ArgumentList \"ADD HKLM\\Default\\SOFTWARE\\Microsoft\\Office\\16.0\\Teams /n CloudType /t REG_DWORD /v $CloudType /f\" -Wait -PassThru\r\n    Start-Sleep -Seconds 5\r\n    [System.GC]::Collect()\r\n    $null = Start-Process -FilePath reg.exe -ArgumentList \"UNLOAD HKLM\\Default\" -Wait -PassThru\r\n}\r\nIf ((Split-Path $TempDir -Parent) -eq $Env:Temp) { Remove-Item -Path $TempDir -Recurse -Force -ErrorAction SilentlyContinue }\r\nWrite-OutputWithTimeStamp \"Completed Installation of all components.\"\r\nStop-Transcript",
            "$fxv#6": "param(\r\n    [string]$ResourceManagerUri,\r\n    [string]$UserAssignedIdentityClientId,\r\n    [string]$VmResourceId\r\n)\r\n\r\n$ErrorActionPreference = 'Stop'\r\n$WarningPreference = 'SilentlyContinue'\r\n\r\nTry {\r\n    # Fix the resource manager URI since only AzureCloud contains a trailing slash\r\n    $ResourceManagerUriFixed = if($ResourceManagerUri[-1] -eq '/'){$ResourceManagerUri.Substring(0,$ResourceManagerUri.Length - 1)} else {$ResourceManagerUri}\r\n\r\n    # Get an access token for Azure resources\r\n    $AzureManagementAccessToken = (Invoke-RestMethod `\r\n        -Headers @{Metadata=\"true\"} `\r\n        -Uri $('http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01&resource=' + $ResourceManagerUriFixed + '&client_id=' + $UserAssignedIdentityClientId)).access_token\r\n\r\n    # Set header for Azure Management API\r\n    $AzureManagementHeader = @{\r\n        'Content-Type'='application/json'\r\n        'Authorization'='Bearer ' + $AzureManagementAccessToken\r\n    }\r\n    \r\n    # Restart the VM\r\n    $null = Invoke-RestMethod -Headers $AzureManagementHeader -Method 'Post' -Uri $($ResourceManagerUriFixed + $VmResourceId + '/restart?api-version=2024-03-01')\r\n    $VmStatus = Invoke-RestMethod -Headers $AzureManagementHeader -Method 'Get' -Uri $($ResourceManagerUriFixed + $VmResourceId + '/instanceView?api-version=2024-03-01')\r\n    $provisioningState = ($VMStatus.statuses | Where-Object {$_.code -like 'PowerState*'}).code\r\n    While ($provisioningState -ne \"PowerState/running\") {\r\n        Start-Sleep -Seconds 5\r\n        $VmStatus = Invoke-RestMethod -Headers $AzureManagementHeader -Method 'Get' -Uri $($ResourceManagerUriFixed + $VmResourceId + '/instanceView?api-version=2024-03-01')\r\n        $provisioningState = ($VMStatus.statuses | Where-Object {$_.code -like 'PowerState*'}).code\r\n    }\r\n    Start-Sleep -Seconds 15   \r\n}\r\ncatch {\r\n    throw\r\n}",
            "$fxv#7": "param (\r\n    # The App Name to pass to the WUA API as the calling application.\r\n    [Parameter()]\r\n    [String]$AppName = \"Windows Update API Script\",\r\n    # The search criteria to be used.\r\n    [Parameter()]\r\n    [String]$Criteria = \"IsInstalled=0 and Type='Software' and IsHidden=0\",\r\n    [Parameter()]\r\n    [bool]$ExcludePreviewUpdates = $true,\r\n    # Default service (WSUS if machine is configured to use it, or MU if opted in, or WU otherwise.)\r\n    [Parameter()]\r\n    [ValidateSet(\"WU\", \"MU\", \"WSUS\", \"DCAT\", \"STORE\", \"OTHER\")]\r\n    [string]$Service = 'MU',\r\n    # The http/https fqdn for the Windows Server Update Server\r\n    [Parameter()]\r\n    [string]$WSUSServer\r\n)\r\n  \r\nFunction ConvertFrom-InstallationResult {\r\n    [CmdletBinding()]\r\n    param (\r\n        [Parameter()]\r\n        [int]$Result\r\n    )        \r\n    switch ($Result) {\r\n        2 { $Text = 'Succeeded' }\r\n        3 { $Text = 'Succeeded with errors' }\r\n        4 { $Text = 'Failed' }\r\n        5 { $Text = 'Cancelled' }\r\n        Default { $Text = \"Unexpected ($Result)\" }\r\n    }        \r\n    Return $Text\r\n}\r\n\r\nfunction Write-OutputWithTimeStamp {\r\n    param(\r\n        [string]$Message\r\n    )    \r\n    $Timestamp = Get-Date -Format 'MM/dd/yyyy HH:mm:ss'\r\n    $Entry = '[' + $Timestamp + '] ' + $Message\r\n    Write-Output $Entry\r\n}\r\n\r\nStart-Transcript -Path \"$env:SystemRoot\\Logs\\Install-Updates.log\"\r\nWrite-OutputWithTimeStamp -Message \"Starting Windows Update Script with the following parameters:\"\r\nWrite-Output ( $PSBoundParameters | Format-Table -AutoSize )\r\n\r\nSwitch ($Service.ToUpper()) {\r\n    'WU' { $ServerSelection = 2 }\r\n    'MU' { $ServerSelection = 3; $ServiceId = \"7971f918-a847-4430-9279-4a52d1efe18d\" }\r\n    'WSUS' { $ServerSelection = 1 }\r\n    'DCAT' { $ServerSelection = 3; $ServiceId = \"855E8A7C-ECB4-4CA3-B045-1DFA50104289\" }\r\n    'STORE' { $serverSelection = 3; $ServiceId = \"117cab2d-82b1-4b5a-a08c-4d62dbee7782\" }\r\n    'OTHER' { $ServerSelection = 3; $ServiceId = $Service }\r\n}        \r\nIf ($Service -eq 'MU') {\r\n    $UpdateServiceManager = New-Object -ComObject Microsoft.Update.ServiceManager\r\n    $UpdateServiceManager.ClientApplicationID = $AppName\r\n    $UpdateServiceManager.AddService2(\"7971f918-a847-4430-9279-4a52d1efe18d\", 7, \"\")\r\n    $null = cmd /c reg.exe ADD \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\WindowsUpdate\\AU\" /v AllowMUUpdateService /t REG_DWORD /d 1 /f '2>&1'\r\n    Write-OutputWithTimeStamp \"Added Registry entry to configure Microsoft Update. Exit Code: [$LastExitCode]\"\r\n}\r\nElseif ($Service -eq 'WSUS' -and $WSUSServer) {\r\n    $null = cmd /c reg.exe ADD \"HKLM\\Software\\Policies\\Microsoft\\Windows\\WindowsUpdate\" /v WUServer /t REG_SZ /d $WSUSServer /f '2>&1'\r\n    $null = cmd /c reg.exe ADD \"HKLM\\Software\\Policies\\Microsoft\\Windows\\WindowsUpdate\" /v WUStatusServer /t REG_SZ /d $WSUSServer /f '2>&1'\r\n    Write-OutputWithTimeStamp \"Added Registry entry to configure WSUS Server. Exit Code: [$LastExitCode]\"\r\n}        \r\n$UpdateSession = New-Object -ComObject Microsoft.Update.Session\r\n$updateSession.ClientApplicationID = $AppName   \r\n$UpdateSearcher = New-Object -ComObject Microsoft.Update.Searcher\r\n$UpdateSearcher.ServerSelection = $ServerSelection\r\nIf ($ServerSelection -eq 3) {\r\n    $UpdateSearcher.ServiceId = $ServiceId\r\n}\r\nWrite-OutputWithTimeStamp -Message \"Searching for Updates...\"\r\n$SearchResult = $UpdateSearcher.Search($Criteria)\r\nIf ($($SearchResult.Updates).Count -gt 0) {\r\n    Write-OutputWithTimeStamp \"List of applicable items found for this computer:\"\r\n    For ($i = 0; $i -lt $($SearchResult.Updates).Count; $i++) {\r\n        $Update = $SearchResult.Updates[$i]\r\n        Write-Output \"$($i + 1) > $($update.Title)\"\r\n    }\r\n    $AtLeastOneAdded = $false\r\n    $ExclusiveAdded = $false   \r\n    $UpdatesToDownload = New-Object -ComObject Microsoft.Update.UpdateColl\r\n    Write-OutputWithTimeStamp \"Checking search results:\"\r\n    For ($i = 0; $i -lt $($SearchResult.Updates).Count; $i++) {\r\n        $Update = $SearchResult.Updates[$i]\r\n        $AddThisUpdate = $false        \r\n        If ($ExclusiveAdded) {\r\n            Write-Output \"$($i + 1) > skipping: '$($update.Title)' because an exclusive update has already been selected.\"\r\n        }\r\n        Else {\r\n            $AddThisUpdate = $true\r\n        }        \r\n        if ($ExcludePreviewUpdates -and $update.Title -like '*Preview*') {\r\n            Write-Output \"$($i + 1) > Skipping: '$($update.Title)' because it is a preview update.\"\r\n            $AddThisUpdate = $false\r\n        }        \r\n        If ($AddThisUpdate) {\r\n            $PropertyTest = 0\r\n            $ErrorActionPreference = 'SilentlyContinue'\r\n            $PropertyTest = $Update.InstallationBehavior.Impact\r\n            $ErrorActionPreference = 'Stop'\r\n            If ($PropertyTest -eq 2) {\r\n                If ($AtLeastOneAdded) {\r\n                    Write-Output \"$($i + 1) > skipping: '$($update.Title)' because it is exclusive and other updates are being installed first.\"\r\n                    $AddThisUpdate = $false\r\n                }\r\n            }\r\n        }\r\n        If ($AddThisUpdate) {\r\n            Write-Output \"$($i + 1) > adding: '$($update.Title)'\"\r\n            $UpdatesToDownload.Add($Update) | out-null\r\n            $AtLeastOneAdded = $true\r\n            $ErrorActionPreference = 'SilentlyContinue'\r\n            $PropertyTest = $Update.InstallationBehavior.Impact\r\n            $ErrorActionPreference = 'Stop'\r\n            If ($PropertyTest -eq 2) {\r\n                Write-Output \"This update is exclusive; skipping remaining updates\"\r\n                $ExclusiveAdded = $true\r\n            }\r\n        }\r\n    }        \r\n    $UpdatesToInstall = New-Object -ComObject Microsoft.Update.UpdateColl\r\n    Write-OutputWithTimeStamp \"Downloading updates...\"\r\n    $Downloader = $UpdateSession.CreateUpdateDownloader()\r\n    $Downloader.Updates = $UpdatesToDownload\r\n    $Downloader.Download()\r\n    Write-OutputWithTimeStamp \"Successfully downloaded updates:\"        \r\n    For ($i = 0; $i -lt $UpdatesToDownload.Count; $i++) {\r\n        $Update = $UpdatesToDownload[$i]\r\n        If ($Update.IsDownloaded -eq $true) {\r\n            Write-Output \"$($i + 1) > $($update.title)\"\r\n            $UpdatesToInstall.Add($Update) | out-null\r\n        }\r\n    }        \r\n    If ($UpdatesToInstall.Count -gt 0) {\r\n        Write-OutputWithTimeStamp \"Now installing updates...\"\r\n        $Installer = New-Object -ComObject Microsoft.Update.Installer\r\n        $Installer.Updates = $UpdatesToInstall\r\n        $InstallationResult = $Installer.Install()\r\n        $Text = ConvertFrom-InstallationResult -Result $InstallationResult.ResultCode\r\n        Write-OutputWithTimeStamp \"Installation Result: $($Text)\"        \r\n        If ($InstallationResult.RebootRequired) {\r\n            Write-OutputWithTimeStamp \"Atleast one update requires a reboot to complete the installation.\"\r\n        }\r\n    }\r\n}\r\nElse {\r\n    Write-OutputWithTimeStamp \"No missiong updates found.\"\r\n}\r\n\r\nIf ($service -eq 'MU') {\r\n    Reg.exe DELETE \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\WindowsUpdate\\AU\" /v AllowMUUpdateService /f\r\n}\r\nElseif ($Service -eq 'WSUS' -and $WSUSServer) {\r\n    reg.exe DELETE \"HKLM\\Software\\Policies\\Microsoft\\Windows\\WindowsUpdate\" /v WUServer /f\r\n    reg.exe DELETE \"HKLM\\Software\\Policies\\Microsoft\\Windows\\WindowsUpdate\" /v WUStatusServer /f\r\n}\r\nStop-Transcript",
            "$fxv#8": "param(\r\n    [string]$ResourceManagerUri,\r\n    [string]$UserAssignedIdentityClientId,\r\n    [string]$VmResourceId\r\n)\r\n\r\n$ErrorActionPreference = 'Stop'\r\n$WarningPreference = 'SilentlyContinue'\r\n\r\nTry {\r\n    # Fix the resource manager URI since only AzureCloud contains a trailing slash\r\n    $ResourceManagerUriFixed = if($ResourceManagerUri[-1] -eq '/'){$ResourceManagerUri.Substring(0,$ResourceManagerUri.Length - 1)} else {$ResourceManagerUri}\r\n\r\n    # Get an access token for Azure resources\r\n    $AzureManagementAccessToken = (Invoke-RestMethod `\r\n        -Headers @{Metadata=\"true\"} `\r\n        -Uri $('http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01&resource=' + $ResourceManagerUriFixed + '&client_id=' + $UserAssignedIdentityClientId)).access_token\r\n\r\n    # Set header for Azure Management API\r\n    $AzureManagementHeader = @{\r\n        'Content-Type'='application/json'\r\n        'Authorization'='Bearer ' + $AzureManagementAccessToken\r\n    }\r\n    \r\n    # Restart the VM\r\n    $null = Invoke-RestMethod -Headers $AzureManagementHeader -Method 'Post' -Uri $($ResourceManagerUriFixed + $VmResourceId + '/restart?api-version=2024-03-01')\r\n    $VmStatus = Invoke-RestMethod -Headers $AzureManagementHeader -Method 'Get' -Uri $($ResourceManagerUriFixed + $VmResourceId + '/instanceView?api-version=2024-03-01')\r\n    $provisioningState = ($VMStatus.statuses | Where-Object {$_.code -like 'PowerState*'}).code\r\n    While ($provisioningState -ne \"PowerState/running\") {\r\n        Start-Sleep -Seconds 5\r\n        $VmStatus = Invoke-RestMethod -Headers $AzureManagementHeader -Method 'Get' -Uri $($ResourceManagerUriFixed + $VmResourceId + '/instanceView?api-version=2024-03-01')\r\n        $provisioningState = ($VMStatus.statuses | Where-Object {$_.code -like 'PowerState*'}).code\r\n    }\r\n    Start-Sleep -Seconds 15   \r\n}\r\ncatch {\r\n    throw\r\n}",
            "$fxv#9": "param(\r\n    [string]$APIVersion,\r\n    [string]$BlobStorageSuffix,\r\n    [string]$BuildDir='',\r\n    [string]$Uri,\r\n    [string]$UserAssignedIdentityClientId\r\n)\r\n$ErrorActionPreference = \"Stop\"\r\n\r\nfunction Write-OutputWithTimeStamp {\r\n    param(\r\n        [string]$Message\r\n    )    \r\n    $Timestamp = Get-Date -Format 'MM/dd/yyyy HH:mm:ss'\r\n    $Entry = '[' + $Timestamp + '] ' + $Message\r\n    Write-Output $Entry\r\n}\r\n\r\n$SoftwareName = 'VDOT'\r\nIf ($null -eq $Uri -or $Uri -eq '') {\r\n    $Uri = 'https://github.com/The-Virtual-Desktop-Team/Virtual-Desktop-Optimization-Tool/archive/refs/heads/main.zip'\r\n}\r\nIf ($BuildDir -ne '') {\r\n    $TempDir = Join-Path $BuildDir -ChildPath $SoftwareName\r\n}\r\nElse {\r\n    $TempDir = Join-Path $Env:TEMP -ChildPath $SoftwareName\r\n}\r\nNew-Item -Path $TempDir -ItemType Directory -Force | Out-Null  \r\n\r\nStart-Transcript -Path \"$env:SystemRoot\\Logs\\$SoftwareName.log\" -Force\r\nWrite-OutputWithTimeStamp \"Starting '$SoftwareName' script with the following parameters:\"\r\nWrite-Output ( $PSBoundParameters | Format-Table -AutoSize )\r\n\r\n$WebClient = New-Object System.Net.WebClient\r\nIf ($Uri -match $BlobStorageSuffix -and $UserAssignedIdentityClientId -ne '') {\r\n    $StorageEndpoint = ($Uri -split \"://\")[0] + \"://\" + ($Uri -split \"/\")[2] + \"/\"\r\n    $TokenUri = \"http://169.254.169.254/metadata/identity/oauth2/token?api-version=$APIVersion&resource=$StorageEndpoint&client_id=$UserAssignedIdentityClientId\"\r\n    $AccessToken = ((Invoke-WebRequest -Headers @{Metadata = $true } -Uri $TokenUri -UseBasicParsing).Content | ConvertFrom-Json).access_token\r\n    $WebClient.Headers.Add('x-ms-version', '2017-11-09')\r\n    $webClient.Headers.Add(\"Authorization\", \"Bearer $AccessToken\")\r\n}\r\n$SourceFileName = ($Uri -Split \"/\")[-1]\r\n$DestFile = Join-Path -Path $TempDir -ChildPath $SourceFileName\r\nWrite-OutputWithTimeStamp \"Downloading '$Uri' to '$DestFile'.\"\r\n$webClient.DownloadFile(\"$Uri\", \"$DestFile\")\r\nStart-Sleep -seconds 5\r\nIf (!(Test-Path -Path $DestFile)) { Write-Error \"Failed to download $Uri\"; Exit 1 }\r\nUnblock-File -Path $DestFile\r\nExpand-Archive -LiteralPath $DestFile -DestinationPath $TempDir -Force\r\n$ScriptPath = (Get-ChildItem -Path $TempDir -Recurse | Where-Object { $_.Name -eq \"Windows_VDOT.ps1\" }).FullName\r\nIf ($null -eq $ScriptPath) { Write-Error \"Failed to find the script in the downloaded archive\"; Exit 1 }\r\n$ScriptContents = Get-Content -Path $ScriptPath\r\n$ScriptUpdate = $ScriptContents.Replace(\"Set-NetAdapterAdvancedProperty\", \"#Set-NetAdapterAdvancedProperty\")\r\n$ScriptUpdate | Set-Content -Path $ScriptPath\r\n& $ScriptPath -Optimizations @(\"Autologgers\", \"DefaultUserSettings\", \"LocalPolicy\", \"NetworkOptimizations\", \"ScheduledTasks\", \"Services\", \"WindowsMediaPlayer\") -AdvancedOptimizations @(\"Edge\", \"RemoveLegacyIE\") -AcceptEULA\r\nWrite-OutputWithTimeStamp \"Optimized the operating system using the Virtual Desktop Optimization Tool\"\r\nIf ((Split-Path $TempDir -Parent) -eq $Env:Temp) { Remove-Item -Path $TempDir -Recurse -Force -ErrorAction SilentlyContinue }\r\nStop-Transcript",
            "buildDir": "c:\\BuildDir",
            "apiVersion": "[if(equals(environment().name, 'USNat'), '2017-08-01', '2018-02-01')]",
            "commonScriptParams": [
              {
                "name": "APIVersion",
                "value": "[variables('apiVersion')]"
              },
              {
                "name": "BlobStorageSuffix",
                "value": "[format('blob.{0}', environment().suffixes.storage)]"
              },
              {
                "name": "BuildDir",
                "value": "[variables('buildDir')]"
              },
              {
                "name": "UserAssignedIdentityClientId",
                "value": "[parameters('userAssignedIdentityClientId')]"
              }
            ],
            "restartVMParameters": [
              {
                "name": "ResourceManagerUri",
                "value": "[environment().resourceManager]"
              },
              {
                "name": "UserAssignedIdentityClientId",
                "value": "[parameters('userAssignedIdentityClientId')]"
              },
              {
                "name": "VmResourceId",
                "value": "[resourceId('Microsoft.Compute/virtualMachines', parameters('imageVmName'))]"
              }
            ]
          },
          "resources": [
            {
              "type": "Microsoft.Compute/virtualMachines/runCommands",
              "apiVersion": "2023-03-01",
              "name": "[format('{0}/{1}', parameters('imageVmName'), 'create-BuildDir')]",
              "location": "[parameters('location')]",
              "properties": {
                "parameters": [
                  {
                    "name": "BuildDir",
                    "value": "[variables('buildDir')]"
                  }
                ],
                "source": {
                  "script": "        param(\r\n          [string]$BuildDir\r\n        )\r\n        New-Item -Path $BuildDir -ItemType Directory -Force | Out-Null\r\n  "
                },
                "treatFailureAsDeploymentFailure": true
              }
            },
            {
              "condition": "[not(empty(parameters('appsToRemove')))]",
              "type": "Microsoft.Compute/virtualMachines/runCommands",
              "apiVersion": "2024-03-01",
              "name": "[format('{0}/{1}', parameters('imageVmName'), 'remove-appxPackages')]",
              "location": "[parameters('location')]",
              "properties": {
                "errorBlobManagedIdentity": "[if(empty(parameters('logBlobContainerUri')), null(), createObject('clientId', parameters('userAssignedIdentityClientId')))]",
                "errorBlobUri": "[if(empty(parameters('logBlobContainerUri')), null(), format('{0}{1}-Remove-AppxPackages-error-{2}.log', parameters('logBlobContainerUri'), parameters('imageVmName'), parameters('timeStamp')))]",
                "outputBlobManagedIdentity": "[if(empty(parameters('logBlobContainerUri')), null(), createObject('clientId', parameters('userAssignedIdentityClientId')))]",
                "outputBlobUri": "[if(empty(parameters('logBlobContainerUri')), null(), format('{0}{1}-Remove-AppxPackages-output-{2}.log', parameters('logBlobContainerUri'), parameters('imageVmName'), parameters('timeStamp')))]",
                "parameters": [
                  {
                    "name": "AppsToRemove",
                    "value": "[string(parameters('appsToRemove'))]"
                  }
                ],
                "source": {
                  "script": "[variables('$fxv#0')]"
                },
                "treatFailureAsDeploymentFailure": true
              }
            },
            {
              "copy": {
                "name": "applications",
                "count": "[length(variables('customizers'))]",
                "mode": "serial",
                "batchSize": 1
              },
              "type": "Microsoft.Compute/virtualMachines/runCommands",
              "apiVersion": "2023-03-01",
              "name": "[format('{0}/{1}', parameters('imageVmName'), variables('customizers')[copyIndex()].name)]",
              "location": "[parameters('location')]",
              "properties": {
                "asyncExecution": false,
                "errorBlobManagedIdentity": "[if(empty(parameters('logBlobContainerUri')), null(), createObject('clientId', parameters('userAssignedIdentityClientId')))]",
                "errorBlobUri": "[if(empty(parameters('logBlobContainerUri')), null(), format('{0}{1}-{2}-error-{3}.log', parameters('logBlobContainerUri'), parameters('imageVmName'), variables('customizers')[copyIndex()].name, parameters('timeStamp')))]",
                "outputBlobManagedIdentity": "[if(empty(parameters('logBlobContainerUri')), null(), createObject('clientId', parameters('userAssignedIdentityClientId')))]",
                "outputBlobUri": "[if(empty(parameters('logBlobContainerUri')), null(), format('{0}{1}-{2}-output-{3}.log', parameters('logBlobContainerUri'), parameters('imageVmName'), variables('customizers')[copyIndex()].name, parameters('timeStamp')))]",
                "parameters": "[union(variables('commonScriptParams'), createArray(createObject('name', 'Uri', 'value', variables('customizers')[copyIndex()].uri), createObject('name', 'Name', 'value', variables('customizers')[copyIndex()].name), createObject('name', 'Arguments', 'value', variables('customizers')[copyIndex()].arguments)))]",
                "source": {
                  "script": "[variables('$fxv#1')]"
                },
                "treatFailureAsDeploymentFailure": true
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines/runCommands', parameters('imageVmName'), 'create-BuildDir')]",
                "[resourceId('Microsoft.Compute/virtualMachines/runCommands', parameters('imageVmName'), 'remove-appxPackages')]"
              ]
            },
            {
              "condition": "[parameters('installFsLogix')]",
              "type": "Microsoft.Compute/virtualMachines/runCommands",
              "apiVersion": "2023-07-01",
              "name": "[format('{0}/{1}', parameters('imageVmName'), 'fslogix')]",
              "location": "[parameters('location')]",
              "properties": {
                "asyncExecution": false,
                "errorBlobManagedIdentity": "[if(empty(parameters('logBlobContainerUri')), null(), createObject('clientId', parameters('userAssignedIdentityClientId')))]",
                "errorBlobUri": "[if(empty(parameters('logBlobContainerUri')), null(), format('{0}{1}-FSLogix-error-{2}.log', parameters('logBlobContainerUri'), parameters('imageVmName'), parameters('timeStamp')))]",
                "outputBlobManagedIdentity": "[if(empty(parameters('logBlobContainerUri')), null(), createObject('clientId', parameters('userAssignedIdentityClientId')))]",
                "outputBlobUri": "[if(empty(parameters('logBlobContainerUri')), null(), format('{0}{1}-FSLogix-output-{2}.log', parameters('logBlobContainerUri'), parameters('imageVmName'), parameters('timeStamp')))]",
                "parameters": "[union(variables('commonScriptParams'), createArray(createObject('name', 'Name', 'value', 'FSLogix'), createObject('name', 'Uri', 'value', if(not(empty(parameters('artifactsContainerUri'))), format('{0}/{1}', parameters('artifactsContainerUri'), parameters('fslogixSetupBlobName')), ''))))]",
                "source": {
                  "script": "[variables('$fxv#2')]"
                },
                "treatFailureAsDeploymentFailure": true
              },
              "dependsOn": [
                "applications",
                "[resourceId('Microsoft.Compute/virtualMachines/runCommands', parameters('imageVmName'), 'create-BuildDir')]",
                "[resourceId('Microsoft.Compute/virtualMachines/runCommands', parameters('imageVmName'), 'remove-appxPackages')]"
              ]
            },
            {
              "condition": "[not(empty(parameters('office365AppsToInstall')))]",
              "type": "Microsoft.Compute/virtualMachines/runCommands",
              "apiVersion": "2023-03-01",
              "name": "[format('{0}/{1}', parameters('imageVmName'), 'm365Apps')]",
              "location": "[parameters('location')]",
              "properties": {
                "asyncExecution": false,
                "errorBlobManagedIdentity": "[if(empty(parameters('logBlobContainerUri')), null(), createObject('clientId', parameters('userAssignedIdentityClientId')))]",
                "errorBlobUri": "[if(empty(parameters('logBlobContainerUri')), null(), format('{0}{1}-Office-error-{2}.log', parameters('logBlobContainerUri'), parameters('imageVmName'), parameters('timeStamp')))]",
                "outputBlobManagedIdentity": "[if(empty(parameters('logBlobContainerUri')), null(), createObject('clientId', parameters('userAssignedIdentityClientId')))]",
                "outputBlobUri": "[if(empty(parameters('logBlobContainerUri')), null(), format('{0}{1}-Office-output-{2}.log', parameters('logBlobContainerUri'), parameters('imageVmName'), parameters('timeStamp')))]",
                "parameters": "[union(variables('commonScriptParams'), createArray(createObject('name', 'Environment', 'value', parameters('cloud')), createObject('name', 'AppsToInstall', 'value', string(parameters('office365AppsToInstall'))), createObject('name', 'Name', 'value', 'Office-365-ProPlus'), createObject('name', 'Uri', 'value', if(not(empty(parameters('artifactsContainerUri'))), format('{0}/{1}', parameters('artifactsContainerUri'), parameters('officeDeploymentToolBlobName')), ''))))]",
                "source": {
                  "script": "[variables('$fxv#3')]"
                },
                "treatFailureAsDeploymentFailure": true
              },
              "dependsOn": [
                "applications",
                "[resourceId('Microsoft.Compute/virtualMachines/runCommands', parameters('imageVmName'), 'create-BuildDir')]",
                "[resourceId('Microsoft.Compute/virtualMachines/runCommands', parameters('imageVmName'), 'fslogix')]",
                "[resourceId('Microsoft.Compute/virtualMachines/runCommands', parameters('imageVmName'), 'remove-appxPackages')]"
              ]
            },
            {
              "condition": "[parameters('installOneDrive')]",
              "type": "Microsoft.Compute/virtualMachines/runCommands",
              "apiVersion": "2023-07-01",
              "name": "[format('{0}/{1}', parameters('imageVmName'), 'onedrive')]",
              "location": "[parameters('location')]",
              "properties": {
                "asyncExecution": false,
                "errorBlobManagedIdentity": "[if(empty(parameters('logBlobContainerUri')), null(), createObject('clientId', parameters('userAssignedIdentityClientId')))]",
                "errorBlobUri": "[if(empty(parameters('logBlobContainerUri')), null(), format('{0}{1}-OneDrive-error-{2}.log', parameters('logBlobContainerUri'), parameters('imageVmName'), parameters('timeStamp')))]",
                "outputBlobManagedIdentity": "[if(empty(parameters('logBlobContainerUri')), null(), createObject('clientId', parameters('userAssignedIdentityClientId')))]",
                "outputBlobUri": "[if(empty(parameters('logBlobContainerUri')), null(), format('{0}{1}-OneDrive-output-{2}.log', parameters('logBlobContainerUri'), parameters('imageVmName'), parameters('timeStamp')))]",
                "parameters": "[union(variables('commonScriptParams'), createArray(createObject('name', 'Name', 'value', 'OneDrive'), createObject('name', 'Uri', 'value', if(not(empty(parameters('artifactsContainerUri'))), format('{0}/{1}', parameters('artifactsContainerUri'), parameters('onedriveSetupBlobName')), ''))))]",
                "source": {
                  "script": "[variables('$fxv#4')]"
                },
                "treatFailureAsDeploymentFailure": true
              },
              "dependsOn": [
                "applications",
                "[resourceId('Microsoft.Compute/virtualMachines/runCommands', parameters('imageVmName'), 'create-BuildDir')]",
                "[resourceId('Microsoft.Compute/virtualMachines/runCommands', parameters('imageVmName'), 'fslogix')]",
                "[resourceId('Microsoft.Compute/virtualMachines/runCommands', parameters('imageVmName'), 'm365Apps')]",
                "[resourceId('Microsoft.Compute/virtualMachines/runCommands', parameters('imageVmName'), 'remove-appxPackages')]"
              ]
            },
            {
              "condition": "[parameters('installTeams')]",
              "type": "Microsoft.Compute/virtualMachines/runCommands",
              "apiVersion": "2023-03-01",
              "name": "[format('{0}/{1}', parameters('imageVmName'), 'teams')]",
              "location": "[parameters('location')]",
              "properties": {
                "asyncExecution": false,
                "errorBlobManagedIdentity": "[if(empty(parameters('logBlobContainerUri')), null(), createObject('clientId', parameters('userAssignedIdentityClientId')))]",
                "errorBlobUri": "[if(empty(parameters('logBlobContainerUri')), null(), format('{0}{1}-Teams-error-{2}.log', parameters('logBlobContainerUri'), parameters('imageVmName'), parameters('timeStamp')))]",
                "outputBlobManagedIdentity": "[if(empty(parameters('logBlobContainerUri')), null(), createObject('clientId', parameters('userAssignedIdentityClientId')))]",
                "outputBlobUri": "[if(empty(parameters('logBlobContainerUri')), null(), format('{0}{1}-Teams-output-{2}.log', parameters('logBlobContainerUri'), parameters('imageVmName'), parameters('timeStamp')))]",
                "parameters": "[union(variables('commonScriptParams'), createArray(createObject('name', 'Name', 'value', 'Teams'), createObject('name', 'Uri', 'value', if(not(empty(parameters('artifactsContainerUri'))), format('{0}/{1}', parameters('artifactsContainerUri'), parameters('teamsInstallerBlobName')), '')), createObject('name', 'TeamsCloudType', 'value', parameters('teamsCloudType'))))]",
                "source": {
                  "script": "[variables('$fxv#5')]"
                },
                "treatFailureAsDeploymentFailure": true
              },
              "dependsOn": [
                "applications",
                "[resourceId('Microsoft.Compute/virtualMachines/runCommands', parameters('imageVmName'), 'create-BuildDir')]",
                "[resourceId('Microsoft.Compute/virtualMachines/runCommands', parameters('imageVmName'), 'fslogix')]",
                "[resourceId('Microsoft.Compute/virtualMachines/runCommands', parameters('imageVmName'), 'm365Apps')]",
                "[resourceId('Microsoft.Compute/virtualMachines/runCommands', parameters('imageVmName'), 'onedrive')]",
                "[resourceId('Microsoft.Compute/virtualMachines/runCommands', parameters('imageVmName'), 'remove-appxPackages')]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines/runCommands",
              "apiVersion": "2023-03-01",
              "name": "[format('{0}/{1}', parameters('orchestrationVmName'), 'restart-vm-1')]",
              "location": "[parameters('location')]",
              "properties": {
                "asyncExecution": false,
                "parameters": "[variables('restartVMParameters')]",
                "source": {
                  "script": "[variables('$fxv#6')]"
                },
                "treatFailureAsDeploymentFailure": true
              },
              "dependsOn": [
                "applications",
                "[resourceId('Microsoft.Compute/virtualMachines/runCommands', parameters('imageVmName'), 'create-BuildDir')]",
                "[resourceId('Microsoft.Compute/virtualMachines/runCommands', parameters('imageVmName'), 'fslogix')]",
                "[resourceId('Microsoft.Compute/virtualMachines/runCommands', parameters('imageVmName'), 'm365Apps')]",
                "[resourceId('Microsoft.Compute/virtualMachines/runCommands', parameters('imageVmName'), 'onedrive')]",
                "[resourceId('Microsoft.Compute/virtualMachines/runCommands', parameters('imageVmName'), 'remove-appxPackages')]",
                "[resourceId('Microsoft.Compute/virtualMachines/runCommands', parameters('imageVmName'), 'teams')]"
              ]
            },
            {
              "condition": "[parameters('installUpdates')]",
              "type": "Microsoft.Compute/virtualMachines/runCommands",
              "apiVersion": "2023-03-01",
              "name": "[format('{0}/{1}', parameters('imageVmName'), 'microsoft-updates')]",
              "location": "[parameters('location')]",
              "properties": {
                "asyncExecution": false,
                "errorBlobManagedIdentity": "[if(empty(parameters('logBlobContainerUri')), null(), createObject('clientId', parameters('userAssignedIdentityClientId')))]",
                "errorBlobUri": "[if(empty(parameters('logBlobContainerUri')), null(), format('{0}{1}-Install-Updates-error-{2}.log', parameters('logBlobContainerUri'), parameters('imageVmName'), parameters('timeStamp')))]",
                "outputBlobManagedIdentity": "[if(empty(parameters('logBlobContainerUri')), null(), createObject('clientId', parameters('userAssignedIdentityClientId')))]",
                "outputBlobUri": "[if(empty(parameters('logBlobContainerUri')), null(), format('{0}{1}-Install-Updates-output-{2}.log', parameters('logBlobContainerUri'), parameters('imageVmName'), parameters('timeStamp')))]",
                "parameters": "[if(equals(parameters('updateService'), 'WSUS'), createArray(createObject('name', 'Service', 'value', parameters('updateService')), createObject('name', 'WSUSServer', 'value', parameters('wsusServer'))), createArray(createObject('name', 'Service', 'value', parameters('updateService'))))]",
                "source": {
                  "script": "[variables('$fxv#7')]"
                },
                "treatFailureAsDeploymentFailure": true
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines/runCommands', parameters('orchestrationVmName'), 'restart-vm-1')]"
              ]
            },
            {
              "condition": "[parameters('installUpdates')]",
              "type": "Microsoft.Compute/virtualMachines/runCommands",
              "apiVersion": "2023-03-01",
              "name": "[format('{0}/{1}', parameters('orchestrationVmName'), 'restart-vm-2')]",
              "location": "[parameters('location')]",
              "properties": {
                "asyncExecution": false,
                "parameters": "[variables('restartVMParameters')]",
                "source": {
                  "script": "[variables('$fxv#8')]"
                },
                "treatFailureAsDeploymentFailure": true
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines/runCommands', parameters('imageVmName'), 'microsoft-updates')]"
              ]
            },
            {
              "condition": "[parameters('installVirtualDesktopOptimizationTool')]",
              "type": "Microsoft.Compute/virtualMachines/runCommands",
              "apiVersion": "2023-03-01",
              "name": "[format('{0}/{1}', parameters('imageVmName'), 'vdot')]",
              "location": "[parameters('location')]",
              "properties": {
                "asyncExecution": false,
                "errorBlobManagedIdentity": "[if(empty(parameters('logBlobContainerUri')), null(), createObject('clientId', parameters('userAssignedIdentityClientId')))]",
                "errorBlobUri": "[if(empty(parameters('logBlobContainerUri')), null(), format('{0}{1}-vdot-error-{2}.log', parameters('logBlobContainerUri'), parameters('imageVmName'), parameters('timeStamp')))]",
                "outputBlobManagedIdentity": "[if(empty(parameters('logBlobContainerUri')), null(), createObject('clientId', parameters('userAssignedIdentityClientId')))]",
                "outputBlobUri": "[if(empty(parameters('logBlobContainerUri')), null(), format('{0}{1}-vdot-output-{2}.log', parameters('logBlobContainerUri'), parameters('imageVmName'), parameters('timeStamp')))]",
                "parameters": "[union(variables('commonScriptParams'), createArray(createObject('name', 'Name', 'value', 'VDOT'), createObject('name', 'Uri', 'value', if(not(empty(parameters('artifactsContainerUri'))), format('{0}/{1}', parameters('artifactsContainerUri'), parameters('vDotBlobName')), ''))))]",
                "source": {
                  "script": "[variables('$fxv#9')]"
                },
                "timeoutInSeconds": 600,
                "treatFailureAsDeploymentFailure": true
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines/runCommands', parameters('orchestrationVmName'), 'restart-vm-2')]"
              ]
            },
            {
              "condition": "[parameters('installVirtualDesktopOptimizationTool')]",
              "type": "Microsoft.Compute/virtualMachines/runCommands",
              "apiVersion": "2023-03-01",
              "name": "[format('{0}/{1}', parameters('orchestrationVmName'), 'restart-vm-3')]",
              "location": "[parameters('location')]",
              "properties": {
                "asyncExecution": false,
                "parameters": "[variables('restartVMParameters')]",
                "source": {
                  "script": "[variables('$fxv#10')]"
                },
                "treatFailureAsDeploymentFailure": true
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines/runCommands', parameters('imageVmName'), 'vdot')]"
              ]
            },
            {
              "copy": {
                "name": "vdiApplications",
                "count": "[length(variables('vdiCustomizers'))]",
                "mode": "serial",
                "batchSize": 1
              },
              "type": "Microsoft.Compute/virtualMachines/runCommands",
              "apiVersion": "2023-03-01",
              "name": "[format('{0}/{1}', parameters('imageVmName'), variables('vdiCustomizers')[copyIndex()].name)]",
              "location": "[parameters('location')]",
              "properties": {
                "asyncExecution": false,
                "errorBlobManagedIdentity": "[if(empty(parameters('logBlobContainerUri')), null(), createObject('clientId', parameters('userAssignedIdentityClientId')))]",
                "errorBlobUri": "[if(empty(parameters('logBlobContainerUri')), null(), format('{0}{1}-{2}-error-{3}.log', parameters('logBlobContainerUri'), parameters('imageVmName'), variables('vdiCustomizers')[copyIndex()].name, parameters('timeStamp')))]",
                "outputBlobManagedIdentity": "[if(empty(parameters('logBlobContainerUri')), null(), createObject('clientId', parameters('userAssignedIdentityClientId')))]",
                "outputBlobUri": "[if(empty(parameters('logBlobContainerUri')), null(), format('{0}{1}-{2}-output-{3}.log', parameters('logBlobContainerUri'), parameters('imageVmName'), variables('vdiCustomizers')[copyIndex()].name, parameters('timeStamp')))]",
                "parameters": "[union(variables('commonScriptParams'), createArray(createObject('name', 'Uri', 'value', variables('vdiCustomizers')[copyIndex()].uri), createObject('name', 'Name', 'value', variables('vdiCustomizers')[copyIndex()].name), createObject('name', 'Arguments', 'value', variables('vdiCustomizers')[copyIndex()].arguments)))]",
                "source": {
                  "script": "[variables('$fxv#11')]"
                },
                "treatFailureAsDeploymentFailure": true
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines/runCommands', parameters('orchestrationVmName'), 'restart-vm-1')]",
                "[resourceId('Microsoft.Compute/virtualMachines/runCommands', parameters('orchestrationVmName'), 'restart-vm-2')]",
                "[resourceId('Microsoft.Compute/virtualMachines/runCommands', parameters('orchestrationVmName'), 'restart-vm-3')]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines/runCommands",
              "apiVersion": "2023-03-01",
              "name": "[format('{0}/{1}', parameters('imageVmName'), 'cleanup-Image')]",
              "location": "[parameters('location')]",
              "properties": {
                "asyncExecution": false,
                "parameters": [
                  {
                    "name": "BuildDir",
                    "value": "[variables('buildDir')]"
                  }
                ],
                "source": {
                  "script": "[variables('$fxv#12')]"
                },
                "treatFailureAsDeploymentFailure": true
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines/runCommands', parameters('orchestrationVmName'), 'restart-vm-1')]",
                "[resourceId('Microsoft.Compute/virtualMachines/runCommands', parameters('orchestrationVmName'), 'restart-vm-2')]",
                "[resourceId('Microsoft.Compute/virtualMachines/runCommands', parameters('orchestrationVmName'), 'restart-vm-3')]",
                "vdiApplications"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines/runCommands",
              "apiVersion": "2023-03-01",
              "name": "[format('{0}/{1}', parameters('imageVmName'), 'sysprep')]",
              "location": "[parameters('location')]",
              "properties": {
                "asyncExecution": false,
                "errorBlobManagedIdentity": "[if(empty(parameters('logBlobContainerUri')), null(), createObject('clientId', parameters('userAssignedIdentityClientId')))]",
                "errorBlobUri": "[if(empty(parameters('logBlobContainerUri')), null(), format('{0}{1}-Sysprep-error-{2}.log', parameters('logBlobContainerUri'), parameters('imageVmName'), parameters('timeStamp')))]",
                "outputBlobManagedIdentity": "[if(empty(parameters('logBlobContainerUri')), null(), createObject('clientId', parameters('userAssignedIdentityClientId')))]",
                "outputBlobUri": "[if(empty(parameters('logBlobContainerUri')), null(), format('{0}{1}-Sysprep-output-{2}.log', parameters('logBlobContainerUri'), parameters('imageVmName'), parameters('timeStamp')))]",
                "source": {
                  "script": "[variables('$fxv#13')]"
                },
                "treatFailureAsDeploymentFailure": true
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines/runCommands', parameters('imageVmName'), 'cleanup-Image')]"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('imageBuildResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}Image-VM-{1}', variables('depPrefix'), parameters('timeStamp')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('imageBuildResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}Logs-StorageAccount-{1}', variables('depPrefix'), parameters('timeStamp')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('imageBuildResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}Orchestration-VM-{1}', variables('depPrefix'), parameters('timeStamp')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('imageBuildResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}ManagedIdentity-{1}', variables('depPrefix'), parameters('timeStamp')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}Generalize-VM-{1}', variables('depPrefix'), parameters('timeStamp'))]",
      "resourceGroup": "[variables('imageBuildResourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('subnetResourceId'), '/')[2], split(parameters('subnetResourceId'), '/')[4]), 'Microsoft.Network/virtualNetworks', split(parameters('subnetResourceId'), '/')[8]), '2023-05-01', 'full').location]"
          },
          "name": {
            "value": "StopAndGeneralize"
          },
          "parameters": {
            "value": [
              {
                "name": "ResourceManagerUri",
                "value": "[environment().resourceManager]"
              },
              {
                "name": "UserAssignedIdentityClientId",
                "value": "[if(empty(parameters('userAssignedIdentityResourceId')), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('imageBuildResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}ManagedIdentity-{1}', variables('depPrefix'), parameters('timeStamp'))), '2022-09-01').outputs.clientId.value, reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('userAssignedIdentityResourceId'), '/')[2], split(parameters('userAssignedIdentityResourceId'), '/')[4]), 'Microsoft.ManagedIdentity/userAssignedIdentities', last(split(parameters('userAssignedIdentityResourceId'), '/'))), '2023-01-31').clientId)]"
              },
              {
                "name": "VmResourceId",
                "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('imageBuildResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}Image-VM-{1}', variables('depPrefix'), parameters('timeStamp'))), '2022-09-01').outputs.resourceId.value]"
              }
            ]
          },
          "script": {
            "value": "[variables('$fxv#2')]"
          },
          "treatFailureAsDeploymentFailure": {
            "value": true
          },
          "virtualMachineName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('imageBuildResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}Orchestration-VM-{1}', variables('depPrefix'), parameters('timeStamp'))), '2022-09-01').outputs.name.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.33.93.31351",
              "templateHash": "2241144494076411319"
            },
            "name": "Virtual Machine RunCommand",
            "description": "This module deploys a Virtual Machine Run Command.",
            "owner": "shawn.meyer@microsoft.com"
          },
          "parameters": {
            "virtualMachineName": {
              "type": "string",
              "metadata": {
                "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
              }
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the virtual machine extension."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. The location the extension is deployed to."
              }
            },
            "asyncExecution": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional.  If set to true, provisioning will complete as soon as the script starts and will not wait for script to complete."
              }
            },
            "errorBlobManagedIdentity": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. User-assigned managed identity that has access to errorBlobContainerUri storage blob container.\nUse an empty object in case of system-assigned identity. Make sure managed identity has been given access to blob\\'s container with \\'Storage Blob Data Contributor\\' role assignment.\nIn case of user-assigned identity, make sure you add it under VM's identity.\nFor more info on managed identity and Run Command, refer https://aka.ms/ManagedIdentity and https://aka.ms/RunCommandManaged"
              }
            },
            "errorBlobContainerUri": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. \tSpecifies the Azure storage blob where script error stream will be uploaded.\nUse a SAS URI with read, append, create, write access OR use managed identity to provide the VM access to the blob.\nRefer errorBlobManagedIdentity parameter."
              }
            },
            "outputBlobManagedIdentity": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. User-assigned managed identity that has access to outputBlobContainerUri storage blob container.\nUse an empty object in case of system-assigned identity. Make sure managed identity has been given access to blob\\'s container with \\'Storage Blob Data Contributor\\' role assignment.\nIn case of user-assigned identity, make sure you add it under VM's identity.\nFor more info on managed identity and Run Command, refer https://aka.ms/ManagedIdentity and https://aka.ms/RunCommandManaged"
              }
            },
            "outputBlobContainerUri": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. \tSpecifies the Azure storage blob where script error stream will be uploaded.\nUse a SAS URI with read, append, create, write access OR use managed identity to provide the VM access to the blob.\nRefer errorBlobManagedIdentity parameter."
              }
            },
            "parameters": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. Parameters used by the script."
              }
            },
            "protectedParameters": {
              "type": "secureObject",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Protected parameters used by the script. These parameters will not show up in deployment data.\nFormat the object as follows:\n{\n  SecureParameterName1: { value: 'secureParameterValue1'}\n  SecureParameterName2: { value: 'secureParameterValue2'}\n}    \n"
              }
            },
            "runAsPassword": {
              "type": "securestring",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Specifies the user account password on the VM when executing the run command."
              }
            },
            "runAsUser": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Specifies the user account on the VM when executing the run command."
              }
            },
            "commandId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Conditional. Specifies a commandId of predefined built-in script. Do not use with [script] or [scriptUri] parameters."
              }
            },
            "script": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Specifies the script content to be executed on the VM. Do not use with [commandId] or [scriptUri] parameters."
              }
            },
            "scriptUri": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Specifies the script download location. It can be either SAS URI of an Azure storage blob with read access or public URI.\nDo not use with [commandId] or [script] parameters."
              }
            },
            "scriptUriManagedIdentity": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. User-assigned managed identity that has access to scriptUri in case of Azure storage blob.\nUse an empty object in case of system-assigned identity.\nMake sure the Azure storage blob exists, and managed identity has been given access to blob's container with 'Storage Blob Data Reader' role assignment.\nIn case of user-assigned identity, make sure you add it under VM's identity.\nFor more info on managed identity and Run Command, refer https://aka.ms/ManagedIdentity and https://aka.ms/RunCommandManaged."
              }
            },
            "timeoutInSeconds": {
              "type": "int",
              "defaultValue": -1,
              "metadata": {
                "description": "Optional. The timeout in seconds to execute the run command."
              }
            },
            "treatFailureAsDeploymentFailure": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Optional. If set to true, any failure in the script will fail the deployment and ProvisioningState will be marked as Failed.\nIf set to false, ProvisioningState would only reflect whether the run command was run or not by the extensions platform, it would not indicate whether script failed in case of script failures.\nSee instance view of run command in case of script failures to see executionMessage, output, error: https://aka.ms/runcommandmanaged#get-execution-status-and-results"
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Tags of the resource."
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "protectedParametersArray",
                "count": "[length(items(parameters('protectedParameters')))]",
                "input": {
                  "name": "[items(parameters('protectedParameters'))[copyIndex('protectedParametersArray')].key]",
                  "value": "[items(parameters('protectedParameters'))[copyIndex('protectedParametersArray')].value.value]"
                }
              }
            ]
          },
          "resources": [
            {
              "type": "Microsoft.Compute/virtualMachines/runCommands",
              "apiVersion": "2023-03-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "asyncExecution": "[parameters('asyncExecution')]",
                "errorBlobManagedIdentity": "[if(not(empty(parameters('errorBlobManagedIdentity'))), parameters('errorBlobManagedIdentity'), null())]",
                "errorBlobUri": "[if(not(empty(parameters('errorBlobContainerUri'))), format('{0}{1}-error.log', toLower(parameters('errorBlobContainerUri')), parameters('name')), null())]",
                "outputBlobManagedIdentity": "[if(not(empty(parameters('outputBlobManagedIdentity'))), parameters('outputBlobManagedIdentity'), null())]",
                "outputBlobUri": "[if(not(empty(parameters('outputBlobContainerUri'))), format('{0}{1}-output.log', toLower(parameters('outputBlobContainerUri')), parameters('name')), null())]",
                "parameters": "[if(not(empty(parameters('parameters'))), parameters('parameters'), null())]",
                "protectedParameters": "[variables('protectedParametersArray')]",
                "runAsPassword": "[if(not(empty(parameters('runAsPassword'))), parameters('runAsPassword'), null())]",
                "runAsUser": "[if(not(empty(parameters('runAsUser'))), parameters('runAsUser'), null())]",
                "source": {
                  "commandId": "[if(not(empty(parameters('commandId'))), parameters('commandId'), null())]",
                  "script": "[if(not(empty(parameters('script'))), parameters('script'), null())]",
                  "scriptUri": "[if(not(empty(parameters('scriptUri'))), parameters('scriptUri'), null())]",
                  "scriptUriManagedIdentity": "[if(not(empty(parameters('scriptUriManagedIdentity'))), parameters('scriptUriManagedIdentity'), null())]"
                },
                "timeoutInSeconds": "[if(not(equals(parameters('timeoutInSeconds'), -1)), parameters('timeoutInSeconds'), null())]",
                "treatFailureAsDeploymentFailure": "[parameters('treatFailureAsDeploymentFailure')]"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('imageBuildResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}Customize-Image-{1}', variables('depPrefix'), parameters('timeStamp')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('imageBuildResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}Image-VM-{1}', variables('depPrefix'), parameters('timeStamp')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('imageBuildResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}Orchestration-VM-{1}', variables('depPrefix'), parameters('timeStamp')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('imageBuildResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}ManagedIdentity-{1}', variables('depPrefix'), parameters('timeStamp')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}Capture-Image-{1}', variables('depPrefix'), parameters('timeStamp'))]",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "computeGalleryResourceId": {
            "value": "[parameters('computeGalleryResourceId')]"
          },
          "depPrefix": {
            "value": "[variables('depPrefix')]"
          },
          "hyperVGeneration": {
            "value": "[variables('galleryImageDefinitionHyperVGeneration')]"
          },
          "imageBuildResourceGroupName": {
            "value": "[variables('imageBuildResourceGroupName')]"
          },
          "imageDefinitionSecurityType": "[if(empty(parameters('imageDefinitionResourceId')), createObject('value', parameters('imageDefinitionSecurityType')), if(not(empty(filter(if(empty(parameters('imageDefinitionResourceId')), createArray(createObject('name', 'IsHibernateSupported', 'value', parameters('imageDefinitionIsHibernateSupported')), createObject('name', 'IsAcceleratedNetworkSupported', 'value', parameters('imageDefinitionIsAcceleratedNetworkSupported')), createObject('name', 'DiskControllerTypes', 'value', parameters('imageDefinitionIsHigherStoragePerformanceSupported')), createObject('name', 'SecurityType', 'value', parameters('imageDefinitionSecurityType'))), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('imageDefinitionResourceId'), '/')[2], split(parameters('imageDefinitionResourceId'), '/')[4]), 'Microsoft.Compute/galleries/images', split(format('{0}/{1}', split(parameters('imageDefinitionResourceId'), '/')[8], last(split(parameters('imageDefinitionResourceId'), '/'))), '/')[0], split(format('{0}/{1}', split(parameters('imageDefinitionResourceId'), '/')[8], last(split(parameters('imageDefinitionResourceId'), '/'))), '/')[1]), '2024-03-03').features), lambda('feature', equals(lambdaVariables('feature').name, 'SecurityType'))))), createObject('value', filter(if(empty(parameters('imageDefinitionResourceId')), createArray(createObject('name', 'IsHibernateSupported', 'value', parameters('imageDefinitionIsHibernateSupported')), createObject('name', 'IsAcceleratedNetworkSupported', 'value', parameters('imageDefinitionIsAcceleratedNetworkSupported')), createObject('name', 'DiskControllerTypes', 'value', parameters('imageDefinitionIsHigherStoragePerformanceSupported')), createObject('name', 'SecurityType', 'value', parameters('imageDefinitionSecurityType'))), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('imageDefinitionResourceId'), '/')[2], split(parameters('imageDefinitionResourceId'), '/')[4]), 'Microsoft.Compute/galleries/images', split(format('{0}/{1}', split(parameters('imageDefinitionResourceId'), '/')[8], last(split(parameters('imageDefinitionResourceId'), '/'))), '/')[0], split(format('{0}/{1}', split(parameters('imageDefinitionResourceId'), '/')[8], last(split(parameters('imageDefinitionResourceId'), '/'))), '/')[1]), '2024-03-03').features), lambda('feature', equals(lambdaVariables('feature').name, 'SecurityType')))[0].value), createObject('value', 'Standard')))]",
          "imageName": "[if(not(empty(parameters('imageDefinitionResourceId'))), createObject('value', last(split(parameters('imageDefinitionResourceId'), '/'))), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, split(parameters('computeGalleryResourceId'), '/')[4]), 'Microsoft.Resources/deployments', format('{0}Gallery-Image-Definition-{1}', variables('depPrefix'), parameters('timeStamp'))), '2022-09-01').outputs.name.value))]",
          "imageVersionDefaultReplicaCount": {
            "value": "[parameters('imageVersionDefaultReplicaCount')]"
          },
          "imageVersionDefaultStorageAccountType": {
            "value": "[parameters('imageVersionDefaultStorageAccountType')]"
          },
          "imageVersionExcludeFromLatest": {
            "value": "[parameters('imageVersionExcludeFromLatest')]"
          },
          "imageVersionName": {
            "value": "[variables('imageVersionName')]"
          },
          "imageVersionReplicationRegions": "[if(empty(parameters('remoteComputeGalleryResourceId')), if(not(empty(parameters('imageVersionTargetRegions'))), if(empty(filter(parameters('imageVersionTargetRegions'), lambda('region', equals(lambdaVariables('region').name, reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('subnetResourceId'), '/')[2], split(parameters('subnetResourceId'), '/')[4]), 'Microsoft.Network/virtualNetworks', split(parameters('subnetResourceId'), '/')[8]), '2023-05-01', 'full').location)))), createObject('value', union(createArray(createObject('excludeFromLatest', parameters('imageVersionExcludeFromLatest'), 'name', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('subnetResourceId'), '/')[2], split(parameters('subnetResourceId'), '/')[4]), 'Microsoft.Network/virtualNetworks', split(parameters('subnetResourceId'), '/')[8]), '2023-05-01', 'full').location, 'regionalReplicaCount', parameters('imageVersionDefaultReplicaCount'), 'storageAccountType', parameters('imageVersionDefaultStorageAccountType'))), parameters('imageVersionTargetRegions'))), createObject('value', parameters('imageVersionTargetRegions'))), createObject('value', createArray(createObject('excludeFromLatest', parameters('imageVersionExcludeFromLatest'), 'name', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('subnetResourceId'), '/')[2], split(parameters('subnetResourceId'), '/')[4]), 'Microsoft.Network/virtualNetworks', split(parameters('subnetResourceId'), '/')[8]), '2023-05-01', 'full').location, 'regionalReplicaCount', parameters('imageVersionDefaultReplicaCount'), 'storageAccountType', parameters('imageVersionDefaultStorageAccountType'))))), if(empty(filter(if(not(empty(parameters('imageVersionTargetRegions'))), if(empty(filter(parameters('imageVersionTargetRegions'), lambda('region', equals(lambdaVariables('region').name, reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('subnetResourceId'), '/')[2], split(parameters('subnetResourceId'), '/')[4]), 'Microsoft.Network/virtualNetworks', split(parameters('subnetResourceId'), '/')[8]), '2023-05-01', 'full').location)))), union(createArray(createObject('excludeFromLatest', parameters('imageVersionExcludeFromLatest'), 'name', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('subnetResourceId'), '/')[2], split(parameters('subnetResourceId'), '/')[4]), 'Microsoft.Network/virtualNetworks', split(parameters('subnetResourceId'), '/')[8]), '2023-05-01', 'full').location, 'regionalReplicaCount', parameters('imageVersionDefaultReplicaCount'), 'storageAccountType', parameters('imageVersionDefaultStorageAccountType'))), parameters('imageVersionTargetRegions')), parameters('imageVersionTargetRegions')), createArray(createObject('excludeFromLatest', parameters('imageVersionExcludeFromLatest'), 'name', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('subnetResourceId'), '/')[2], split(parameters('subnetResourceId'), '/')[4]), 'Microsoft.Network/virtualNetworks', split(parameters('subnetResourceId'), '/')[8]), '2023-05-01', 'full').location, 'regionalReplicaCount', parameters('imageVersionDefaultReplicaCount'), 'storageAccountType', parameters('imageVersionDefaultStorageAccountType')))), lambda('region', equals(lambdaVariables('region').name, if(not(empty(parameters('remoteComputeGalleryResourceId'))), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('remoteComputeGalleryResourceId'), '/')[2], split(parameters('remoteComputeGalleryResourceId'), '/')[4]), 'Microsoft.Compute/galleries', last(split(parameters('remoteComputeGalleryResourceId'), '/'))), '2024-03-03', 'full').location, ''))))), createObject('value', union(if(not(empty(parameters('imageVersionTargetRegions'))), if(empty(filter(parameters('imageVersionTargetRegions'), lambda('region', equals(lambdaVariables('region').name, reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('subnetResourceId'), '/')[2], split(parameters('subnetResourceId'), '/')[4]), 'Microsoft.Network/virtualNetworks', split(parameters('subnetResourceId'), '/')[8]), '2023-05-01', 'full').location)))), union(createArray(createObject('excludeFromLatest', parameters('imageVersionExcludeFromLatest'), 'name', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('subnetResourceId'), '/')[2], split(parameters('subnetResourceId'), '/')[4]), 'Microsoft.Network/virtualNetworks', split(parameters('subnetResourceId'), '/')[8]), '2023-05-01', 'full').location, 'regionalReplicaCount', parameters('imageVersionDefaultReplicaCount'), 'storageAccountType', parameters('imageVersionDefaultStorageAccountType'))), parameters('imageVersionTargetRegions')), parameters('imageVersionTargetRegions')), createArray(createObject('excludeFromLatest', parameters('imageVersionExcludeFromLatest'), 'name', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('subnetResourceId'), '/')[2], split(parameters('subnetResourceId'), '/')[4]), 'Microsoft.Network/virtualNetworks', split(parameters('subnetResourceId'), '/')[8]), '2023-05-01', 'full').location, 'regionalReplicaCount', parameters('imageVersionDefaultReplicaCount'), 'storageAccountType', parameters('imageVersionDefaultStorageAccountType')))), createArray(createObject('excludeFromLatest', parameters('remoteImageVersionExcludeFromLatest'), 'name', if(not(empty(parameters('remoteComputeGalleryResourceId'))), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('remoteComputeGalleryResourceId'), '/')[2], split(parameters('remoteComputeGalleryResourceId'), '/')[4]), 'Microsoft.Compute/galleries', last(split(parameters('remoteComputeGalleryResourceId'), '/'))), '2024-03-03', 'full').location, ''), 'regionalReplicaCount', parameters('remoteImageVersionDefaultReplicaCount'), 'storageAccountType', 'Standard_LRS')))), if(not(empty(parameters('imageVersionTargetRegions'))), if(empty(filter(parameters('imageVersionTargetRegions'), lambda('region', equals(lambdaVariables('region').name, reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('subnetResourceId'), '/')[2], split(parameters('subnetResourceId'), '/')[4]), 'Microsoft.Network/virtualNetworks', split(parameters('subnetResourceId'), '/')[8]), '2023-05-01', 'full').location)))), createObject('value', union(createArray(createObject('excludeFromLatest', parameters('imageVersionExcludeFromLatest'), 'name', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('subnetResourceId'), '/')[2], split(parameters('subnetResourceId'), '/')[4]), 'Microsoft.Network/virtualNetworks', split(parameters('subnetResourceId'), '/')[8]), '2023-05-01', 'full').location, 'regionalReplicaCount', parameters('imageVersionDefaultReplicaCount'), 'storageAccountType', parameters('imageVersionDefaultStorageAccountType'))), parameters('imageVersionTargetRegions'))), createObject('value', parameters('imageVersionTargetRegions'))), createObject('value', createArray(createObject('excludeFromLatest', parameters('imageVersionExcludeFromLatest'), 'name', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('subnetResourceId'), '/')[2], split(parameters('subnetResourceId'), '/')[4]), 'Microsoft.Network/virtualNetworks', split(parameters('subnetResourceId'), '/')[8]), '2023-05-01', 'full').location, 'regionalReplicaCount', parameters('imageVersionDefaultReplicaCount'), 'storageAccountType', parameters('imageVersionDefaultStorageAccountType')))))))]",
          "imageVersionEndOfLifeDate": {
            "value": "[variables('imageVersionEndOfLifeDate')]"
          },
          "location": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('subnetResourceId'), '/')[2], split(parameters('subnetResourceId'), '/')[4]), 'Microsoft.Network/virtualNetworks', split(parameters('subnetResourceId'), '/')[8]), '2023-05-01', 'full').location]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "timeStamp": {
            "value": "[parameters('timeStamp')]"
          },
          "virtualMachineResourceId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('imageBuildResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}Image-VM-{1}', variables('depPrefix'), parameters('timeStamp'))), '2022-09-01').outputs.resourceId.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.33.93.31351",
              "templateHash": "5635453727167331555"
            }
          },
          "parameters": {
            "computeGalleryResourceId": {
              "type": "string"
            },
            "depPrefix": {
              "type": "string"
            },
            "hyperVGeneration": {
              "type": "string"
            },
            "imageBuildResourceGroupName": {
              "type": "string"
            },
            "imageDefinitionSecurityType": {
              "type": "string"
            },
            "imageName": {
              "type": "string"
            },
            "imageVersionName": {
              "type": "string"
            },
            "imageVersionDefaultReplicaCount": {
              "type": "int"
            },
            "imageVersionDefaultStorageAccountType": {
              "type": "string"
            },
            "imageVersionEndOfLifeDate": {
              "type": "string"
            },
            "imageVersionExcludeFromLatest": {
              "type": "bool"
            },
            "imageVersionReplicationRegions": {
              "type": "array"
            },
            "location": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            },
            "timeStamp": {
              "type": "string"
            },
            "virtualMachineResourceId": {
              "type": "string"
            }
          },
          "resources": [
            {
              "condition": "[contains(parameters('imageDefinitionSecurityType'), 'Supported')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}Image-{1}', parameters('depPrefix'), parameters('timeStamp'))]",
              "resourceGroup": "[parameters('imageBuildResourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "hyperVGeneration": {
                    "value": "[parameters('hyperVGeneration')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "name": {
                    "value": "[format('img-{0}', last(split(parameters('virtualMachineResourceId'), '/')))]"
                  },
                  "sourceVirtualMachineResourceId": {
                    "value": "[parameters('virtualMachineResourceId')]"
                  },
                  "tags": {
                    "value": "[coalesce(tryGet(parameters('tags'), 'Microsoft.Compute/images'), createObject())]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.33.93.31351",
                      "templateHash": "14671419666439833068"
                    },
                    "name": "Images",
                    "description": "This module deploys a Compute Image.",
                    "owner": "Azure/module-maintainers"
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the image."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all resources."
                      }
                    },
                    "osDiskBlobUri": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The Virtual Hard Disk."
                      }
                    },
                    "osType": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. This property allows you to specify the type of the OS that is included in the disk if creating a VM from a custom image. - Windows or Linux."
                      }
                    },
                    "osDiskCaching": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Specifies the caching requirements. Default: None for Standard storage. ReadOnly for Premium storage. - None, ReadOnly, ReadWrite."
                      }
                    },
                    "osAccountType": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Specifies the storage account type for the managed disk. NOTE: UltraSSD_LRS can only be used with data disks, it cannot be used with OS Disk. - Standard_LRS, Premium_LRS, StandardSSD_LRS, UltraSSD_LRS."
                      }
                    },
                    "zoneResilient": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Default is false. Specifies whether an image is zone resilient or not. Zone resilient images can be created only in regions that provide Zone Redundant Storage (ZRS)."
                      }
                    },
                    "hyperVGeneration": {
                      "type": "string",
                      "defaultValue": "V2",
                      "metadata": {
                        "description": "Optional. Gets the HyperVGenerationType of the VirtualMachine created from the image. - V1 or V2."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    },
                    "extendedLocation": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. The extended location of the Image."
                      }
                    },
                    "sourceVirtualMachineResourceId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The source virtual machine from which Image is created."
                      }
                    },
                    "diskEncryptionSetResourceId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Specifies the customer managed disk encryption set resource ID for the managed image disk."
                      }
                    },
                    "managedDiskResourceId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The managedDisk."
                      }
                    },
                    "diskSizeGB": {
                      "type": "int",
                      "defaultValue": 128,
                      "metadata": {
                        "description": "Optional. Specifies the size of empty data disks in gigabytes. This element can be used to overwrite the name of the disk in a virtual machine image. This value cannot be larger than 1023 GB."
                      }
                    },
                    "osState": {
                      "type": "string",
                      "defaultValue": "Generalized",
                      "allowedValues": [
                        "Generalized",
                        "Specialized"
                      ],
                      "metadata": {
                        "description": "Optional. The OS State. For managed images, use Generalized."
                      }
                    },
                    "snapshotResourceId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The snapshot resource ID."
                      }
                    },
                    "dataDisks": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Specifies the parameters that are used to add a data disk to a virtual machine."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Compute/images",
                      "apiVersion": "2023-03-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "extendedLocation": "[if(not(empty(parameters('extendedLocation'))), parameters('extendedLocation'), null())]",
                      "properties": {
                        "storageProfile": {
                          "osDisk": "[if(empty(parameters('sourceVirtualMachineResourceId')), createObject('osType', parameters('osType'), 'blobUri', if(not(empty(parameters('osDiskBlobUri'))), parameters('osDiskBlobUri'), null()), 'caching', if(not(empty(parameters('osDiskCaching'))), parameters('osDiskCaching'), null()), 'storageAccountType', parameters('osAccountType'), 'osState', parameters('osState'), 'diskEncryptionSet', if(not(empty(parameters('diskEncryptionSetResourceId'))), createObject('id', parameters('diskEncryptionSetResourceId')), null()), 'diskSizeGB', parameters('diskSizeGB'), 'managedDisk', if(not(empty(parameters('managedDiskResourceId'))), createObject('id', parameters('managedDiskResourceId')), null()), 'snapshot', if(not(empty(parameters('snapshotResourceId'))), createObject('id', parameters('snapshotResourceId')), null())), null())]",
                          "dataDisks": "[if(empty(parameters('dataDisks')), null(), parameters('dataDisks'))]",
                          "zoneResilient": "[parameters('zoneResilient')]"
                        },
                        "hyperVGeneration": "[parameters('hyperVGeneration')]",
                        "sourceVirtualMachine": "[if(not(empty(parameters('sourceVirtualMachineResourceId'))), createObject('id', parameters('sourceVirtualMachineResourceId')), null())]"
                      }
                    }
                  ],
                  "outputs": {
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the image."
                      },
                      "value": "[resourceId('Microsoft.Compute/images', parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group the image was deployed into."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the image."
                      },
                      "value": "[parameters('name')]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference(resourceId('Microsoft.Compute/images', parameters('name')), '2023-03-01', 'full').location]"
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}ImageVersion-{1}', parameters('depPrefix'), parameters('timeStamp'))]",
              "subscriptionId": "[split(parameters('computeGalleryResourceId'), '/')[2]]",
              "resourceGroup": "[split(parameters('computeGalleryResourceId'), '/')[4]]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "name": {
                    "value": "[parameters('imageVersionName')]"
                  },
                  "galleryName": {
                    "value": "[last(split(parameters('computeGalleryResourceId'), '/'))]"
                  },
                  "imageName": {
                    "value": "[parameters('imageName')]"
                  },
                  "endOfLifeDate": {
                    "value": "[parameters('imageVersionEndOfLifeDate')]"
                  },
                  "excludeFromLatest": {
                    "value": "[parameters('imageVersionExcludeFromLatest')]"
                  },
                  "replicaCount": {
                    "value": "[parameters('imageVersionDefaultReplicaCount')]"
                  },
                  "storageAccountType": {
                    "value": "[parameters('imageVersionDefaultStorageAccountType')]"
                  },
                  "sourceId": "[if(contains(parameters('imageDefinitionSecurityType'), 'Supported'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('imageBuildResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}Image-{1}', parameters('depPrefix'), parameters('timeStamp'))), '2022-09-01').outputs.resourceId.value), createObject('value', parameters('virtualMachineResourceId')))]",
                  "targetRegions": {
                    "value": "[parameters('imageVersionReplicationRegions')]"
                  },
                  "tags": {
                    "value": "[coalesce(tryGet(parameters('tags'), 'Microsoft.Compute/galleries/images/versions'), createObject())]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.33.93.31351",
                      "templateHash": "12658885593511687007"
                    },
                    "name": "Compute Galleries Image Version",
                    "description": "This module deploys an Azure Compute Gallery Image Definition Version",
                    "author": "shawn.meyer@microsoft.com"
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the image version."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all resources."
                      }
                    },
                    "imageName": {
                      "type": "string",
                      "minLength": 1,
                      "metadata": {
                        "description": "Conditional. The name of the parent Azure Shared Image Gallery Image Definition. Required if the template is used in a standalone deployment."
                      }
                    },
                    "galleryName": {
                      "type": "string",
                      "minLength": 1,
                      "metadata": {
                        "description": "Conditional. The name of the Azure Compute gallery that contains the Image Definition for which this version will be created."
                      }
                    },
                    "endOfLifeDate": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The end of life date as a string."
                      }
                    },
                    "excludeFromLatest": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. If set to true, Virtual Machines deployed from the latest version of the Image Definition will not use this Image Version."
                      }
                    },
                    "replicaCount": {
                      "type": "int",
                      "metadata": {
                        "description": "Optional. The number of replicas of the Image Version to be created per region.\nThis property would take effect for a region when regionalReplicaCount is not specified. This property is updatable."
                      }
                    },
                    "replicationMode": {
                      "type": "string",
                      "defaultValue": "",
                      "allowedValues": [
                        "",
                        "Full",
                        "Shallow"
                      ],
                      "metadata": {
                        "description": "Optional. Optional parameter which specifies the mode to be used for replication. This property is not updatable."
                      }
                    },
                    "storageAccountType": {
                      "type": "string",
                      "defaultValue": "Standard_LRS",
                      "allowedValues": [
                        "Premium_LRS",
                        "Standard_LRS",
                        "Standard_ZRS"
                      ],
                      "metadata": {
                        "description": "Optional. Specifies the storage account type to be used to store the image. This property is not updatable."
                      }
                    },
                    "targetRegions": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. The target regions where the Image Version is going to be replicated to.\nIf this object is not specified, then the deployment location will be used."
                      }
                    },
                    "diskEncryptionSetId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. A relative URI containing the resource ID of the disk encryption set."
                      }
                    },
                    "confidentialVMEncryptionType": {
                      "type": "string",
                      "defaultValue": "",
                      "allowedValues": [
                        "",
                        "EncryptedVMGuestStateOnlyWithPmk",
                        "EncryptedWithCmk",
                        "EncryptedWithPmk"
                      ],
                      "metadata": {
                        "description": "Optional. Confidential VM encryption types"
                      }
                    },
                    "secureVMDiskEncryptionSetId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Secure VM disk encryption set id."
                      }
                    },
                    "allowDeletionOfReplicatedLocations": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Indicates whether or not removing this Gallery Image Version from replicated regions is allowed."
                      }
                    },
                    "hostCaching": {
                      "type": "string",
                      "defaultValue": "None",
                      "allowedValues": [
                        "None",
                        "ReadOnly",
                        "ReadWrite"
                      ],
                      "metadata": {
                        "description": "Optional. The host caching of the disk."
                      }
                    },
                    "osDiskImageSourceId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The id of the gallery artifact version source. Can specify a disk uri, snapshot uri, user image or storage account resource."
                      }
                    },
                    "osDiskImageSourceUri": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The uri of the gallery artifact version source. Currently used to specify vhd/blob source."
                      }
                    },
                    "sourceId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The id of the gallery artifact version source. Can specify a disk uri, snapshot uri, user image or storage account resource."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags for all resources."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "regionMatchArray",
                        "count": "[length(parameters('targetRegions'))]",
                        "input": "[if(equals(parameters('targetRegions')[copyIndex('regionMatchArray')].name, parameters('location')), true(), false())]"
                      }
                    ],
                    "sourceStorageProfile": "[if(not(empty(parameters('sourceId'))), createObject('id', parameters('sourceId')), createObject())]",
                    "osDiskImageStorageProfile": "[if(or(not(empty(parameters('osDiskImageSourceId'))), not(empty(parameters('osDiskImageSourceUri')))), createObject('hostCaching', parameters('hostCaching'), 'source', createObject('id', if(not(empty(parameters('osDiskImageSourceId'))), parameters('osDiskImageSourceId'), null()), 'uri', if(not(empty(parameters('osDiskImageSourceUri'))), parameters('osDiskImageSourceUri'), null()))), createObject())]",
                    "targetRegionDefault": [
                      {
                        "encryption": "[if(not(empty(parameters('diskEncryptionSetId'))), createObject('osDiskImage', createObject('diskEncryptionSetId', parameters('diskEncryptionSetId'), 'securityProfile', createObject('confidentialVMEncryptionType', if(not(empty(parameters('confidentialVMEncryptionType'))), parameters('confidentialVMEncryptionType'), null()), 'secureVMDiskEncryptionSetId', if(not(empty(parameters('secureVMDiskEncryptionSetId'))), parameters('secureVMDiskEncryptionSetId'), null())))), null())]",
                        "name": "[parameters('location')]",
                        "storageAccountType": "[parameters('storageAccountType')]"
                      }
                    ],
                    "targetRegionsContainsLocation": "[if(contains(variables('regionMatchArray'), true()), true(), false())]",
                    "targetRegionsVar": "[if(not(empty(parameters('targetRegions'))), if(variables('targetRegionsContainsLocation'), parameters('targetRegions'), union(parameters('targetRegions'), variables('targetRegionDefault'))), variables('targetRegionDefault'))]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Compute/galleries/images/versions",
                      "apiVersion": "2022-03-03",
                      "name": "[format('{0}/{1}/{2}', parameters('galleryName'), parameters('imageName'), parameters('name'))]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "publishingProfile": {
                          "endOfLifeDate": "[if(not(empty(parameters('endOfLifeDate'))), parameters('endOfLifeDate'), null())]",
                          "excludeFromLatest": "[parameters('excludeFromLatest')]",
                          "replicaCount": "[parameters('replicaCount')]",
                          "replicationMode": "[if(not(empty(parameters('replicationMode'))), parameters('replicationMode'), null())]",
                          "storageAccountType": "[parameters('storageAccountType')]",
                          "targetRegions": "[variables('targetRegionsVar')]"
                        },
                        "safetyProfile": {
                          "allowDeletionOfReplicatedLocations": "[parameters('allowDeletionOfReplicatedLocations')]"
                        },
                        "storageProfile": {
                          "osDiskImage": "[variables('osDiskImageStorageProfile')]",
                          "source": "[variables('sourceStorageProfile')]"
                        }
                      },
                      "tags": "[parameters('tags')]"
                    }
                  ],
                  "outputs": {
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group the image was deployed into."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the image version."
                      },
                      "value": "[resourceId('Microsoft.Compute/galleries/images/versions', parameters('galleryName'), parameters('imageName'), parameters('name'))]"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the image version."
                      },
                      "value": "[parameters('name')]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference(resourceId('Microsoft.Compute/galleries/images/versions', parameters('galleryName'), parameters('imageName'), parameters('name')), '2022-03-03', 'full').location]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('imageBuildResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}Image-{1}', parameters('depPrefix'), parameters('timeStamp')))]"
              ]
            }
          ],
          "outputs": {
            "managedImageId": {
              "type": "string",
              "value": "[if(contains(parameters('imageDefinitionSecurityType'), 'Supported'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('imageBuildResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}Image-{1}', parameters('depPrefix'), parameters('timeStamp'))), '2022-09-01').outputs.resourceId.value, '')]"
            },
            "imageVersionId": {
              "type": "string",
              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('computeGalleryResourceId'), '/')[2], split(parameters('computeGalleryResourceId'), '/')[4]), 'Microsoft.Resources/deployments', format('{0}ImageVersion-{1}', parameters('depPrefix'), parameters('timeStamp'))), '2022-09-01').outputs.resourceId.value]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, split(parameters('computeGalleryResourceId'), '/')[4]), 'Microsoft.Resources/deployments', format('{0}Gallery-Image-Definition-{1}', variables('depPrefix'), parameters('timeStamp')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('imageBuildResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}Image-VM-{1}', variables('depPrefix'), parameters('timeStamp')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('imageBuildResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}Generalize-VM-{1}', variables('depPrefix'), parameters('timeStamp')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}Remove-Image-Image-Build-Resources-{1}', variables('depPrefix'), parameters('timeStamp'))]",
      "resourceGroup": "[variables('imageBuildResourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "asyncExecution": {
            "value": true
          },
          "errorBlobManagedIdentity": "[if(empty(if(parameters('collectCustomizationLogs'), format('{0}{1}/', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('imageBuildResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}Logs-StorageAccount-{1}', variables('depPrefix'), parameters('timeStamp'))), '2022-09-01').outputs.primaryBlobEndpoint.value, variables('logContainerName')), '')), createObject('value', null()), createObject('value', createObject('clientId', if(empty(parameters('userAssignedIdentityResourceId')), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('imageBuildResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}ManagedIdentity-{1}', variables('depPrefix'), parameters('timeStamp'))), '2022-09-01').outputs.clientId.value, reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('userAssignedIdentityResourceId'), '/')[2], split(parameters('userAssignedIdentityResourceId'), '/')[4]), 'Microsoft.ManagedIdentity/userAssignedIdentities', last(split(parameters('userAssignedIdentityResourceId'), '/'))), '2023-01-31').clientId))))]",
          "errorBlobContainerUri": "[if(empty(if(parameters('collectCustomizationLogs'), format('{0}{1}/', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('imageBuildResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}Logs-StorageAccount-{1}', variables('depPrefix'), parameters('timeStamp'))), '2022-09-01').outputs.primaryBlobEndpoint.value, variables('logContainerName')), '')), createObject('value', null()), createObject('value', format('{0}{1}-Remove-Resources-error-{2}.log', if(parameters('collectCustomizationLogs'), format('{0}{1}/', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('imageBuildResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}Logs-StorageAccount-{1}', variables('depPrefix'), parameters('timeStamp'))), '2022-09-01').outputs.primaryBlobEndpoint.value, variables('logContainerName')), ''), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('imageBuildResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}Orchestration-VM-{1}', variables('depPrefix'), parameters('timeStamp'))), '2022-09-01').outputs.name.value, parameters('timeStamp'))))]",
          "outputBlobManagedIdentity": "[if(empty(if(parameters('collectCustomizationLogs'), format('{0}{1}/', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('imageBuildResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}Logs-StorageAccount-{1}', variables('depPrefix'), parameters('timeStamp'))), '2022-09-01').outputs.primaryBlobEndpoint.value, variables('logContainerName')), '')), createObject('value', null()), createObject('value', createObject('clientId', if(empty(parameters('userAssignedIdentityResourceId')), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('imageBuildResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}ManagedIdentity-{1}', variables('depPrefix'), parameters('timeStamp'))), '2022-09-01').outputs.clientId.value, reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('userAssignedIdentityResourceId'), '/')[2], split(parameters('userAssignedIdentityResourceId'), '/')[4]), 'Microsoft.ManagedIdentity/userAssignedIdentities', last(split(parameters('userAssignedIdentityResourceId'), '/'))), '2023-01-31').clientId))))]",
          "outputBlobContainerUri": "[if(empty(if(parameters('collectCustomizationLogs'), format('{0}{1}/', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('imageBuildResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}Logs-StorageAccount-{1}', variables('depPrefix'), parameters('timeStamp'))), '2022-09-01').outputs.primaryBlobEndpoint.value, variables('logContainerName')), '')), createObject('value', null()), createObject('value', format('{0}{1}-Remove-Resources-output-{2}.log', if(parameters('collectCustomizationLogs'), format('{0}{1}/', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('imageBuildResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}Logs-StorageAccount-{1}', variables('depPrefix'), parameters('timeStamp'))), '2022-09-01').outputs.primaryBlobEndpoint.value, variables('logContainerName')), ''), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('imageBuildResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}Orchestration-VM-{1}', variables('depPrefix'), parameters('timeStamp'))), '2022-09-01').outputs.name.value, parameters('timeStamp'))))]",
          "location": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('subnetResourceId'), '/')[2], split(parameters('subnetResourceId'), '/')[4]), 'Microsoft.Network/virtualNetworks', split(parameters('subnetResourceId'), '/')[8]), '2023-05-01', 'full').location]"
          },
          "name": {
            "value": "RemoveImageBuildResources"
          },
          "parameters": {
            "value": [
              {
                "name": "ResourceManagerUri",
                "value": "[environment().resourceManager]"
              },
              {
                "name": "UserAssignedIdentityClientId",
                "value": "[if(empty(parameters('userAssignedIdentityResourceId')), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('imageBuildResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}ManagedIdentity-{1}', variables('depPrefix'), parameters('timeStamp'))), '2022-09-01').outputs.clientId.value, reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('userAssignedIdentityResourceId'), '/')[2], split(parameters('userAssignedIdentityResourceId'), '/')[4]), 'Microsoft.ManagedIdentity/userAssignedIdentities', last(split(parameters('userAssignedIdentityResourceId'), '/'))), '2023-01-31').clientId)]"
              },
              {
                "name": "ImageResourceId",
                "value": "[if(contains(if(empty(parameters('imageDefinitionResourceId')), parameters('imageDefinitionSecurityType'), if(not(empty(filter(if(empty(parameters('imageDefinitionResourceId')), createArray(createObject('name', 'IsHibernateSupported', 'value', parameters('imageDefinitionIsHibernateSupported')), createObject('name', 'IsAcceleratedNetworkSupported', 'value', parameters('imageDefinitionIsAcceleratedNetworkSupported')), createObject('name', 'DiskControllerTypes', 'value', parameters('imageDefinitionIsHigherStoragePerformanceSupported')), createObject('name', 'SecurityType', 'value', parameters('imageDefinitionSecurityType'))), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('imageDefinitionResourceId'), '/')[2], split(parameters('imageDefinitionResourceId'), '/')[4]), 'Microsoft.Compute/galleries/images', split(format('{0}/{1}', split(parameters('imageDefinitionResourceId'), '/')[8], last(split(parameters('imageDefinitionResourceId'), '/'))), '/')[0], split(format('{0}/{1}', split(parameters('imageDefinitionResourceId'), '/')[8], last(split(parameters('imageDefinitionResourceId'), '/'))), '/')[1]), '2024-03-03').features), lambda('feature', equals(lambdaVariables('feature').name, 'SecurityType'))))), filter(if(empty(parameters('imageDefinitionResourceId')), createArray(createObject('name', 'IsHibernateSupported', 'value', parameters('imageDefinitionIsHibernateSupported')), createObject('name', 'IsAcceleratedNetworkSupported', 'value', parameters('imageDefinitionIsAcceleratedNetworkSupported')), createObject('name', 'DiskControllerTypes', 'value', parameters('imageDefinitionIsHigherStoragePerformanceSupported')), createObject('name', 'SecurityType', 'value', parameters('imageDefinitionSecurityType'))), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('imageDefinitionResourceId'), '/')[2], split(parameters('imageDefinitionResourceId'), '/')[4]), 'Microsoft.Compute/galleries/images', split(format('{0}/{1}', split(parameters('imageDefinitionResourceId'), '/')[8], last(split(parameters('imageDefinitionResourceId'), '/'))), '/')[0], split(format('{0}/{1}', split(parameters('imageDefinitionResourceId'), '/')[8], last(split(parameters('imageDefinitionResourceId'), '/'))), '/')[1]), '2024-03-03').features), lambda('feature', equals(lambdaVariables('feature').name, 'SecurityType')))[0].value, 'Standard')), 'Supported'), reference(subscriptionResourceId('Microsoft.Resources/deployments', format('{0}Capture-Image-{1}', variables('depPrefix'), parameters('timeStamp'))), '2022-09-01').outputs.managedImageId.value, '')]"
              },
              {
                "name": "ImageVmResourceId",
                "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('imageBuildResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}Image-VM-{1}', variables('depPrefix'), parameters('timeStamp'))), '2022-09-01').outputs.resourceId.value]"
              },
              {
                "name": "ManagementVmResourceId",
                "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('imageBuildResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}Orchestration-VM-{1}', variables('depPrefix'), parameters('timeStamp'))), '2022-09-01').outputs.resourceId.value]"
              }
            ]
          },
          "script": {
            "value": "[variables('$fxv#3')]"
          },
          "treatFailureAsDeploymentFailure": {
            "value": false
          },
          "virtualMachineName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('imageBuildResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}Orchestration-VM-{1}', variables('depPrefix'), parameters('timeStamp'))), '2022-09-01').outputs.name.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.33.93.31351",
              "templateHash": "2241144494076411319"
            },
            "name": "Virtual Machine RunCommand",
            "description": "This module deploys a Virtual Machine Run Command.",
            "owner": "shawn.meyer@microsoft.com"
          },
          "parameters": {
            "virtualMachineName": {
              "type": "string",
              "metadata": {
                "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
              }
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the virtual machine extension."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. The location the extension is deployed to."
              }
            },
            "asyncExecution": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional.  If set to true, provisioning will complete as soon as the script starts and will not wait for script to complete."
              }
            },
            "errorBlobManagedIdentity": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. User-assigned managed identity that has access to errorBlobContainerUri storage blob container.\nUse an empty object in case of system-assigned identity. Make sure managed identity has been given access to blob\\'s container with \\'Storage Blob Data Contributor\\' role assignment.\nIn case of user-assigned identity, make sure you add it under VM's identity.\nFor more info on managed identity and Run Command, refer https://aka.ms/ManagedIdentity and https://aka.ms/RunCommandManaged"
              }
            },
            "errorBlobContainerUri": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. \tSpecifies the Azure storage blob where script error stream will be uploaded.\nUse a SAS URI with read, append, create, write access OR use managed identity to provide the VM access to the blob.\nRefer errorBlobManagedIdentity parameter."
              }
            },
            "outputBlobManagedIdentity": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. User-assigned managed identity that has access to outputBlobContainerUri storage blob container.\nUse an empty object in case of system-assigned identity. Make sure managed identity has been given access to blob\\'s container with \\'Storage Blob Data Contributor\\' role assignment.\nIn case of user-assigned identity, make sure you add it under VM's identity.\nFor more info on managed identity and Run Command, refer https://aka.ms/ManagedIdentity and https://aka.ms/RunCommandManaged"
              }
            },
            "outputBlobContainerUri": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. \tSpecifies the Azure storage blob where script error stream will be uploaded.\nUse a SAS URI with read, append, create, write access OR use managed identity to provide the VM access to the blob.\nRefer errorBlobManagedIdentity parameter."
              }
            },
            "parameters": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. Parameters used by the script."
              }
            },
            "protectedParameters": {
              "type": "secureObject",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Protected parameters used by the script. These parameters will not show up in deployment data.\nFormat the object as follows:\n{\n  SecureParameterName1: { value: 'secureParameterValue1'}\n  SecureParameterName2: { value: 'secureParameterValue2'}\n}    \n"
              }
            },
            "runAsPassword": {
              "type": "securestring",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Specifies the user account password on the VM when executing the run command."
              }
            },
            "runAsUser": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Specifies the user account on the VM when executing the run command."
              }
            },
            "commandId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Conditional. Specifies a commandId of predefined built-in script. Do not use with [script] or [scriptUri] parameters."
              }
            },
            "script": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Specifies the script content to be executed on the VM. Do not use with [commandId] or [scriptUri] parameters."
              }
            },
            "scriptUri": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Specifies the script download location. It can be either SAS URI of an Azure storage blob with read access or public URI.\nDo not use with [commandId] or [script] parameters."
              }
            },
            "scriptUriManagedIdentity": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. User-assigned managed identity that has access to scriptUri in case of Azure storage blob.\nUse an empty object in case of system-assigned identity.\nMake sure the Azure storage blob exists, and managed identity has been given access to blob's container with 'Storage Blob Data Reader' role assignment.\nIn case of user-assigned identity, make sure you add it under VM's identity.\nFor more info on managed identity and Run Command, refer https://aka.ms/ManagedIdentity and https://aka.ms/RunCommandManaged."
              }
            },
            "timeoutInSeconds": {
              "type": "int",
              "defaultValue": -1,
              "metadata": {
                "description": "Optional. The timeout in seconds to execute the run command."
              }
            },
            "treatFailureAsDeploymentFailure": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Optional. If set to true, any failure in the script will fail the deployment and ProvisioningState will be marked as Failed.\nIf set to false, ProvisioningState would only reflect whether the run command was run or not by the extensions platform, it would not indicate whether script failed in case of script failures.\nSee instance view of run command in case of script failures to see executionMessage, output, error: https://aka.ms/runcommandmanaged#get-execution-status-and-results"
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Tags of the resource."
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "protectedParametersArray",
                "count": "[length(items(parameters('protectedParameters')))]",
                "input": {
                  "name": "[items(parameters('protectedParameters'))[copyIndex('protectedParametersArray')].key]",
                  "value": "[items(parameters('protectedParameters'))[copyIndex('protectedParametersArray')].value.value]"
                }
              }
            ]
          },
          "resources": [
            {
              "type": "Microsoft.Compute/virtualMachines/runCommands",
              "apiVersion": "2023-03-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "asyncExecution": "[parameters('asyncExecution')]",
                "errorBlobManagedIdentity": "[if(not(empty(parameters('errorBlobManagedIdentity'))), parameters('errorBlobManagedIdentity'), null())]",
                "errorBlobUri": "[if(not(empty(parameters('errorBlobContainerUri'))), format('{0}{1}-error.log', toLower(parameters('errorBlobContainerUri')), parameters('name')), null())]",
                "outputBlobManagedIdentity": "[if(not(empty(parameters('outputBlobManagedIdentity'))), parameters('outputBlobManagedIdentity'), null())]",
                "outputBlobUri": "[if(not(empty(parameters('outputBlobContainerUri'))), format('{0}{1}-output.log', toLower(parameters('outputBlobContainerUri')), parameters('name')), null())]",
                "parameters": "[if(not(empty(parameters('parameters'))), parameters('parameters'), null())]",
                "protectedParameters": "[variables('protectedParametersArray')]",
                "runAsPassword": "[if(not(empty(parameters('runAsPassword'))), parameters('runAsPassword'), null())]",
                "runAsUser": "[if(not(empty(parameters('runAsUser'))), parameters('runAsUser'), null())]",
                "source": {
                  "commandId": "[if(not(empty(parameters('commandId'))), parameters('commandId'), null())]",
                  "script": "[if(not(empty(parameters('script'))), parameters('script'), null())]",
                  "scriptUri": "[if(not(empty(parameters('scriptUri'))), parameters('scriptUri'), null())]",
                  "scriptUriManagedIdentity": "[if(not(empty(parameters('scriptUriManagedIdentity'))), parameters('scriptUriManagedIdentity'), null())]"
                },
                "timeoutInSeconds": "[if(not(equals(parameters('timeoutInSeconds'), -1)), parameters('timeoutInSeconds'), null())]",
                "treatFailureAsDeploymentFailure": "[parameters('treatFailureAsDeploymentFailure')]"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('{0}Capture-Image-{1}', variables('depPrefix'), parameters('timeStamp')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('imageBuildResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}Image-VM-{1}', variables('depPrefix'), parameters('timeStamp')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('imageBuildResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}Logs-StorageAccount-{1}', variables('depPrefix'), parameters('timeStamp')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('imageBuildResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}Orchestration-VM-{1}', variables('depPrefix'), parameters('timeStamp')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('imageBuildResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}ManagedIdentity-{1}', variables('depPrefix'), parameters('timeStamp')))]"
      ]
    },
    {
      "condition": "[not(empty(parameters('remoteComputeGalleryResourceId')))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}Remote-ImageVersion-{1}', variables('depPrefix'), parameters('timeStamp'))]",
      "subscriptionId": "[split(parameters('remoteComputeGalleryResourceId'), '/')[2]]",
      "resourceGroup": "[split(parameters('remoteComputeGalleryResourceId'), '/')[4]]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "name": {
            "value": "[variables('imageVersionName')]"
          },
          "galleryName": {
            "value": "[last(split(parameters('remoteComputeGalleryResourceId'), '/'))]"
          },
          "imageName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('remoteComputeGalleryResourceId'), '/')[2], split(parameters('remoteComputeGalleryResourceId'), '/')[4]), 'Microsoft.Resources/deployments', format('{0}Remote-Gallery-Image-Definition-{1}', variables('depPrefix'), parameters('timeStamp'))), '2022-09-01').outputs.name.value]"
          },
          "endOfLifeDate": {
            "value": "[variables('imageVersionEndOfLifeDate')]"
          },
          "excludeFromLatest": {
            "value": "[parameters('remoteImageVersionExcludeFromLatest')]"
          },
          "replicaCount": {
            "value": "[parameters('remoteImageVersionDefaultReplicaCount')]"
          },
          "storageAccountType": {
            "value": "[parameters('remoteImageVersionStorageAccountType')]"
          },
          "sourceId": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('{0}Capture-Image-{1}', variables('depPrefix'), parameters('timeStamp'))), '2022-09-01').outputs.imageVersionId.value]"
          },
          "tags": {
            "value": "[coalesce(tryGet(parameters('tags'), 'Microsoft.Compute/galleries/images/versions'), createObject())]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.33.93.31351",
              "templateHash": "12658885593511687007"
            },
            "name": "Compute Galleries Image Version",
            "description": "This module deploys an Azure Compute Gallery Image Definition Version",
            "author": "shawn.meyer@microsoft.com"
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. Name of the image version."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all resources."
              }
            },
            "imageName": {
              "type": "string",
              "minLength": 1,
              "metadata": {
                "description": "Conditional. The name of the parent Azure Shared Image Gallery Image Definition. Required if the template is used in a standalone deployment."
              }
            },
            "galleryName": {
              "type": "string",
              "minLength": 1,
              "metadata": {
                "description": "Conditional. The name of the Azure Compute gallery that contains the Image Definition for which this version will be created."
              }
            },
            "endOfLifeDate": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The end of life date as a string."
              }
            },
            "excludeFromLatest": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. If set to true, Virtual Machines deployed from the latest version of the Image Definition will not use this Image Version."
              }
            },
            "replicaCount": {
              "type": "int",
              "metadata": {
                "description": "Optional. The number of replicas of the Image Version to be created per region.\nThis property would take effect for a region when regionalReplicaCount is not specified. This property is updatable."
              }
            },
            "replicationMode": {
              "type": "string",
              "defaultValue": "",
              "allowedValues": [
                "",
                "Full",
                "Shallow"
              ],
              "metadata": {
                "description": "Optional. Optional parameter which specifies the mode to be used for replication. This property is not updatable."
              }
            },
            "storageAccountType": {
              "type": "string",
              "defaultValue": "Standard_LRS",
              "allowedValues": [
                "Premium_LRS",
                "Standard_LRS",
                "Standard_ZRS"
              ],
              "metadata": {
                "description": "Optional. Specifies the storage account type to be used to store the image. This property is not updatable."
              }
            },
            "targetRegions": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. The target regions where the Image Version is going to be replicated to.\nIf this object is not specified, then the deployment location will be used."
              }
            },
            "diskEncryptionSetId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. A relative URI containing the resource ID of the disk encryption set."
              }
            },
            "confidentialVMEncryptionType": {
              "type": "string",
              "defaultValue": "",
              "allowedValues": [
                "",
                "EncryptedVMGuestStateOnlyWithPmk",
                "EncryptedWithCmk",
                "EncryptedWithPmk"
              ],
              "metadata": {
                "description": "Optional. Confidential VM encryption types"
              }
            },
            "secureVMDiskEncryptionSetId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Secure VM disk encryption set id."
              }
            },
            "allowDeletionOfReplicatedLocations": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Indicates whether or not removing this Gallery Image Version from replicated regions is allowed."
              }
            },
            "hostCaching": {
              "type": "string",
              "defaultValue": "None",
              "allowedValues": [
                "None",
                "ReadOnly",
                "ReadWrite"
              ],
              "metadata": {
                "description": "Optional. The host caching of the disk."
              }
            },
            "osDiskImageSourceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The id of the gallery artifact version source. Can specify a disk uri, snapshot uri, user image or storage account resource."
              }
            },
            "osDiskImageSourceUri": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The uri of the gallery artifact version source. Currently used to specify vhd/blob source."
              }
            },
            "sourceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The id of the gallery artifact version source. Can specify a disk uri, snapshot uri, user image or storage account resource."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Tags for all resources."
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "regionMatchArray",
                "count": "[length(parameters('targetRegions'))]",
                "input": "[if(equals(parameters('targetRegions')[copyIndex('regionMatchArray')].name, parameters('location')), true(), false())]"
              }
            ],
            "sourceStorageProfile": "[if(not(empty(parameters('sourceId'))), createObject('id', parameters('sourceId')), createObject())]",
            "osDiskImageStorageProfile": "[if(or(not(empty(parameters('osDiskImageSourceId'))), not(empty(parameters('osDiskImageSourceUri')))), createObject('hostCaching', parameters('hostCaching'), 'source', createObject('id', if(not(empty(parameters('osDiskImageSourceId'))), parameters('osDiskImageSourceId'), null()), 'uri', if(not(empty(parameters('osDiskImageSourceUri'))), parameters('osDiskImageSourceUri'), null()))), createObject())]",
            "targetRegionDefault": [
              {
                "encryption": "[if(not(empty(parameters('diskEncryptionSetId'))), createObject('osDiskImage', createObject('diskEncryptionSetId', parameters('diskEncryptionSetId'), 'securityProfile', createObject('confidentialVMEncryptionType', if(not(empty(parameters('confidentialVMEncryptionType'))), parameters('confidentialVMEncryptionType'), null()), 'secureVMDiskEncryptionSetId', if(not(empty(parameters('secureVMDiskEncryptionSetId'))), parameters('secureVMDiskEncryptionSetId'), null())))), null())]",
                "name": "[parameters('location')]",
                "storageAccountType": "[parameters('storageAccountType')]"
              }
            ],
            "targetRegionsContainsLocation": "[if(contains(variables('regionMatchArray'), true()), true(), false())]",
            "targetRegionsVar": "[if(not(empty(parameters('targetRegions'))), if(variables('targetRegionsContainsLocation'), parameters('targetRegions'), union(parameters('targetRegions'), variables('targetRegionDefault'))), variables('targetRegionDefault'))]"
          },
          "resources": [
            {
              "type": "Microsoft.Compute/galleries/images/versions",
              "apiVersion": "2022-03-03",
              "name": "[format('{0}/{1}/{2}', parameters('galleryName'), parameters('imageName'), parameters('name'))]",
              "location": "[parameters('location')]",
              "properties": {
                "publishingProfile": {
                  "endOfLifeDate": "[if(not(empty(parameters('endOfLifeDate'))), parameters('endOfLifeDate'), null())]",
                  "excludeFromLatest": "[parameters('excludeFromLatest')]",
                  "replicaCount": "[parameters('replicaCount')]",
                  "replicationMode": "[if(not(empty(parameters('replicationMode'))), parameters('replicationMode'), null())]",
                  "storageAccountType": "[parameters('storageAccountType')]",
                  "targetRegions": "[variables('targetRegionsVar')]"
                },
                "safetyProfile": {
                  "allowDeletionOfReplicatedLocations": "[parameters('allowDeletionOfReplicatedLocations')]"
                },
                "storageProfile": {
                  "osDiskImage": "[variables('osDiskImageStorageProfile')]",
                  "source": "[variables('sourceStorageProfile')]"
                }
              },
              "tags": "[parameters('tags')]"
            }
          ],
          "outputs": {
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The resource group the image was deployed into."
              },
              "value": "[resourceGroup().name]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the image version."
              },
              "value": "[resourceId('Microsoft.Compute/galleries/images/versions', parameters('galleryName'), parameters('imageName'), parameters('name'))]"
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the image version."
              },
              "value": "[parameters('name')]"
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location the resource was deployed into."
              },
              "value": "[reference(resourceId('Microsoft.Compute/galleries/images/versions', parameters('galleryName'), parameters('imageName'), parameters('name')), '2022-03-03', 'full').location]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('{0}Capture-Image-{1}', variables('depPrefix'), parameters('timeStamp')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('remoteComputeGalleryResourceId'), '/')[2], split(parameters('remoteComputeGalleryResourceId'), '/')[4]), 'Microsoft.Resources/deployments', format('{0}Remote-Gallery-Image-Definition-{1}', variables('depPrefix'), parameters('timeStamp')))]"
      ]
    }
  ]
}