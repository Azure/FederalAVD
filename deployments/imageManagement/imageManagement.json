{
  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.38.33.27573",
      "templateHash": "16971517385080010750"
    }
  },
  "parameters": {
    "artifactsContainerName": {
      "type": "string",
      "defaultValue": "artifacts",
      "minLength": 3,
      "maxLength": 63,
      "metadata": {
        "description": "Optional. Blob Container Name. Must start with a letter. Can only contain lower case letters, numbers, and -."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[deployment().location]"
    },
    "customIdentifier": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Custom workload identifier to use when naming the resource group and resources. If not specified then \"image-management\" will be used. All resources will be created using the Cloud Adoption Framework naming convention."
      }
    },
    "nameConvResTypeAtEnd": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Reverse the normal Cloud Adoption Framework naming convention by putting the resource type abbreviation at the end of the resource name."
      }
    },
    "logAnalyticsWorkspaceResourceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Resource Id of an existing Log Analytics Workspace to which diagnostic logs will be sent."
      }
    },
    "remoteLocation": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Remote Location to which an Image Gallery will be deployed to support regional disaster recovery."
      }
    },
    "storageSkuName": {
      "type": "string",
      "defaultValue": "Standard_LRS",
      "allowedValues": [
        "Standard_LRS",
        "Standard_GRS",
        "Standard_RAGRS",
        "Standard_ZRS",
        "Premium_LRS",
        "Premium_ZRS",
        "Standard_GZRS",
        "Standard_RAGZRS"
      ],
      "metadata": {
        "description": "Optional. Storage Account Sku Name."
      }
    },
    "storageAccessTier": {
      "type": "string",
      "defaultValue": "Hot",
      "allowedValues": [
        "Premium",
        "Hot",
        "Cool"
      ],
      "metadata": {
        "description": "Conditional. Required if the Storage Account kind is set to BlobStorage. The access tier is used for billing. The \"Premium\" access tier is the default value for premium block blobs storage account type and it cannot be changed for the premium block blobs storage account type."
      }
    },
    "storageAllowSharedKeyAccess": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional. Indicates whether the storage account permits requests to be authorized with the account access key via Shared Key. If false, then all requests, including shared access signatures, must be authorized with Azure Active Directory (Azure AD). The default value is null, which is equivalent to true."
      }
    },
    "storageSASExpirationPeriod": {
      "type": "string",
      "defaultValue": "180.00:00:00",
      "metadata": {
        "description": "Optional. The SAS expiration period. DD.HH:MM:SS."
      }
    },
    "azureBlobPrivateDnsZoneResourceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. The Resource Id of the Private DNS Zone where the Private Endpoint (if configured) A record will be registered."
      }
    },
    "storagePublicNetworkAccess": {
      "type": "string",
      "defaultValue": "Enabled",
      "allowedValues": [
        "Enabled",
        "Disabled"
      ],
      "metadata": {
        "description": "Optional. Whether or not public network access is allowed for this resource. To limit public network access, use the \"PermittedIPs\" and/or the \"ServiceEndpointSubnetResourceIds\" parameters."
      }
    },
    "privateEndpointSubnetResourceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. The ResourceId of the private endpoint subnet."
      }
    },
    "storagePermittedIPs": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Optional. Array of permitted IPs or IP CIDR blocks that can access the storage account using the Public Endpoint."
      }
    },
    "storageServiceEndpointSubnetResourceIds": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Optional. An array of subnet resource IDs where Service Endpoints will be created to allow access to the storage account through the public endpoint."
      }
    },
    "tags": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "Optional. The tags by resource type to apply to the resources created by this template."
      }
    },
    "timeStamp": {
      "type": "string",
      "defaultValue": "[utcNow('yyyyMMddhhmm')]",
      "metadata": {
        "description": "DO NOT MODIFY THIS VALUE! The timestamp is needed to differentiate deployments for certain Azure resources and must be set using a parameter."
      }
    }
  },
  "variables": {
    "$fxv#0": {
      "AzureCloud": {
        "australiacentral": {
          "abbreviation": "auc",
          "recoveryServicesGeo": "acl"
        },
        "australiacentral2": {
          "abbreviation": "auc2",
          "recoveryServicesGeo": "acl2"
        },
        "australiaeast": {
          "abbreviation": "aue",
          "recoveryServicesGeo": "ae"
        },
        "australiasoutheast": {
          "abbreviation": "ause",
          "recoveryServicesGeo": "ase"
        },
        "brazilsouth": {
          "abbreviation": "brs",
          "recoveryServicesGeo": "brs"
        },
        "brazilsoutheast": {
          "abbreviation": "brse",
          "recoveryServicesGeo": "bse"
        },
        "canadacentral": {
          "abbreviation": "cac",
          "recoveryServicesGeo": "cnc"
        },
        "canadaeast": {
          "abbreviation": "cae",
          "recoveryServicesGeo": "cne"
        },
        "centralindia": {
          "abbreviation": "inc",
          "recoveryServicesGeo": "inc"
        },
        "centralus": {
          "abbreviation": "usc",
          "recoveryServicesGeo": "cus"
        },
        "eastasia": {
          "abbreviation": "ase",
          "recoveryServicesGeo": "ea"
        },
        "eastus": {
          "abbreviation": "use",
          "recoveryServicesGeo": "eus"
        },
        "eastus2": {
          "abbreviation": "use2",
          "recoveryServicesGeo": "eus2"
        },
        "francecentral": {
          "abbreviation": "frc",
          "recoveryServicesGeo": "frc"
        },
        "francesouth": {
          "abbreviation": "frs",
          "recoveryServicesGeo": "frs"
        },
        "germanynorth": {
          "abbreviation": "den",
          "recoveryServicesGeo": "gn"
        },
        "germanywestcentral": {
          "abbreviation": "dewc",
          "recoveryServicesGeo": "gwc"
        },
        "israelcentral": {
          "abbreviation": "ilc",
          "recoveryServicesGeo": "ilc"
        },
        "italynorth": {
          "abbreviation": "itn",
          "recoveryServicesGeo": "itn"
        },
        "japaneast": {
          "abbreviation": "jpe",
          "recoveryServicesGeo": "jpe"
        },
        "japanwest": {
          "abbreviation": "jpw",
          "recoveryServicesGeo": "jpw"
        },
        "jioindiacentral": {
          "abbreviation": "injc",
          "recoveryServicesGeo": "jic"
        },
        "jioindiawest": {
          "abbreviation": "injw",
          "recoveryServicesGeo": "jiw"
        },
        "koreacentral": {
          "abbreviation": "krc",
          "recoveryServicesGeo": "krc"
        },
        "koreasouth": {
          "abbreviation": "krs",
          "recoveryServicesGeo": "krs"
        },
        "northcentralus": {
          "abbreviation": "usnc",
          "recoveryServicesGeo": "ncus"
        },
        "northeurope": {
          "abbreviation": "eun",
          "recoveryServicesGeo": "ne"
        },
        "norwayeast": {
          "abbreviation": "noe",
          "recoveryServicesGeo": "nwe"
        },
        "norwaywest": {
          "abbreviation": "now",
          "recoveryServicesGeo": "nww"
        },
        "polandcentral": {
          "abbreviation": "plc",
          "recoveryServicesGeo": "plc"
        },
        "qatarcentral": {
          "abbreviation": "qac",
          "recoveryServicesGeo": "qac"
        },
        "southafricanorth": {
          "abbreviation": "zan",
          "recoveryServicesGeo": "san"
        },
        "southafricawest": {
          "abbreviation": "zaw",
          "recoveryServicesGeo": "saw"
        },
        "southcentralus": {
          "abbreviation": "ussc",
          "recoveryServicesGeo": "scus"
        },
        "southeastasia": {
          "abbreviation": "asse",
          "recoveryServicesGeo": "sea"
        },
        "southindia": {
          "abbreviation": "ins",
          "recoveryServicesGeo": "ins"
        },
        "swedencentral": {
          "abbreviation": "sec",
          "recoveryServicesGeo": "sdc"
        },
        "switzerlandnorth": {
          "abbreviation": "chn",
          "recoveryServicesGeo": "szn"
        },
        "switzerlandwest": {
          "abbreviation": "chw",
          "recoveryServicesGeo": "szw"
        },
        "uaecentral": {
          "abbreviation": "aec",
          "recoveryServicesGeo": "uac"
        },
        "uaenorth": {
          "abbreviation": "aen",
          "recoveryServicesGeo": "uan"
        },
        "uksouth": {
          "abbreviation": "uks",
          "recoveryServicesGeo": "uks"
        },
        "ukwest": {
          "abbreviation": "ukw",
          "recoveryServicesGeo": "ukw"
        },
        "westcentralus": {
          "abbreviation": "uswc",
          "recoveryServicesGeo": "wcus"
        },
        "westeurope": {
          "abbreviation": "euw",
          "recoveryServicesGeo": "we"
        },
        "westindia": {
          "abbreviation": "inw",
          "recoveryServicesGeo": "inw"
        },
        "westus": {
          "abbreviation": "usw",
          "recoveryServicesGeo": "wus"
        },
        "westus2": {
          "abbreviation": "usw2",
          "recoveryServicesGeo": "wus2"
        },
        "westus3": {
          "abbreviation": "usw3",
          "recoveryServicesGeo": "wus3"
        }
      },
      "AzureUSGovernment": {
        "usdodcentral": {
          "abbreviation": "dodc",
          "recoveryServicesGeo": "udc"
        },
        "usdodeast": {
          "abbreviation": "dode",
          "recoveryServicesGeo": "ude"
        },
        "usgovarizona": {
          "abbreviation": "az",
          "recoveryServicesGeo": "uga"
        },
        "usgovtexas": {
          "abbreviation": "tx",
          "recoveryServicesGeo": "ugt"
        },
        "usgovvirginia": {
          "abbreviation": "va",
          "recoveryServicesGeo": "ugv"
        }
      },
      "other": {
        "north": {
          "abbreviation": "no"
        },
        "east": {
          "abbreviation": "ea"
        },
        "south": {
          "abbreviation": "so"
        },
        "west": {
          "abbreviation": "we"
        },
        "central": {
          "abbreviation": "ce"
        },
        "northcentral": {
          "abbreviation": "noce"
        },
        "eastcentral": {
          "abbreviation": "wece"
        },
        "southcentral": {
          "abbreviation": "soce"
        },
        "westcentral": {
          "abbreviation": "wece"
        }
      }
    },
    "$fxv#1": {
      "AzureCloud": {
        "australiacentral": {
          "abbreviation": "auc",
          "recoveryServicesGeo": "acl"
        },
        "australiacentral2": {
          "abbreviation": "auc2",
          "recoveryServicesGeo": "acl2"
        },
        "australiaeast": {
          "abbreviation": "aue",
          "recoveryServicesGeo": "ae"
        },
        "australiasoutheast": {
          "abbreviation": "ause",
          "recoveryServicesGeo": "ase"
        },
        "brazilsouth": {
          "abbreviation": "brs",
          "recoveryServicesGeo": "brs"
        },
        "brazilsoutheast": {
          "abbreviation": "brse",
          "recoveryServicesGeo": "bse"
        },
        "canadacentral": {
          "abbreviation": "cac",
          "recoveryServicesGeo": "cnc"
        },
        "canadaeast": {
          "abbreviation": "cae",
          "recoveryServicesGeo": "cne"
        },
        "centralindia": {
          "abbreviation": "inc",
          "recoveryServicesGeo": "inc"
        },
        "centralus": {
          "abbreviation": "usc",
          "recoveryServicesGeo": "cus"
        },
        "eastasia": {
          "abbreviation": "ase",
          "recoveryServicesGeo": "ea"
        },
        "eastus": {
          "abbreviation": "use",
          "recoveryServicesGeo": "eus"
        },
        "eastus2": {
          "abbreviation": "use2",
          "recoveryServicesGeo": "eus2"
        },
        "francecentral": {
          "abbreviation": "frc",
          "recoveryServicesGeo": "frc"
        },
        "francesouth": {
          "abbreviation": "frs",
          "recoveryServicesGeo": "frs"
        },
        "germanynorth": {
          "abbreviation": "den",
          "recoveryServicesGeo": "gn"
        },
        "germanywestcentral": {
          "abbreviation": "dewc",
          "recoveryServicesGeo": "gwc"
        },
        "israelcentral": {
          "abbreviation": "ilc",
          "recoveryServicesGeo": "ilc"
        },
        "italynorth": {
          "abbreviation": "itn",
          "recoveryServicesGeo": "itn"
        },
        "japaneast": {
          "abbreviation": "jpe",
          "recoveryServicesGeo": "jpe"
        },
        "japanwest": {
          "abbreviation": "jpw",
          "recoveryServicesGeo": "jpw"
        },
        "jioindiacentral": {
          "abbreviation": "injc",
          "recoveryServicesGeo": "jic"
        },
        "jioindiawest": {
          "abbreviation": "injw",
          "recoveryServicesGeo": "jiw"
        },
        "koreacentral": {
          "abbreviation": "krc",
          "recoveryServicesGeo": "krc"
        },
        "koreasouth": {
          "abbreviation": "krs",
          "recoveryServicesGeo": "krs"
        },
        "northcentralus": {
          "abbreviation": "usnc",
          "recoveryServicesGeo": "ncus"
        },
        "northeurope": {
          "abbreviation": "eun",
          "recoveryServicesGeo": "ne"
        },
        "norwayeast": {
          "abbreviation": "noe",
          "recoveryServicesGeo": "nwe"
        },
        "norwaywest": {
          "abbreviation": "now",
          "recoveryServicesGeo": "nww"
        },
        "polandcentral": {
          "abbreviation": "plc",
          "recoveryServicesGeo": "plc"
        },
        "qatarcentral": {
          "abbreviation": "qac",
          "recoveryServicesGeo": "qac"
        },
        "southafricanorth": {
          "abbreviation": "zan",
          "recoveryServicesGeo": "san"
        },
        "southafricawest": {
          "abbreviation": "zaw",
          "recoveryServicesGeo": "saw"
        },
        "southcentralus": {
          "abbreviation": "ussc",
          "recoveryServicesGeo": "scus"
        },
        "southeastasia": {
          "abbreviation": "asse",
          "recoveryServicesGeo": "sea"
        },
        "southindia": {
          "abbreviation": "ins",
          "recoveryServicesGeo": "ins"
        },
        "swedencentral": {
          "abbreviation": "sec",
          "recoveryServicesGeo": "sdc"
        },
        "switzerlandnorth": {
          "abbreviation": "chn",
          "recoveryServicesGeo": "szn"
        },
        "switzerlandwest": {
          "abbreviation": "chw",
          "recoveryServicesGeo": "szw"
        },
        "uaecentral": {
          "abbreviation": "aec",
          "recoveryServicesGeo": "uac"
        },
        "uaenorth": {
          "abbreviation": "aen",
          "recoveryServicesGeo": "uan"
        },
        "uksouth": {
          "abbreviation": "uks",
          "recoveryServicesGeo": "uks"
        },
        "ukwest": {
          "abbreviation": "ukw",
          "recoveryServicesGeo": "ukw"
        },
        "westcentralus": {
          "abbreviation": "uswc",
          "recoveryServicesGeo": "wcus"
        },
        "westeurope": {
          "abbreviation": "euw",
          "recoveryServicesGeo": "we"
        },
        "westindia": {
          "abbreviation": "inw",
          "recoveryServicesGeo": "inw"
        },
        "westus": {
          "abbreviation": "usw",
          "recoveryServicesGeo": "wus"
        },
        "westus2": {
          "abbreviation": "usw2",
          "recoveryServicesGeo": "wus2"
        },
        "westus3": {
          "abbreviation": "usw3",
          "recoveryServicesGeo": "wus3"
        }
      },
      "AzureUSGovernment": {
        "usdodcentral": {
          "abbreviation": "dodc",
          "recoveryServicesGeo": "udc"
        },
        "usdodeast": {
          "abbreviation": "dode",
          "recoveryServicesGeo": "ude"
        },
        "usgovarizona": {
          "abbreviation": "az",
          "recoveryServicesGeo": "uga"
        },
        "usgovtexas": {
          "abbreviation": "tx",
          "recoveryServicesGeo": "ugt"
        },
        "usgovvirginia": {
          "abbreviation": "va",
          "recoveryServicesGeo": "ugv"
        }
      },
      "other": {
        "north": {
          "abbreviation": "no"
        },
        "east": {
          "abbreviation": "ea"
        },
        "south": {
          "abbreviation": "so"
        },
        "west": {
          "abbreviation": "we"
        },
        "central": {
          "abbreviation": "ce"
        },
        "northcentral": {
          "abbreviation": "noce"
        },
        "eastcentral": {
          "abbreviation": "wece"
        },
        "southcentral": {
          "abbreviation": "soce"
        },
        "westcentral": {
          "abbreviation": "wece"
        }
      }
    },
    "$fxv#2": {
      "applicationInsights": "appi",
      "appServicePlans": "asp",
      "availabilitySets": "as",
      "computeGalleries": "gal",
      "dataCollectionEndpoints": "dce",
      "dataCollectionRules": "dcr",
      "desktopApplicationGroups": "vddag",
      "diskAccesses": "da",
      "remoteApplicationGroups": "vdrag",
      "diskEncryptionSets": "des",
      "functionApps": "fa",
      "hostPools": "vdpool",
      "keyVaults": "kv",
      "logAnalyticsWorkspaces": "law",
      "natGateways": "ng",
      "netAppAccounts": "naa",
      "netAppCapacityPools": "nacp",
      "networkInterfaces": "nic",
      "networkSecurityGroups": "nsg",
      "osdisks": "osdisk",
      "privateEndpoints": "pe",
      "privateLinkScopes": "pls",
      "publicIPAddresses": "pip",
      "recoveryServicesVaults": "rsv",
      "resourceGroups": "rg",
      "routeTables": "rt",
      "scalingPlans": "vdscaling",
      "storageAccounts": "sa",
      "userAssignedIdentities": "uai",
      "virtualMachines": "vm",
      "workspaces": "vdws",
      "imageDefinitions": "vmid"
    },
    "cloud": "[toLower(environment().name)]",
    "varLocation": "[if(startsWith(variables('cloud'), 'us'), substring(parameters('location'), 5, sub(length(parameters('location')), 5)), parameters('location'))]",
    "varRemoteLocation": "[if(not(empty(parameters('remoteLocation'))), if(startsWith(variables('cloud'), 'us'), substring(parameters('remoteLocation'), 5, sub(length(parameters('remoteLocation')), 5)), parameters('remoteLocation')), '')]",
    "locations": "[if(startsWith(variables('cloud'), 'us'), variables('$fxv#0').other, variables('$fxv#1')[environment().name])]",
    "resourceAbbreviations": "[variables('$fxv#2')]",
    "nameConv_Suffix_withoutResType": "LOCATION",
    "nameConvSuffix": "[if(parameters('nameConvResTypeAtEnd'), format('{0}-RESOURCETYPE', variables('nameConv_Suffix_withoutResType')), variables('nameConv_Suffix_withoutResType'))]",
    "identifier": "[if(empty(parameters('customIdentifier')), 'image-management', parameters('customIdentifier'))]",
    "nameConv_ImageManagement_ResGroup": "[if(parameters('nameConvResTypeAtEnd'), format('avd-{0}-{1}', variables('identifier'), variables('nameConvSuffix')), format('RESOURCETYPE-avd-{0}-{1}', variables('identifier'), variables('nameConvSuffix')))]",
    "nameConv_ImageManagement_Resources": "[if(parameters('nameConvResTypeAtEnd'), format('avd-{0}-{1}', variables('identifier'), variables('nameConvSuffix')), format('RESOURCETYPE-avd-{0}-{1}', variables('identifier'), variables('nameConvSuffix')))]",
    "resourceGroupName": "[replace(replace(variables('nameConv_ImageManagement_ResGroup'), 'LOCATION', variables('locations')[variables('varLocation')].abbreviation), 'RESOURCETYPE', variables('resourceAbbreviations').resourceGroups)]",
    "remoteResourceGroupName": "[if(not(empty(parameters('remoteLocation'))), replace(replace(variables('nameConv_ImageManagement_ResGroup'), 'LOCATION', variables('locations')[variables('varRemoteLocation')].abbreviation), 'RESOURCETYPE', variables('resourceAbbreviations').resourceGroups), '')]",
    "blobContainerName": "[replace(replace(toLower(parameters('artifactsContainerName')), '_', '-'), ' ', '-')]",
    "galleryName": "[replace(replace(replace(variables('nameConv_ImageManagement_Resources'), 'RESOURCETYPE', variables('resourceAbbreviations').computeGalleries), 'LOCATION', variables('locations')[variables('varLocation')].abbreviation), '-', '_')]",
    "remoteGalleryName": "[if(not(empty(parameters('remoteLocation'))), replace(replace(replace(variables('nameConv_ImageManagement_Resources'), 'RESOURCETYPE', variables('resourceAbbreviations').computeGalleries), 'LOCATION', variables('locations')[variables('varRemoteLocation')].abbreviation), '-', '_'), '')]",
    "identityName": "[replace(replace(variables('nameConv_ImageManagement_Resources'), 'RESOURCETYPE', variables('resourceAbbreviations').userAssignedIdentities), 'LOCATION', variables('locations')[variables('varLocation')].abbreviation)]",
    "vnetName": "[if(not(empty(parameters('privateEndpointSubnetResourceId'))), split(parameters('privateEndpointSubnetResourceId'), '/')[8], '')]",
    "privateEndpointNameConv": "[replace(format('{0}', if(parameters('nameConvResTypeAtEnd'), format('RESOURCE-SUBRESOURCE-{0}-RESOURCETYPE', variables('vnetName')), format('RESOURCETYPE-RESOURCE-SUBRESOURCE-{0}', variables('vnetName')))), 'RESOURCETYPE', variables('resourceAbbreviations').privateEndpoints)]",
    "privateEndpointName": "[replace(replace(variables('privateEndpointNameConv'), 'SUBRESOURCE', 'blob'), 'RESOURCE', variables('storageName'))]",
    "customNetworkInterfaceName": "[if(parameters('nameConvResTypeAtEnd'), format('{0}-{1}', variables('privateEndpointName'), variables('resourceAbbreviations').networkInterfaces), format('{0}-{1}', variables('resourceAbbreviations').networkInterfaces, variables('privateEndpointName')))]",
    "storageName": "[take(format('{0}imageassets{1}{2}', variables('resourceAbbreviations').storageAccounts, variables('locations')[variables('varLocation')].abbreviation, uniqueString(subscription().subscriptionId, variables('resourceGroupName'))), 24)]",
    "storageKind": "StorageV2"
  },
  "resources": [
    {
      "type": "Microsoft.Resources/resourceGroups",
      "apiVersion": "2021-04-01",
      "name": "[variables('resourceGroupName')]",
      "location": "[parameters('location')]",
      "tags": "[coalesce(tryGet(parameters('tags'), 'resourceGroups'), createObject())]"
    },
    {
      "condition": "[not(empty(parameters('remoteLocation')))]",
      "type": "Microsoft.Resources/resourceGroups",
      "apiVersion": "2021-04-01",
      "name": "[variables('remoteResourceGroupName')]",
      "location": "[parameters('remoteLocation')]",
      "tags": "[coalesce(tryGet(parameters('tags'), 'resourceGroups'), createObject())]"
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2025-04-01",
      "name": "[format('Image-Management-Resources-{0}', parameters('timeStamp'))]",
      "resourceGroup": "[variables('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "azureBlobPrivateDnsZoneResourceId": {
            "value": "[parameters('azureBlobPrivateDnsZoneResourceId')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "logAnalyticsWorkspaceId": {
            "value": "[parameters('logAnalyticsWorkspaceResourceId')]"
          },
          "computeGalleryName": {
            "value": "[variables('galleryName')]"
          },
          "customNetworkInterfaceName": {
            "value": "[variables('customNetworkInterfaceName')]"
          },
          "storageAccountName": {
            "value": "[variables('storageName')]"
          },
          "blobContainerName": {
            "value": "[variables('blobContainerName')]"
          },
          "managedIdentityName": {
            "value": "[variables('identityName')]"
          },
          "privateEndpointName": {
            "value": "[variables('privateEndpointName')]"
          },
          "privateEndpointSubnetResourceId": {
            "value": "[parameters('privateEndpointSubnetResourceId')]"
          },
          "storageAccessTier": {
            "value": "[parameters('storageAccessTier')]"
          },
          "storageSASExpirationPeriod": {
            "value": "[parameters('storageSASExpirationPeriod')]"
          },
          "storageKind": {
            "value": "[variables('storageKind')]"
          },
          "storageSkuName": {
            "value": "[parameters('storageSkuName')]"
          },
          "storagePermittedIPs": {
            "value": "[parameters('storagePermittedIPs')]"
          },
          "storageServiceEndpointSubnetResourceIds": {
            "value": "[parameters('storageServiceEndpointSubnetResourceIds')]"
          },
          "storageAllowPublicNetworkAccess": {
            "value": "[parameters('storagePublicNetworkAccess')]"
          },
          "storageAllowSharedKeyAccess": {
            "value": "[parameters('storageAllowSharedKeyAccess')]"
          },
          "tags": "[if(not(equals(parameters('tags'), createObject())), createObject('value', parameters('tags')), createObject('value', null()))]"
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.38.33.27573",
              "templateHash": "7217957380236222161"
            }
          },
          "parameters": {
            "azureBlobPrivateDnsZoneResourceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The Resource Id of the Private DNS Zone where the Private Endpoint (if configured) A record will be registered."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "computeGalleryName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The name of the compute gallery to create."
              }
            },
            "storageAccountName": {
              "type": "string",
              "maxLength": 24,
              "metadata": {
                "description": "Required. Name of the Storage Account."
              }
            },
            "blobContainerName": {
              "type": "string",
              "minLength": 3,
              "maxLength": 63,
              "metadata": {
                "description": "Required. Blob Container Name"
              }
            },
            "managedIdentityName": {
              "type": "string",
              "minLength": 3,
              "maxLength": 128
            },
            "storageKind": {
              "type": "string",
              "allowedValues": [
                "Storage",
                "StorageV2",
                "BlobStorage",
                "FileStorage",
                "BlockBlobStorage"
              ],
              "metadata": {
                "description": "Required. Type of Storage Account to create."
              }
            },
            "storageSkuName": {
              "type": "string",
              "allowedValues": [
                "Standard_LRS",
                "Standard_GRS",
                "Standard_RAGRS",
                "Standard_ZRS",
                "Premium_LRS",
                "Premium_ZRS",
                "Standard_GZRS",
                "Standard_RAGZRS"
              ],
              "metadata": {
                "description": "Required. Storage Account Sku Name."
              }
            },
            "storageAccessTier": {
              "type": "string",
              "defaultValue": "Hot",
              "allowedValues": [
                "Premium",
                "Hot",
                "Cool"
              ],
              "metadata": {
                "description": "Conditional. Required if the Storage Account kind is set to BlobStorage. The access tier is used for billing. The \"Premium\" access tier is the default value for premium block blobs storage account type and it cannot be changed for the premium block blobs storage account type."
              }
            },
            "privateEndpointSubnetResourceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The ResourceId of the subnet where the Private Endpoint will be created."
              }
            },
            "privateEndpointName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The Private Endpoint name to create for Blob Storage."
              }
            },
            "customNetworkInterfaceName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The name of the custom network interface to create for the Private Endpoint."
              }
            },
            "storageAllowSharedKeyAccess": {
              "type": "bool",
              "metadata": {
                "description": "Required. Indicates whether the storage account permits requests to be authorized with the account access key via Shared Key. If false, then all requests, including shared access signatures, must be authorized with Azure Active Directory (Azure AD). The default value is null, which is equivalent to true."
              }
            },
            "storageAllowPublicNetworkAccess": {
              "type": "string",
              "allowedValues": [
                "Enabled",
                "Disabled"
              ],
              "metadata": {
                "description": "Required. Whether or not public network access is allowed for this resource.\nFor security reasons it should be disabled; therefore, if you do not specify \"storagePermittedIPs\" or \"storageServiceEndpointSubnetResourceIds\" and you set \"createPrivateEndpoint\" to true,\nthen Public Network Access is automatically disabled."
              }
            },
            "storagePermittedIPs": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. List of IPs and IP prefixes that are to be allowed through the Storage Account Firewall."
              }
            },
            "storageServiceEndpointSubnetResourceIds": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. Array of subnet resource Ids where service endpoints are created for the storage account and permitted through the Storage Account Firewall."
              }
            },
            "storageSASExpirationPeriod": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The SAS expiration period. DD.HH:MM:SS."
              }
            },
            "logAnalyticsWorkspaceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The log analytics workspace Id to where storage account diagnostics logs are sent."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. The tags to apply to the resources created by this template."
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "ipRules",
                "count": "[length(parameters('storagePermittedIPs'))]",
                "input": {
                  "value": "[parameters('storagePermittedIPs')[copyIndex('ipRules')]]",
                  "action": "Allow"
                }
              },
              {
                "name": "virtualNetworkRules",
                "count": "[length(parameters('storageServiceEndpointSubnetResourceIds'))]",
                "input": {
                  "id": "[parameters('storageServiceEndpointSubnetResourceIds')[copyIndex('virtualNetworkRules')]]",
                  "action": "Allow"
                }
              }
            ],
            "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', '2a2b9908-6ea1-4ae2-8e65-a410df84e7d1')]"
          },
          "resources": [
            {
              "type": "Microsoft.Compute/galleries",
              "apiVersion": "2022-08-03",
              "name": "[parameters('computeGalleryName')]",
              "location": "[parameters('location')]",
              "tags": "[coalesce(tryGet(parameters('tags'), 'Microsoft.Compute/galleries'), createObject())]"
            },
            {
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2022-09-01",
              "name": "[parameters('storageAccountName')]",
              "location": "[parameters('location')]",
              "tags": "[coalesce(tryGet(parameters('tags'), 'Microsoft.Storage/storageAccounts'), createObject())]",
              "sku": {
                "name": "[parameters('storageSkuName')]"
              },
              "kind": "[parameters('storageKind')]",
              "properties": {
                "accessTier": "[parameters('storageAccessTier')]",
                "allowBlobPublicAccess": false,
                "allowCrossTenantReplication": false,
                "allowSharedKeyAccess": "[parameters('storageAllowSharedKeyAccess')]",
                "minimumTlsVersion": "TLS1_2",
                "networkAcls": "[if(or(not(empty(variables('ipRules'))), not(empty(parameters('storageServiceEndpointSubnetResourceIds')))), createObject('bypass', 'AzureServices', 'virtualNetworkRules', variables('virtualNetworkRules'), 'ipRules', variables('ipRules'), 'defaultAction', 'Deny'), null())]",
                "publicNetworkAccess": "[parameters('storageAllowPublicNetworkAccess')]",
                "supportsHttpsTrafficOnly": true,
                "encryption": {
                  "services": {
                    "blob": {
                      "enabled": true
                    }
                  },
                  "requireInfrastructureEncryption": true,
                  "keySource": "Microsoft.Storage"
                },
                "sasPolicy": "[if(not(empty(parameters('storageSASExpirationPeriod'))), createObject('expirationAction', 'Log', 'sasExpirationPeriod', parameters('storageSASExpirationPeriod')), null())]"
              }
            },
            {
              "type": "Microsoft.Storage/storageAccounts/blobServices",
              "apiVersion": "2023-01-01",
              "name": "[format('{0}/{1}', parameters('storageAccountName'), 'default')]",
              "properties": {
                "changeFeed": {
                  "enabled": true,
                  "retentionInDays": 7
                },
                "containerDeleteRetentionPolicy": {
                  "enabled": true,
                  "days": 7,
                  "allowPermanentDelete": true
                },
                "defaultServiceVersion": null,
                "deleteRetentionPolicy": {
                  "enabled": true,
                  "days": 7,
                  "allowPermanentDelete": true
                },
                "isVersioningEnabled": true,
                "lastAccessTimeTrackingPolicy": {
                  "enable": true,
                  "name": "AccessTimeTracking",
                  "trackingGranularityInDays": 1
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
              ]
            },
            {
              "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
              "apiVersion": "2023-01-01",
              "name": "[format('{0}/{1}/{2}', parameters('storageAccountName'), 'default', parameters('blobContainerName'))]",
              "properties": {
                "publicAccess": "None"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/blobServices', parameters('storageAccountName'), 'default')]"
              ]
            },
            {
              "condition": "[not(empty(parameters('privateEndpointSubnetResourceId')))]",
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2024-03-01",
              "name": "[parameters('privateEndpointName')]",
              "location": "[parameters('location')]",
              "tags": "[coalesce(tryGet(parameters('tags'), 'Microsoft.Network/privateEndpoints'), createObject())]",
              "properties": {
                "customNetworkInterfaceName": "[if(empty(parameters('customNetworkInterfaceName')), null(), parameters('customNetworkInterfaceName'))]",
                "subnet": {
                  "id": "[parameters('privateEndpointSubnetResourceId')]"
                },
                "privateLinkServiceConnections": [
                  {
                    "name": "[format('{0}-blob', parameters('storageAccountName'))]",
                    "properties": {
                      "privateLinkServiceId": "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]",
                      "groupIds": [
                        "blob"
                      ]
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
              ]
            },
            {
              "condition": "[not(empty(parameters('azureBlobPrivateDnsZoneResourceId')))]",
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2021-08-01",
              "name": "[format('{0}/{1}', parameters('privateEndpointName'), parameters('storageAccountName'))]",
              "properties": {
                "privateDnsZoneConfigs": [
                  {
                    "name": "ipconfig1",
                    "properties": {
                      "privateDnsZoneId": "[parameters('azureBlobPrivateDnsZoneResourceId')]"
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateEndpoints', parameters('privateEndpointName'))]",
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
              ]
            },
            {
              "condition": "[not(empty(parameters('logAnalyticsWorkspaceId')))]",
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
              "name": "[format('{0}-diagnosticSettings', parameters('storageAccountName'))]",
              "properties": {
                "metrics": [
                  {
                    "category": "Transaction",
                    "enabled": true
                  }
                ],
                "workspaceId": "[parameters('logAnalyticsWorkspaceId')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
              ]
            },
            {
              "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
              "apiVersion": "2023-01-31",
              "name": "[parameters('managedIdentityName')]",
              "location": "[parameters('location')]",
              "tags": "[coalesce(tryGet(parameters('tags'), 'Microsoft.ManagedIdentity/userAssignedIdentities'), createObject())]"
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
              "name": "[guid(parameters('managedIdentityName'), parameters('storageAccountName'), variables('roleDefinitionId'))]",
              "properties": {
                "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')), '2023-01-31').principalId]",
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[variables('roleDefinitionId')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName'))]",
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
              ]
            }
          ],
          "outputs": {
            "storageAccountResourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
            },
            "blobContainerName": {
              "type": "string",
              "value": "[parameters('blobContainerName')]"
            },
            "blobcontainerUrl": {
              "type": "string",
              "value": "[format('{0}{1}', reference(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2022-09-01').primaryEndpoints.blob, parameters('blobContainerName'))]"
            },
            "managedIdentityClientId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')), '2023-01-31').clientId]"
            },
            "managedIdentityResourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName'))]"
            },
            "computeGalleryResourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Compute/galleries', parameters('computeGalleryName'))]"
            },
            "computeGalleryName": {
              "type": "string",
              "value": "[parameters('computeGalleryName')]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('resourceGroupName'))]"
      ]
    },
    {
      "condition": "[not(empty(parameters('remoteLocation')))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2025-04-01",
      "name": "[format('Remote-Image-Gallery-{0}', parameters('timeStamp'))]",
      "resourceGroup": "[variables('remoteResourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "name": {
            "value": "[variables('remoteGalleryName')]"
          },
          "tags": {
            "value": "[coalesce(tryGet(parameters('tags'), 'computeGalleries'), createObject())]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.38.33.27573",
              "templateHash": "4889245900198842296"
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "minLength": 1,
              "metadata": {
                "description": "Required. Name of the Azure Compute Gallery."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all resources."
              }
            },
            "description": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Description of the Azure Shared Image Gallery."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Tags for all resources."
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Compute/galleries",
              "apiVersion": "2022-03-03",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "description": "[parameters('description')]",
                "identifier": {}
              }
            }
          ],
          "outputs": {
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the deployed image gallery."
              },
              "value": "[resourceId('Microsoft.Compute/galleries', parameters('name'))]"
            },
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The resource group of the deployed image gallery."
              },
              "value": "[resourceGroup().name]"
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the deployed image gallery."
              },
              "value": "[parameters('name')]"
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location the resource was deployed into."
              },
              "value": "[reference(resourceId('Microsoft.Compute/galleries', parameters('name')), '2022-03-03', 'full').location]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('remoteResourceGroupName'))]"
      ]
    }
  ],
  "outputs": {
    "storageAccountResourceId": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('Image-Management-Resources-{0}', parameters('timeStamp'))), '2025-04-01').outputs.storageAccountResourceId.value]"
    },
    "blobContainerName": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('Image-Management-Resources-{0}', parameters('timeStamp'))), '2025-04-01').outputs.blobContainerName.value]"
    },
    "blobContainerUrl": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('Image-Management-Resources-{0}', parameters('timeStamp'))), '2025-04-01').outputs.blobcontainerUrl.value]"
    },
    "managedIdentityClientId": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('Image-Management-Resources-{0}', parameters('timeStamp'))), '2025-04-01').outputs.managedIdentityClientId.value]"
    },
    "managedIdentityResourceId": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('Image-Management-Resources-{0}', parameters('timeStamp'))), '2025-04-01').outputs.managedIdentityResourceId.value]"
    },
    "computeGalleryResourceId": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('Image-Management-Resources-{0}', parameters('timeStamp'))), '2025-04-01').outputs.computeGalleryResourceId.value]"
    },
    "computeGalleryName": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('Image-Management-Resources-{0}', parameters('timeStamp'))), '2025-04-01').outputs.computeGalleryName.value]"
    },
    "remoteComputeGalleryResourceId": {
      "type": "string",
      "value": "[if(not(empty(parameters('remoteLocation'))), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('remoteResourceGroupName')), 'Microsoft.Resources/deployments', format('Remote-Image-Gallery-{0}', parameters('timeStamp'))), '2025-04-01').outputs.resourceId.value, '')]"
    }
  }
}