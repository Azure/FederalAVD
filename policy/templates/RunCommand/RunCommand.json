{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.38.33.27573",
      "templateHash": "6074704823983843860"
    }
  },
  "parameters": {
    "arguments": {
      "type": "string",
      "metadata": {
        "description": "The arguments used with the Run Command Script"
      }
    },
    "artifacttUri": {
      "type": "string",
      "metadata": {
        "description": "The Url of the script to download and Execute"
      }
    },
    "location": {
      "type": "string",
      "metadata": {
        "description": "The location of the resource"
      }
    },
    "runCommandName": {
      "type": "string",
      "metadata": {
        "description": "The name of the RunCommand"
      }
    },
    "userAssignedIdentityResourceId": {
      "type": "string",
      "metadata": {
        "description": "The Resource Id of the User Assigned Identity used to access the Uri"
      }
    },
    "virtualMachineName": {
      "type": "string",
      "metadata": {
        "description": "The name of the Virtual Machine"
      }
    }
  },
  "variables": {
    "$fxv#0": "param(\r\n  [string]$APIVersion,\r\n  [string]$Arguments='',\r\n  [string]$BlobStorageSuffix,\r\n  [string]$BuildDir='',\r\n  [string]$Name,\r\n  [string]$Uri,\r\n  [string]$UserAssignedIdentityClientId\r\n)\r\n\r\nfunction Write-OutputWithTimeStamp {\r\n  param(\r\n      [string]$Message\r\n  )    \r\n  $Timestamp = Get-Date -Format 'MM/dd/yyyy HH:mm:ss'\r\n  $Entry = '[' + $Timestamp + '] ' + $Message\r\n  Write-Output $Entry\r\n}\r\n\r\nFunction Split-ArgumentString {\r\n    param (\r\n        [string]$ArgumentString\r\n    )\r\n\r\n    if ([string]::IsNullOrWhiteSpace($ArgumentString)) {\r\n        return @()\r\n    }\r\n\r\n    # For PowerShell execution with &, we want individual arguments, not combined ones\r\n    $arguments = @()\r\n    $currentArg = \"\"\r\n    $inQuotes = $false\r\n    \r\n    for ($i = 0; $i -lt $ArgumentString.Length; $i++) {\r\n        $char = $ArgumentString[$i]\r\n        \r\n        if ($char -eq '\"' -and ($i -eq 0 -or $ArgumentString[$i-1] -ne '\\')) {\r\n            $inQuotes = !$inQuotes\r\n            $currentArg += $char\r\n        }\r\n        elseif ($char -eq ' ' -and !$inQuotes) {\r\n            if ($currentArg.Length -gt 0) {\r\n                # Handle boolean conversion\r\n                $value = $currentArg.Trim('\"')\r\n                if ($value -eq 'true') {\r\n                    $arguments += '$true'\r\n                }\r\n                elseif ($value -eq 'false') {\r\n                    $arguments += '$false'\r\n                }\r\n                else {\r\n                    $arguments += $value\r\n                }\r\n                $currentArg = \"\"\r\n            }\r\n        }\r\n        else {\r\n            $currentArg += $char\r\n        }\r\n    }\r\n    \r\n    # Add the last argument\r\n    if ($currentArg.Length -gt 0) {\r\n        $value = $currentArg.Trim('\"')\r\n        if ($value -eq 'true') {\r\n            $arguments += '$true'\r\n        }\r\n        elseif ($value -eq 'false') {\r\n            $arguments += '$false'\r\n        }\r\n        else {\r\n            $arguments += $value\r\n        }\r\n    }\r\n    \r\n    return $arguments\r\n}\r\n\r\nFunction ConvertTo-ParametersSplat {\r\n    param (\r\n        [string]$ArgumentString\r\n    )\r\n\r\n    if ([string]::IsNullOrWhiteSpace($ArgumentString)) {\r\n        return @{}\r\n    }\r\n\r\n    $tokens = Split-ArgumentString -ArgumentString $ArgumentString\r\n    $parameters = @{}\r\n    \r\n    $i = 0\r\n    while ($i -lt $tokens.Count) {\r\n        $token = $tokens[$i]\r\n        \r\n        # If this is a parameter (starts with -)\r\n        if ($token -match '^-(\\w+)$') {\r\n            $paramName = $matches[1]  # Remove the dash\r\n            \r\n            # Check if there's a value following this parameter\r\n            if (($i + 1) -lt $tokens.Count -and $tokens[$i + 1] -notmatch '^-\\w+$') {\r\n                # Parameter with value\r\n                $i++  # Move to the value\r\n                $value = $tokens[$i]\r\n                \r\n                # Handle PowerShell booleans\r\n                if ($value -eq '$true') {\r\n                    $parameters[$paramName] = $true\r\n                }\r\n                elseif ($value -eq '$false') {\r\n                    $parameters[$paramName] = $false\r\n                }\r\n                else {\r\n                    # Remove quotes if present\r\n                    $cleanValue = $value.Trim('\"')\r\n                    $parameters[$paramName] = $cleanValue\r\n                }\r\n            }\r\n            else {\r\n                # This is a switch parameter (no value)\r\n                $parameters[$paramName] = $true\r\n            }\r\n        }\r\n        else {\r\n            # Handle positional arguments (rare in this context)\r\n            # You could add logic here if needed\r\n        }\r\n        \r\n        $i++\r\n    }\r\n    \r\n    return $parameters\r\n}\r\n\r\nStart-Transcript -Path \"$env:SystemRoot\\Logs\\$Name.log\" -Force\r\nWrite-OutputWithTimeStamp \"Starting '$Name' script with the following parameters.\"\r\nWrite-Output ( $PSBoundParameters | Format-Table -AutoSize )\r\nIf ($Arguments -eq '') { $Arguments = $null }\r\nIf ($BuildDir -ne '') {\r\n  $TempDir = Join-Path $BuildDir -ChildPath $Name\r\n} Else {\r\n  $TempDir = Join-Path $Env:TEMP -ChildPath $Name\r\n}\r\nNew-Item -Path $TempDir -ItemType Directory -Force | Out-Null\r\n$WebClient = New-Object System.Net.WebClient\r\nIf ($Uri -match $BlobStorageSuffix -and $UserAssignedIdentityClientId -ne '') {\r\n  Write-OutputWithTimeStamp \"Getting access token for '$Uri' using User Assigned Identity.\"\r\n  $StorageEndpoint = ($Uri -split \"://\")[0] + \"://\" + ($Uri -split \"/\")[2] + \"/\"\r\n  $TokenUri = \"http://169.254.169.254/metadata/identity/oauth2/token?api-version=$APIVersion&resource=$StorageEndpoint&client_id=$UserAssignedIdentityClientId\"\r\n  $AccessToken = ((Invoke-WebRequest -Headers @{Metadata = $true } -Uri $TokenUri -UseBasicParsing).Content | ConvertFrom-Json).access_token\r\n  $WebClient.Headers.Add('x-ms-version', '2017-11-09')\r\n  $webClient.Headers.Add(\"Authorization\", \"Bearer $AccessToken\")\r\n}\r\n$SourceFileName = ($Uri -Split \"/\")[-1]\r\nWrite-OutputWithTimeStamp \"Downloading '$Uri' to '$TempDir'.\"\r\n$DestFile = Join-Path -Path $TempDir -ChildPath $SourceFileName\r\n$webClient.DownloadFile(\"$Uri\", \"$DestFile\")\r\nStart-Sleep -Seconds 10\r\nIf (!(Test-Path -Path $DestFile)) { Write-Error \"Failed to download $SourceFileName\"; Exit 1 }\r\nWrite-OutputWithTimeStamp 'Finished downloading'\r\nSet-Location -Path $TempDir\r\n$Ext = [System.IO.Path]::GetExtension($DestFile).ToLower().Replace('.','')\r\nswitch ($Ext) {\r\n  'exe' {\r\n      If ($Arguments) {\r\n        Write-OutputWithTimeStamp \"Executing '`\"$DestFile`\" $Arguments'\"\r\n        $Install = Start-Process -FilePath \"$DestFile\" -ArgumentList (Split-ArgumentString -ArgumentString $Arguments) -NoNewWindow -Wait -PassThru\r\n        Write-OutputWithTimeStamp \"Installation ended with exit code $($Install.ExitCode).\"\r\n      }\r\n      Else {\r\n        Write-OutputWithTimeStamp \"Executing `\"$DestFile`\"\"\r\n        $Install = Start-Process -FilePath \"$DestFile\" -NoNewWindow -Wait -PassThru\r\n        Write-OutputWithTimeStamp \"Installation ended with exit code $($Install.ExitCode).\"\r\n      }      \r\n    }\r\n  'msi' {\r\n    If ($Arguments) {\r\n      $Arguments = Split-ArgumentString -ArgumentString $Arguments\r\n      If ($Arguments -notcontains $DestFile) {\r\n        $InstallArg = \"/i $DestFile\"\r\n        $Arguments = @($InstallArg) + $Arguments\r\n      }\r\n      Write-OutputWithTimeStamp \"Executing 'msiexec.exe $Arguments'\"\r\n      $MsiExec = Start-Process -FilePath msiexec.exe -ArgumentList $Arguments -Wait -PassThru\r\n      Write-OutputWithTimeStamp \"Installation ended with exit code $($MsiExec.ExitCode).\"\r\n    }\r\n    Else {\r\n      Write-OutputWithTimeStamp \"Executing 'msiexec.exe /i $DestFile /qn'\"\r\n      $MsiExec = Start-Process -FilePath msiexec.exe -ArgumentList \"/i $DestFile /qn\" -Wait -PassThru\r\n      Write-OutputWithTimeStamp \"Installation ended with exit code $($MsiExec.ExitCode).\"\r\n    }    \r\n  }\r\n  'bat' {\r\n    If ($Arguments) {\r\n      Write-OutputWithTimeStamp \"Executing 'cmd.exe `\"$DestFile`\" $Arguments'\"\r\n      $Arguments = Split-ArgumentString -ArgumentString $Arguments\r\n      If ($Arguments -notcontains $DestFile) {\r\n        $Arguments = @(\"$DestFile\") + $Arguments\r\n      }\r\n      Start-Process -FilePath cmd.exe -ArgumentList $Arguments -Wait\r\n    }\r\n    Else {\r\n      Write-OutputWithTimeStamp \"Executing 'cmd.exe `\"$DestFile`\"'\"\r\n      Start-Process -FilePath cmd.exe -ArgumentList \"`\"$DestFile`\"\" -Wait\r\n    }\r\n  }\r\n  'ps1' {\r\n    If ($Arguments) {\r\n      Write-OutputWithTimeStamp \"Calling PowerShell Script '$DestFile' with arguments '$Arguments'\"\r\n      $parameterSplat = ConvertTo-ParametersSplat -ArgumentString $Arguments\r\n      & $DestFile @parameterSplat\r\n    }\r\n    Else {\r\n      Write-OutputWithTimeStamp \"Calling PowerShell Script '$DestFile'\"\r\n      & $DestFile\r\n    }\r\n  }\r\n  'zip' {\r\n    $DestinationPath = Join-Path -Path \"$TempDir\" -ChildPath $([System.IO.Path]::GetFileNameWithoutExtension($SourceFileName))\r\n    Write-OutputWithTimeStamp \"Extracting '$DestFile' to '$DestinationPath'.\"\r\n    Expand-Archive -Path $DestFile -DestinationPath $DestinationPath -Force\r\n    Write-OutputWithTimeStamp \"Finding PowerShell script in root of '$DestinationPath'.\"\r\n    $PSScript = (Get-ChildItem -Path $DestinationPath -filter '*.ps1').FullName\r\n    If ($PSScript.count -gt 1) { $PSScript = $PSScript[0] }\r\n    If ($Arguments) {\r\n      Write-OutputWithTimeStamp \"Calling PowerShell Script '$DestFile' with arguments '$Arguments'\"\r\n      $parameterSplat = ConvertTo-ParametersSplat -ArgumentString $Arguments\r\n      & $PSScript @parameterSplat\r\n    }\r\n    Else {\r\n      Write-OutputWithTimeStamp \"Calling PowerShell Script '$PSScript'\"         \r\n      & $PSScript\r\n    }\r\n  }\r\n}\r\nIf ((Split-Path $TempDir -Parent) -eq $Env:Temp) {Remove-Item -Path $TempDir -Recurse -Force -ErrorAction SilentlyContinue}\r\nStop-Transcript",
    "apiVersion": "[if(startsWith(environment().name, 'USN'), '2017-08-01', '2018-02-01')]"
  },
  "resources": [
    {
      "type": "Microsoft.Compute/virtualMachines/runCommands",
      "apiVersion": "2023-03-01",
      "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('runCommandName'))]",
      "location": "[parameters('location')]",
      "properties": {
        "parameters": [
          {
            "name": "APIVersion",
            "value": "[variables('apiVersion')]"
          },
          {
            "name": "Arguments",
            "value": "[parameters('arguments')]"
          },
          {
            "name": "Uri",
            "value": "[parameters('artifacttUri')]"
          },
          {
            "name": "BlobStorageSuffix",
            "value": "[format('blob.{0}', environment().suffixes.storage)]"
          },
          {
            "name": "Name",
            "value": "[parameters('runCommandName')]"
          },
          {
            "name": "UserAssignedIdentityClientId",
            "value": "[if(not(empty(parameters('userAssignedIdentityResourceId'))), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('userAssignedIdentityResourceId'), '/')[2], split(parameters('userAssignedIdentityResourceId'), '/')[4]), 'Microsoft.ManagedIdentity/userAssignedIdentities', last(split(parameters('userAssignedIdentityResourceId'), '/'))), '2018-11-30').clientId, '')]"
          }
        ],
        "source": {
          "script": "[variables('$fxv#0')]"
        },
        "treatFailureAsDeploymentFailure": true
      }
    }
  ]
}