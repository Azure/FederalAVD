{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.31.34.60546",
      "templateHash": "18151569760088652566"
    }
  },
  "parameters": {
    "imageTemplateName": {
      "type": "string",
      "defaultValue": "test9"
    },
    "galleryImageId": {
      "type": "string",
      "defaultValue": "/subscriptions/70c1bb3a-115f-4300-becd-5f74200999bb/resourceGroups/avd-image-management-usgva-rg/providers/Microsoft.Compute/galleries/avd_usgva_gal/images/vmid-MicrosoftWindowsDesktop-Windows11-win1124h2avd"
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]"
    },
    "imagePublisher": {
      "type": "string",
      "defaultValue": "MicrosoftWindowsDesktop"
    },
    "imageOffer": {
      "type": "string",
      "defaultValue": "Windows-11"
    },
    "imageSku": {
      "type": "string",
      "defaultValue": "win11-24h2-avd"
    },
    "userAssignedIdentityResourceId": {
      "type": "string",
      "defaultValue": "/subscriptions/70c1bb3a-115f-4300-becd-5f74200999bb/resourceGroups/avd-image-management-usgva-rg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/uai-avd-image-management-va"
    },
    "vmSize": {
      "type": "string",
      "defaultValue": "Standard_D4ads_v5"
    },
    "customizations": {
      "type": "array",
      "defaultValue": [
        {
          "name": "FSLogix",
          "Uri": "https://saimageassetsusgvaa4a449.blob.core.usgovcloudapi.net/artifacts/FSLogix.zip"
        },
        {
          "name": "LGPO",
          "Uri": "https://saimageassetsusgvaa4a449.blob.core.usgovcloudapi.net/artifacts/LGPO.zip"
        }
      ]
    },
    "osDiskSizeGB": {
      "type": "int",
      "defaultValue": 127
    },
    "subnetId": {
      "type": "string",
      "defaultValue": "/subscriptions/70c1bb3a-115f-4300-becd-5f74200999bb/resourceGroups/rg-avd-networking-lab-va/providers/Microsoft.Network/virtualNetworks/vnet-avd-lab-va/subnets/sn-avd-jumphosts-lab-va"
    }
  },
  "variables": {
    "buildDir": "C:\\BuildDir",
    "masterScriptName": "aib_master_script.ps1",
    "masterScriptContent": "<#\n    .DESCRIPTION\n    Main script to perform customizations via the Azure VM Image Builder Service. This script is used to download and execute customizers on the VM image being built and is significantly\n    faster than using individual customizers scripts within the image template because the VM directly performs the download versus the Azure Image Builder service performing the download and\n    then sending the download to the VM. This script is used in the 'Customize' phase of the image template.\n\n    .PARAMETER APIVersion\n    The API version to use to get an access token for the storage account(s) via the VM Instance Metadata Service. Default is '2018-02-01'.\n\n    .PARAMETER BlobStorageSuffix\n    The suffix of the blob storage account of the azure environment where you are building the image. Default is 'core.windows.net'.  For Azure US Government, use 'core.usgovcloudapi.net'.\n\n    .PARAMETER Customizers\n    A JSON formatted array of customizers to execute. Each customizer is an object with the following keys:\n    - Name: The name of the customizer. (required)\n    - Uri: The URI of the customizer. (required)\n    - Arguments: The arguments to pass to the customizer. (optional)\n\n    .PARAMETER UserAssignedIdentityClientId\n    The client ID of the user assigned identity to use to get an access token for the storage account(s) via the VM Instance Metadata Service.\n#>\n\nparam(\n    [string]$APIVersion = '2018-02-01',\n    [string]$BlobStorageSuffix,\n    [string]$Customizers = '[]',\n    [string]$UserAssignedIdentityClientId\n)\n$Script:Name = [System.IO.Path]::GetFileNameWithoutExtension($PSCommandPath)\nStart-Transcript -Path \"$env:SystemRoot\\Logs\\$($Script:Name).log\" -Force\nWrite-Output \"Starting '$PSCommandPath'.\"\nWrite-Output \"Current working dir: $((Get-Location).Path)\"\n[array]$Customizers = $Customizers | ConvertFrom-Json\nForEach ($Customizer in $Customizers) {\n    $Name = $Customizer.Name\n    $Uri = $Customizer.Uri\n    $Arguments = $Customizer.Arguments\n    Write-Output \"Processing '$Name' customizer.\"\n    $TempDir = Join-Path $Env:TEMP -ChildPath $Name\n    New-Item -Path $TempDir -ItemType Directory -Force | Out-Null\n    $WebClient = New-Object System.Net.WebClient\n    If ($Uri -match $BlobStorageSuffix -and $UserAssignedIdentityClientId -ne '') {\n        $StorageEndpoint = ($Uri -split '://')[0] + '://' + ($Uri -split '/')[2] + '/'\n        $TokenUri = \"http://169.254.169.254/metadata/identity/oauth2/token?api-version=$APIVersion&resource=$StorageEndpoint&client_id=$UserAssignedIdentityClientId\"\n        $AccessToken = ((Invoke-WebRequest -Headers @{Metadata = $true } -Uri $TokenUri -UseBasicParsing).Content | ConvertFrom-Json).access_token\n        $WebClient.Headers.Add('x-ms-version', '2017-11-09')\n        $WebClient.Headers.Add(\"Authorization\", \"Bearer $AccessToken\")\n    }\n    Write-Output \"Downloading '$Uri' to '$TempDir'.\"\n    $SourceFileName = ($Uri -Split '/')[-1]\n    $DestFile = Join-Path -Path $TempDir -ChildPath $SourceFileName\n    $WebClient.DownloadFile(\"$Uri\", \"$DestFile\")\n    Start-Sleep -Seconds 5\n    $WebClient = $null\n    If (!(Test-Path -Path $DestFile)) { Write-Error \"Failed to download $SourceFileName\"; Exit 1 }\n    Write-Output 'Finished downloading'\n    $Extension = [System.IO.Path]::GetExtension($DestFile).ToLower().Replace('.', '')\n    switch ($Extension) {\n        'exe' {\n            If ($Arguments) {\n                Write-Output \"Executing '$DestFile $Arguments'\"\n                Start-Process -FilePath $DestFile -ArgumentList $Arguments -NoNewWindow -Wait -PassThru\n            } Else {\n                Write-Output \"Executing '$DestFile'\"\n                Start-Process -FilePath $DestFile -NoNewWindow -Wait -PassThru\n            }\n        }\n        'msi' {\n            If ($Arguments) {\n                If ($Arguments -notcontains $SourceFileName) {\n                    $Arguments = \"/i $DestFile $Arguments\"\n                }\n                Write-Output \"Executing 'msiexec.exe $Arguments'\"\n                Start-Process -FilePath msiexec.exe -ArgumentList $Arguments -Wait\n            } Else {\n                Write-Output \"Executing 'msiexec.exe /i $DestFile /qn'\"\n                Start-Process -FilePath msiexec.exe -ArgumentList \"/i $DestFile /qn\" -Wait\n            }\n        }\n        'bat' {\n            If ($Arguments) {\n                Write-Output \"Executing 'cmd.exe $DestFile $Arguments'\"\n                Start-Process -FilePath cmd.exe -ArgumentList \"$DestFile $Arguments\" -Wait\n            } Else {\n                Write-Output \"Executing 'cmd.exe $DestFile'\"\n                Start-Process -FilePath cmd.exe -ArgumentList $DestFile -Wait\n            }\n        }\n        'ps1' {\n            If ($Arguments) {\n                Write-Output \"Calling PowerShell Script '$DestFile' with arguments '$Arguments'\"\n                & $DestFile $Arguments\n            } Else {\n                Write-Output \"Calling PowerShell Script '$DestFile'\"\n                & $DestFile\n            }\n        }\n        'zip' {\n            $DestinationPath = Join-Path -Path $TempDir -ChildPath $([System.IO.Path]::GetFileNameWithoutExtension($SourceFileName))\n            Write-Output \"Extracting '$DestFile' to '$DestinationPath'.\"\n            Expand-Archive -Path $DestFile -DestinationPath $DestinationPath -Force\n            Write-Output \"Finding PowerShell script in root of '$DestinationPath'.\"\n            $PSScript = (Get-ChildItem -Path $DestinationPath -filter '*.ps1').FullName\n            If ($PSScript) {\n                If ($PSScript.count -gt 1) { $PSScript = $PSScript[0] }\n                If ($Arguments) {\n                    Write-Output \"Calling PowerShell Script '$PSScript' with arguments '$Arguments'\"\n                    & $PSScript $Arguments\n                } Else {\n                    Write-Output \"Calling PowerShell Script '$PSScript'\"\n                    & $PSScript\n                }\n            }\n        }\n    }\n}\nRemove-Item -Path $TempDir -Recurse -Force -ErrorAction SilentlyContinue\nWrite-Output \"Ending '$PSCommandPath'.\"\nStop-Transcript\n",
    "masterScriptLines": "[split(variables('masterScriptContent'), '\n')]",
    "inlineScript": "[concat(createArray('$ScriptContent = @'''), variables('masterScriptLines'), createArray('''@', format('Set-Content -Path \"{0}\\{1}\" -Value $ScriptContent', variables('buildDir'), variables('masterScriptName'))))]"
  },
  "resources": [
    {
      "type": "Microsoft.VirtualMachineImages/imageTemplates",
      "apiVersion": "2023-07-01",
      "name": "[parameters('imageTemplateName')]",
      "location": "[parameters('location')]",
      "identity": {
        "type": "UserAssigned",
        "userAssignedIdentities": {
          "[format('{0}', parameters('userAssignedIdentityResourceId'))]": {}
        }
      },
      "properties": {
        "vmProfile": {
          "osDiskSizeGB": "[parameters('osDiskSizeGB')]",
          "userAssignedIdentities": [
            "[format('{0}', parameters('userAssignedIdentityResourceId'))]"
          ],
          "vmSize": "[parameters('vmSize')]",
          "vnetConfig": "[if(not(empty(parameters('subnetId'))), createObject('subnetId', parameters('subnetId')), null())]"
        },
        "source": {
          "type": "PlatformImage",
          "publisher": "[parameters('imagePublisher')]",
          "offer": "[parameters('imageOffer')]",
          "sku": "[parameters('imageSku')]",
          "version": "latest"
        },
        "distribute": [
          {
            "type": "SharedImage",
            "galleryImageId": "[parameters('galleryImageId')]",
            "replicationRegions": [
              "[parameters('location')]"
            ],
            "excludeFromLatest": false,
            "runOutputName": "runOutputImageVersion"
          }
        ],
        "customize": [
          {
            "type": "PowerShell",
            "name": "powershellcommandscript1",
            "inline": [
              "[format('new-item -path {0} -itemtype directory', variables('buildDir'))]"
            ],
            "runElevated": true,
            "runAsSystem": true
          },
          {
            "type": "PowerShell",
            "name": "CreateMasterScript",
            "inline": "[variables('inlineScript')]"
          },
          {
            "type": "PowerShell",
            "name": "executeMasterScript",
            "inline": [
              "[format('{0}\\{1} {2}', variables('buildDir'), variables('masterScriptName'), format('-BlobStorageSuffix {0} -Customizers ''{1}'' -UserAssignedIdentity {2}', environment().suffixes.storage, string(parameters('customizations')), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('userAssignedIdentityResourceId'), '/')[2], split(parameters('userAssignedIdentityResourceId'), '/')[4]), 'Microsoft.ManagedIdentity/userAssignedIdentities', last(split(parameters('userAssignedIdentityResourceId'), '/'))), '2023-01-31').clientId))]"
            ],
            "runElevated": true,
            "runAsSystem": true
          },
          {
            "type": "WindowsRestart"
          },
          {
            "type": "WindowsUpdate",
            "updateLimit": 20
          },
          {
            "type": "WindowsRestart"
          },
          {
            "type": "PowerShell",
            "name": "powershellcommand",
            "inline": [
              "[format('Remove-Item -Path {0} -Recurse -Force', variables('buildDir'))]"
            ],
            "runElevated": false,
            "runAsSystem": false
          }
        ]
      },
      "tags": {}
    }
  ]
}